// log-humanizer.ts
export type LogEntry = {
  userId: string;
  timestamp: string;
  level: "debug" | "info" | "warn" | "error";
  event?: string;
  message?: string;
  requestId?: string;
  module?: string;

  // –¥–æ–ø. –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ª–æ–≥–∞—Ö
  // (–æ–Ω–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, —á—Ç–æ–±—ã —Ç–∏–ø –Ω–µ –ª–æ–º–∞–ª —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏)
  method?: string;           // auth.login
  outcome?: string;          // *_success / *_failure
  ip?: string;
  ua?: string;
  latencyMs?: number;

  // docs.*
  count?: number;
  fileName?: string;
  size?: number;
  documentId?: string;
  sessionId?: string;
  signSessionId?: string;

  // recovery / encrypt
  mode?: string;
  recoveryId?: string;
  participantsCount?: number;
  participants?: string[];
  reason?: string;

  // vss.*
  type?: string;
  threshold?: number;
  sharesCount?: number;
  status?: string;
  recipient?: string;
  x?: string;
};

export type Humanized = {
  title: string;          // –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  subtitle?: string;      // –ø–æ—è—Å–Ω–µ–Ω–∏–µ
  meta?: string[];        // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
  severity: "neutral" | "success" | "warning" | "danger";
  icon?: string;          // –ø—Ä–æ—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞-—ç–º–æ–¥–∑–∏ (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ SVG)
};

// —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const fmtTime = (ts: string) =>
  new Date(ts).toLocaleString("ru-RU", {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    day: "2-digit",
    month: "2-digit",
  });

const bytes = (n?: number) =>
  typeof n === "number" ? `${n} –±–∞–π—Ç` : undefined;

const secs = (ms?: number) =>
  typeof ms === "number" ? `${(ms / 1000).toFixed(2)} —Å–µ–∫` : undefined;

function outcomeTone(outcome?: string): Humanized["severity"] {
  if (!outcome) return "neutral";
  if (/_success$/i.test(outcome)) return "success";
  if (/_failure$/i.test(outcome)) return "warning";
  return "neutral";
}

function defaultMeta(l: LogEntry): string[] {
  const m: string[] = [];
  if (l.documentId) m.push(`–î–æ–∫—É–º–µ–Ω—Ç: ${l.documentId}`);
  if (l.sessionId)  m.push(`–°–µ—Å—Å–∏—è: ${l.sessionId}`);
  if (l.recoveryId) m.push(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ${l.recoveryId}`);
  if (l.requestId)  m.push(`req: ${l.requestId.slice(0, 8)}`);
  return m;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–ø–ø–µ—Ä
export function humanizeLog(l: LogEntry): Humanized {
  const metaBase = defaultMeta(l);

  // ====== AUTH ======
  if (l.event === "auth.login") {
    const ok = l.outcome === "success";
    return {
      title: ok ? "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω" : "–ù–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥",
      subtitle: l.method === "password" ? "–ú–µ—Ç–æ–¥: –ø–∞—Ä–æ–ª—å" : l.method ? `–ú–µ—Ç–æ–¥: ${l.method}` : undefined,
      meta: [
        ...(l.ip ? [`IP: ${l.ip}`] : []),
        ...(typeof l.latencyMs === "number" ? [`–í—Ä–µ–º—è: ${secs(l.latencyMs)}`] : []),
        ...(l.userId ? [`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${l.userId}`] : []),
      ],
      severity: ok ? "success" : "warning",
      icon: ok ? "‚úÖ" : "‚ö†Ô∏è",
    };
  }

  // ====== –î–û–ö–£–ú–ï–ù–¢–´: —Å–ø–∏—Å–æ–∫ ======
  if (l.event === "docs.list_success") {
    return {
      title: "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω",
      subtitle: l.count !== undefined ? `–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${l.count}` : undefined,
      meta: metaBase,
      severity: "success",
      icon: "üìÑ",
    };
  }

  // ====== –î–û–ö–£–ú–ï–ù–¢–´: –∑–∞–≥—Ä—É–∑–∫–∞ ======
  if (l.event === "docs.upload_start") {
    return {
      title: "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞—á–∞—Ç–∞",
      subtitle: l.fileName ? `–§–∞–π–ª: ${l.fileName}` : undefined,
      meta: [
        ...(l.size ? [`–†–∞–∑–º–µ—Ä: ${bytes(l.size)}`] : []),
        ...metaBase,
      ],
      severity: "neutral",
      icon: "‚è´",
    };
  }

  if (l.event === "docs.upload_success") {
    return {
      title: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω",
      subtitle: l.fileName ? `–§–∞–π–ª: ${l.fileName}` : undefined,
      meta: metaBase,
      severity: "success",
      icon: "‚úÖ",
    };
  }

  // ====== –ü–û–î–ü–ò–°–¨ ======
  if (l.event === "docs.sign_start") {
    return {
      title: "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ",
      subtitle: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏",
      meta: metaBase,
      severity: "neutral",
      icon: "‚úçÔ∏è",
    };
  }

  if (l.event === "docs.sign_success") {
    return {
      title: "–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω",
      subtitle: "–ü–æ–¥–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
      meta: metaBase,
      severity: "success",
      icon: "‚úÖ",
    };
  }

  if (l.event === "docs.sign_failure") {
    return {
      title: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
      subtitle: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–∞–Ω—Å–∞",
      meta: metaBase,
      severity: "warning",
      icon: "‚ö†Ô∏è",
    };
  }

  // ====== –û–¢–ü–†–ê–í–ö–ê (–æ—Ç–¥–∞—á–∞ –¥–æ–ª–∏/–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞) ======
  if (l.event === "docs.send_start") {
    return {
      title: "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞—Ç–∞",
      subtitle: "–ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ",
      meta: metaBase,
      severity: "neutral",
      icon: "üì§",
    };
  }

  if (l.event === "docs.send_success") {
    return {
      title: "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
      subtitle: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
      meta: metaBase,
      severity: "success",
      icon: "‚úÖ",
    };
  }

  if (l.event === "docs.send_failure") {
    return {
      title: "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å",
      subtitle: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
      meta: metaBase,
      severity: "warning",
      icon: "‚ö†Ô∏è",
    };
  }

  // ====== –®–ò–§–†–û–í–ê–ù–ò–ï/–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (encryptFile / recovery) ======
  if (l.module === "api/document/encryptFile" && l.event === "docs.encrypt_start") {
    return {
      title: "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞",
      subtitle: l.mode ? `–†–µ–∂–∏–º: ${l.mode}` : "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é",
      meta: metaBase,
      severity: "neutral",
      icon: "üîê",
    };
  }

  if (l.module === "api/document/encryptFile" && l.event === "recovery.started") {
    return {
      title: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ",
      subtitle: l.participantsCount !== undefined
        ? `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${l.participantsCount}`
        : "–°–µ–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞—Ç",
      meta: metaBase,
      severity: "success",
      icon: "üß©",
    };
  }

  if (l.module === "api/document/encryptFile" && l.event === "recovery.start_failed") {
    const reasonMap: Record<string, string> = {
      no_participants: "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ",
    };
    return {
      title: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
      subtitle: reasonMap[l.reason ?? ""] ?? (l.reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${l.reason}` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"),
      meta: metaBase,
      severity: "warning",
      icon: "‚ö†Ô∏è",
    };
  }

  // ====== VSS / –°–µ—Å—Å–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (api/shares) ======
  if (l.module === "api/shares" && l.event === "vss.create_start") {
    return {
      title: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
      subtitle: `–¢–∏–ø: ${l.type ?? "‚Äî"}, –ø–æ—Ä–æ–≥: ${l.threshold ?? "‚Äî"}, –¥–æ–ª–µ–π: ${l.sharesCount ?? "‚Äî"}`,
      meta: metaBase,
      severity: "neutral",
      icon: "üßÆ",
    };
  }

  if (l.module === "api/shares" && l.event === "vss.share_saved") {
    return {
      title: "–î–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
      subtitle: l.recipient ? `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${l.recipient}` : undefined,
      meta: [
        ...(l.x ? [`x = ${l.x}`] : []),
        ...(l.status ? [`–°—Ç–∞—Ç—É—Å: ${l.status}`] : []),
        ...metaBase,
      ],
      severity: "success",
      icon: "üíæ",
    };
  }

  if (l.module === "api/shares" && l.event === "vss.create_success") {
    return {
      title: "–°–µ—Å—Å–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞",
      subtitle: `–¢–∏–ø: ${l.type ?? "‚Äî"}, –ø–æ—Ä–æ–≥: ${l.threshold ?? "‚Äî"}, –¥–æ–ª–µ–π: ${l.sharesCount ?? "‚Äî"}`,
      meta: metaBase,
      severity: "success",
      icon: "‚úÖ",
    };
  }

  if (l.module === "api/shares" && l.event === "vss.create_failed") {
    const reasonMap: Record<string, string> = {
      missing_asymmetric_params: "–ù–µ –∑–∞–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏ (p, q, g/–∫—Ä–∏–≤–∞—è –∏ —Ç.–ø.)",
    };
    return {
      title: "–°–µ—Å—Å–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞",
      subtitle: reasonMap[l.reason ?? ""] ?? (l.reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${l.reason}` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"),
      meta: metaBase,
      severity: "warning",
      icon: "‚ö†Ô∏è",
    };
  }

  // ====== fallback ======
  return {
    title: l.event ? `–°–æ–±—ã—Ç–∏–µ: ${l.event}` : "–°–æ–±—ã—Ç–∏–µ",
    subtitle: l.message,
    meta: metaBase,
    severity: l.level === "error" ? "danger" : l.level === "warn" ? "warning" : "neutral",
    icon: l.level === "error" ? "‚õî" : l.level === "warn" ? "‚ö†Ô∏è" : "‚ÑπÔ∏è",
  };
}
