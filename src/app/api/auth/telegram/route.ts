import { NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { verifyTelegramLogin } from "@/lib/telegram/verify";
import { sendTelegramMessage } from "@/lib/telegram/send";

// –¢–∏–ø –∏–∑ Telegram Login Widget
type TelegramAuthPayload = {
  id: number;
  first_name?: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  auth_date: string | number;
  hash: string;
  // –ø—Ä–∏ request-access="write" –ø—Ä–∏—Ö–æ–¥–∏—Ç:
  allows_write_to_pm?: boolean;
  // –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç:
  language_code?: string;
};

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = (await req.json()) as TelegramAuthPayload;
    const token = process.env.TG_BOT_TOKEN!;
    const check = verifyTelegramLogin(body, token, { maxAgeSec: 300 }); // 5 –º–∏–Ω—É—Ç

    if (!check.ok) {
      return NextResponse.json({ error: check.reason || "Bad signature" }, { status: 401 });
    }

    // –ù–µ –¥–∞—ë–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ telegramId –∫ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const tgId = String(body.id);
    const other = await prisma.user.findFirst({
      where: { telegramId: tgId, NOT: { id: session.user.id } },
      select: { id: true },
    });
    if (other) {
      return NextResponse.json(
        { error: "–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É" },
        { status: 409 }
      );
    }

    const updated = await prisma.user.update({
      where: { id: session.user.id },
      data: {
        telegramId: tgId,
        telegramUsername: body.username ?? null,
        telegramPhotoUrl: body.photo_url ?? null,
        telegramLanguageCode: body["language_code" as keyof TelegramAuthPayload] as any ?? null,
        telegramAllowsWrite: Boolean(body.allows_write_to_pm),
        telegramLinkedAt: new Date(),
        telegramLastAuthAt: new Date(Number(body.auth_date) * 1000),
      },
      select: { id: true, telegramId: true, telegramUsername: true, telegramAllowsWrite: true },
    });

  if (updated.telegramId) {
    // 2) –ï—Å–ª–∏ —Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å –ø–∏—Å–∞—Ç—å –±–µ–∑ /start, —É–±–µ–¥–∏—Å—å —á—Ç–æ —É —Ç–µ–±—è –±—ã–ª –≤–∏–¥–∂–µ—Ç —Å request_access=write,
    // –∏ –≤ –ë–î —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å telegramAllowsWrite = true
    if (updated.telegramAllowsWrite !== false) {
      try {
        const r = await sendTelegramMessage(updated.telegramId, "–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üöÄ");
        console.log("TG sent:", r?.result?.message_id);
      } catch (e) {
        console.error("TG send failed:", e);
        // –º–æ–∂–µ—à—å –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç API, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤ –∫–ª–∏–µ–Ω—Ç–µ
      }
    } else {
      console.warn("User didn't grant write access (allows_write_to_pm=0). Ask them to /start the bot.");
    }
  }

    return NextResponse.json({ ok: true, user: updated });
  } catch (e: any) {
    console.error(e);
    return NextResponse.json({ error: "Internal error" }, { status: 500 });
  }
}

