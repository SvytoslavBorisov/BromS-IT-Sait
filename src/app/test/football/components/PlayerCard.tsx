"use client";
import React, { useState } from "react";
import { round, initials } from "../lib/utils";

type RowProps = { label: string; value: React.ReactNode; hint?: string };
const StatRow = ({ label, value, hint }: RowProps) => (
  <div className="flex items-start justify-between gap-4 py-1.5">
    <div className="text-sm text-neutral-600 dark:text-neutral-300">
      <span className="font-medium">{label}</span>
      {hint ? <span className="ml-2 text-xs text-neutral-500">({hint})</span> : null}
    </div>
    <div className="text-sm font-semibold text-neutral-900 dark:text-white">{value}</div>
  </div>
);

type SectionProps = {
  title: string;
  icon?: string;
  children: React.ReactNode;
  defaultOpen?: boolean;
};
const Section = ({ title, icon, children, defaultOpen }: SectionProps) => {
  const [open, setOpen] = useState(!!defaultOpen);
  return (
    <div className="rounded-xl border border-neutral-200 dark:border-neutral-800 bg-white/70 dark:bg-neutral-900/70">
      <button
        type="button"
        onClick={() => setOpen(!open)}
        className="w-full px-4 py-3 flex items-center justify-between group"
      >
        <div className="flex items-center gap-2 text-left">
          <span className="text-lg">{icon}</span>
          <span className="font-semibold text-neutral-900 dark:text-white">{title}</span>
        </div>
        <span
          className={
            "inline-block transition-transform text-neutral-500 group-hover:text-neutral-700 dark:group-hover:text-neutral-300 " +
            (open ? "rotate-90" : "")
          }
          aria-hidden
        >
          ‚ñ∂
        </span>
      </button>
      <div
        className={
          "grid transition-[grid-template-rows] duration-300 ease-out " +
          (open ? "grid-rows-[1fr]" : "grid-rows-[0fr]")
        }
      >
        <div className="overflow-hidden px-4 pb-3">{children}</div>
      </div>
    </div>
  );
};

// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SVG-—Å–∏–ª—É—ç—Ç (—á—Ç–æ–±—ã –Ω–µ —Ç–∞—â–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
const Silhouette = () => (
  <svg viewBox="0 0 64 64" className="w-14 h-14 text-neutral-300 dark:text-neutral-600">
    <circle cx="32" cy="22" r="12" fill="currentColor" />
    <path
      d="M8 58c0-11 10-20 24-20s24 9 24 20"
      fill="currentColor"
    />
  </svg>
);

export function PlayerCard({ p }: { p: any }) {
  const accuracy = p.passesTotal ? Math.round((p.passesComplete / p.passesTotal) * 100) : 0;
  const duelWin = p.duelsTotal ? Math.round((p.duelsWon / p.duelsTotal) * 100) : 0;
  const dribSucc = p.dribblesAttempted ? Math.round((p.dribblesComplete / p.dribblesAttempted) * 100) : 0;

  return (
    <div className="rounded-2xl border border-neutral-200 dark:border-neutral-800 bg-white/80 dark:bg-neutral-900/80 overflow-hidden shadow-sm">
      {/* Header */}
      <div className="p-4 border-b border-neutral-200 dark:border-neutral-800 flex items-center gap-4">
        <div className="relative">
          <div className="overflow-hidden rounded-xl bg-gradient-to-br from-neutral-100 to-neutral-200 dark:from-neutral-800 dark:to-neutral-700 w-16 h-16 grid place-items-center">
            <Silhouette />
          </div>
          <div className="absolute -bottom-1 -right-1 bg-neutral-900 text-white text-xs px-1.5 py-0.5 rounded-md dark:bg-white dark:text-neutral-900">
            {initials(p.playerName)}
          </div>
        </div>

        <div className="flex-1 min-w-0">
          <div className="font-semibold truncate text-lg text-neutral-900 dark:text-white">
            {p.playerName}
          </div>
          <div className="text-sm text-neutral-500 truncate">{p.position || "‚Äî"}</div>
          <div className="mt-1 text-xs text-neutral-500">
            ‚è± –ú–∏–Ω—É—Ç—ã –Ω–∞ –ø–æ–ª–µ: <span className="font-semibold text-neutral-800 dark:text-neutral-300">{p.minutes ?? 0}</span>
          </div>
        </div>

        <div className="hidden sm:flex items-center gap-2">
          <span className="text-2xl">‚öΩÔ∏è</span>
          <span className="text-2xl">ü•Ö</span>
          <span className="text-2xl">üìä</span>
        </div>
      </div>

      {/* Sections */}
      <div className="p-4 space-y-3">
        <Section title="–ì–æ–ª—ã –∏ —É–¥–∞—Ä—ã" icon="‚öΩÔ∏è" defaultOpen>
          <StatRow label="–ì–æ–ª—ã" value={p.goals} />
          <StatRow label="–£–¥–∞—Ä—ã (–≤—Å–µ–≥–æ / –≤ —Å—Ç–≤–æ—Ä)" value={`${p.shotsTotal} / ${p.shotsOnTarget}`} />
          <StatRow label="–û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã (xG)" value={round(p.xG)} hint="–∫–∞—á–µ—Å—Ç–≤–æ –º–æ–º–µ–Ω—Ç–æ–≤" />
          <StatRow label="–ü–µ–Ω–∞–ª—å—Ç–∏ (–∑–∞–±–∏–ª/–ø—Ä–æ–±–∏–ª)" value={`${p.pensScored}/${p.pensTaken}`} />
        </Section>

        <Section title="–ü–∞—Å –∏ –∫—Ä–µ–∞—Ç–∏–≤" icon="ü™Ñ">
          <StatRow label="–ü–µ—Ä–µ–¥–∞—á–∏ (—Ç–æ—á–Ω./–≤—Å–µ–≥–æ)" value={`${p.passesComplete}/${p.passesTotal}`} />
          <StatRow label="–¢–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á" value={`${accuracy}%`} />
          <StatRow label="–ü–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥ —É–¥–∞—Ä" value={p.keyPasses} hint="–∫–µ–π-–ø–∞—Å—Å—ã" />
          <StatRow label="–ì–æ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏" value={p.assists} />
          <StatRow label="–ù–∞–≤–µ—Å—ã (—Ç–æ—á–Ω—ã–µ)" value={`${p.crosses} (${p.crossesComplete})`} />
          <StatRow label="–î–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏" value={p.longPasses} />
          <StatRow label="–ü–µ—Ä–µ–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–µ–∑" value={p.throughBalls} />
          <StatRow label="–ü–µ—Ä–µ–≤–æ–¥—ã —Ñ–ª–∞–Ω–≥–∞" value={p.switches} />
        </Section>

        <Section title="–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ" icon="üß≠">
          <StatRow label="–ü–∞—Å—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ—Ç—å" value={p.passesIntoFinalThird} />
          <StatRow label="–ü–µ—Ä–µ–Ω–æ—Å—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ—Ç—å" value={p.carriesIntoFinalThird} />
          <StatRow label="–í—Ö–æ–¥—ã –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é (–ø–∞—Å)" value={p.entriesPenaltyArea} />
          <StatRow label="–í—Ö–æ–¥—ã –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é (–≤–µ–¥–µ–Ω–∏–µ)" value={p.carriesIntoBox} />
          <StatRow label="–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–∏" value={p.progressivePasses} />
          <StatRow label="–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–µ–¥–µ–Ω–∏—è" value={p.progressiveCarries} />
        </Section>

        <Section title="–î—Ä–∏–±–ª–∏–Ω–≥ –∏ –≤–µ–¥–µ–Ω–∏–µ" icon="üèÉ‚Äç‚ôÇÔ∏è">
          <StatRow label="–û–±–≤–æ–¥–∫–∏ (—É—Å–ø–µ—Ö)" value={`${p.dribblesAttempted} (${p.dribblesComplete})`} hint="–ø–æ–ø—ã—Ç–æ–∫ (—É—Å–ø.)" />
          <StatRow label="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–≤–æ–¥–æ–∫" value={`${dribSucc}%`} />
          <StatRow label="–í–µ–¥–µ–Ω–∏—è –º—è—á–∞" value={p.carries} />
          <StatRow label="–î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤–µ–¥–µ–Ω–∏–π" value={round(p.carryDistance)} />
          <StatRow label="–ü–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á" value={p.receptions} />
        </Section>

        <Section title="–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞ –∏ –æ–±–æ—Ä–æ–Ω–∞" icon="üß±">
          <StatRow label="–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞ (–≤—ã–∏–≥—Ä./–≤—Å–µ–≥–æ)" value={`${p.duelsWon}/${p.duelsTotal}`} />
          <StatRow label="–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π" value={`${duelWin}%`} />
          <StatRow label="–û—Ç–±–æ—Ä—ã (—É—Å–ø–µ—à–Ω—ã–µ)" value={`${p.tackles} (${p.tacklesWon})`} />
          <StatRow label="–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã" value={p.interceptions} />
          <StatRow label="–ë–ª–æ–∫–∏" value={p.blocks} />
          <StatRow label="–ü—Ä–µ—Å—Å–∏–Ω–≥-–¥–µ–π—Å—Ç–≤–∏—è" value={p.pressures} />
        </Section>

        <Section title="–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –ø—Ä–æ—á–µ–µ" icon="üßë‚Äç‚öñÔ∏è">
          <StatRow label="–§–æ–ª—ã (—Å–æ–≤–µ—Ä—à./–ø–æ–ª—É—á.)" value={`${p.foulsCommitted}/${p.foulsWon}`} />
          <StatRow label="–ö–∞—Ä—Ç–æ—á–∫–∏" value={`üü® ${p.yellow}  üî¥ ${p.red}`} />
          <StatRow label="–ü–æ–¥–±–æ—Ä—ã –º—è—á–∞" value={p.recoveries} />
          <StatRow label="–í—ã–Ω–æ—Å—ã" value={p.clearances} />
          <StatRow label="–û—Ñ—Å–∞–π–¥—ã" value={p.offsides} />
          <StatRow label="–î–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º" value={p.underPressureEvents} />
          <StatRow label="–ü–æ—Ç–µ—Ä–∏ –º—è—á–∞" value={p.losses} />
        </Section>
      </div>
    </div>
  );
}
