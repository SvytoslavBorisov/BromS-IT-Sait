"use client";

import { useEffect }  from "react";
import { useSession } from "next-auth/react";
import { jwkFingerprint } from "@/lib/crypto/fingerprint";
import {
  storePrivateJwk,
  loadPrivateJwk,
  // clearPrivateJwk,  // —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ Settings
} from "@/lib/crypto/secure-storage";

export default function KeyInitializer() {
  const { status, data: session } = useSession();

  useEffect(() => {
    if (status !== "authenticated" || !session) return;

    (async () => {
      const userId = session.user.id;

      // 1) –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const localPriv = await loadPrivateJwk(userId);
      if (localPriv) {
        console.log("üîë –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω");
        return;
      }

      // 2) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const resp = await fetch("/api/me/pubkey");
      if (resp.ok) {
        // –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –µ—Å—Ç—å, –∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –Ω–µ—Ç ‚Äî –∑–Ω–∞—á–∏—Ç –º—ã –Ω–∞ –Ω–æ–≤–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
        // **–ù–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å**, –∏–Ω–∞—á–µ –ø–æ—Ç–µ—Ä—è–µ–º –≤—Å–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
        console.warn("‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –Ω–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ.");
        // –ó–¥–µ—Å—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        // –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Shamir-–¥–æ–ª–∏.
        return;
      }

      // 3) –ù–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ, –Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –Ω–µ—Ç ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
      console.log("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π...");
      const keyPair = await crypto.subtle.generateKey(
        { name: "RSA-OAEP", modulusLength: 2048, publicExponent: new Uint8Array([1,0,1]), hash: "SHA-256" },
        true,
        ["encrypt", "decrypt"]
      );

      // –≠–∫—Å–ø–æ—Ä—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ public JWK –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const pubJwk  = await crypto.subtle.exportKey("jwk", keyPair.publicKey);
      await fetch("/api/me/pubkey", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ jwk: pubJwk }),
      });
      console.log("PUB fingerprint:", await jwkFingerprint(pubJwk));

      // –≠–∫—Å–ø–æ—Ä—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ private JWK
      const privJwk = await crypto.subtle.exportKey("jwk", keyPair.privateKey);
      await storePrivateJwk(userId, privJwk);
      console.log("PRIV fingerprint:", await jwkFingerprint(privJwk));
    })();
  }, [status, session]);

  return null;
}
