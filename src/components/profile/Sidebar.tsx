"use client";

import { ReactNode } from "react";
import { Tab, SubtabId, NAV, SidebarProps } from "@/components/profile/nav"
import { cn } from "@/lib/utils"; 


const tabs = [
  { id: "profile", label: "–ü—Ä–æ—Ñ–∏–ª—å", icon: "üë§" },
  { id: "keys", label: "–ö–ª—é—á–∏", icon: "üîë" },
  { id: "documents", label: "–î–æ–∫—É–º–µ–Ω—Ç—ã", icon: "üìÑ" },
  { id: "settings", label: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", icon: "‚öôÔ∏è" },
];


export default function Sidebar({
  activeTab,
  setActiveTab,
  activeSubtab,
  setActiveSubtab,
}: {
  activeTab: Tab;
  setActiveTab: (t: Tab) => void;
  activeSubtab: SubtabId | null;
  setActiveSubtab: (s: SubtabId | null | ((p: SubtabId | null) => SubtabId | null)) => void;
}) {
  return (
    <aside
      className={[
        "group relative bg-white shadow-md h-screen",
        "w-16 hover:w-64",                          // ‚Üê —É–∑–∫–∞—è –ø–æ–ª–æ—Å–∞ ‚Üí —Ä–∞–∑–≤–æ—Ä–æ—Ç
        "transition-[width] duration-300 ease-in-out",
        "overflow-visible",                         // —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–∑–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
      ].join(" ")}
    >
      {/* –•–µ–¥–µ—Ä: —Ç–µ–∫—Å—Ç —Å–∫—Ä—ã—Ç –≤ —É–∑–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
      <div className="border-b px-3 py-4 sm:px-4 sm:py-5">
        <h2
          className={[
            "text-xl font-semibold whitespace-nowrap",
            "opacity-0 group-hover:opacity-100",
            "transition-opacity duration-200",
          ].join(" ")}
        >
          –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        </h2>
      </div>

      <nav className="p-2 space-y-1">
        {(Object.keys(NAV) as Array<Tab>).map((tab) => {
          const isActive = activeTab === tab;
          const hasChildren = !!NAV[tab].children?.length;

          return (
            <div key={tab}>
              {/* –í–∫–ª–∞–¥–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è */}
              <button
                className={[
                  "flex w-full items-center justify-between text-left py-2 px-2 rounded-md transition-colors",
                  isActive ? "bg-gray-200" : "hover:bg-gray-100",
                ].join(" ")}
                onClick={() => {
                  if (hasChildren) {
                    const first = NAV[tab].children![0].id;
                    setActiveSubtab((prev) =>
                      prev?.startsWith(`${tab}.`) ? prev : first
                    );
                  } else {
                    setActiveSubtab(null);
                  }
                  setActiveTab(tab);
                }}
                aria-expanded={isActive && hasChildren ? true : false}
                aria-controls={`subnav-${tab}`}
                title={NAV[tab].label} // –ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤ —É–∑–∫–æ–º —Ä–µ–∂–∏–º–µ
              >
                {/* –ò–∫–æ–Ω–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å (–∏–ª–∏ –±—É–∫–≤–∞) */}
                <span className="inline-flex h-6 w-6 items-center justify-center rounded-md bg-gray-100">
                  {NAV[tab].icon ?? NAV[tab].label[0]}
                </span>

                {/* –õ–µ–π–±–ª: —Å–∫—Ä—ã—Ç –≤ —É–∑–∫–æ–º, –≤–∏–¥–µ–Ω –ø—Ä–∏ hover */}
                <span
                  className={[
                    "ml-2 flex-1 truncate text-sm",
                    "opacity-0 group-hover:opacity-100",
                    "transition-opacity duration-200",
                  ].join(" ")}
                >
                  {NAV[tab].label}
                </span>

                {/* –°—Ç—Ä–µ–ª–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ä–∞—Å–∫—Ä—ã—Ç–æ */}
                {hasChildren && (
                  <span
                    className={[
                      "transition-transform",
                      isActive ? "rotate-90" : "rotate-0",
                      "opacity-0 group-hover:opacity-100",
                    ].join(" ")}
                    aria-hidden
                  >
                    ‚ñ∏
                  </span>
                )}
              </button>

              {/* –ü–æ–¥–≤–∫–ª–∞–¥–∫–∏ ‚Äî –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —É –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏ –ø—Ä–∏ hover –ø–∞–Ω–µ–ª–∏ */}
              {isActive && hasChildren && (
                <div
                  id={`subnav-${tab}`}
                  className={[
                    "mt-1 ml-3 pl-3 border-l space-y-1",
                    "hidden group-hover:block", // ‚Üê –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–æ–π –ø–∞–Ω–µ–ª–∏
                  ].join(" ")}
                >
                  {NAV[tab].children!.map((child) => {
                    const subActive = activeSubtab === child.id;
                    return (
                      <button
                        key={child.id}
                        className={[
                          "block w-full text-left text-sm py-1.5 px-2 rounded-md transition-colors",
                          subActive
                            ? "bg-gray-100 font-medium"
                            : "hover:bg-gray-50",
                        ].join(" ")}
                        onClick={() => setActiveSubtab(child.id)}
                        title={child.label}
                      >
                        {child.label}
                      </button>
                    );
                  })}
                </div>
              )}
            </div>
          );
        })}
      </nav>
    </aside>
  );
}