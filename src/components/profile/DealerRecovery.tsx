"use client";

import React, { useEffect, useState, useRef } from "react";
import { decodeCiphertext } from "@/lib/crypto/keys";
import { loadPrivateJwk }   from "@/lib/crypto/secure-storage";
import { reconstructSecret } from "@/lib/crypto/shamir";

interface Share {
  x: string;
  userId: string;
}

export default function DealerRecovery({
  sessionId,
  shares = [],
  threshold,
  prime,
}: {
  sessionId: string;
  shares?: Share[];
  threshold: number;
  prime: BigInt;
}) {
  const [recoveryId,     setRecoveryId]     = useState<string | null>(null);
  const [error,          setError]          = useState<string | null>(null);
  const [returnedShares, setReturnedShares] = useState<{ x: string; ciphertext: unknown }[] | null>(null);
  const [statusMessage,  setStatusMessage]  = useState<string>("");
  const [secret,         setSecret]         = useState<string | null>(null);

  const privKeyRef = useRef<CryptoKey | null>(null);

  // –ò–º–ø–æ—Ä—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    (async () => {
      try {
        const privJwk = await loadPrivateJwk();
        if (!privJwk) throw new Error("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
        privKeyRef.current = await crypto.subtle.importKey(
          "jwk",
          privJwk,
          { name: "RSA-OAEP", hash: "SHA-256" },
          false,
          ["decrypt"]
        );
      } catch (e: any) {
        setError(e.message);
      }
    })();
  }, []);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è ArrayBuffer ‚Üí hex
  function bufferToHex(buf: ArrayBuffer): string {
    const bytes = new Uint8Array(buf);
    return Array.from(bytes)
      .map(b => b.toString(16).padStart(2, "0"))
      .join("");
  }

  // 1) –ó–∞–ø—É—Å–∫–∞–µ–º recovery
  const start = async () => {
    setError(null);
    if (!sessionId || shares.length === 0) {
      setError("–ù—É–∂–Ω—ã sessionId –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–æ–ª—è");
      return;
    }
    try {
      const res = await fetch("/api/recovery", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          shareSessionId: sessionId,
          shareholderIds: shares.map(s => s.userId),
        }),
      });

      console.log(res);
      const json = await res.json();
      if (!res.ok) throw new Error(json.error || res.statusText);
      setRecoveryId(json.recoveryId);
      setStatusMessage("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª—å—â–∏–∫–æ–≤‚Ä¶");
    } catch (e: any) {
      setError(e.message);
    }
  };

  // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏, –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, —Å–æ–±–∏—Ä–∞–µ–º —Å–µ–∫—Ä–µ—Ç
const checkStatus = async () => {
  if (!recoveryId) return;
  setError(null);

  try {
    const res = await fetch(`/api/recovery/${recoveryId}/secret`);
    if (res.status === 409) {
      setStatusMessage(`–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–µ–π, –∂–¥—ë–º –¥–∞–ª—å—à–µ‚Ä¶`);
      return;
    }
    if (!res.ok) {
      const err = await res.json();
      throw new Error(err.error || res.statusText);
    }

    const { shares: recvd } = await res.json() as {
      shares: { x: string; ciphertext: unknown }[];
    };
    console.log("‚úÖ recvd shares:", recvd);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
    console.log("‚ÑπÔ∏è threshold:", threshold, "–ø–æ–ª—É—á–µ–Ω–æ:", recvd.length);
    if (recvd.length < threshold) {
      throw new Error(`–¢—Ä–µ–±—É–µ—Ç—Å—è ${threshold} –¥–æ–ª–∏, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${recvd.length}`);
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏
    const points: [bigint, bigint][] = [];
    for (const rec of recvd) {
      console.log(` ‚Ä¢ –¥–µ—à–∏—Ñ—Ä—É–µ–º —Ç–æ—á–∫—É x=${rec.x}`);
      const cipherBytes = decodeCiphertext(rec.ciphertext);
      const plainBuf    = await crypto.subtle.decrypt(
        { name: "RSA-OAEP",  },
        privKeyRef.current!,
        cipherBytes
      );
      // plainBuf —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç ASCII-hex-—Å—Ç—Ä–æ–∫—É –±–∞–π—Ç Y
      const hexText = new TextDecoder().decode(plainBuf).replace(/^0x/i, "");
      console.log("   hexText:", hexText);

      const x = BigInt(rec.x);
      const y = BigInt("0x" + hexText);
      console.log("   point:", [x, y]);
      points.push([x, y]);
    }

    // –ü–µ—Ä–µ–¥ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º prime
    console.log("‚ÑπÔ∏è prime:", prime);
    // –ò —Å–∞–º–∏ —Ç–æ—á–∫–∏
    console.log("‚ÑπÔ∏è points for reconstruct:", points);

    const secretBytes = reconstructSecret(points, prime);
    console.log("üîë secretBytes:", new Uint8Array(secretBytes));

    // –î–µ–∫–æ–¥–∏–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const decoded = new TextDecoder().decode(secretBytes);
    console.log("üîì decoded secret:", decoded);

    setSecret(decoded);
    setStatusMessage("–°–µ–∫—Ä–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
  } catch (e: any) {
    console.error("checkStatus error:", e);
    setError(e.message);
  }
  // –ó–≤–æ–Ω–∏–º –Ω–∞ DELETE, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    try {
    await fetch(`/api/recovery/${recoveryId}`, { method: "DELETE" });
    console.log("RecoverySession deleted");
    } catch (e) {
    console.warn("Failed to delete recovery session:", e);
    }
};

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞</h2>
      <p>
        –°–µ—Å—Å–∏—è: <code>{sessionId}</code><br />
        –í—Å–µ–≥–æ –¥–æ–ª–µ–π: {shares.length}, –ø–æ—Ä–æ–≥: {threshold}
      </p>

      {error && <p className="text-red-500">{error}</p>}

      {!recoveryId ? (
        <button onClick={start} className="btn">
          –ù–∞—á–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        </button>
      ) : (
        <div className="space-y-2">
          <p>Recovery ID: <code>{recoveryId}</code></p>
          <p>{statusMessage}</p>

          {!returnedShares && (
            <button onClick={checkStatus} className="btn-outline">
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </button>
          )}

          {returnedShares && !secret && (
            <p>–î–æ–ª—è(–µ–π) –ø–æ–ª—É—á–µ–Ω–æ: {returnedShares.length} –∏–∑ {threshold}</p>
          )}

          {secret && (
            <div className="p-4 bg-gray-50 rounded">
              <p className="font-medium">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç:</p>
              <code className="break-all">{secret}</code>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
