"use client";

import React, { useMemo, useRef, useState } from "react";
import { useSession } from "next-auth/react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Tooltip } from "@/components/ui/tooltip";
import { useSignatures } from "./hooks";
import { SignList } from "./SignList";
import type { VerifyResult, SignatureRow } from "./types";

export default function SignsPage() {
  const { status } = useSession();

  const { rows, loading, refresh, setRows } = useSignatures(status === "authenticated");
  const [q, setQ] = useState("");
  const [verifyingId, setVerifyingId] = useState<string | null>(null);
  const [loadBusy, setLoadBusy] = useState(false);

  // –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const fileInputRef = useRef<HTMLInputElement | null>(null);

  const filtered = useMemo(() => {
    if (!q.trim()) return rows;
    const k = q.trim().toLowerCase();
    return rows.filter((r) =>
      [
        r.id,
        r.type,
        r.document?.fileName,
        r.document?.fileType,
        r.user?.email,
        r.user?.name,
        r.user?.surname,
        r.shamirSessionId ?? "",
      ]
        .filter(Boolean)
        .some((s) => String(s).toLowerCase().includes(k))
    );
  }, [rows, q]);

  async function onVerify(id: string) {
    try {
      setVerifyingId(id);
      const res = await fetch(`/api/signatures/${id}/verify`, { method: "POST" });
      const data = (await res.json()) as VerifyResult;
      const tone =
        data.status === "OK" ? "‚úÖ" :
        data.status === "WARN" ? "üü°" :
        data.status === "NOT_IMPLEMENTED" ? "üß™" : "‚õî";
      alert(`${tone} ${data.message}`);
    } catch (e: any) {
      alert(`‚õî –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${e?.message ?? e}`);
    } finally {
      setVerifyingId(null);
    }
  }

  // –û—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
  function onLoadClick() {
    fileInputRef.current?.click();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  async function onFilePicked(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;

    setLoadBusy(true);
    try {
      const fd = new FormData();
      fd.append("file", file);
      // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å:
      // fd.append("type", "CMS-GOST");

      const res = await fetch("/api/signatures/load", {
        method: "POST",
        body: fd,
      });
      if (!res.ok) throw new Error(await res.text());

      const created = (await res.json()) as SignatureRow;
      // –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –¥–æ–±–∞–≤–∏–º —Å–≤–µ—Ä—Ö—É
      setRows((prev) => [created, ...prev]);

      // –æ—á–∏—Å—Ç–∏–º value, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑
      if (fileInputRef.current) fileInputRef.current.value = "";

      alert("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞");
    } catch (e: any) {
      alert(`‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${e?.message ?? e}`);
    } finally {
      setLoadBusy(false);
    }
  }

  return (
    <div className="space-y-6">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="flex flex-col md:flex-row md:items-center gap-3">
        <h1 className="text-2xl font-semibold tracking-tight">–ü–æ–¥–ø–∏—Å–∏</h1>

        <div className="ml-auto flex items-center gap-2 w-full md:w-auto">
          <div className="w-full md:w-80">
            <Input
              placeholder="–ü–æ–∏—Å–∫: —Ñ–∞–π–ª, e‚Äëmail, —Ç–∏–ø, ID‚Ä¶"
              value={q}
              onChange={(e) => setQ(e.target.value)}
            />
          </div>

          <Tooltip content="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å">
            <Button onClick={onLoadClick} disabled={loadBusy}>
              {loadBusy ? "–ó–∞–≥—Ä—É–∂–∞—é‚Ä¶" : "–ó–∞–≥—Ä—É–∑–∏—Ç—å"}
            </Button>
          </Tooltip>

          {/* —Å–∫—Ä—ã—Ç—ã–π file input */}
          <input
            ref={fileInputRef}
            type="file"
            className="hidden"
            // –ø–æ–¥–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –ø–æ —Å–≤–æ–µ–º—É —Å—Ç–µ–∫—É:
            accept=".sig,.p7s,.pem,.cer,.crt,.der,.cms,.pkcs7,.bin,.dat,.pdf"
            onChange={onFilePicked}
          />
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ */}
      <SignList
        rows={filtered}
        loading={loading}
        verifyingId={verifyingId}
        onVerifiedStart={onVerify}
      />
    </div>
  );
}
