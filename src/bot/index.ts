import { Telegraf, Markup, Scenes, session } from "telegraf";
import { logger } from "@/lib/logger";
import rateLimit from "telegraf-ratelimit";
// ‚úÖ —Ç–∏–ø—ã –¥–ª—è inline-query –±–µ—Ä—ë–º –æ—Ç—Å—é–¥–∞ (–∞ –Ω–µ telegraf/typings/...)
import type { InlineQueryResultArticle } from "telegraf/types";

import { profileScene } from "./scenes/profile.scene";
import { feedbackScene } from "./scenes/feedback.scene";
import { safeJsonParse, typing } from "./middlewares/utils";
import type { MyContext, MySession } from "./types";

declare global {
  // eslint-disable-next-line no-var
  var __BROM_BOT__: Telegraf<MyContext> | undefined;
}

const APP_URL = process.env.NEXT_PUBLIC_APP_URL || "https://example.com";
const BOT_NAME = process.env.BOT_PUBLIC_NAME || "Broms IT";
const BOT_ENV  = process.env.NODE_ENV || "development";

function createBot(): Telegraf<MyContext> {
  const bot = new Telegraf<MyContext>(process.env.BOT_TOKEN!);

  // telegraf-ratelimit —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –±–∞–∑–æ–≤—ã–π Context ‚Äî –º—è–≥–∫–∏–π –∫–∞—Å—Ç
  bot.use(rateLimit({
    window: 2000,
    limit: 5,
    onLimitExceeded: (ctx) => ctx.reply("‚è≥ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞‚Ä¶"),
  }) as unknown as Parameters<Telegraf<MyContext>["use"]>[0]);

  // ‚¨áÔ∏è –ü–ê–†–ê–ú–ï–¢–†–ò–ó–£–ï–ú session –û–ë–û–ò–ú–ò –¢–ò–ü–ê–ú–ò –∏ –æ—Ç–¥–∞—ë–º –ø—É—Å—Ç—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
  bot.use(session<MySession, MyContext>({
    defaultSession: () => ({} as MySession),
  }));

  const stage = new Scenes.Stage<MyContext>([profileScene, feedbackScene]);
  bot.use(stage.middleware());

  bot.catch((err, ctx) => {
    logger.errorEx?.(err, { scope: "tg-bot-catch", update: ctx?.update?.update_id });
  });

  bot.start(async (ctx) => {
    const payload = (ctx.startPayload || "").trim();
    if (payload) ctx.session.startPayload = payload;

    const intro =
      `<b>–ü—Ä–∏–≤–µ—Ç!</b> –≠—Ç–æ <b>${BOT_NAME}</b> ‚Äî –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –ª—é–±–æ–≤—å—é –∫ –¥–µ—Ç–∞–ª—è–º.\n` +
      `–û—Ç–∫—Ä–æ–π Mini App, –æ—Ü–µ–Ω–∏ –¥–∏–∑–∞–π–Ω –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.`;

    await ctx.reply(intro, {
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        [Markup.button.webApp("üéÆ –û—Ç–∫—Ä—ã—Ç—å Mini-App", `${APP_URL}/game`)],
        [
          Markup.button.callback("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "menu:profile"),
          Markup.button.callback("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "menu:feedback"),
        ],
        [
          Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "menu:settings"),
          Markup.button.url("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", `${APP_URL}`),
        ],
      ]),
    });

    await ctx.reply(
      "‚ú® –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π inline ‚Äî –Ω–∞–±–µ—Ä–∏ <code>@–≤–∞—à_–±–æ—Ç –∑–∞–ø—Ä–æ—Å</code>.",
      { parse_mode: "HTML" }
    );
  });

  bot.action("menu:profile", (ctx) => ctx.scene.enter("profile"));
  bot.action("menu:feedback", (ctx) => ctx.scene.enter("feedback"));
  bot.action("menu:settings", async (ctx) => {
    await ctx.editMessageText(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–°–∫–æ—Ä–æ ‚Äî —Ç–µ–º—ã –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è.",
      { parse_mode: "HTML", ...Markup.inlineKeyboard([[Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "menu:home")]])}
    );
  });
  bot.action("menu:home", async (ctx) => {
    await ctx.editMessageText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
      parse_mode: "HTML",
      ...Markup.inlineKeyboard([
        [Markup.button.webApp("üéÆ –û—Ç–∫—Ä—ã—Ç—å Mini-App", `${APP_URL}/game`)],
        [
          Markup.button.callback("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "menu:profile"),
          Markup.button.callback("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "menu:feedback"),
        ],
        [Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "menu:settings")],
      ]),
    });
  });

  bot.on("message", async (ctx) => {
    const wad = (ctx.message as any)?.web_app_data?.data;
    if (wad) {
      const data = safeJsonParse(wad);
      await ctx.reply(`‚úÖ –ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini-App:\n<code>${JSON.stringify(data)}</code>`, { parse_mode: "HTML" });
      return;
    }

    if ("text" in (ctx.message ?? {})) {
      const text = (ctx.message as any).text as string;
      if (/^help$/i.test(text)) {
        await ctx.replyWithHTML(
          "üÜò <b>–ü–æ–º–æ—â—å</b>\n‚Ä¢ /start ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é\n‚Ä¢ /profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å\n‚Ä¢ /feedback ‚Äî –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n‚Ä¢ Inline: <code>@–≤–∞—à_–±–æ—Ç –∑–∞–ø—Ä–æ—Å</code>"
        );
        return;
      }
      await ctx.replyWithHTML(`üîÅ <b>–≠—Ö–æ</b>: <code>${text}</code>`);
    }
  });

  bot.command("profile", (ctx) => ctx.scene.enter("profile"));
  bot.command("feedback", (ctx) => ctx.scene.enter("feedback"));

  bot.on("inline_query", async (ctx) => {
    const q = (ctx.inlineQuery?.query || "").trim();
    const results: InlineQueryResultArticle[] = [
    {
        type: "article",
        id: "open-app",
        title: "–û—Ç–∫—Ä—ã—Ç—å Mini-App",
        description: "–ó–∞–ø—É—Å—Ç–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        input_message_content: {
        message_text: `–û—Ç–∫—Ä—ã–≤–∞–µ–º Mini-App: ${APP_URL}/game`,
        parse_mode: "HTML",
        },
        // ‚ùå –±—ã–ª–æ: reply_markup: Markup.inlineKeyboard([Markup.button.webApp("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å", `${APP_URL}/game`)]),
        // ‚úÖ –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å ¬´—Å—ã—Ä–æ–π¬ª InlineKeyboardMarkup:
        reply_markup: Markup
        .inlineKeyboard([Markup.button.webApp("üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å", `${APP_URL}/game`)])
        .reply_markup,
    },
    ];
    if (q) {
        results.push({
        type: "article",
        id: `search-${Date.now()}`,
        title: `–ü–æ–∏—Å–∫: ‚Äú${q}‚Äù`,
        description: "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è inline-—Ä–µ–∂–∏–º–∞",
        input_message_content: { message_text: `üîé –ó–∞–ø—Ä–æ—Å: <b>${q}</b>`, parse_mode: "HTML" },
        // –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π –±–ª–æ–∫:
        // reply_markup: Markup.inlineKeyboard([[Markup.button.url("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", APP_URL)]]).reply_markup,
        });
    }
    await ctx.answerInlineQuery(results, { cache_time: 0, is_personal: true });
  });

  logger.info({ msg: "Telegram bot instance created", env: BOT_ENV });
  return bot;
}

export function getBot(): Telegraf<MyContext> {
  if (!global.__BROM_BOT__) global.__BROM_BOT__ = createBot();
  return global.__BROM_BOT__!;
}
