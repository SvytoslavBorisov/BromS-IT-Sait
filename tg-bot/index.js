import dotenv from 'dotenv';
dotenv.config();

import express from 'express';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import morgan from 'morgan';
import path from 'path';
import { fileURLToPath } from 'url';
import { Telegraf, Markup } from 'telegraf';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const {
  BOT_TOKEN,
  PORT = 3010,
  WEBHOOK_DOMAIN,
  WEBHOOK_PATH = '/tg/webhook',
  WEBHOOK_SECRET
} = process.env;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');
if (!WEBHOOK_PATH.startsWith('/')) throw new Error('WEBHOOK_PATH must start with "/"');

// ---------------- BOT ----------------
const bot = new Telegraf(BOT_TOKEN);

bot.catch((err, ctx) => console.error('Telegraf error:', err));

bot.start((ctx) => ctx.reply('–ë–æ—Ç –Ω–∞ VPS –∑–∞–ø—É—â–µ–Ω ‚úÖ\n–ù–∞–ø–∏—à–∏ /play, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É.'));

bot.command('play', (ctx) => {
  // –ö–Ω–æ–ø–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –º–∏–Ω–∏-–∞–ø–ø
  return ctx.reply(
    '–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏-–∏–≥—Ä—É –≤–Ω—É—Ç—Ä–∏ Telegram üëá',
    Markup.keyboard([
      Markup.button.webApp('üéÆ –ò–≥—Ä–∞—Ç—å', `https://${WEBHOOK_DOMAIN}/game/`)
    ]).resize()
  );
});

// –ü—Ä–∏—ë–º web_app_data –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞ (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —á–µ—Ä–µ–∑ tg.sendData)
bot.on('web_app_data', (ctx) => {
  try {
    const data = JSON.parse(ctx.webAppData.data || '{}');
    return ctx.reply(`–ü—Ä–∏–Ω—è–ª –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞: ${JSON.stringify(data)}`);
  } catch {
    return ctx.reply(`–ü—Ä–∏–Ω—è–ª –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞ (—Å—Ç—Ä–æ–∫–∞): ${ctx.webAppData.data}`);
  }
});

// –ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ
bot.on('text', (ctx) => ctx.reply(`–≠—Ö–æ: ${ctx.message.text}`));

// --------------- APP (Express) ---------------
const app = express();
app.set('trust proxy', true);
app.use(morgan('combined'));
app.use(compression());
app.use(express.json({ limit: '2mb' }));

// –†–∞–∑–¥–∞—ë–º –º–∏–Ω–∏-–∞–ø–ø –∫–∞–∫ —Å—Ç–∞—Ç–∏–∫—É: https://<–¥–æ–º–µ–Ω>/game/
app.use('/game', express.static(path.join(__dirname, 'public', 'game')));

// Health/ping
app.get('/health', (_, res) => res.send('ok'));
app.get('/ping', (_, res) => res.json({ pong: true, ts: Date.now() }));

// GET –ø–æ –≤–µ–±—Ö—É–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get(WEBHOOK_PATH, (_, res) => res.status(200).send('ok'));

// –õ–∏–º–∏—Ç–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–∞
const webhookLimiter = rateLimit({
  windowMs: 5 * 1000,
  max: 30,
  standardHeaders: true,
  legacyHeaders: false
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Telegram (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω WEBHOOK_SECRET)
function checkWebhookSecret(req, res, next) {
  if (!WEBHOOK_SECRET) return next();
  const got = req.header('X-Telegram-Bot-Api-Secret-Token');
  if (got !== WEBHOOK_SECRET) return res.sendStatus(403);
  next();
}

// –°–∞–º –≤–µ–±—Ö—É–∫
app.post(WEBHOOK_PATH, webhookLimiter, checkWebhookSecret, (req, res) => {
  bot.handleUpdate(req.body, res);
});

// API –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–ø—Ä–∏–º–µ—Ä)
app.post('/api/progress', async (req, res) => {
  // TODO: –∑–¥–µ—Å—å –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å req.body.initData (–ø–æ–¥–ø–∏—Å—å Telegram WebApp)
  // –°–•–ï–ú–ê –ü–†–ò–ú–ï–†–ê:
  // { score: number, initData: string }
  const { score = 0 } = req.body || {};
  console.log('progress:', { score, from: req.ip });
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
  return res.json({ ok: true });
});

// –ë—ã—Å—Ç—Ä—ã–π API-–ø–∏–Ω–≥ –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞
app.get('/api/ping', (_, res) => res.json({ ok: true, ts: Date.now() }));

// ------------ START ------------
const server = app.listen(PORT, async () => {
  console.log(`HTTP :${PORT}  WEBHOOK_PATH=${WEBHOOK_PATH}`);
  if (WEBHOOK_DOMAIN) {
    try {
      const url = `https://${WEBHOOK_DOMAIN}${WEBHOOK_PATH}`;
      const body = { url, drop_pending_updates: true };
      if (WEBHOOK_SECRET) body.secret_token = WEBHOOK_SECRET;

      const r = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(body)
      });
      console.log('setWebhook status:', r.status);
      if (!r.ok) console.log(await r.text());
    } catch (e) {
      console.error('setWebhook failed:', e);
    }
  } else {
    console.log('No WEBHOOK_DOMAIN ‚Äî enabling long polling');
    await bot.launch();
  }
});

function shutdown(sig) {
  console.log(`\nGot ${sig}, shutting down...`);
  try { server.close(() => console.log('HTTP closed')); } catch {}
  try { bot.stop(sig); } catch {}
  setTimeout(() => process.exit(0), 1500).unref();
}
process.on('SIGINT', () => shutdown('SIGINT'));
process.on('SIGTERM', () => shutdown('SIGTERM'));
