// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  passwordHash   String
  emailVerified  DateTime?
  publicKey      Json?
  image          String?

  shares       Share[]  @relation("UserShares")

  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt

  recoverySessions RecoverySession[] @relation("RecoveryDealer")
  shareReceipts    ShareReceipt[]    @relation("ReceiptShareholder")

  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
  @@unique([identifier, token])
}

 model ShamirSession {
   id         String    @id @default(cuid())
   dealerId   String
   prime      String
   threshold  Int
   createdAt  DateTime  @default(now())
   shares     Share[]   @relation("SessionShares")


   recoveries  RecoverySession[]
 }

 model Share {
   id            Int      @id @default(autoincrement())
   sessionId     String   @default("")
   userId        String
   x             String
   ciphertext    Json
   createdAt     DateTime @default(now())
   session       ShamirSession @relation("SessionShares", fields: [sessionId], references: [id])

   user       User     @relation("UserShares", fields: [userId], references: [id])
 }

 model RecoverySession {
   id              String   @id @default(cuid())
   dealerId        String
   dealer          User         @relation("RecoveryDealer", fields:[dealerId], references:[id])

   shareSessionId  String
   shareSession    ShamirSession @relation(fields:[shareSessionId], references:[id])

   status      RecoveryStatus @default(PENDING)
   createdAt   DateTime       @default(now())
   finishedAt  DateTime?

   receipts    ShareReceipt[]
 }

model ShareReceipt {
  id             String   @id @default(cuid())
  recoveryId     String
  recovery       RecoverySession @relation(fields:[recoveryId], references:[id])

  shareholderId  String
  shareholder    User            @relation("ReceiptShareholder", fields:[shareholderId], references:[id])

  ciphertext Json?
  receivedAt DateTime @default(now())
  @@unique([recoveryId, shareholderId])
}

enum RecoveryStatus {
  PENDING
  DONE
  CANCELED
}