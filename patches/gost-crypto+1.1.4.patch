diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/.eslintrc.json b/node_modules/gost-crypto/lib/gost-crypto-master/.eslintrc.json
new file mode 100644
index 0000000..6582b48
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/.eslintrc.json
@@ -0,0 +1,100 @@
+{
+  "env": {
+    "browser": true,
+    "node": true,
+    "es6": true
+  },
+
+  "parserOptions": {
+    "sourceType": "module"
+  },
+
+  "extends": [
+    "eslint:recommended"
+  ],
+  "parser": "babel-eslint",
+  "plugins": ["babel"],
+  "rules": {
+
+    "no-alert": "warn",
+    "no-console": [
+      "warn",
+      {
+        "allow": ["warn", "error"]
+      }
+    ],
+
+    "key-spacing": [
+      "error",
+      {
+        "beforeColon": false,
+        "afterColon": true
+      }
+    ],
+    "prefer-rest-params": "error",
+    "prefer-template": "error",
+    "no-var": "error",
+    "prefer-const": "error",
+    "curly": ["error", "all"],
+    "no-else-return": [
+      "error",
+      {
+        "allowElseIf": false
+      }
+    ],
+    "object-curly-spacing": ["error", "always"],
+
+    "indent": [
+      "error",
+      2,
+      {
+        "SwitchCase": 1
+      }
+    ],
+    "quotes": [
+      "error",
+      "single",
+      {
+        "allowTemplateLiterals": true
+      }
+    ],
+    "semi": ["error", "never"],
+    "no-trailing-spaces": "error",
+    "brace-style": [
+      "error",
+      "1tbs",
+      {
+        "allowSingleLine": true
+      }
+    ],
+    "comma-dangle": ["error", "always-multiline"],
+    "dot-location": ["error", "property"],
+    "no-multi-spaces": "error",
+    "space-before-blocks": "error",
+    "no-multiple-empty-lines": "error",
+    "no-empty": [
+      "error",
+      {
+        "allowEmptyCatch": true
+      }
+    ],
+    "no-extra-semi": "error",
+    "no-case-declarations": "error",
+    "no-unreachable": "error",
+    "no-unused-vars": [
+      "error",
+      {
+        "vars": "all",
+        "args": "none"
+      }
+    ],
+    "no-debugger": "warn"
+  },
+  "globals": {
+    "window": true,
+    "If": true,
+    "Else": true,
+    "t": true,
+    "React": true
+  }
+}
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/.gitignore b/node_modules/gost-crypto/lib/gost-crypto-master/.gitignore
new file mode 100644
index 0000000..6c1207b
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/.gitignore
@@ -0,0 +1,5 @@
+node_modules
+.cache
+.vscode
+lib
+dist
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/README.md b/node_modules/gost-crypto/lib/gost-crypto-master/README.md
new file mode 100644
index 0000000..e560d4c
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/README.md
@@ -0,0 +1,73 @@
+# gost-crypto
+
+Originally forked from http://gostcrypto.com ported to commonjs module.
+
+**!! IMPORTANT !!**
+
+**This package is browser only, bacause of using Web Workers.**
+
+## 1. Installation 
+
+Add package through npm
+```
+npm install gost-crypto --save
+```
+Or through yarn:
+```
+yarn add gost-crypto
+```
+
+## 2. Setup
+
+Make sure you have copied webworker script into your `public` (`dist` or `build` or `assets` etc) directory.
+
+```
+cp node_modules/gost-crypto/lib/cryptoEngineWorker.js public/gostEngineWorker.js
+```
+
+By default, worker will be loaded from root host `/`. If your assets serve from another host or path like `/frontend/assets` you have to add 
+variable `window.__PUBLIC__URL__ = '/frontend/assets'`.
+
+## 3. Usage
+
+```
+import crypto from 'gost-crypto'
+// ...
+```
+
+## Original Description
+---
+
+Pure Javascript implementation of WebCrypto API interfaces and Public Key 
+Infrastructure for GOST algorithms (Russian Cryptographic Standards)
+
+Documentation, demonstartion, examples, references:
+
+http://gostcrypto.com
+
+Copyright (c) 2014-2016, Rudolf Nickolaev. 
+All rights reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/index.html b/node_modules/gost-crypto/lib/gost-crypto-master/index.html
new file mode 100644
index 0000000..14c0e0f
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/index.html
@@ -0,0 +1,12 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+  <meta charset="UTF-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1.0">
+  <meta http-equiv="X-UA-Compatible" content="ie=edge">
+  <title>Document</title>
+</head>
+<body>
+  <script src="./index.js"></script>
+</body>
+</html>
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/index.js b/node_modules/gost-crypto/lib/gost-crypto-master/index.js
new file mode 100644
index 0000000..dc64bd5
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/index.js
@@ -0,0 +1,24 @@
+const gost = require('./src/index')
+console.log(gost)
+
+
+
+gost.subtle.generateKey('GOST R 34.10', true, ['sign', 'verify']).then(function (keyPair) {
+
+  // Store key in secluded place
+  return gost.subtle.exportKey('raw', keyPair.privateKey).then(function (result) {
+
+    console.log('gost.coding.Hex.encode(result): ', gost.coding.Hex.encode(result));
+
+    // Provide the public key to recepient
+    return gost.subtle.exportKey('raw', keyPair.publicKey).then(function (result) {
+      console.log('gost.coding.Hex.encode(result): ', gost.coding.Hex.encode(result));
+    });
+
+
+  });
+}).catch(function (error) {
+  console.log('error: ', error);
+  console.log('error: ', error.stack);
+  alert(error.message);
+});
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/package.json b/node_modules/gost-crypto/lib/gost-crypto-master/package.json
new file mode 100644
index 0000000..849253f
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/package.json
@@ -0,0 +1,38 @@
+{
+  "name": "gost-crypto",
+  "version": "1.1.4",
+  "main": "lib/index.js",
+  "repository": "https://github.com/ekorzun/gost-crypto.git",
+  "author": "Evgeny Korzun <e.korzun@gmail.com>",
+  "license": "MIT",
+  "description": "Pure Javascript implementation of WebCrypto API interfaces and Public Key Infrastructure for GOST algorithms (Russian Cryptographic Standards)",
+  "keywords": ["GOST", "crypto", "streebog", "kuznechik"],
+  "scripts": {
+    "dev": "LOCAL_DEV=1 parcel serve index.html --port 9123",
+    "build": "run-p build:*",
+    "build:babel": "NODE_ENV=production babel src -d lib --copy-files",
+    "build:worker": "browserify src/gostEngine.js -o lib/gostEngineWorker.js",
+    "lint": "eslint src/** --fix",
+    "prepublish": "npm run build"
+  },
+  "devDependencies": {
+    "@babel/cli": "^7.7.5",
+    "@babel/core": "^7.7.5",
+    "babel-eslint": "^10.0.3",
+    "browserify": "^16.5.0",
+    "eslint": "^6.7.2",
+    "eslint-plugin-babel": "^5.3.0",
+    "npm-run-all": "^4.1.5",
+    "parcel-bundler": "^1.12.4",
+    "rollup": "^1.27.13",
+    "rollup-plugin-commonjs": "^10.1.0",
+    "rollup-plugin-node-resolve": "^5.2.0"
+  },
+  "files": [
+    "lib"
+  ],
+  "dependencies": {
+    "arraybuffer-to-string": "^1.0.2",
+    "string-to-arraybuffer": "^1.0.2"
+  }
+}
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostASN1.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostASN1.js
new file mode 100644
index 0000000..8de81ca
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostASN1.js
@@ -0,0 +1,5024 @@
+/**
+ * @file PKCS ASN.1 message syntax and converters
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+
+const gostCrypto = require('./gostCrypto')
+// const GostCoding = require('./gostCoding')
+// const GostSecurity = require('./gostSecurity')
+
+
+const CryptoOperationData = global.ArrayBuffer
+
+// Security parameters
+const algorithms = gostCrypto.security.algorithms
+
+const names = gostCrypto.security.names
+
+const identifiers = gostCrypto.security.identifiers
+
+const attributes = gostCrypto.security.attributes
+
+const parameters = gostCrypto.security.parameters
+
+// BER coding
+const BER = gostCrypto.coding.BER
+
+// PEM coding
+const PEM = gostCrypto.coding.PEM
+
+// Chars coding
+const Chars = gostCrypto.coding.Chars
+
+// Hex coding;
+const Hex = gostCrypto.coding.Hex
+
+// Hex coding;
+const Int16 = gostCrypto.coding.Int16
+
+// Expand javascript object
+function expand() {
+  const r = {}
+  for (let i = 0, n = arguments.length; i < n; i++) {
+    // eslint-disable-next-line
+    const item = arguments[i]
+    if (typeof item === 'object') {
+      for (const name in item) {r[name] = item[name]}
+    }
+  }
+  return r
+}
+
+
+// Swap bytes in buffer
+function swapBytes(src) {
+  if (src instanceof CryptoOperationData) {src = new Uint8Array(src)}
+  const dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
+}
+
+function isBinary(value) {
+  return value instanceof CryptoOperationData || value.buffer instanceof CryptoOperationData
+}
+
+// Left pad zero
+function lpad(n, width) {
+  return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n
+}
+
+// Nearest power 2
+function npw2(n) {
+  return n <= 2 ? n : n <= 4 ? 4 : n <= 8 ? 8 : n <= 16 ? 16 :
+    n <= 32 ? 32 : n <= 64 ? 64 : n <= 128 ? 128 : n <= 256 ? 256 :
+      n < 512 ? 512 : n < 1024 ? 1024 : undefined
+}
+
+// String int encode/decode to buffer
+const SInt = {
+  encode: function (value, endian) {
+    return `0x${ Hex.encode(value, endian)}`
+  },
+  decode: function (value, endian, len) {
+    if (typeof value === 'number') {value = value.toString(16)}
+    const s = value.replace('0x', '')
+    len = len || npw2(s.length)
+    return Hex.decode(lpad(s, len), endian)
+  },
+}
+
+// Assert invalid message
+function assert(value) {
+  if (value) {throw Error('Invalid format')}
+}
+
+function defineProperty(object, name, descriptor, enumerable) {
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
+}
+
+function defineProperties(object, properties, enumerable) {
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
+}
+
+function getOwnPropertyDescriptor(object, name) {
+  return Object.getOwnPropertyDescriptor(object, name)
+}
+
+// </editor-fold>
+
+/*
+ * Base ASN.1 types and definitions
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// Encode object primitive
+function encode(format, object, tagNumber, tagClass, tagConstructed, uniformTitle) {
+  assert(object === undefined)
+  let source = {
+    tagNumber: tagNumber,
+    tagClass: tagClass || 0x00,
+    tagConstructed: tagConstructed || false,
+    object: object,
+  }
+  // Output format
+  format = format || 'DER'
+  if (format === 'DER' || format === 'CER') {source = BER.encode(source, format)}
+  if (format === 'PEM') {source = PEM.encode(source, uniformTitle)}
+  return source
+}
+
+// Decode object primitive
+function decode(source, tagNumber, tagClass, tagConstructed, uniformTitle) {
+  assert(source === undefined)
+
+  // Decode PEM
+  if (typeof source === 'string') {source = PEM.decode(source, uniformTitle, false)}
+  // Decode binary data
+  if (source instanceof CryptoOperationData) {
+    try {
+      source = PEM.decode(Chars.encode(source), uniformTitle, true)
+    } catch (e) {
+      source = BER.decode(source)
+    }
+  }
+
+  tagClass = tagClass || 0
+  tagConstructed = tagConstructed || false
+  // Restore context implicit formats
+  if (source.tagNumber === undefined) {
+    source = encode(true, source.object, tagNumber, tagClass,
+      source.object instanceof Array)
+    source = BER.decode(source)
+  }
+
+  // Check format
+  assert(source.tagClass !== tagClass ||
+        source.tagNumber !== tagNumber ||
+        source.tagConstructed !== tagConstructed)
+  // Clone value define from redefine original
+  if (tagClass === 0 && tagNumber === 0x05) {return null}
+  return source.object
+}
+
+// Create class based on super
+function extend(Super, Class, propertiesObject, propertiesClass) {
+  // If constructor not defined
+  if (typeof Class !== 'function') {
+    propertiesClass = propertiesObject
+    propertiesObject = Class
+    Class = function () {
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
+  Class.prototype = Object.create(Super.prototype, {
+    constructor: {
+      value: Class,
+    },
+    superclass: {
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject)}
+  // Inherites super class properties
+  if (Super !== Object) {
+    for (const name in Super) {Class[name] = Super[name]}
+  }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
+
+// Base class
+const ASN1Object = extend(Object, function (object) {
+  this.object = object
+}, {
+  // Call set method for a class property
+  _set: function (Class, propName, value) {
+    Class.property(propName).set.call(this, value)
+  },
+  // Call get method for a class property
+  _get: function (Class, propName) {
+    return Class.property(propName).get.call(this)
+  },
+  // Call method for a class
+  _call: function (Class, methodName, args) {
+    return Class.method(methodName).apply(this, args)
+  },
+  hasProperty: function (propName) {
+    return this.hasOwnProperty(propName) ||
+            !!this.constructor.property(propName)
+  },
+  encode: function () {
+    return this.object
+  },
+}, {
+  decode: function (source) {
+    return new this(source)
+  },
+  // Find ingerited property
+  property: function (propName) {
+    let proto = this.prototype
+    while (proto) {
+      const descriptor = getOwnPropertyDescriptor(proto, propName)
+      if (descriptor) {return descriptor}
+      proto = proto.superclass
+    }
+  },
+  // Find method
+  method: function (methodName) {
+    let proto = this.prototype
+    while (proto) {
+      if (proto[methodName]) {return proto[methodName]}
+      proto = proto.superclass
+    }
+  },
+})
+
+// Primitive metaclass
+const PRIMITIVE = function (tagNumber) {
+  return extend(ASN1Object, {
+    encode: function (format) {
+      return encode(format, this.object, tagNumber)
+    },
+  }, {
+    decode: function (source) {
+      return new this(decode(source, tagNumber))
+    },
+  })
+}
+
+const ANY = ASN1Object
+
+const BOOLEAN = PRIMITIVE(0x01)
+
+const IA5String = PRIMITIVE(0x16)
+
+const NumericString = PRIMITIVE(0x12)
+
+const PrintableString = PRIMITIVE(0x13)
+
+const TeletexString = PRIMITIVE(0x14)
+
+const UTF8String = PRIMITIVE(0x0c)
+
+const UTCTime = PRIMITIVE(0x17)
+
+const GeneralizedTime = PRIMITIVE(0x18)
+
+const UniversalString = PRIMITIVE(0x1C)
+
+const BMPString = PRIMITIVE(0x1e)
+
+const NULL = extend(PRIMITIVE(0x05), {
+  object: {
+    get: function () {
+      return null
+    },
+    set: function (object) {
+      assert(object !== null)
+    },
+  },
+})
+
+// Primitive class with value coding
+const PRIMITIVE_CODE = function (tagNumber) {
+
+  // Base class primitive
+  const Class = extend(PRIMITIVE(tagNumber), function (object) {
+    if (this instanceof Class) {Class.super.apply(this, arguments)} else {return CODE(object)}
+  })
+
+  // Create Class with encoded
+  function CODE(structure) {
+    // Structured class
+    return extend(PRIMITIVE(tagNumber), function (object) {
+      Class.super.call(this, object)
+    }, {
+      // Transformation to code values
+      encode: function (format) {
+        return encode(format, structure[this.object], tagNumber)
+      },
+    }, {
+      decode: function (source) {
+        const id = decode(source, tagNumber)
+        for (const name in structure) {
+          if (id === structure[name]) {return new this(name)}
+        }
+        assert(true)
+      },
+    })
+  }
+  return Class
+}
+
+const INTEGER = PRIMITIVE_CODE(0x02)
+
+const ENUMERATED = PRIMITIVE_CODE(0x0a)
+
+const OCTET_STRING = (function () {
+  // Base class primitive
+  var Class = extend(PRIMITIVE(0x04), function (object) {
+    if (this instanceof Class) {Class.super.apply(this, arguments)} else {return WRAPPING(object)}
+  })
+  // Wrapping class
+  function WRAPPING(WrappedClass) {
+    if (WrappedClass) {
+      return extend(WrappedClass, {
+        encode: function (format) {
+          return encode(format, WrappedClass.method('encode').call(this, true), 0x04)
+        },
+      }, {
+        decode: function (source) {
+          return WrappedClass.decode.call(this, decode(source, 0x04))
+        },
+      })
+    } return Class
+  }
+  return Class
+})()
+
+const BIT_STRING = (function () {
+  // Base class primitive
+  var Class = extend(PRIMITIVE(0x03), function (object) {
+    if (this instanceof Class) {Class.super.apply(this, arguments)} else if (typeof object === 'object') {return MASK(object)} else {return WRAPPING(object)}
+  })
+
+  // Wrapping class
+  function WRAPPING(WrappedClass) {
+    if (WrappedClass) {
+      return extend(WrappedClass, {
+        encode: function (format) {
+          return encode(format, WrappedClass.method('encode').call(this, true), 0x03)
+        },
+      }, {
+        decode: function (source) {
+          return WrappedClass.decode.call(this, decode(source, 0x03))
+        },
+      })
+    } return Class
+  }
+
+  // Create new class for a mask
+  function MASK(structure) {
+    // Bit string masked class
+    return extend(ASN1Object, function (object, numbits) {
+      ASN1Object.call(this, object)
+      this.numbits = numbits || 0
+    }, {
+      encode: function (format) {
+        let object = this.object, data = []
+        if (object instanceof Array) {
+          for (var i = 0, n = object.length; i < n; i++) {
+            const j = structure[object[i]]
+            if (j !== undefined) {data[j] = '1'}
+          }
+          for (var i = 0, n = Math.max(data.length, this.numbits); i < n; i++) {
+            if (!data[i]) {data[i] = '0'}
+          }
+          data = data.join('')
+        } else {data = '0'}
+        return encode(format, data, 0x03)
+      },
+    }, {
+      // Transformation to array of values
+      decode: function (source) {
+        const data = decode(source, 0x03), object = []
+        for (const name in structure) {
+          const i = structure[name]
+          if (data.charAt(i) === '1') {object.push(name)}
+        }
+        return new this(object, data.length)
+      },
+    })
+  }
+
+  return Class
+})()
+
+// Combine sequence object properties with owner object
+const COMBINE = function (Class) {
+  Class.combine = function (owner, valueName) {
+    for (const name in Class.prototype) {
+      if (Class.prototype.hasOwnProperty(name) && !owner.hasProperty(name)) {
+        defineProperty(owner, name, (function (name) {
+          return {
+            get: function () {
+              // Get object property
+              return this[valueName] && this[valueName][name]
+            },
+            set: function (object) {
+              // Set object property
+              if (!this[valueName]) {this[valueName] = {}}
+              this[valueName][name] = object
+            },
+            configurable: false,
+            enumerable: true,
+          }
+        })(name))
+      }
+    }
+  }
+  return Class
+}
+
+const SEQUENCE = function (structure, uniformTitle) {
+
+  /**
+     * Create SEQUENCE ASN.1 metaclass
+     *
+     * @class GostASN1.Sequence
+     * @param {(Object|FormatedData)} object Initialization object
+     * @param {boolean} check Check structure after initialization
+     */
+  const Class = extend(ASN1Object, function (object, check) {
+    // Define hidden properties
+    defineProperty(this, 'items', {
+      writable: true,
+      value: {},
+    })
+    if (typeof object === 'string' || object instanceof CryptoOperationData) {this.decode(object)} else if (object !== undefined) {
+      this.object = object
+      // Check structure
+      if (check) {this.check()}
+    }
+  }, {
+    object: {
+      get: function () {
+        return this
+      },
+      set: function (object) {
+        if (object instanceof Class) {
+          // Set the same sequence class
+          this.items = object.items
+          for (var name in structure) {
+            var ItemClass = this.getItemClass(name, this.items)
+            if (ItemClass.combine) {ItemClass.combine(this, name)}
+          }
+        } else {
+          // Set other object structure
+          const data = {}
+          for (var name in structure) {
+            const item = object[name]
+            var ItemClass = this.getItemClass(name, data)
+            if (item !== undefined) {
+              data[name] = new ItemClass(item)
+            } else if (ItemClass.combine) {
+              // Create combined object
+              data[name] = new ItemClass(object)
+            }
+            if (ItemClass.combine) {ItemClass.combine(this, name)}
+          }
+          this.items = data
+        }
+      },
+    },
+    getItemClass: function (name, items) {
+      return structure[name]
+    },
+    /**
+         * Encode the object
+         *
+         * @memberOf GostASN1.Sequence
+         * @instance
+         * @param {string} format Encoding format 'DER', 'CER' or 'PEM'
+         * @returns {FormatedData}
+         */
+    encode: function (format) {
+      const source = [], items = this.items
+      // Encode objects in structure
+      for (const name in structure) {
+        // console.log(name, 'encoding...', items[name]);
+        if (items[name]) {
+          const encoded = items[name].encode(true)// Source from object
+          if (encoded !== undefined) // Can be optional
+          {source.push(encoded)}
+
+        }
+      }
+      return encode(format, source, 0x10, 0, true, uniformTitle)
+    },
+    /**
+         * Decode the source to self object
+         *
+         * @memberOf GostASN1.Sequence
+         * @instance
+         * @param {FormatedData} source Encoded data
+         */
+    decode: function (source) {
+      this.object = this.constructor.decode(source)
+    },
+    /**
+         * Check the object structure
+         *
+         * @memberOf GostASN1.Sequence
+         * @instance
+         */
+    check: function () {
+      this.constructor.decode(this.encode(true))
+    },
+  }, {
+    /**
+         * Encode data values with creating object
+         *
+         * @memberOf GostASN1.Sequence
+         * @static
+         * @param {Object} object Javascript object to encoding
+         * @param {string} format Encoding format 'DER', 'CER' or 'PEM'
+         * @returns {FormatedData}
+         */
+    encode: function (object, format) {
+      return new this(object).encode(format)
+    },
+    /**
+         * Decode source and create object
+         *
+         * @memberOf GostASN1.Sequence
+         * @static
+         * @param {FormatedData} source Encoded data
+         * @returns {GostASN1.Sequence}
+         *
+         */
+    decode: function (source) {
+      // Decode structure
+      source = decode(source, 0x10, 0, true, uniformTitle)
+      let i = 0, result = new this(), data = result.items = {}
+      for (const name in structure) {
+        // console.log(name, 'decoding...');
+        // try to create and decode object
+        const ItemClass = result.getItemClass(name, data)
+        const item = ItemClass.decode(source[i])
+        // success? item can be optional
+        if (item !== undefined) {
+          data[name] = item
+          if (ItemClass.combine) {ItemClass.combine(result, name)}
+          i++
+        }
+      }
+      return result
+    },
+  })
+
+  // Append structure items
+  for (const name in structure) {
+    defineProperty(Class.prototype, name, (function (name) {
+      return {
+        get: function () {
+          // Get object property
+          return this.items[name] && this.items[name].object
+        },
+        set: function (object) {
+          // Set object property
+          if (object !== undefined) {
+            const ItemClass = this.getItemClass(name, this.items)
+            this.items[name] = new ItemClass(object)
+          } else {delete this.items[name]}
+        },
+        configurable: false,
+        enumerable: !structure[name].combine,
+      }
+    })(name))
+    if (structure[name].combine) {structure[name].combine(Class.prototype, name)}
+  }
+  return Class
+}
+
+const ATTRIBUTE = function (structure, typeName, valueName, ownerDafaultType, uniformName) {
+
+  const BaseClass = SEQUENCE(structure, uniformName)
+
+  // Define attribute sequence
+  var DEFINE = function (typeSet, defaultType) {
+
+    typeName = typeName || 'type'
+    valueName = valueName || 'value'
+    defaultType = defaultType || ownerDafaultType || ANY
+
+    var Class = extend(BaseClass, function (object) {
+      // Constructor - "matrioshka"
+      if (this instanceof Class) {
+        // Call super
+        BaseClass.apply(this, arguments)
+      } else {return DEFINE.apply(this, arguments)}
+    }, {
+      getItemClass: function (name, items) {
+        let ItemClass = structure[name]
+        if (valueName === name) {
+          // Define type of value attribute based on type attribute
+          let type, typeId = items && items[typeName]
+          if (typeId) {
+            const id = typeId.object
+            if (typeSet) {
+              if (typeof typeSet === 'function') {type = typeSet(id)} else {type = typeSet[id]}
+            }
+          }
+          type = type || defaultType || ANY
+          ItemClass = ItemClass === ANY ? type :
+            ItemClass(type)
+        }
+        return ItemClass
+      },
+    })
+
+    // Redefine type property
+    defineProperty(Class.prototype, typeName, {
+      get: function () {
+        // Get value property of object
+        return this.items[typeName] && this.items[typeName].object
+      },
+      set: function () {
+        // Can't set type definition property separatery
+        assert(true)
+      },
+      configurable: false,
+      enumerable: true,
+    })
+
+    return Class
+  }
+
+  return DEFINE()
+}
+
+
+const OBJECT_IDENTIFIER = extend(ASN1Object, {
+  encode: function (format) {
+    let object = this.object
+    object = /^(\d+\.)+\d+$/.test(object) ? object : identifiers[object]
+    assert(!object)
+    return encode(format, object, 0x06)
+  },
+}, {
+  decode: function (source) {
+    const object = decode(source, 0x06)
+    return new this(names[object] || object)
+  },
+})
+
+const IMPLICIT = function (Class) {
+  Class = Class || ANY
+  // Add constracted tag
+  return extend(Class, {
+    encode: function (format) {
+      // Format encoding without CTX header
+      const source = Class.method('encode').call(this, format)
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {return source}
+      if (source.tagNumber !== 0x04 && source.tagClass === 0 &&
+                !(source.object instanceof Array))
+      // Encode primitive source
+      {return { object: BER.encode(source, 'DER', true) }}
+      return { object: source.object }
+    },
+  }, {
+    decode: function (source) {
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {
+        return Class.decode.call(this, source)
+      }
+      source = {
+        object: source.object,
+        header: source.header,
+        content: source.content,
+      }
+      return Class.decode.call(this, source)
+
+    },
+  })
+}
+
+const EXPLICIT = function (Class) {
+  Class = Class || ANY
+  // Add constracted tag
+  return extend(Class, {
+    encode: function (format) {
+      // Format encoding without CTX header
+      const source = Class.method('encode').call(this, format)
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {return source}
+      return { object: [source] }
+    },
+  }, {
+    decode: function (source) {
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {
+        return Class.decode.call(this, source)
+      } return Class.decode.call(this, source.object[0])
+    },
+  })
+}
+
+const CTX = function (number, ContentClass) {
+  function CTX() {
+    ContentClass.apply(this, arguments)
+  }
+  // Create CTX number class with wrapped content class
+  return extend(ContentClass, CTX, {
+    encode: function (format) {
+      const source = ContentClass.method('encode').call(this, format)
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {return source}
+      source.tagNumber = number
+      source.tagClass = 0x02
+      source.tagConstructed = source.object instanceof Array
+      return source
+    },
+  }, {
+    decode: function (source) {
+      // Format decoding without CTX
+      assert(source.tagNumber !== undefined &&
+                (source.tagClass !== 0x02 || source.tagNumber !== number))
+      return ContentClass.decode.call(this, source)
+    },
+  })
+}
+
+const ARRAY_OF = function (tagNumber) {
+
+  return function (ItemClassDef, typeAndValue) {
+    // Difininition of item class
+    ItemClassDef = ItemClassDef || ANY
+
+    // Metaclass definition
+    var DEFINE = function (typeSet, defaultType) {
+
+      // Define item class
+      const ItemClass = typeof ItemClassDef === 'function' &&
+                typeSet !== undefined ?
+        ItemClassDef(typeSet, defaultType) : ItemClassDef
+
+      if (typeAndValue) {
+        /**
+                 * Create class with type and value structure<br><br>
+                 *
+                 * SET OF attribute and SEQUENCE OF attribute metaclass
+                 *
+                 * @class GostASN1.Set
+                 * @param {Object} object object value
+                 */
+        var Class = extend(ASN1Object, function (object) {
+          // Constructor - "matrioshka"
+          if (this instanceof Class) {
+            // Define hidden items property
+            defineProperty(this, 'items', {
+              writable: true,
+              value: {},
+            })
+            // Call super
+            ASN1Object.call(this, object || {})
+          } else {return DEFINE.apply(this, arguments)}
+        }, {
+          object: {
+            get: function () {
+              // refresh items from object properties
+              this.read()
+              return this
+            },
+            set: function (object) {
+              if (object instanceof Class) {
+                object.read()
+                this.items = object.items
+              } else {
+                // Set other object structure
+                const data = {}
+                for (const id in object) {
+                  const item = object[id]
+                  data[id] = this.createItem(item, id)
+                }
+                this.items = data
+              }
+              // refresh object properties to items
+              this.reset()
+            },
+          },
+          createItem: function (value, type) {
+            if (typeAndValue) {
+              var object = {}
+              object[typeAndValue.typeName] = type
+              object[typeAndValue.valueName] = value
+            } else {object = value}
+            return new ItemClass(object)
+          },
+          getItemValue: function (id) {
+            const item = this.items[id]
+            return typeAndValue ? item.object[typeAndValue.valueName] : item.object
+          },
+          setItemValue: function (id, value) {
+            const item = this.items[id]
+            if (typeAndValue) {item.object[typeAndValue.valueName] = value} else {item.object = value}
+          },
+          isItemType: function (id) {
+            return typeAndValue ? identifiers[id] : !isNaN(parseInt(id))
+          },
+          reset: function () {
+            // remove unused properties
+            const items = this.items
+            for (var id in this) {
+              if (this.hasOwnProperty(id) && !this.items[id] &&
+                                this.isItemType(id)) {delete this[id]}
+            }
+            // add new properties
+            for (var id in items) {this[id] = this.getItemValue(id)}
+          },
+          read: function () {
+            const items = this.items
+            for (const id in this) {
+              if (this.isItemType(id)) {
+                if (!this.items[id]) {
+                  items[id] = this.createItem(this[id], id)
+                  this[id] = this.getItemValue(id)
+                } else if (this.getItemValue(id) !== this[id]) {
+                  this.setItemValue(id, this[id])
+                }
+              }
+            }
+          },
+          /**
+                     * Encode the object
+                     *
+                     * @memberOf GostASN1.Set
+                     * @instance
+                     * @param {string} format Encoding format 'DER', 'CER' or 'PEM'
+                     * @returns {FormatedData}
+                     */
+          encode: function (format) {
+            // refresh items from object properties
+            this.read()
+            // repare source
+            const object = this.items, source = []
+            for (const id in object) {
+              // console.log(id, object[id], 'encoding...');
+              const encoded = object[id].encode(true)
+              if (encoded !== undefined) {source.push(encoded)}
+            }
+            return encode(format, source, tagNumber, 0, true)
+          },
+          /**
+                     * Decode the source to self object
+                     *
+                     * @memberOf GostASN1.Set
+                     * @instance
+                     * @param {FormatedData} source Encoded data
+                     */
+          decode: function (source) {
+            this.object = this.constructor.decode(source)
+          },
+          /**
+                     * Check the object structure
+                     *
+                     * @memberOf GostASN1.Set
+                     * @instance
+                     */
+          check: function () {
+            this.constructor.decode(this.encode(true))
+          },
+        }, {
+          /**
+                     * Encode data values with creating object
+                     *
+                     * @memberOf GostASN1.Set
+                     * @static
+                     * @param {Object} object Javascript object to encoding
+                     * @param {string} format Encoding format 'DER', 'CER' or 'PEM'
+                     * @returns {FormatedData}
+                     */
+          encode: function (object, format) {
+            return new this(object).encode(format)
+          },
+          /**
+                     * Decode source and create object
+                     *
+                     * @memberOf GostASN1.Set
+                     * @static
+                     * @param {FormatedData} source Encoded data
+                     * @returns {GostASN1.Sequence}
+                     *
+                     */
+          decode: function (source) {
+            // Decode structure
+            source = decode(source, tagNumber, 0, true)
+            const result = new this(), data = result.items = {}
+            for (let i = 0, n = source.length; i < n; i++) {
+              const item = ItemClass.decode(source[i])
+              const id = typeAndValue ? item.object[typeAndValue.typeName] : i
+              data[id] = item
+            }
+            result.reset()
+            return result
+          },
+        })
+
+        return Class
+      }
+      // Create array class
+      var ArrayClass = extend(ASN1Object, function (object) {
+        // Constructor - "matrioshka"
+        if (this instanceof ArrayClass) {
+          // Define hidden items property
+          defineProperties(this, {
+            items: {
+              writable: true,
+              value: [],
+            },
+            values: {
+              writable: true,
+              value: [],
+            },
+          })
+          // Call super
+          ASN1Object.call(this, object || [])
+        } else {return DEFINE.apply(this, arguments)}
+      }, {
+        object: {
+          get: function () {
+            // refresh items from object properties
+            this.read()
+            return this.values
+          },
+          set: function (object) {
+            if (object instanceof ArrayClass) {
+              object.read()
+              this.items = object.items
+            } else {
+              // Set other object structure
+              const data = []
+              for (let i = 0, n = object.length; i < n; i++) {data[i] = new ItemClass(object[i])}
+              this.items = data
+            }
+            // refresh object properties to items
+            this.reset()
+          },
+        },
+        encode: function (format) {
+          // refresh items from object properties
+          this.read()
+          // repare source
+          const data = this.items, source = []
+          for (let i = 0, n = data.length; i < n; i++) {
+            const encoded = data[i].encode(true)
+            if (encoded !== undefined) {source.push(encoded)}
+          }
+          return encode(format, source, tagNumber, 0, true)
+        },
+        decode: function (source) {
+          this.object = this.constructor.decode(source)
+        },
+        check: function () {
+          this.constructor.decode(this.encode(true))
+        },
+        reset: function () {
+          // remove unused properties
+          for (let i = 0, n = this.items.length; i < n; i++) {this.values.push(this.items[i].object)}
+        },
+        read: function () {
+          const items = this.items, values = this.values
+          for (let i = 0, n = values.length; i < n; i++) {
+            if (!this.items[i]) {
+              items[i] = new ItemClass(values[i])
+              values[i] = items[i].object
+            } else if (items[i].object !== values[i]) {items[i].object = values[i]}
+          }
+        },
+      }, {
+        encode: function (object, format) {
+          return new this(object).encode(format)
+        },
+        decode: function (source) {
+          source = decode(source, tagNumber, 0, true)
+          const result = new this()
+          result.items = []
+          for (let i = 0, n = source.length; i < n; i++) {result.items.push(ItemClass.decode(source[i]))}
+          result.reset()
+          return result
+        },
+      })
+
+      return ArrayClass
+
+    }
+    return DEFINE() // Create simple class w/o any parameters
+  }
+}
+
+const SEQUENCE_OF = ARRAY_OF(0x10)
+
+const SET_OF = ARRAY_OF(0x11)
+
+const ENCLOSURE = function (BaseClass, modifier) {
+  if (modifier) {
+    const Class = extend(ASN1Object, {
+      object: {
+        get: function () {
+          if (this.item) {return modifier.decode(this.item.object)}
+          return undefined
+        },
+        set: function (object) {
+          if (object !== undefined) {this.item = new BaseClass(modifier.encode(object))} else {delete this.item}
+        },
+      },
+      encode: function (format) {
+        return this.item.encode(format)
+      },
+    }, {
+      decode: function (source) {
+        const result = new this()
+        result.item = BaseClass.decode(source)
+        return result
+      },
+    })
+    for (const name in BaseClass) {
+      if (!Class[name]) {Class[name] = BaseClass[name]}
+    }
+    return Class
+  } return BaseClass
+}
+
+const SET_OF_SINGLE = function (ItemClass) {
+
+  const Class = ENCLOSURE(SET_OF(ItemClass), {
+    encode: function (item) {
+      return [item]
+    },
+    decode: function (item) {
+      return item[0]
+    },
+  })
+  return Class
+}
+
+const CHOICE = function (structure, define) {
+
+  return extend(ASN1Object, {
+    object: {
+      get: function () {
+        return this.item && this.item.object
+      },
+      set: function (object) {
+        // Try to find appropriate type in structure
+        if (object instanceof ASN1Object) {
+          for (var name in structure) {
+            if (object instanceof structure[name]) {
+              this.item = object
+              return
+            }
+          }
+        }
+        // Define class
+        var name = typeof define === 'function' ? define(object) : define
+        assert(!name || !structure[name])
+        object = new structure[name](object)
+        this.item = object
+      },
+    },
+    encode: function (format) {
+      // Already in class
+      return this.item.encode(format)
+    },
+  }, {
+    decode: function (source) {
+      // Try to find class structure
+      for (const name in structure) {
+        try {
+          const item = structure[name].decode(source)
+          if (item !== undefined) {return new this(item)}
+        } catch (e) {
+        }
+      }
+      assert(true)
+    },
+  })
+}
+
+const ENCAPSULATES = function (WrappedClass) {
+  WrappedClass = WrappedClass || ANY
+  // BER Encode/Decode values
+  return extend(WrappedClass, {
+    encode: function () {
+      return BER.encode(WrappedClass.method('encode').call(this, true))
+    },
+  }, {
+    encode: function (object, format) {
+      return new this(object).encode(format)
+    },
+    decode: function (source) {
+      return WrappedClass.decode.call(this, BER.decode(source))
+    },
+  })
+}
+
+const DEFAULT = function (Class, optional) {
+  Class = Class || ANY
+  return extend(Class, {
+    encode: function (format) {
+      if (this.object === optional) {return undefined}
+      return Class.method('encode').call(this, format)
+    },
+  }, {
+    decode: function (source) {
+      if (source === undefined) {return new this(optional)}
+      try {
+        return Class.decode.call(this, source)
+      } catch (e) {
+        return undefined
+      }
+    },
+  })
+}
+
+const OPTIONAL = function (Class) {
+  Class = Class || ANY
+  return extend(Class, {}, {
+    decode: function (source) {
+      if (source === undefined) {return undefined}
+      try {
+        return Class.decode.call(this, source)
+      } catch (e) {
+        return undefined
+      }
+    },
+  })
+}
+
+const DEFAULT_NULL = function (Class, optional) {
+  Class = Class || ANY
+  return extend(Class, {
+    encode: function (format) {
+      if (this.object === optional) {return new NULL(null).encode(format)}
+      return Class.method('encode').call(this, format)
+    },
+  }, {
+    decode: function (source) {
+      if (source === undefined) {return undefined}
+      if (source === null ||
+                (source.tagNumber === 0x05 && source.tagClass === 0)) {return new this(optional)}
+      try {
+        return Class.decode.call(this, source)
+      } catch (e) {
+        return undefined
+      }
+    },
+  })
+}
+
+// </editor-fold>
+
+/*
+ * Certificate Version, Name, Attributes, Validity
+ *
+ * http://tools.ietf.org/html/rfc5280
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const DirectoryString = CHOICE({
+  teletexString: TeletexString,
+  printableString: PrintableString,
+  universalString: UniversalString,
+  utf8String: UTF8String,
+  bmpString: BMPString,
+  numericString: NumericString,
+}, function (value) {
+  // PrintableString - for characters and symbols with no spaces, overrise UTF8String
+  return /^[A-Za-z0-9\.@\+\-\:\=\\\/\?\!\#\$\%\^\&\*\(\)\[\]\{\}\>\<\|\~]*$/.test(value) ? 'printableString' : 'utf8String'
+})
+
+const Time = CHOICE({
+  utcTime: UTCTime,
+  generalTime: GeneralizedTime,
+}, function (value) {
+  return value.getYear() >= 2050 ? 'generalTime' : 'utcTime'
+})
+
+// Attribute
+const AttributeType = OBJECT_IDENTIFIER
+
+const AttributeValue = ANY
+
+const AttributeTypeAndValue = ATTRIBUTE({
+  type: AttributeType,
+  value: AttributeValue,
+})
+
+const typeAndValue = {
+  typeName: 'type',
+  valueName: 'value',
+}
+
+/**
+ * X.501 type Name
+ * The Name describes a hierarchical name composed of attributes, such
+ * as country name, and corresponding values, such as US.  The type of
+ * the component AttributeValue is determined by the AttributeType; in
+ * general it will be a DirectoryString.
+
+ * The DirectoryString type is defined as a choice of PrintableString,
+ * TeletexString, BMPString, UTF8String, and UniversalString.  The
+ * UTF8String encoding [RFC 2279] is the preferred encoding, and all
+ * certificates issued after December 31, 2003 MUST use the UTF8String
+ * encoding of DirectoryString.
+ *
+ * Standard sets of attributes have been defined in the X.500 series of
+ * specifications [X.520].  Implementations of this specification MUST
+ * be prepared to receive the following standard attribute types in
+ * issuer and subject (section 4.1.2.6) names:
+ *  <ul>
+ *      <li>country,</li>
+ *      <li>organization,</li>
+ *      <li>organizational-unit,</li>
+ *      <li>distinguished name qualifier,</li>
+ *      <li>state or province name,</li>
+ *      <li>common name (e.g., "Susan Housley"), and</li>
+ *      <li>serial number.</li>
+ *  </ul>
+ * In addition, implementations of this specification SHOULD be prepared
+ * to receive the following standard attribute types in issuer and
+ * subject names:
+ *  <ul>
+ *      <li>locality,</li>
+ *      <li>title,</li>
+ *      <li>surname,</li>
+ *      <li>given name,</li>
+ *      <li>initials,</li>
+ *      <li>pseudonym, and</li>
+ *      <li>generation qualifier (e.g., "Jr.", "3rd", or "IV").</li>
+ *  </ul>
+ The syntax for type Name:
+ *  <pre>
+ *  Name ::= CHOICE {
+ *    rdnSequence RDNSequence }
+ *
+ *  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
+ *
+ *  RelativeDistinguishedName ::=
+ *    SET OF AttributeTypeAndValue
+ *
+ *  AttributeTypeAndValue ::= SEQUENCE {
+ *    type     AttributeType,
+ *    value    AttributeValue }
+ *
+ *  AttributeType ::= OBJECT IDENTIFIER
+ *
+ *  AttributeValue ::= ANY DEFINED BY AttributeType
+ *
+ *  DirectoryString ::= CHOICE {
+ *        teletexString           TeletexString (SIZE (1..MAX)),
+ *        printableString         PrintableString (SIZE (1..MAX)),
+ *        universalString         UniversalString (SIZE (1..MAX)),
+ *        utf8String              UTF8String (SIZE (1..MAX)),
+ *        bmpString               BMPString (SIZE (1..MAX)) }
+ *  </pre>
+ * @class GostASN1.Name
+ */
+const RelativeDistinguishedName = SET_OF_SINGLE(AttributeTypeAndValue({
+  serialName: PrintableString,
+  countryName: PrintableString,
+  dnQualifier: PrintableString,
+  emailAddress: IA5String,
+  domainComponent: IA5String,
+  SNILS: NumericString,
+  OGRN: NumericString,
+  INN: NumericString,
+}, DirectoryString))
+
+const RDNSequence = SEQUENCE_OF(RelativeDistinguishedName, typeAndValue)()
+
+const Name = CHOICE({
+  // only one possibility for now
+  rdnSequence: RDNSequence,
+}, 'rdnSequence')
+
+/**
+ * Validity
+ * @class GostASN1.Validity
+ * @extends GostASN1.Sequence
+ */
+const Validity = COMBINE(SEQUENCE({
+  notBefore: Time,
+  notAfter: Time,
+}))
+
+const Version = INTEGER
+
+const Attribute = ATTRIBUTE({
+  type: OBJECT_IDENTIFIER,
+  value: ANY,
+})
+
+/**
+ * Type and Value Attributes <br>
+ *
+ * Suggested naming attributes: Definition of the following
+ * information object set may be augmented to meet local
+ * requirements.  Note that deleting members of the set may
+ * prevent interoperability with conforming implementations.
+ * presented in pairs: the AttributeType followed by the type
+ * definition for the corresponding AttributeValue
+ *
+ * @class GostASN1.Attributes
+ * @extends GostASN1.Set
+ */
+const Attributes = SET_OF(Attribute, typeAndValue)
+
+const AttributeSequence = SEQUENCE_OF(Attribute, typeAndValue)
+// </editor-fold>
+
+/*
+ * Algorithm identifiers
+ *
+ * http://tools.ietf.org/html/rfc3279
+ * http://tools.ietf.org/html/rfc4357
+ * http://tools.ietf.org/html/rfc2898
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const FieldElement = INTEGER
+const Curve = SEQUENCE({
+  a: FieldElement,
+  b: FieldElement,
+  seed: OPTIONAL(BIT_STRING),
+})
+
+const ECPoint = OCTET_STRING(extend(ASN1Object, {
+  encode: function () {
+    const value = this.object
+    const len = Math.max(npw2(value.x.length - 2), npw2(value.y.length - 2)) / 2,
+      r = new Uint8Array(2 * len + 1)
+    r[0] = 0x04
+    r.set(new Uint8Array(SInt.decode(value.x, false, len)), 1) // x
+    r.set(new Uint8Array(SInt.decode(value.y, false, len)), len + 1) // y
+    return r.buffer
+  },
+}, {
+  decode: function (value) {
+    const len = (value.byteLength - 1) / 2
+    return new this({
+      x: SInt.encode(new Uint8Array(value, 1, len)),
+      y: SInt.encode(new Uint8Array(value, len + 1, len)),
+    })
+  },
+}))
+
+const FieldID = SEQUENCE({
+  fieldType: OBJECT_IDENTIFIER,
+  parameters: INTEGER,
+})
+
+const ECParameters = SEQUENCE({
+  version: Version, // version is always 1
+  fieldID: FieldID, // identifies the finite field over which the curve is defined
+  curve: Curve, // coefficients a and b of the elliptic curve
+  base: ECPoint, // specifies the base point P on the elliptic curve
+  order: INTEGER, // the order n of the base point
+  cofactor: OPTIONAL(INTEGER),
+}) // The integer h = #E(Fq)/n
+
+const GostR3410Parameters = SEQUENCE({
+  publicKeyParamSet: OBJECT_IDENTIFIER,
+  digestParamSet: OBJECT_IDENTIFIER,
+  encryptionParamSet: OPTIONAL(OBJECT_IDENTIFIER),
+})
+
+const GostR3411Parameters = DEFAULT_NULL(OBJECT_IDENTIFIER, 'id-GostR3411-94-CryptoProParamSet')
+
+const ECDHParameters = CHOICE({
+  namedParameters: OBJECT_IDENTIFIER,
+  ecParameters: ECParameters,
+  implicitly: OPTIONAL(NULL),
+}, function (value) {
+  return typeof value === 'string' || value instanceof String ?
+    'namedParameters' : 'ecParameters'
+})
+
+const Algorithm = function (paramType, modifier) {
+  return ENCLOSURE(SEQUENCE({
+    algorithm: OBJECT_IDENTIFIER,
+    parameters: OPTIONAL(paramType),
+  }), modifier)
+}
+
+const AlgorithmIdentifier = (function () {
+
+  var DefaultAlgorithm = Algorithm(ANY),
+    Class = extend(ASN1Object, function (object) {
+      if (this instanceof Class) {Class.super.apply(this, arguments)} else {return DEFINE(object)}
+    }, {
+      encode: function (format) {
+        return new DefaultAlgorithm(this.object).encode(format)
+      },
+    }, {
+      decode: function (source) {
+        return new this(DefaultAlgorithm.decode(source).object)
+      },
+    })
+
+  var DEFINE = function (algorithmSet) {
+
+    return extend(ASN1Object, {
+      object: {
+        get: function () {
+          if (this.item) {return this.item.object}
+          return undefined
+        },
+        set: function (object) {
+          if (object) {
+            const ItemClass = algorithmSet[object.id]
+            if (!ItemClass) {throw new Error('Algorithm not supported')}
+            this.item = new ItemClass(object)
+          } else {delete this.item}
+        },
+      },
+      encode: function (format) {
+        return this.item.encode(format)
+      },
+    }, {
+      decode: function (source) {
+        // Decode PEM
+        if (typeof source === 'string') {source = PEM.decode(source, undefined, false)}
+        // Decode binary data
+        if (source instanceof CryptoOperationData) {source = BER.decode(source)}
+        const ItemClass = algorithmSet[names[source.object[0].object]]
+        if (ItemClass) {
+          const result = new this()
+          result.item = ItemClass.decode(source)
+          return result
+        } throw new Error('Algorithm not supported')
+      },
+    })
+  }
+
+  return Class
+})()
+
+const ECDHKeyAlgorithm = Algorithm(ECDHParameters, {
+  encode: function (value) {
+    let params
+    if (typeof value.namedCurve === 'string') {params = attributes['namedCurve'][value.namedCurve]} else {
+      params = {
+        version: 1,
+        fieldID: {
+          fieldType: 'id-prime-Field',
+          parameters: value.curve.p,
+        },
+        curve: {
+          a: value.curve.a,
+          b: value.curve.b,
+        },
+        base: {
+          x: value.curve.x,
+          y: value.curve.y,
+        },
+        order: value.curve.q,
+        cofactor: 1,
+      }
+    }
+    return {
+      algorithm: value.id,
+      parameters: params,
+    }
+  },
+  decode: function (value) {
+    let params = value.parameters,
+      result = algorithms[value.algorithm]
+    if (typeof params === 'string' || params instanceof String) {
+      result = expand(result, parameters[params])
+    } else if (typeof params === 'object') {
+      result = expand(result, {
+        curve: {
+          p: params.fieldID.parameters,
+          a: params.curve.a,
+          b: params.curve.b,
+          x: params.base.x,
+          y: params.base.y,
+          q: params.order,
+        },
+      })
+    } else {throw new DataError('Invalid key paramters')}
+    return result
+  },
+})
+
+const GostKeyAlgorithm = Algorithm(GostR3410Parameters, {
+  encode: function (value) {
+    const paramName = value.namedCurve ? 'namedCurve' : 'namedParam',
+      sBox = (value.name.indexOf('-94') >= 0 || value.name.indexOf('-2001') >= 0 ||
+                value.version === 1994 || value.version === 2001) ? value.sBox || 'D-A' :
+        (value.name.indexOf('-512') >= 0 || value.length === 512) ? 'D-512' : 'D-256'
+    return {
+      algorithm: value.id,
+      parameters: {
+        publicKeyParamSet: attributes[paramName][value[paramName]],
+        digestParamSet: attributes['sBox'][sBox],
+        encryptionParamSet: value.encParams && value.encParams.sBox ?
+          attributes['sBox'][value.encParams.sBox] : undefined,
+      },
+    }
+  },
+  decode: function (value) {
+    const params = value.parameters,
+      algorithm = expand(algorithms[value.algorithm],
+        parameters[params.publicKeyParamSet],
+        parameters[params.digestParamSet])
+    if (params.encryptionParamSet) {algorithm.encParams = parameters[params.encryptionParamSet]}
+    return algorithm
+  },
+})
+
+const AlgorithmWithNoParam = Algorithm(ANY, {
+  encode: function (value) {
+    return { algorithm: value.id }
+  },
+  decode: function (value) {
+    return algorithms[value.algorithm]
+  },
+})
+
+const AlgorithmWithNullParam = Algorithm(NULL, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: null,
+    }
+  },
+  decode: function (value) {
+    return algorithms[value.algorithm]
+  },
+})
+
+const Gost341194DigestAlgorithm = Algorithm(GostR3411Parameters, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: attributes['sBox'][value.sBox || (value.hash && value.hash.sBox) || 'D-A'],
+    }
+  },
+  decode: function (value) {
+    let algorithm = expand(algorithms[value.algorithm]),
+      parameter = parameters[value.parameters]
+    if (algorithm.hash) {algorithm.hash = expand(algorithm.hash, parameter)} else {algorithm = expand(algorithm, parameter)}
+    return algorithm
+  },
+})
+
+const KeyAlgorithmIdentifier = AlgorithmIdentifier({
+  ecdsa: ECDHKeyAlgorithm,
+  noSignature: AlgorithmWithNullParam,
+  rsaEncryption: AlgorithmWithNullParam,
+  'id-sc-gostR3410-2001': ECDHKeyAlgorithm,
+  'id-GostR3410-2001': GostKeyAlgorithm,
+  'id-GostR3410-94': GostKeyAlgorithm,
+  'id-GostR3410-2001DH': GostKeyAlgorithm,
+  'id-GostR3410-94DH': GostKeyAlgorithm,
+  'id-tc26-gost3410-12-256': GostKeyAlgorithm,
+  'id-tc26-gost3410-12-512': GostKeyAlgorithm,
+  'id-tc26-agreement-gost-3410-12-256': GostKeyAlgorithm,
+  'id-tc26-agreement-gost-3410-12-512': GostKeyAlgorithm,
+  'id-sc-gost28147-gfb': AlgorithmWithNoParam,
+  'id-Gost28147-89': AlgorithmWithNoParam,
+})
+
+const SignatureAlgorithmIdentifier = AlgorithmIdentifier({
+  noSignature: AlgorithmWithNullParam,
+  rsaEncryption: AlgorithmWithNullParam,
+  sha1withRSAEncryption: AlgorithmWithNullParam,
+  sha256withRSAEncryption: AlgorithmWithNullParam,
+  sha384withRSAEncryption: AlgorithmWithNullParam,
+  sha512withRSAEncryption: AlgorithmWithNullParam,
+  'ecdsa': AlgorithmWithNoParam,
+  'ecdsa-with-SHA1': AlgorithmWithNoParam,
+  'ecdsa-with-SHA256': AlgorithmWithNoParam,
+  'ecdsa-with-SHA384': AlgorithmWithNoParam,
+  'ecdsa-with-SHA512': AlgorithmWithNoParam,
+  'id-GostR3410-94': AlgorithmWithNullParam,
+  'id-GostR3410-2001': AlgorithmWithNullParam,
+  'id-GostR3411-94-with-GostR3410-2001': AlgorithmWithNoParam,
+  'id-GostR3411-94-with-GostR3410-94': AlgorithmWithNoParam,
+  'id-tc26-gost3410-12-256': AlgorithmWithNullParam,
+  'id-tc26-gost3410-12-512': AlgorithmWithNullParam,
+  'id-tc26-signwithdigest-gost3410-12-94': AlgorithmWithNoParam,
+  'id-tc26-signwithdigest-gost3410-12-256': AlgorithmWithNoParam,
+  'id-tc26-signwithdigest-gost3410-12-512': AlgorithmWithNoParam,
+  'id-sc-gostR3410-94': AlgorithmWithNullParam,
+  'id-sc-gostR3410-2001': AlgorithmWithNullParam,
+  'id-sc-gostR3411-94-with-gostR3410-94': AlgorithmWithNullParam,
+  'id-sc-gostR3411-94-with-gostR3410-2001': AlgorithmWithNullParam,
+})
+
+const DigestAlgorithmIdentifier = AlgorithmIdentifier({
+  sha1: AlgorithmWithNoParam,
+  sha256: AlgorithmWithNullParam,
+  sha384: AlgorithmWithNullParam,
+  sha512: AlgorithmWithNullParam,
+  'id-GostR3411-94': Gost341194DigestAlgorithm,
+  'id-tc26-gost3411-94': Gost341194DigestAlgorithm,
+  'id-tc26-gost3411-12-256': AlgorithmWithNullParam,
+  'id-tc26-gost3411-12-512': AlgorithmWithNullParam,
+  'id-sc-gostR3411-94': AlgorithmWithNoParam,
+})
+
+const Gost2814789Key = OCTET_STRING //(SIZE (32))
+
+const Gost2814789MAC = OCTET_STRING // (SIZE (1..4))
+
+const Gost2814789ParamSet = OBJECT_IDENTIFIER
+
+const Gost2814789IV = OCTET_STRING // (SIZE (8))
+
+const Gost2814789Parameters = SEQUENCE({
+  iv: Gost2814789IV,
+  encryptionParamSet: Gost2814789ParamSet,
+})
+
+const Gost2814789KeyWrapParameters = SEQUENCE({
+  encryptionParamSet: Gost2814789ParamSet,
+  ukm: OPTIONAL(OCTET_STRING),
+}) // (SIZE (8)) must be absent in key agreement
+
+const Gost2814789Algorithm = Algorithm(Gost2814789Parameters, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: {
+        iv: value.iv,
+        encryptionParamSet: attributes['sBox'][value.sBox || 'E-A'],
+      },
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm],
+      parameters[value.parameters.encryptionParamSet])
+    algorithm.iv = value.parameters.iv
+    return algorithm
+  },
+})
+
+const SCGostAlgorithm = Algorithm(Gost2814789IV, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: value.iv,
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.iv = value.parameters || new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
+    return algorithm
+  },
+})
+
+const GostKeyWrapAlgorithm = Algorithm(Gost2814789KeyWrapParameters, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: {
+        encryptionParamSet: attributes['sBox'][value.sBox || 'E-A'],
+        ukm: value.ukm,
+      },
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm],
+      parameters[value.parameters.encryptionParamSet])
+    if (value.parameters.ukm) {algorithm.ukm = value.parameters.ukm}
+    return algorithm
+  },
+})
+
+const KeyWrapAlgorithmIdentifier = AlgorithmIdentifier({
+  'id-Gost28147-89-None-KeyWrap': GostKeyWrapAlgorithm,
+  'id-Gost28147-89-CryptoPro-KeyWrap': GostKeyWrapAlgorithm,
+})
+
+const GostKeyAgreementAlgorithm = Algorithm(KeyWrapAlgorithmIdentifier, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: value.wrapping,
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.wrapping = value.parameters
+    return algorithm
+  },
+})
+
+const BaseEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
+  'id-sc-gost28147-gfb': SCGostAlgorithm,
+  'id-Gost28147-89': Gost2814789Algorithm,
+})
+
+const MessageAuthenticationCodeAlgorithm = AlgorithmIdentifier({
+  'id-Gost28147-89-MAC': Gost2814789Parameters,
+  'id-HMACGostR3411-94': Gost341194DigestAlgorithm,
+  'id-tc26-hmac-gost-3411-12-256': Gost341194DigestAlgorithm,
+  'id-tc26-hmac-gost-3411-12-512': Gost341194DigestAlgorithm,
+  'hmacWithSHA1': AlgorithmWithNoParam,
+  'hmacWithSHA224': AlgorithmWithNoParam,
+  'hmacWithSHA256': AlgorithmWithNoParam,
+  'hmacWithSHA384': AlgorithmWithNoParam,
+  'hmacWithSHA512': AlgorithmWithNoParam,
+  'id-sc-gost28147-mac': AlgorithmWithNoParam,
+  'id-sc-hmacWithGostR3411': AlgorithmWithNoParam,
+})
+
+// rfc2898 PKCS #5: Password-Based Cryptography Specification
+// PBKDF2
+const PBKDF2params = SEQUENCE({
+  salt: CHOICE({
+    specified: OCTET_STRING,
+    otherSource: AlgorithmIdentifier,
+  }, function (value) {
+    return isBinary(value) ? 'specified' : 'otherSource'
+  }),
+  iterationCount: INTEGER,
+  keyLength: OPTIONAL(INTEGER),
+  prf: MessageAuthenticationCodeAlgorithm,
+})
+
+const PBKDF2Algorithm = Algorithm(PBKDF2params, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: {
+        salt: value.salt,
+        iterationCount: value.iterations,
+        prf: value.hmac,
+      },
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.salt = value.parameters.salt
+    algorithm.iterations = value.parameters.iterationCount
+    algorithm.hmac = value.parameters.prf
+    algorithm.hash = algorithm.hmac.hash
+    return algorithm
+  },
+})
+
+const KeyDerivationAlgorithmIdentifier = AlgorithmIdentifier({
+  'PBKDF2': PBKDF2Algorithm,
+})
+
+const PBEParameter = SEQUENCE({
+  salt: OCTET_STRING,
+  iterationCount: INTEGER,
+})
+
+const PBES1Algorithm = Algorithm(PBEParameter, {
+  paramType: PBEParameter,
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: {
+        salt: value.derivation.salt,
+        iterationCount: value.derivation.iterations,
+      },
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.derivation = expand(algorithm.derivation,
+      { salt: value.parameters.salt, iterations: value.parameters.iterationCount })
+    return algorithm
+  },
+})
+
+// PBES2
+const PBES2params = SEQUENCE({
+  keyDerivationFunc: KeyDerivationAlgorithmIdentifier, // {{PBES2-KDFs}},
+  encryptionScheme: BaseEncryptionAlgorithmIdentifier,
+}) // {{PBES2-Encs}}
+
+const PBES2Algorithm = Algorithm(PBES2params, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: {
+        keyDerivationFunc: value.derivation,
+        encryptionScheme: value.encryption,
+      },
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.derivation = value.parameters.keyDerivationFunc
+    algorithm.encryption = value.parameters.encryptionScheme
+    return algorithm
+  },
+})
+
+const PasswordEncryptionAlgorithmIndentifier = AlgorithmIdentifier({
+  // PBES1
+  'pbeWithSHAAndAES128-CBC': PBES1Algorithm,
+  'pbeWithSHAAndAES192-CBC': PBES1Algorithm,
+  'pbeWithSHAAndAES256-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES128-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES192-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES256-CBC': PBES1Algorithm,
+  'id-sc-pbeWithGost3411AndGost28147': PBES1Algorithm,
+  'id-sc-pbeWithGost3411AndGost28147CFB': PBES1Algorithm,
+  // PKCS12 PBES1
+  'pbeWithSHAAnd3-KeyTripleDES-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd2-KeyTripleDES-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd128BitRC2-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd40BitRC2-CBC': PBES1Algorithm,
+  'pbeUnknownGost': PBES1Algorithm,
+  // PBES2
+  'PBES2': PBES2Algorithm,
+})
+
+const KeyEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
+  ecdsa: ECDHKeyAlgorithm,
+  rsaEncryption: AlgorithmWithNullParam,
+  // Base encryption
+  'id-sc-gost28147-gfb': SCGostAlgorithm,
+  'id-Gost28147-89': Gost2814789Algorithm,
+  // Key transport algorithms
+  'id-sc-gostR3410-2001': ECDHKeyAlgorithm,
+  'id-GostR3410-2001': GostKeyAlgorithm,
+  'id-GostR3410-94': GostKeyAlgorithm,
+  'id-tc26-gost3410-12-256': GostKeyAlgorithm,
+  'id-tc26-gost3410-12-512': GostKeyAlgorithm,
+  // Key agreement algorithms
+  'id-GostR3410-94-CryptoPro-ESDH': GostKeyAgreementAlgorithm,
+  'id-GostR3410-2001-CryptoPro-ESDH': GostKeyAgreementAlgorithm,
+  'id-tc26-agreement-gost-3410-12-256': GostKeyAgreementAlgorithm,
+  'id-tc26-agreement-gost-3410-12-512': GostKeyAgreementAlgorithm,
+  'id-sc-r3410-ESDH-r3411kdf': AlgorithmWithNullParam,
+  // Key encryption key algorithms
+  'id-Gost28147-89-None-KeyWrap': GostKeyWrapAlgorithm, // Add ukm to algorithm
+  'id-Gost28147-89-CryptoPro-KeyWrap': GostKeyWrapAlgorithm,
+  'id-sc-cmsGostWrap': AlgorithmWithNoParam, // SC don't use ukm
+  'id-sc-cmsGost28147Wrap': AlgorithmWithNoParam,
+  // Password based encryption
+  'pbeWithSHAAndAES128-CBC': PBES1Algorithm,
+  'pbeWithSHAAndAES192-CBC': PBES1Algorithm,
+  'pbeWithSHAAndAES256-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES128-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES192-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES256-CBC': PBES1Algorithm,
+  'id-sc-pbeWithGost3411AndGost28147': PBES1Algorithm,
+  'id-sc-pbeWithGost3411AndGost28147CFB': PBES1Algorithm,
+  // PKCS12 PBES1
+  'pbeWithSHAAnd3-KeyTripleDES-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd2-KeyTripleDES-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd128BitRC2-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd40BitRC2-CBC': PBES1Algorithm,
+  'pbeUnknownGost': PBES1Algorithm,
+  // PBES2
+  'PBES2': PBES2Algorithm,
+})
+
+const PBMAC1params = SEQUENCE({
+  keyDerivationFunc: KeyDerivationAlgorithmIdentifier, // {{PBMAC1-KDFs}},
+  messageAuthScheme: MessageAuthenticationCodeAlgorithm,
+}) // {{PBMAC1-MACs}}
+
+const PasswordMACAlgorithm = Algorithm(PBMAC1params, {
+  encode: function (value) {
+    return {
+      algorithm: value.id,
+      parameters: {
+        keyDerivationFunc: value.derivation,
+        messageAuthScheme: value.hmac,
+      },
+    }
+  },
+  decode: function (value) {
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.derivation = value.parameters.keyDerivationFunc
+    algorithm.hmac = value.parameters.messageAuthScheme
+    return algorithm
+  },
+})
+
+const PasswordMACAlgorithmIdentifier = AlgorithmIdentifier({
+  'PBMAC1': PasswordMACAlgorithm,
+})
+
+const ContentEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
+  // Base encryption
+  'id-sc-gost28147-gfb': SCGostAlgorithm,
+  'id-Gost28147-89': Gost2814789Algorithm,
+  // Password based encryption
+  'pbeWithSHAAndAES128-CBC': PBES1Algorithm,
+  'pbeWithSHAAndAES192-CBC': PBES1Algorithm,
+  'pbeWithSHAAndAES256-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES128-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES192-CBC': PBES1Algorithm,
+  'pbeWithSHA256AndAES256-CBC': PBES1Algorithm,
+  'id-sc-pbeWithGost3411AndGost28147': PBES1Algorithm,
+  'id-sc-pbeWithGost3411AndGost28147CFB': PBES1Algorithm,
+  // PKCS12 PBES1
+  'pbeWithSHAAnd3-KeyTripleDES-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd2-KeyTripleDES-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd128BitRC2-CBC': PBES1Algorithm,
+  'pbeWithSHAAnd40BitRC2-CBC': PBES1Algorithm,
+  'pbeUnknownGost': PBES1Algorithm,
+  // PBES2
+  'PBES2': PBES2Algorithm,
+})
+
+// </editor-fold>
+
+/*
+ * Public Key Info
+ *
+ * http://tools.ietf.org/html/rfc5280
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const KeyData = ENCLOSURE
+
+const DHPublicKey = KeyData(BIT_STRING(ENCAPSULATES(INTEGER)), {
+  encode: function (value) {
+    return Int16.encode(swapBytes(value))
+  },
+  decode: function (value) {
+    return swapBytes(Int16.decode(value))
+  },
+})
+
+const ECDHPublicKey = KeyData(BIT_STRING(ENCAPSULATES(OCTET_STRING)), {
+  encode: function (value) {
+    const r = new Uint8Array(value.byteLength + 1),
+      d = swapBytes(value),
+      len = value.byteLength / 2
+    r[0] = 0x04 // type hex;
+    r.set(new Uint8Array(d, len, len), 1) // x
+    r.set(new Uint8Array(d, 0, len), len + 1) // y
+    return r.buffer
+  },
+  decode: function (value) {
+    assert((value.byteLength & 1) === 0)
+    const d = new Uint8Array(value.byteLength - 1),
+      len = d.byteLength / 2
+    d.set(new Uint8Array(value, len + 1, len), 0) // y
+    d.set(new Uint8Array(value, 1, len), len) // x
+    return swapBytes(d)
+  },
+})
+
+const GostR3410PublicKey = BIT_STRING(ENCAPSULATES(OCTET_STRING))
+
+/**
+ * Subject Public Key Info Syntax X.509
+ * <pre>
+ *  SubjectPublicKeyInfo  ::=  SEQUENCE  {
+ *      algorithm            AlgorithmIdentifier,
+ *      subjectPublicKey     BIT STRING  }
+ *
+ *  AlgorithmIdentifier  ::=  SEQUENCE  {
+ *      algorithm               OBJECT IDENTIFIER,
+ *      parameters              ANY DEFINED BY algorithm OPTIONAL  }
+ -- contains a value of the type
+ -- registered for use with the
+ -- algorithm object identifier value
+ * </pre>
+ * RFC 5280 references {@link http://tools.ietf.org/html/rfc5280}
+ * @class GostASN1.SubjectPublicKeyInfo
+ * @extends GostASN1.Sequence
+ * @property {AlgorithmIdentifier} algorithm Identifies the public-key algorithm.
+ * @property {CryptoOperationData} subjectPublicKey An binary data whose contents are the value of the public key
+ */
+const SubjectPublicKeyInfo = SEQUENCE({
+  algorithm: KeyAlgorithmIdentifier,
+  subjectPublicKey: BIT_STRING,
+}, 'PUBLIC KEY')
+
+const GostSubjectPublicKeyInfo = (function (PKTypes) {
+
+  /**
+     * Coding methods for {@link Algorithm} and {@link GostASN1.SubjectPublicKeyInfo}
+     * Supported types for GOST algorithms:
+     * <pre>
+     *  {
+     *      'id-sc-gostR3410-2001': ECDHPublicKey,
+     *      'id-sc-gostR3410-94': DHPublicKey,
+     *      'id-GostR3410-2001': GostR3410PublicKey,
+     *      'id-GostR3410-94': GostR3410PublicKey,
+     *      'id-tc26-gost3410-12-256': GostR3410PublicKey,
+     *      'id-tc26-gost3410-12-512': GostR3410PublicKey
+     *  }
+     * </pre>
+     *
+     * @class GostASN1.GostSubjectPublicKeyInfo
+     * @extends GostASN1.SubjectPublicKeyInfo
+     * @extends Key
+     */
+  return ENCLOSURE(ATTRIBUTE({
+    algorithm: KeyAlgorithmIdentifier,
+    subjectPublicKey: ANY,
+  },
+  'algorithm', 'subjectPublicKey')(function (algorithm) {
+    return PKTypes[algorithm.id]
+  }), {
+    encode: function (value) {
+      return {
+        algorithm: value.algorithm,
+        subjectPublicKey: value.buffer,
+      }
+    },
+    decode: function (value) {
+      return {
+        algorithm: value.algorithm,
+        type: 'public',
+        extractable: true,
+        usages: ['verify', 'deriveKey', 'deriveBits'],
+        buffer: value.subjectPublicKey,
+      }
+    },
+  })
+})({
+  'id-sc-gostR3410-2001': ECDHPublicKey,
+  'id-sc-gostR3410-94': DHPublicKey,
+  'id-GostR3410-2001': GostR3410PublicKey,
+  'id-GostR3410-94': GostR3410PublicKey,
+  'id-tc26-gost3410-12-256': GostR3410PublicKey,
+  'id-tc26-gost3410-12-512': GostR3410PublicKey,
+})
+// </editor-fold>
+
+/*
+ * Private Key Info PKCS#8
+ *
+ * http://tools.ietf.org/html/rfc5208
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const PrivateKey = OCTET_STRING
+
+const DHPrivateKey = KeyData(PrivateKey(ENCAPSULATES(INTEGER)), {
+  encode: function (value) { // for SignalCom INTEGER d
+    return SInt.encode(value, true)
+  },
+  decode: function (value) {
+    return SInt.decode(value, true)
+  },
+})
+
+const GostR3410KeyValueMask = OCTET_STRING
+
+const GostR3410KeyValueInfo = SEQUENCE({
+  keyValueMask: GostR3410KeyValueMask,
+  keyValyePublicKey: OCTET_STRING,
+})
+
+const GostR3410PrivateKey = CHOICE({
+  privateKey: PrivateKey(ENCAPSULATES(CHOICE({
+    keyValueMask: GostR3410KeyValueMask,
+    keyValueInfo: GostR3410KeyValueInfo,
+  }, function (value) {
+    if (isBinary(value)) {return 'keyValueMask'}
+    return 'keyValueInfo'
+  }))),
+  keyValueMask: GostR3410KeyValueMask,
+}, function (value) {
+  return value.enclosed ? 'keyValueMask' : 'privateKey'
+})
+
+const GostWrappedPrivateKey = (function (PKTypes) {
+
+  /**
+     * Gost Wrapped Private Key for SignalCom key container
+     *
+     * @class GostASN1.GostWrappedPrivateKey
+     * @extends GostASN1.PrivateKeyInfo
+     */
+  return ATTRIBUTE({
+    version: Version,
+    privateKeyAlgorithm: KeyAlgorithmIdentifier,
+    privateKeyWrapped: KeyData(PrivateKey(ENCAPSULATES(SEQUENCE({
+      keyData: INTEGER,
+      keyMac: INTEGER,
+    }))), {
+      encode: function (value) {
+        const size = value.byteLength - 4
+        return {
+          keyData: SInt.encode(new Uint8Array(value, 0, size)),
+          keyMac: SInt.encode(new Uint8Array(value, size, 4)),
+        }
+      },
+      decode: function (value) {
+        const data = SInt.decode(value.keyData),
+          mac = SInt.decode(value.keyMac),
+          result = new Uint8Array(data.byteLength + mac.byteLength)
+        result.set(new Uint8Array(data))
+        result.set(new Uint8Array(mac), data.byteLength)
+        return result
+      },
+    }),
+    attributes: ANY,
+  }, 'privateKeyAlgorithm', 'attributes')(function (algorithm) {
+    return OPTIONAL(CTX(0, IMPLICIT(Attributes({
+      'id-sc-gostR3410-2001-publicKey': SET_OF_SINGLE(PKTypes[algorithm.id]),
+    }))))
+  })
+})({
+  // Signature keys
+  'id-sc-gostR3410-2001': ECDHPublicKey,
+  'id-sc-gostR3410-94': DHPublicKey,
+  'id-GostR3410-2001': GostR3410PublicKey,
+  'id-GostR3410-94': GostR3410PublicKey,
+  'id-GostR3410-2001DH': GostR3410PublicKey,
+  'id-GostR3410-94DH': GostR3410PublicKey,
+  'id-tc26-gost3410-12-256': GostR3410PublicKey,
+  'id-tc26-gost3410-12-512': GostR3410PublicKey,
+  'id-tc26-agreement-gost-3410-12-256': GostR3410PublicKey,
+  'id-tc26-agreement-gost-3410-12-512': GostR3410PublicKey,
+})
+
+/**
+ * Private-Key Information Syntax PKSC#8
+ * <pre>
+ *  -- Private-key information syntax
+ *
+ *  PrivateKeyInfo ::= SEQUENCE {
+ *      version Version,
+ *      privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
+ *      privateKey PrivateKey,
+ *      attributes [0] Attributes OPTIONAL }
+ *
+ *  Version ::= INTEGER {v1(0)} (v1,...)
+ *
+ *  PrivateKey ::= OCTET STRING
+ *
+ *  Attributes ::= SET OF Attribute
+ * </pre>
+ * RFC 5208 references {@link http://tools.ietf.org/html/rfc5208}
+ * @class GostASN1.PrivateKeyInfo
+ * @extends GostASN1.Sequence
+ * @property {number} version The syntax version number. Should be 0
+ * @property {AlgorithmIndentifier} privateKeyAlgorithm Identifies the private-key algorithm
+ * @property {CryptoOperationData} privateKey Is an binary data whose contents are the value of the private key.
+ * @property {GostASN1.Attributes} attributes A set of attributes
+ */
+const PrivateKeyInfo = SEQUENCE({
+  version: Version,
+  privateKeyAlgorithm: KeyAlgorithmIdentifier,
+  privateKey: PrivateKey,
+  attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes))),
+}, 'PRIVATE KEY')
+
+const PrivateKeyAlgorithmIdentifier = KeyAlgorithmIdentifier
+
+const PublicKey = BIT_STRING
+
+const OneAsymmetricKey = SEQUENCE({
+  version: Version,
+  privateKeyAlgorithm: PrivateKeyAlgorithmIdentifier,
+  privateKey: PrivateKey,
+  attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes))),
+  publicKey: OPTIONAL(CTX(1, IMPLICIT(PublicKey))),
+})
+
+const AsymmetricKeyPackage = SEQUENCE_OF(OneAsymmetricKey)
+
+const GostPrivateKeyInfo = (function (PKTypes) {
+
+  /**
+     * Coding methods for {@link Algorithm} and {@link GostASN1.PrivateKeyInfo}
+     * Supported types for GOST algorithms:
+     * <pre>
+     *  {
+     *      'id-sc-gostR3410-2001': DHPrivateKey,
+     *      'id-sc-gostR3410-94': DHPrivateKey,
+     *      'id-GostR3410-2001': GostR3410PrivateKey,
+     *      'id-GostR3410-94': GostR3410PrivateKey,
+     *      'id-tc26-gost3410-12-256': GostR3410PrivateKey,
+     *      'id-tc26-gost3410-12-512': GostR3410PrivateKey
+     *  }
+     * </pre>
+     *
+     * @class GostASN1.GostPrivateKeyInfo
+     * @extends GostASN1.PrivateKeyInfo
+     * @extends Key
+     */
+  return ENCLOSURE(ATTRIBUTE({
+    version: Version,
+    privateKeyAlgorithm: KeyAlgorithmIdentifier,
+    privateKey: ANY,
+    attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes))),
+  },
+  'privateKeyAlgorithm', 'privateKey')(function (algorithm) {
+    return PKTypes[algorithm.id]
+  }), {
+    encode: function (value) {
+      return {
+        version: 0,
+        privateKeyAlgorithm: value.algorithm,
+        privateKey: value.buffer,
+      }
+    },
+    decode: function (value) {
+      return {
+        algorithm: value.privateKeyAlgorithm,
+        type: 'private',
+        extractable: true,
+        usages: ['sign', 'deriveKey', 'deriveBits'],
+        buffer: isBinary(value.privateKey) ? value.privateKey :
+          value.privateKey.keyValueMask,
+      }
+    },
+  })
+})({
+  // Signature keys
+  'id-sc-gostR3410-2001': DHPrivateKey,
+  'id-sc-gostR3410-94': DHPrivateKey,
+  'id-GostR3410-2001': GostR3410PrivateKey,
+  'id-GostR3410-94': GostR3410PrivateKey,
+  'id-GostR3410-2001DH': GostR3410PrivateKey,
+  'id-GostR3410-94DH': GostR3410PrivateKey,
+  'id-tc26-gost3410-12-256': GostR3410PrivateKey,
+  'id-tc26-gost3410-12-512': GostR3410PrivateKey,
+  'id-tc26-agreement-gost-3410-12-256': GostR3410PrivateKey,
+  'id-tc26-agreement-gost-3410-12-512': GostR3410PrivateKey,
+})
+
+const KeyEncryptedData = OCTET_STRING
+/**
+ * Encrypted Private-Key Information Syntax
+ * <pre>
+ *  -- Encrypted private-key information syntax
+ *
+ *  EncryptedPrivateKeyInfo ::= SEQUENCE {
+ *      encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},
+ *      encryptedData KeyEncryptedData
+ *  }
+ *
+ *  KeyEncryptedData ::= OCTET STRING
+ *
+ *  PrivateKeyAlgorithms ALGORITHM-IDENTIFIER ::= {
+ *      ... -- For local profiles
+ *  }
+ *
+ *  KeyEncryptionAlgorithms ALGORITHM-IDENTIFIER ::= {
+ *      ... -- For local profiles
+ *  }
+ * </pre>
+ * RFC 5208 references {@link http://tools.ietf.org/html/rfc5208}
+ * @class GostASN1.EncryptedPrivateKeyInfo
+ * @extends GostASN1.Sequence
+ * @property {AlgorithmIdentifier} encryptionAlgorithm Identifies key encryption algorithm
+ * @property {CryptoOperationData} encryptedData Encrypted {@link GostASN1.PrivateKeyInfo}
+ */
+const EncryptedPrivateKeyInfo = SEQUENCE({
+  encryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
+  encryptedData: KeyEncryptedData,
+}, 'ENCRYPTED PRIVATE KEY')
+// </editor-fold>
+
+/*
+ * Certificate Extensions
+ *
+ * http://tools.ietf.org/html/rfc5280
+ *
+ */ // <editor-fold defaultstate="collapsed">
+const UniqueIdentifier = BIT_STRING
+
+const CertificateSerialNumber = INTEGER
+
+const BasicConstraints = SEQUENCE({
+  cA: DEFAULT(BOOLEAN, false),
+  pathLenConstraint: OPTIONAL(INTEGER),
+})
+
+const KeyUsage = BIT_STRING({
+  digitalSignature: 0,
+  nonRepudiation: 1,
+  keyEncipherment: 2,
+  dataEncipherment: 3,
+  keyAgreement: 4,
+  keyCertSign: 5,
+  cRLSign: 6,
+  encipherOnly: 7,
+  decipherOnly: 8,
+})
+const KeyPurposeId = OBJECT_IDENTIFIER,
+  ExtKeyUsageSyntax = SEQUENCE_OF(KeyPurposeId)
+
+const KeyIdentifier = OCTET_STRING
+
+const OtherName = SEQUENCE({
+  type: OBJECT_IDENTIFIER,
+  value: CTX(0, EXPLICIT(ANY)),
+})
+
+const EDIPartyName = SEQUENCE({
+  nameAssigner: OPTIONAL(CTX(0, IMPLICIT(DirectoryString))),
+  partyName: OPTIONAL(CTX(1, IMPLICIT(DirectoryString))),
+})
+
+const ORAddress = SEQUENCE({})
+
+const GeneralName = CHOICE({
+  otherName: CTX(0, IMPLICIT(OtherName)),
+  rfc822Name: CTX(1, IMPLICIT(DirectoryString)),
+  dNSName: CTX(2, IMPLICIT(DirectoryString)),
+  x400Address: CTX(3, IMPLICIT(ORAddress)),
+  directoryName: CTX(4, EXPLICIT(Name)), // Name is CHOICE(RDNSequence)
+  ediPartyName: CTX(5, IMPLICIT(EDIPartyName)),
+  uniformResourceIdentifier: CTX(6, IMPLICIT(DirectoryString)),
+  iPAddress: CTX(7, IMPLICIT(OCTET_STRING)),
+  registeredID: CTX(8, IMPLICIT(OBJECT_IDENTIFIER)),
+}, function (value) {
+  return typeof value === 'string' || value instanceof String ?
+    (value.indexOf('@') >= 0 ? 'rfc822Name' : 'dNSName') :
+    isBinary(value) ? 'iPAddress' : 'directoryName'
+})
+
+const GeneralNames = SEQUENCE_OF(GeneralName)
+
+const AuthorityKeyIdentifier = SEQUENCE({
+  keyIdentifier: OPTIONAL(CTX(0, IMPLICIT(KeyIdentifier))),
+  authorityCertIssuer: OPTIONAL(CTX(1, IMPLICIT(GeneralNames))),
+  authorityCertSerialNumber: OPTIONAL(CTX(2, IMPLICIT(CertificateSerialNumber))),
+})
+
+const PrivateKeyUsagePeriod = SEQUENCE({
+  notBefore: OPTIONAL(CTX(0, IMPLICIT(GeneralizedTime))),
+  notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime))),
+})
+
+const CertPolicyId = OBJECT_IDENTIFIER,
+  PolicyQualifierId = OBJECT_IDENTIFIER
+
+const PolicyQualifierInfo = SEQUENCE({
+  policyQualifierId: PolicyQualifierId,
+  qualifier: ANY,
+})
+
+const PolicyInformation = SEQUENCE({
+  policyIdentifier: CertPolicyId,
+  policyQualifiers: OPTIONAL(SEQUENCE_OF(PolicyQualifierInfo)),
+})
+
+const PolicyMapping = SEQUENCE({
+  issuerDomainPolicy: CertPolicyId,
+  subjectDomainPolicy: CertPolicyId,
+})
+
+const BaseDistance = INTEGER
+
+const GeneralSubtree = SEQUENCE({
+  base: GeneralName,
+  minimum: DEFAULT(CTX(0, IMPLICIT(BaseDistance)), 0),
+  maximum: OPTIONAL(CTX(1, IMPLICIT(BaseDistance))),
+})
+
+const GeneralSubtrees = SEQUENCE_OF(GeneralSubtree)
+
+const NameConstraints = SEQUENCE({
+  permittedSubtrees: OPTIONAL(CTX(0, IMPLICIT(GeneralSubtrees))),
+  excludedSubtrees: OPTIONAL(CTX(1, IMPLICIT(GeneralSubtrees))),
+})
+
+const SkipCerts = INTEGER
+
+const PolicyConstraints = SEQUENCE({
+  requireExplicitPolicy: OPTIONAL(CTX(0, IMPLICIT(SkipCerts))),
+  inhibitPolicyMapping: OPTIONAL(CTX(1, IMPLICIT(SkipCerts))),
+})
+
+const ReasonFlags = BIT_STRING({
+  unused: 0,
+  keyCompromise: 1,
+  cACompromise: 2,
+  affiliationChanged: 3,
+  superseded: 4,
+  cessationOfOperation: 5,
+  certificateHold: 6,
+  privilegeWithdrawn: 7,
+  aACompromise: 8,
+})
+
+const DistributionPointName = CHOICE({
+  fullName: CTX(0, IMPLICIT(GeneralNames)),
+  nameRelativeToCRLIssuer: CTX(1, IMPLICIT(RelativeDistinguishedName)),
+}, function (value) {
+  return value instanceof Array ? 'fullName' : 'nameRelativeToCRLIssuer'
+})
+
+const DistributionPoint = SEQUENCE({
+  distributionPoint: OPTIONAL(CTX(0, EXPLICIT(DistributionPointName))), // DistributionPointName CHOICE
+  reasons: OPTIONAL(CTX(1, IMPLICIT(ReasonFlags))),
+  cRLIssuer: OPTIONAL(CTX(2, IMPLICIT(GeneralNames))),
+})
+
+const CRLDistributionPoints = SEQUENCE_OF(DistributionPoint)
+
+const FreshestCRL = CRLDistributionPoints
+
+const AccessDescription = SEQUENCE({
+  accessMethod: OBJECT_IDENTIFIER,
+  accessLocation: GeneralName,
+})
+
+const Extension = function (typeSet, defaultCritical) {
+
+  const Attribute = ATTRIBUTE({
+    extnID: OBJECT_IDENTIFIER,
+    critical: DEFAULT(BOOLEAN, false),
+    extnValue: function (type) {
+      return OCTET_STRING(ENCAPSULATES(type))
+    },
+  }, 'extnID', 'extnValue')
+
+  var Class = extend(Attribute(typeSet), {
+    object: {
+      get: function () {
+        const value = this._get(Class.super, 'object')
+        if (value && typeof value.extnValue === 'object') {this.defineValue(value.extnValue)}
+        return value
+      },
+      set: function (object) {
+        this._set(Class.super, 'object', object)
+        // Define critical
+        if (object && object.extnValue) {
+          if (object.extnValue.critical !== undefined) {this.critical = object.extnValue.critical} else if (this.critical === undefined && defaultCritical) {this.critical = defaultCritical(this.extnID, object.extnValue)}
+        }
+      },
+    },
+    extnValue: {
+      get: function () {
+        // Get value property of object
+        const value = this._get(Class.super, 'extnValue')
+        if (typeof value === 'object') {this.defineValue(value)}
+        return value
+      },
+      set: function (object) {
+        // Set value property of object
+        this._set(Class.super, 'extnValue', object)
+        // Define critical
+        if (object) {
+          if (object.critical !== undefined) {this.critical = object.critical} else if (this.critical === undefined && defaultCritical) {this.critical = defaultCritical(this.extnID, object)}
+        }
+      },
+    },
+    defineValue: function (value) {
+      if (typeof value === 'object') {
+        if (!getOwnPropertyDescriptor(value, 'critical')) {
+          const self = this
+          defineProperty(value, 'critical', {
+            get: function () {
+              return self.critical
+            },
+            set: function (value) {
+              self.critical = value
+            },
+            enumerable: true,
+            configurable: false,
+          })
+        }
+      }
+    },
+  })
+  return Class
+}
+
+// http://base.garant.ru/70133464/#ixzz4KaOTGI1l
+const IssuerSignTool = SEQUENCE({
+  signTool: UTF8String,
+  cATool: UTF8String,
+  signToolCert: UTF8String,
+  cAToolCert: UTF8String,
+})
+
+/**
+ * Extensions is a base class for extension attributes of certificates, CRLs, requests and etc.
+ *
+ * @class GostASN1.Extensions
+ * @extends GostASN1.Set
+ */
+const Extensions = SEQUENCE_OF(Extension, {
+  typeName: 'extnID',
+  valueName: 'extnValue',
+})
+
+const CertExtensions = Extensions({
+  authorityKeyIdentifier: AuthorityKeyIdentifier,
+  subjectKeyIdentifier: KeyIdentifier,
+  keyUsage: KeyUsage,
+  privateKeyUsagePeriod: PrivateKeyUsagePeriod,
+  certificatePolicies: SEQUENCE_OF(PolicyInformation),
+  policyMappings: SEQUENCE_OF(PolicyMapping),
+  subjectAltName: GeneralNames,
+  issuerAltName: GeneralNames,
+  subjectDirectoryAttributes: AttributeSequence,
+  basicConstraints: BasicConstraints,
+  nameConstraints: NameConstraints,
+  policyConstraints: PolicyConstraints,
+  extKeyUsage: ExtKeyUsageSyntax,
+  cRLDistributionPoints: CRLDistributionPoints,
+  inhibitAnyPolicy: SkipCerts,
+  freshestCRL: FreshestCRL,
+  authorityInfoAccess: SEQUENCE_OF(AccessDescription),
+  subjectInfoAccess: SEQUENCE_OF(AccessDescription),
+  subjectSignTool: UTF8String,
+  issuerSignTool: IssuerSignTool,
+}, function (id, value) {
+  return id === 'keyUsage' ||
+        (id === 'basicConstraints' && value.pathLenConstraint === undefined)
+})
+// </editor-fold>
+
+/*
+ * Signature Values
+ *
+ * http://tools.ietf.org/html/rfc5280
+ * http://tools.ietf.org/html/rfc4491
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+/**
+ * Gost Signature encode signature values for different GOST signatures
+ * Support algorithms:
+ * <pre>
+ *  {
+ *      'id-GostR3410-94': GostR3410Signature,
+ *      'id-GostR3410-2001': GostR3410Signature,
+ *      'id-tc26-gost3410-12-256': GostR3410Signature,
+ *      'id-tc26-gost3410-12-512': GostR3410Signature,
+ *      'id-GostR3411-94-with-GostR3410-2001': GostR3410Signature,
+ *      'id-GostR3411-94-with-GostR3410-94': GostR3410Signature,
+ *      'id-tc26-signwithdigest-gost3410-12-94': GostR3410Signature,
+ *      'id-tc26-signwithdigest-gost3410-12-256': GostR3410Signature,
+ *      'id-tc26-signwithdigest-gost3410-12-512': GostR3410Signature,
+ *      'id-sc-gostR3410-94': ECDHSignature,
+ *      'id-sc-gostR3410-2001': ECDHSignature,
+ *      'id-sc-gostR3411-94-with-gostR3410-94': ECDHSignature,
+ *      'id-sc-gostR3411-94-with-gostR3410-2001': ECDHSignature
+ *  }
+ * </pre>
+ *
+ * @class GostASN1.GostSignature
+ * @extends GostASN1.Sequence
+ */
+
+// SignalCom signature
+const ECDHSignature = SEQUENCE({
+  r: INTEGER,
+  s: INTEGER,
+})
+
+const GostR3410Signature = ANY
+
+// Signature value (only need for CryptoPro
+//    var GostSignature = extend(CHOICE({
+//        ecdhSignature: ECDHSignature}, 'ecdhSignature'));
+const GostSignature = ECDHSignature
+
+// </editor-fold>
+
+/*
+ * Certificate
+ *
+ * http://tools.ietf.org/html/rfc5280
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+/**
+ * The sequence TBSCertificate contains information associated with the
+ * subject of the certificate and the CA who issued it.  Every
+ * TBSCertificate contains the names of the subject and issuer, a public
+ * key associated with the subject, a validity period, a version number,
+ * and a serial number; some MAY contain optional unique identifier
+ * fields.  The remainder of this section describes the syntax and
+ * semantics of these fields.  A TBSCertificate usually includes
+ * extensions.
+ * <pre>
+ *  TBSCertificate  ::=  SEQUENCE  {
+ *       version         [0]  EXPLICIT Version DEFAULT v1,
+ *       serialNumber         CertificateSerialNumber,
+ *       signature            AlgorithmIdentifier,
+ *       issuer               Name,
+ *       validity             Validity,
+ *       subject              Name,
+ *       subjectPublicKeyInfo SubjectPublicKeyInfo,
+ *       issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
+ *                            -- If present, version MUST be v2 or v3
+ *       subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
+ *                            -- If present, version MUST be v2 or v3
+ *       extensions      [3]  EXPLICIT Extensions OPTIONAL
+ *                            -- If present, version MUST be v3
+ *       }
+ *
+ *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
+ *
+ *  CertificateSerialNumber  ::=  INTEGER
+ *
+ *  Validity ::= SEQUENCE {
+ *       notBefore      Time,
+ *       notAfter       Time }
+ *
+ *  Time ::= CHOICE {
+ *       utcTime        UTCTime,
+ *       generalTime    GeneralizedTime }
+ *
+ *  UniqueIdentifier  ::=  BIT STRING
+ *
+ *  SubjectPublicKeyInfo  ::=  SEQUENCE  {
+ *       algorithm            AlgorithmIdentifier,
+ *       subjectPublicKey     BIT STRING  }
+ *
+ *  Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
+ *
+ *  Extension  ::=  SEQUENCE  {
+ *       extnID      OBJECT IDENTIFIER,
+ *       critical    BOOLEAN DEFAULT FALSE,
+ *       extnValue   OCTET STRING  }
+ * </pre>
+ * See {@link GostASN1.Certificate} and {@link GostASN1.SubjectPublicKeyInfo}<br><br>
+ * RFC 5280 references {@link http://tools.ietf.org/html/rfc5280}
+ *
+ * @class GostASN1.TBSCertificate
+ * @extends GostASN1.Sequence
+ * @extends GostASN1.Validity
+ * @property {number} version The version of the encoded certificate
+ * @property {(number|string)} serialNumber The serial number MUST be a positive integer assigned by the CA to each certificate.
+ * @property {AlgorithmIdentifier} signature The algorithm identifier for the algorithm used by the CA to sign the certificate.
+ * @property {GostASN1.Name} issuer The issuer field identifies the entity that has signed and issued the certificate.
+ * @property {GostASN1.Validity} validity The certificate validity period
+ * @property {GostASN1.Name} subject The subject field identifies the entity associated with the public key stored in the subject public key field.
+ * @property {GostASN1.SubjectPublicKeyInfo} subject The public key and identify the algorithm with which the key is used
+ * @property {CryptoOperationData} issuerUniqueID The issuer unique identifier
+ * @property {CryptoOperationData} subjectUniqueID The subject unique identifier
+ * @property {GostASN1.Extensions} extensions The extensions defined for X.509 v3 certificates
+ */
+const TBSCertificate = COMBINE(SEQUENCE({
+  version: CTX(0, EXPLICIT(Version)),
+  serialNumber: CertificateSerialNumber,
+  signature: SignatureAlgorithmIdentifier,
+  issuer: Name,
+  validity: Validity,
+  subject: Name,
+  subjectPublicKeyInfo: SubjectPublicKeyInfo,
+  issuerUniqueID: OPTIONAL(CTX(1, IMPLICIT(UniqueIdentifier))), // If present, version MUST be v2 or v3
+  subjectUniqueID: OPTIONAL(CTX(2, IMPLICIT(UniqueIdentifier))), // If present, version MUST be v2 or v3
+  extensions: OPTIONAL(CTX(3, EXPLICIT(CertExtensions))),
+})) // If present, version MUST be v3
+
+/**
+ * The X.509 v3 certificate basic syntax is as follows.  For signature
+ * calculation, the data that is to be signed is encoded using the ASN.1
+ * distinguished encoding rules (DER) [X.690].  ASN.1 DER encoding is a
+ * tag, length, value encoding system for each element.
+ * <pre>
+ *  Certificate  ::=  SEQUENCE  {
+ *       tbsCertificate       TBSCertificate,
+ *       signatureAlgorithm   AlgorithmIdentifier,
+ *       signatureValue       BIT STRING  }
+ * </pre>
+ * See {@link GostASN1.TBSCertificate}<br><br>
+ * RFC 5280 references {@link http://tools.ietf.org/html/rfc5280}
+ *
+ * @class GostASN1.Certificate
+ * @extends GostASN1.TBSCertificate
+ * @property {GostASN1.TBSCertificate} tbsCertificate The sequence TBSCertificate
+ * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
+ * @property {CryptoOperationData} signatureValue Signature value
+ */
+const Certificate = SEQUENCE({
+  tbsCertificate: TBSCertificate,
+  signatureAlgorithm: SignatureAlgorithmIdentifier,
+  signatureValue: BIT_STRING,
+}, 'CERTIFICATE')
+// </editor-fold>
+
+/*
+ * Certification Request
+ *
+ * http://tools.ietf.org/html/rfc2986
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const ExtensionRequest = CertExtensions
+
+const CRIAttributes = Attributes({
+  challengePassword: SET_OF_SINGLE(DirectoryString),
+  extensionRequest: SET_OF_SINGLE(ExtensionRequest),
+  msCertExtensions: SET_OF_SINGLE(CertExtensions),
+  extendedCertificateAttributes: SET_OF_SINGLE(Attributes),
+})
+
+/**
+ * Certification request information shall have ASN.1 type CertificationRequestInfo:
+ * <pre>
+ *  CertificationRequestInfo ::= SEQUENCE {
+ *       version       INTEGER { v1(0) } (v1,...),
+ *       subject       Name,
+ *       subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
+ *       attributes    [0] Attributes{{ CRIAttributes }}
+ *  }
+ *
+ *  SubjectPublicKeyInfo { ALGORITHM : IOSet} ::= SEQUENCE {
+ *       algorithm        AlgorithmIdentifier {{IOSet}},
+ *       subjectPublicKey BIT STRING
+ *  }
+ *
+ *  PKInfoAlgorithms ALGORITHM ::= {
+ *       ...  -- add any locally defined algorithms here -- }
+ *
+ *  Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
+ *
+ *  CRIAttributes  ATTRIBUTE  ::= {
+ *       ... -- add any locally defined attributes here -- }
+ *
+ *  Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
+ *       type   ATTRIBUTE.&id({IOSet}),
+ *       values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
+ *  }
+ * </pre>
+ * See {@link GostASN1.CertificationRequest} and {@link GostASN1.SubjectPublicKeyInfo}<br><br>
+ * RFC 2986 references {@link http://tools.ietf.org/html/rfc2986}
+ *
+ * @class GostASN1.CertificationRequestInfo
+ * @extends GostASN1.Sequence
+ * @property {number} version The version of the encoded request
+ * @property {GostASN1.Name} subject The subject field identifies the entity associated with the public key stored in the subject public key field.
+ * @property {GostASN1.SubjectPublicKeyInfo} subject The public key and identify the algorithm with which the key is used
+ * @property {GostASN1.Attributes} attributes The request attributes
+ */
+const CertificationRequestInfo = COMBINE(SEQUENCE({
+  version: INTEGER,
+  subject: Name,
+  subjectPublicKeyInfo: SubjectPublicKeyInfo,
+  attributes: CTX(0, IMPLICIT(CRIAttributes)),
+}))
+
+/**
+ * A certification request consists of three parts: "certification
+ * request information," a signature algorithm identifier, and a digital
+ * signature on the certification request information.  The
+ * certification request information consists of the entity's
+ * distinguished name, the entity's public key, and a set of attributes
+ * providing other information about the entity.
+ * <pre>
+ *  A certification request shall have ASN.1 type CertificationRequest:
+ *
+ *  CertificationRequest ::= SEQUENCE {
+ *       certificationRequestInfo CertificationRequestInfo,
+ *       signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
+ *       signature          BIT STRING
+ *  }
+ *
+ *  AlgorithmIdentifier {ALGORITHM:IOSet } ::= SEQUENCE {
+ *       algorithm          ALGORITHM.&id({IOSet}),
+ *       parameters         ALGORITHM.&Type({IOSet}{@algorithm}) OPTIONAL
+ *  }
+ *
+ *  SignatureAlgorithms ALGORITHM ::= {
+ *       ... -- add any locally defined algorithms here -- }
+ * </pre>
+ * See {@link GostASN1.CertificationRequestInfo}
+ * RFC 2986 references {@link http://tools.ietf.org/html/rfc2986}
+ *
+ * @class GostASN1.CertificationRequest
+ * @extends GostASN1.CertificationRequestInfo
+ * @property {GostASN1.CertificationRequestInfo} requestInfo Request information
+ * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
+ * @property {CryptoOperationData} signatureValue Signature value
+ */
+const CertificationRequest = SEQUENCE({
+  requestInfo: CertificationRequestInfo,
+  signatureAlgorithm: SignatureAlgorithmIdentifier,
+  signatureValue: BIT_STRING,
+}, 'CERTIFICATE REQUEST')
+// </editor-fold>
+
+/*
+ * Certificate Revocation List
+ *
+ * http://tools.ietf.org/html/rfc5280
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const CRLNumber = INTEGER
+
+const CRLReason = ENUMERATED({
+  unspecified: 0,
+  keyCompromise: 1,
+  cACompromise: 2,
+  affiliationChanged: 3,
+  superseded: 4,
+  cessationOfOperation: 5,
+  certificateHold: 6,
+  removeFromCRL: 8,
+  privilegeWithdrawn: 9,
+  aACompromise: 10,
+})
+
+const IssuingDistributionPoint = SEQUENCE({
+  distributionPoint: OPTIONAL(CTX(0, EXPLICIT(DistributionPointName))), // DistributionPointName is CHOICE
+  onlyContainsUserCerts: DEFAULT(CTX(1, IMPLICIT(BOOLEAN)), false),
+  onlyContainsCACerts: DEFAULT(CTX(2, IMPLICIT(BOOLEAN)), false),
+  onlySomeReasons: OPTIONAL(CTX(3, IMPLICIT(ReasonFlags))),
+  indirectCRL: DEFAULT(CTX(4, IMPLICIT(BOOLEAN)), false),
+  onlyContainsAttributeCerts: DEFAULT(CTX(5, IMPLICIT(BOOLEAN)), false),
+})
+
+const CLRExtensions = Extensions({
+  authorityKeyIdentifier: AuthorityKeyIdentifier,
+  issuerAltName: GeneralNames,
+  cRLNumber: CRLNumber,
+  deltaCRLIndicator: CRLNumber,
+  issuingDistributionPoint: IssuingDistributionPoint,
+  freshestCRL: FreshestCRL,
+}, function (id) {
+  return id === 'cRLNumber'
+})
+
+const CLREntryExtensions = Extensions({
+  cRLReason: CRLReason,
+  instructionCode: OBJECT_IDENTIFIER,
+  invalidityDate: GeneralizedTime,
+  certificateIssuer: GeneralNames,
+})
+
+/**
+ * This field is itself a sequence containing the name of the issuer,
+ * issue date, issue date of the next list, the optional list of revoked
+ * certificates, and optional CRL extensions.  When there are no revoked
+ * certificates, the revoked certificates list is absent.  When one or
+ * more certificates are revoked, each entry on the revoked certificate
+ * list is defined by a sequence of user certificate serial number,
+ * revocation date, and optional CRL entry extensions.
+ * <pre>
+ *  TBSCertList  ::=  SEQUENCE  {
+ *       version                 Version OPTIONAL,
+ *                                    -- if present, MUST be v2
+ *       signature               AlgorithmIdentifier,
+ *       issuer                  Name,
+ *       thisUpdate              Time,
+ *       nextUpdate              Time OPTIONAL,
+ *       revokedCertificates     SEQUENCE OF SEQUENCE  {
+ *            userCertificate         CertificateSerialNumber,
+ *            revocationDate          Time,
+ *            crlEntryExtensions      Extensions OPTIONAL
+ *                                          -- if present, MUST be v2
+ *                                 }  OPTIONAL,
+ *       crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
+ *                                          -- if present, MUST be v2
+ *                                 }
+ * </pre>
+ * See {@link GostASN1.CertificateList}<br><br>
+ * RFC 5280 references {@link http://tools.ietf.org/html/rfc5280}
+ *
+ * @class GostASN1.TBSCertList
+ * @extends GostASN1.Sequence
+ * @property {number} version The version of the encoded CRL
+ * @property {AlgorithmIdentifier} signature The algorithm identifier for the algorithm used to sign the CRL
+ * @property {Name} issuer The issuer name identifies the entity that has signed and issued the CRL
+ * @property {Date} thisUpdate The issue date of this CRL
+ * @property {Date} nextUpdate The date by which the next CRL will be issued
+ * @property {Array} revokedCertificates The revoked certificates are listed by their serial numbers
+ * @property {Extensions} crlExtensions The CRL extensions
+ */
+const TBSCertList = COMBINE(SEQUENCE({
+  version: OPTIONAL(Version), // if present, MUST be v2
+  signature: SignatureAlgorithmIdentifier,
+  issuer: Name,
+  thisUpdate: Time,
+  nextUpdate: OPTIONAL(Time),
+  revokedCertificates: OPTIONAL(SEQUENCE_OF(SEQUENCE({
+    userCertificate: CertificateSerialNumber,
+    revocationDate: Time,
+    crlEntryExtensions: OPTIONAL(CLREntryExtensions), // if present, MUST be v2
+  }))),
+  crlExtensions: OPTIONAL(CTX(0, EXPLICIT(CLRExtensions))),
+})) // if present, MUST be v2
+
+/**
+ * The X.509 v2 CRL syntax is as follows.  For signature calculation,
+ * the data that is to be signed is ASN.1 DER encoded.  ASN.1 DER
+ * encoding is a tag, length, value encoding system for each element.
+ * <pre>
+ *  CertificateList  ::=  SEQUENCE  {
+ *       tbsCertList          TBSCertList,
+ *       signatureAlgorithm   AlgorithmIdentifier,
+ *       signatureValue       BIT STRING  }
+ * </pre>
+ * See {@link GostASN1.TBSCertList}<br><br>
+ * RFC 5280 references {@link http://tools.ietf.org/html/rfc5280}
+ *
+ * @class GostASN1.CertificateList
+ * @extends GostASN1.TBSCertList
+ * @property {GostASN1.TBSCertList} tbsCertList The tbsCertList
+ * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
+ * @property {CryptoOperationData} signatureValue Signature value
+ */
+const CertificateList = SEQUENCE({
+  tbsCertList: TBSCertList,
+  signatureAlgorithm: SignatureAlgorithmIdentifier,
+  signatureValue: BIT_STRING,
+}, 'CRL')
+// </editor-fold>
+
+/*
+ * Attribute Certificate Definision
+ * http://tools.ietf.org/html/rfc5755
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const AttCertVersion = INTEGER
+
+const ObjectDigestInfo = SEQUENCE({
+  digestedObjectType: ENUMERATED({
+    publicKey: 0,
+    publicKeyCert: 1,
+    otherObjectTypes: 2,
+  }), // otherObjectTypes MUST NOT be used in this profile
+  otherObjectTypeID: OPTIONAL(OBJECT_IDENTIFIER),
+  digestAlgorithm: DigestAlgorithmIdentifier,
+  objectDigest: BIT_STRING,
+})
+
+const IssuerSerial = SEQUENCE({
+  issuer: GeneralNames,
+  serial: CertificateSerialNumber,
+  issuerUID: OPTIONAL(UniqueIdentifier),
+})
+
+const V2Form = SEQUENCE({
+  issuerName: OPTIONAL(GeneralNames),
+  baseCertificateID: OPTIONAL(CTX(0, IMPLICIT(IssuerSerial))),
+  // issuerName MUST be present in this profile baseCertificateID and
+  // objectDigestInfo MUST NOT be present in this profile
+  objectDigestInfo: OPTIONAL(CTX(1, IMPLICIT(ObjectDigestInfo))),
+})
+
+const TargetCert = SEQUENCE({
+  targetCertificate: IssuerSerial,
+  targetName: OPTIONAL(GeneralName),
+  certDigestInfo: OPTIONAL(ObjectDigestInfo),
+})
+
+const Target = CHOICE({
+  targetName: CTX(0, EXPLICIT(GeneralName)), // GeneralName is CHOICE
+  targetGroup: CTX(1, EXPLICIT(GeneralName)),
+  targetCert: CTX(2, IMPLICIT(TargetCert)),
+})
+
+const Targets = SEQUENCE_OF(Target)
+
+const AttCertExtensions = Extensions({
+  auditIdentity: OCTET_STRING,
+  targetInformation: Targets,
+  authorityKeyIdentifier: AuthorityKeyIdentifier,
+  authorityInfoAccess: SEQUENCE_OF(AccessDescription),
+  cRLDistributionPoints: CRLDistributionPoints,
+  noRevAvail: NULL,
+}, function (id) {
+  return id === 'auditIdentity' || id === 'targetInformation'
+})
+
+const Holder = SEQUENCE({
+  // the issuer and serial number of the holder's Public Key Certificate
+  baseCertificateID: OPTIONAL(CTX(0, IMPLICIT(IssuerSerial))),
+  // the name of the claimant or role
+  entityName: OPTIONAL(CTX(1, IMPLICIT(GeneralNames))),
+  // used to directly authenticate the holder, for example, an executable
+  objectDigestInfo: OPTIONAL(CTX(2, IMPLICIT(ObjectDigestInfo))),
+})
+
+const AttCertIssuer = CHOICE({
+  v1Form: GeneralNames, // MUST NOT be used in this profile
+  v2Form: CTX(0, IMPLICIT(V2Form)),
+}, 'v2Form') // v2 only
+
+const AttCertValidityPeriod = SEQUENCE({
+  notBeforeTime: GeneralizedTime,
+  notAfterTime: GeneralizedTime,
+})
+
+const SvceAuthInfo = SEQUENCE({
+  service: GeneralName,
+  ident: GeneralName,
+  authInfo: OPTIONAL(OCTET_STRING),
+})
+
+const RoleSyntax = SEQUENCE({
+  roleAuthority: OPTIONAL(CTX(0, IMPLICIT(GeneralNames))),
+  roleName: CTX(1, EXPLICIT(GeneralName)),
+}) // GeneralName is CHOICE
+
+const ClassList = BIT_STRING({
+  unmarked: 0,
+  unclassified: 1,
+  restricted: 2,
+  confidential: 3,
+  secret: 4,
+  topSecret: 5,
+})
+
+const SecurityCategory = SEQUENCE({
+  type: CTX(0, IMPLICIT(OBJECT_IDENTIFIER)),
+  value: CTX(1, IMPLICIT(ANY)),
+})
+
+const Clearance = SEQUENCE({
+  policyId: CTX(0, IMPLICIT(OBJECT_IDENTIFIER)),
+  classList: DEFAULT(CTX(1, IMPLICIT(ClassList)), ['unclassified']),
+  securityCategories: OPTIONAL(CTX(2, IMPLICIT(SET_OF(SecurityCategory)))),
+})
+
+const IetfAttrSyntax = SEQUENCE({
+  policyAuthority: OPTIONAL(CTX(0, IMPLICIT(GeneralNames))),
+  values: SEQUENCE_OF(CHOICE({
+    octets: OCTET_STRING,
+    oid: OBJECT_IDENTIFIER,
+    string: UTF8String,
+  }, function (value) {
+    return isBinary ? 'octets' : getIdentifier(value) ? 'oid' : 'string'
+  })),
+})
+
+/**
+ * X.509 Attribute Certificate Definition<br><br>
+ *
+ * X.509 contains the definition of an AC given below.  All types that
+ * are not defined in this document can be found in [PKIXPROF].
+ * <pre>
+ *           AttributeCertificateInfo ::= SEQUENCE {
+ *                version              AttCertVersion -- version is v2,
+ *                holder               Holder,
+ *                issuer               AttCertIssuer,
+ *                signature            AlgorithmIdentifier,
+ *                serialNumber         CertificateSerialNumber,
+ *                attrCertValidityPeriod   AttCertValidityPeriod,
+ *                attributes           SEQUENCE OF Attribute,
+ *                issuerUniqueID       UniqueIdentifier OPTIONAL,
+ *                extensions           Extensions OPTIONAL
+ *           }
+ * <pre>
+ * RFC 3281 references {@link http://tools.ietf.org/html/rfc3281}
+ *
+ * @class GostASN1.AttributeCertificateInfo
+ * @extends GostASN1.Sequence
+ * @property {number} version The version of the encoded certificate
+ * @property {GostASN1.Name} holder Identifies the holder.
+ * @property {GostASN1.Name} issuer Identifies the issuer.
+ * @property {AlgorithmIdentifier} signature The algorithm identifier for the algorithm used by the CA to sign the certificate.
+ * @property {(number|string)} serialNumber The serial number MUST be a positive integer assigned by the CA to each certificate.
+ * @property {GostASN1.Validity} attrCertValidityPeriod The certificate validity period
+ * @property {GostASN1.Attributes} attributes The certificate attributes
+ * @property {CryptoOperationData} issuerUniqueID The issuer unique identifier
+ * @property {GostASN1.Extensions} extensions The certificate extensions
+ */
+const AttributeCertificateInfo = COMBINE(SEQUENCE({
+  version: AttCertVersion, // version is v2,
+  holder: Holder,
+  issuer: AttCertIssuer,
+  signature: SignatureAlgorithmIdentifier,
+  serialNumber: CertificateSerialNumber,
+  attrCertValidityPeriod: AttCertValidityPeriod,
+  attributes: AttributeSequence({
+    authenticationInfo: SET_OF(SvceAuthInfo),
+    accessIdentity: SET_OF(SvceAuthInfo),
+    chargingIdentity: SET_OF_SINGLE(IetfAttrSyntax),
+    group: SET_OF_SINGLE(IetfAttrSyntax),
+    role: SET_OF(RoleSyntax),
+    clearance: SET_OF(Clearance),
+  }),
+  issuerUniqueID: OPTIONAL(UniqueIdentifier),
+  extensions: OPTIONAL(AttCertExtensions),
+}))
+
+/**
+ * Attribute Certificate Profile<br></br>
+ *
+ * ACs may be used in a wide range of applications and environments
+ * covering a broad spectrum of interoperability goals and a broader
+ * spectrum of operational and assurance requirements.  The goal of this
+ * document is to establish a common baseline for generic applications
+ * requiring broad interoperability and limited special purpose
+ * requirements.  In particular, the emphasis will be on supporting the
+ * use of attribute certificates for informal Internet electronic mail,
+ * IPSec, and WWW applications.
+ * <pre>
+ *           AttributeCertificate ::= SEQUENCE {
+ *                acinfo               AttributeCertificateInfo,
+ *                signatureAlgorithm   AlgorithmIdentifier,
+ *                signatureValue       BIT STRING
+ *           }
+ * </pre>
+ * See {@link GostASN1.AttributeCertificateInfo}<br><br>
+ * RFC 3281 references {@link http://tools.ietf.org/html/rfc3281}
+ *
+ * @class GostASN1.AttributeCertificate
+ * @extends GostASN1.AttributeCertificateInfo
+ * @property {GostASN1.AttributeCertificateInfo} acinfo Attribute certificate information
+ * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
+ * @property {CryptoOperationData} signatureValue Signature value
+ */
+const AttributeCertificate = SEQUENCE({
+  acinfo: AttributeCertificateInfo,
+  signatureAlgorithm: SignatureAlgorithmIdentifier,
+  signatureValue: BIT_STRING,
+}, 'ATTRIBUTE CERTIFICATE')
+// </editor-fold>
+
+/*
+ * Encrypted Key with CMS
+ *
+ * http://tools.ietf.org/html/rfc5652
+ * http://tools.ietf.org/html/rfc4490
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// RecipientInfo
+var EncryptedKey = OCTET_STRING
+
+const EncryptedContent = OCTET_STRING
+
+var SubjectKeyIdentifier = OCTET_STRING
+
+const UserKeyingMaterial = OCTET_STRING
+
+const ECCCMSSharedInfo = SEQUENCE({
+  keyInfo: KeyWrapAlgorithmIdentifier,
+  entityUInfo: OPTIONAL(CTX(0, EXPLICIT(OCTET_STRING))),
+  suppPubInfo: CTX(2, EXPLICIT(OCTET_STRING)),
+})
+
+// GOST Key Transport & Key agreement rfc4490
+const Gost2814789EncryptedKey = ENCLOSURE(SEQUENCE({
+  encryptedKey: Gost2814789Key,
+  maskKey: OPTIONAL(CTX(0, IMPLICIT(Gost2814789Key))),
+  macKey: Gost2814789MAC,
+}), {
+  encode: function (value) {
+    // wrappedKey: (CEK_ENC(32) | CEK_MAC(4))
+    const encryptedKey = new Uint8Array(new Uint8Array(value, 0, 32)).buffer,
+      macKey = new Uint8Array(new Uint8Array(value, 32, 4)).buffer
+    return { // from wrapped key
+      encryptedKey: encryptedKey,
+      macKey: macKey,
+    }
+  },
+  decode: function (value) {
+    const encryptedKey = value.encryptedKey,
+      maskKey = value.maskKey,
+      macKey = value.macKey
+    if (maskKey) {
+      const m = new Int32Array(maskKey), k = new Int32Array(encryptedKey)
+      for (let i = 0, n = m.length / k.length; i < n; i++) {
+        for (let j = 0, l = k.length; j < l; j++) {k[j] = (k[j] + m[l * i + j]) & 0xffffffff}
+      }
+    }
+    const result = new Uint8Array(encryptedKey.byteLength + macKey.byteLength)
+    result.set(new Uint8Array(encryptedKey), 0)
+    result.set(new Uint8Array(macKey), 32)
+    return result.buffer
+  },
+})
+
+
+const GostR3410TransportParameters = SEQUENCE({
+  encryptionParamSet: Gost2814789ParamSet,
+  ephemeralPublicKey: OPTIONAL(CTX(0, IMPLICIT(GostSubjectPublicKeyInfo))),
+  ukm: OCTET_STRING,
+}) // ( SIZE(8) )
+
+const GostR3410KeyTransport = ENCLOSURE(SEQUENCE({
+  sessionEncryptedKey: Gost2814789EncryptedKey,
+  transportParameters: OPTIONAL(CTX(0, IMPLICIT(GostR3410TransportParameters))),
+}), {
+  encode: function (value) {
+    const algorithm = value.algorithm
+    return {
+      sessionEncryptedKey: value.sessionEncryptedKey,
+      transportParameters: {
+        encryptionParamSet: attributes['sBox'][algorithm.wrapping.sBox || 'E-A'],
+        ephemeralPublicKey: algorithm['public'],
+        ukm: algorithm.ukm,
+      },
+    }
+  },
+  decode: function (value) {
+    return {
+      algorithm: {
+        wrapping: parameters[value.transportParameters.encryptionParamSet],
+        ukm: value.transportParameters.ukm,
+        'public': value.transportParameters.ephemeralPublicKey,
+      },
+      sessionEncryptedKey: value.sessionEncryptedKey,
+    }
+  },
+})
+
+const SCGostKeyTransport = ENCLOSURE(SEQUENCE({
+  sessionEncryptedKey: Gost2814789EncryptedKey,
+  ukm: SEQUENCE({
+    ephemeralPublicKey: GostSubjectPublicKeyInfo,
+    addedukm: OPTIONAL(CTX(0, EXPLICIT(UserKeyingMaterial))),
+  }),
+}), {
+  encode: function (value) {
+    const algorithm = value.algorithm
+    return {
+      sessionEncryptedKey: value.sessionEncryptedKey,
+      ukm: {
+        ephemeralPublicKey: algorithm['public'],
+        addedukm: algorithm.ukm,
+      },
+    }
+  },
+  decode: function (value) {
+    return {
+      algorithm: {
+        ukm: value.ukm.addedukm,
+        'public': value.ukm.ephemeralPublicKey,
+      },
+      sessionEncryptedKey: value.sessionEncryptedKey,
+    }
+  },
+})
+
+const GostEncryptedKey = (function (typeSet) {
+  /**
+     * Gost Encrypted key encoder for CMS
+     *
+     * @class GostASN1.GostEncryptedKey
+     * @extends GostASN1.Sequence
+     * @param {AlgorithmIdentifier} algorithm
+     */
+  return function (algorithm) {
+    const type = typeSet[algorithm.id]
+    return type ? ENCAPSULATES(type) : ANY
+  }
+})({
+  // Key transport algorithms
+  'id-sc-gostR3410-2001': SCGostKeyTransport,
+  'id-sc-gostR3410-94': SCGostKeyTransport,
+  'id-GostR3410-2001': GostR3410KeyTransport,
+  'id-GostR3410-94': GostR3410KeyTransport,
+  'id-tc26-gost3410-12-256': GostR3410KeyTransport,
+  'id-tc26-gost3410-12-512': GostR3410KeyTransport,
+  // Key agreement algorithms
+  'id-GostR3410-94-CryptoPro-ESDH': Gost2814789EncryptedKey,
+  'id-GostR3410-2001-CryptoPro-ESDH': Gost2814789EncryptedKey,
+  'id-tc26-agreement-gost-3410-12-256': Gost2814789EncryptedKey,
+  'id-tc26-agreement-gost-3410-12-512': Gost2814789EncryptedKey,
+  'id-sc-r3410-ESDH-r3411kdf': Gost2814789EncryptedKey,
+  // Key encryption key algorithms
+  'id-Gost28147-89-None-KeyWrap': Gost2814789EncryptedKey,
+  'id-Gost28147-89-CryptoPro-KeyWrap': Gost2814789EncryptedKey,
+  'id-sc-cmsGostWrap': Gost2814789EncryptedKey,
+  'id-sc-cmsGost28147Wrap': Gost2814789EncryptedKey,
+})
+
+// </editor-fold>
+
+/*
+ * CryptoPro Gost Private Key Store
+ */ // <editor-fold defaultstate="collapsed">
+
+const GostKeyContainerContentAttributes = BIT_STRING({
+  kccaSoftPassword: 0,
+  kccaReservePrimary: 1,
+  kccaPrimaryKeyAbsent: 2,
+  kccaFKCShared: 3,
+})
+
+const GostPrivateKeyAttributes = BIT_STRING({
+  pkaExportable: 0,
+  pkaUserProtect: 1,
+  pkaExchange: 2,
+  pkaEphemeral: 3,
+  pkaNonCachable: 4,
+  pkaDhAllowed: 5,
+})
+
+const GostPrivateKeyParameters = SEQUENCE({
+  attributes: OPTIONAL(GostPrivateKeyAttributes),
+  privateKeyAlgorithm: OPTIONAL(CTX(0, IMPLICIT(KeyAlgorithmIdentifier))),
+})
+
+const CertificateLink = SEQUENCE({
+  path: IA5String,
+  hmac: Gost2814789MAC,
+})
+
+const PasswordPolicy = AlgorithmIdentifier
+
+const GostKeyContainerContent = SEQUENCE({
+  containerAlgoritmIdentifier: OPTIONAL(CTX(0, IMPLICIT(AlgorithmIdentifier))),
+  containerName: OPTIONAL(IA5String),
+  attributes: GostKeyContainerContentAttributes,
+  primaryPrivateKeyParameters: GostPrivateKeyParameters,
+  hmacPassword: OPTIONAL(CTX(2, IMPLICIT(Gost2814789MAC))),
+  secondaryEncryptedPrivateKey: OPTIONAL(CTX(3, IMPLICIT(Gost2814789EncryptedKey))),
+  secondaryPrivateKeyParameters: OPTIONAL(CTX(4, IMPLICIT(GostPrivateKeyParameters))),
+  primaryCertificate: OPTIONAL(CTX(5, IMPLICIT(OCTET_STRING(ENCAPSULATES(Certificate))))),
+  secondaryCertificate: OPTIONAL(CTX(6, IMPLICIT(OCTET_STRING(ENCAPSULATES(Certificate))))),
+  encryptionContainerName: OPTIONAL(CTX(7, IMPLICIT(IA5String))),
+  primaryCertificateLink: OPTIONAL(CTX(8, IMPLICIT(CertificateLink))),
+  secondaryCertificateLink: OPTIONAL(CTX(9, IMPLICIT(CertificateLink))),
+  primaryFP: OPTIONAL(CTX(10, IMPLICIT(OCTET_STRING))),
+  secondaryFP: OPTIONAL(CTX(11, IMPLICIT(OCTET_STRING))),
+  passwordPolicy: OPTIONAL(PasswordPolicy),
+  containerSecurityLevel: OPTIONAL(INTEGER),
+  extensions: OPTIONAL(CTX(12, IMPLICIT(Extensions({
+    keyValidity: SEQUENCE({
+      notBefore: OPTIONAL(CTX(0, IMPLICIT(GeneralizedTime))),
+      notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime))),
+    }),
+  })))),
+  secondaryEncryptionContainerName: OPTIONAL(CTX(13, IMPLICIT(IA5String))),
+})
+
+/**
+ * CryptoPro key container header
+ *
+ * @class GostASN1.GostKeyContainer
+ * @extends GostASN1.Sequence
+ */
+const GostKeyContainer = SEQUENCE({
+  keyContainerContent: GostKeyContainerContent,
+  hmacKeyContainerContent: Gost2814789MAC,
+})
+
+/**
+ * CryptoPro key container name
+ *
+ * @class GostASN1.GostKeyContainerName
+ * @extends GostASN1.Sequence
+ */
+const GostKeyContainerName = SEQUENCE({
+  containerName: IA5String,
+  extElem1: OPTIONAL(ANY),
+})
+
+/**
+ * PrivateKey encrypted content for CryptoPro key containers
+ *
+ * @class GostASN1.GostPrivateKeys
+ * @extends GostASN1.Sequence
+ */
+const GostPrivateKeys = SEQUENCE({
+  primaryKey: Gost2814789Key,
+  secondaryKey: OPTIONAL(Gost2814789Key),
+  hmacKey: OPTIONAL(Gost2814789MAC),
+})
+
+/**
+ * PrivateKey masks for CryptoPro key containers
+ *
+ * @class GostASN1.GostPrivateMasks
+ * @extends GostASN1.Sequence
+ */
+const GostPrivateMasks = SEQUENCE({
+  mask: Gost2814789Key,
+  randomStatus: OCTET_STRING,
+  hmacRandom: Gost2814789MAC,
+})
+
+// </editor-fold>
+
+/*
+ * ViPNet Gost Private Key Store
+ */ // <editor-fold defaultstate="collapsed">
+
+const ViPNetKeyInfo = SEQUENCE({
+  keyClass: INTEGER,
+  keyType: INTEGER,
+  algorithm: OPTIONAL(CTX(0, EXPLICIT(KeyAlgorithmIdentifier))),
+  serialNumber: OPTIONAL(CTX(1, EXPLICIT(OCTET_STRING))),
+  addSerialNumber: OPTIONAL(CTX(2, EXPLICIT(OCTET_STRING))),
+  certSerialNumber: OPTIONAL(CTX(3, EXPLICIT(OCTET_STRING))),
+  subjectUID: OPTIONAL(CTX(4, EXPLICIT(OCTET_STRING))),
+  recipientUID: OPTIONAL(CTX(5, EXPLICIT(OCTET_STRING))),
+  validity: OPTIONAL(CTX(6, EXPLICIT(CHOICE({
+    validity: Validity,
+    keyValidity: SEQUENCE({
+      notBefore: OPTIONAL(CTX(0, IMPLICIT(GeneralizedTime))),
+      notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime))),
+    }),
+  }, function () {
+    return 'keyValidity'
+  })))),
+  keyUID: OPTIONAL(CTX(7, EXPLICIT(BIT_STRING))),
+  flags: OPTIONAL(CTX(10, EXPLICIT(INTEGER))),
+})
+
+/**
+ * ViPNet key container info
+ *
+ * @class GostASN1.ViPNetInfo
+ * @extends GostASN1.Sequence
+ */
+const ViPNetInfo = SEQUENCE({
+  version: INTEGER,
+  keyInfo: ViPNetKeyInfo,
+  defenceKeyInfo: ViPNetKeyInfo,
+  certificate: OPTIONAL(CTX(0, EXPLICIT(Certificate))),
+  publicKey: OPTIONAL(CTX(1, EXPLICIT(OCTET_STRING))),
+})
+
+// </editor-fold>
+
+/*
+ * Cryptographic Message Syntax
+ *
+ * http://tools.ietf.org/html/rfc5652
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// CMS signed data
+const CMSVersion = INTEGER
+
+var ContentType = OBJECT_IDENTIFIER
+
+const SigningTime = Time
+
+var SubjectKeyIdentifier = OCTET_STRING
+
+const Digest = OCTET_STRING
+
+const MessageAuthenticationCode = OCTET_STRING
+
+const BodyPartID = INTEGER
+
+const BodyPartPath = SEQUENCE_OF(BodyPartID)
+
+const CMCUnsignedData = SEQUENCE({
+  bodyPartPath: BodyPartPath,
+  identifier: OBJECT_IDENTIFIER,
+  content: ANY,
+}) // DEFINED BY identifier
+/**
+ * SignedAttributes is a collection of attributes that are signed.  The
+ * field is optional, but it MUST be present if the content type of
+ * the EncapsulatedContentInfo value being signed is not id-data.
+ * SignedAttributes MUST be DER encoded, even if the rest of the
+ * structure is BER encoded.  Useful attribute types, such as signing
+ * time, are defined in Section 11.  If the field is present, it MUST
+ * contain, at a minimum, the following two attributes: <br>
+ *
+ * A content-type attribute having as its value the content type
+ * of the EncapsulatedContentInfo value being signed.  Section
+ * 11.1 defines the content-type attribute.  However, the
+ * content-type attribute MUST NOT be used as part of a
+ * countersignature unsigned attribute as defined in Section 11.4.<br>
+ *
+ * A message-digest attribute, having as its value the message
+ * digest of the content.  Section 11.2 defines the message-digest
+ * attribute.
+ *
+ * @class GostASN1.SignedAttributes
+ * @extends GostASN1.Attributes
+ */
+const SignedAttributes = Attributes({
+  contentType: SET_OF_SINGLE(ContentType),
+  signingTime: SET_OF_SINGLE(SigningTime),
+  messageDigest: SET_OF_SINGLE(OCTET_STRING),
+})
+
+const UnsignedAttributes = Attributes(function (type) {
+  /**
+     * UnsignedAttributes is a collection of attributes that are not signed.
+     * The field is optional.  Useful attribute types, such as
+     * countersignatures.
+     *
+     * @class GostASN1.UnsignedAttributes
+     * @extends GostASN1.Attributes
+     */
+  //    var UnsignedAttributes = Attributes({
+  //        countersignature: SET_OF(Countersignature), // -- check forward
+  //        unsignedData: SET_OF(CMCUnsignedData)
+  //    });
+  return ({
+    countersignature: SET_OF(Countersignature), // recursion
+    unsignedData: SET_OF(CMCUnsignedData),
+  })[type]
+})
+
+const AuthAttributes = SignedAttributes,
+  UnauthAttributes = Attributes,
+  UnprotectedAttributes = Attributes
+
+const IssuerAndSerialNumber = SEQUENCE({
+  issuer: Name,
+  serialNumber: CertificateSerialNumber,
+})
+
+const SignerIdentifier = CHOICE({
+  issuerAndSerialNumber: IssuerAndSerialNumber,
+  subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier)),
+}, function (value) {
+  return isBinary(value) ? 'subjectKeyIdentifier' : 'issuerAndSerialNumber'
+})
+
+const SignerInfo = SEQUENCE({
+  version: CMSVersion,
+  sid: SignerIdentifier,
+  digestAlgorithm: DigestAlgorithmIdentifier,
+  signedAttrs: OPTIONAL(CTX(0, IMPLICIT(SignedAttributes))),
+  signatureAlgorithm: SignatureAlgorithmIdentifier,
+  signatureValue: OCTET_STRING,
+  unsignedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnsignedAttributes))),
+})
+
+var Countersignature = SignerInfo,
+  SignerInfos = SET_OF(SignerInfo),
+  DigestAlgorithmIdentifiers = SET_OF(DigestAlgorithmIdentifier),
+  AttributeCertificateV2 = AttributeCertificate
+
+const ExtendedCertificateInfo = COMBINE(SEQUENCE({
+  version: CMSVersion,
+  certificate: Certificate,
+  attributes: UnauthAttributes,
+}))
+
+const ExtendedCertificate = SEQUENCE({
+  extendedCertificateInfo: ExtendedCertificateInfo,
+  signatureAlgorithm: SignatureAlgorithmIdentifier,
+  signatureValue: BIT_STRING,
+})
+
+const OtherCertificateFormat = SEQUENCE({
+  otherCertFormat: OBJECT_IDENTIFIER,
+  otherCert: ANY,
+})
+
+const AttributeCertificateInfoV1 = COMBINE(SEQUENCE({
+  version: INTEGER,
+  subject: CHOICE({
+    baseCertificateID: CTX(0, IMPLICIT(IssuerSerial)), // associated with a Public Key Certificate
+    subjectName: CTX(1, IMPLICIT(GeneralNames)),
+  }, function (value) {
+    return value.issuer ? 'baseCertificateID' : 'subjectName'
+  }), //associated with a name
+  issuer: GeneralNames,
+  signature: SignatureAlgorithmIdentifier,
+  serialNumber: CertificateSerialNumber,
+  attCertValidityPeriod: AttCertValidityPeriod,
+  attributes: AttributeSequence,
+  issuerUniqueID: OPTIONAL(UniqueIdentifier),
+  extensions: OPTIONAL(CertExtensions),
+}))
+
+const AttributeCertificateV1 = SEQUENCE({
+  acInfo: AttributeCertificateInfoV1,
+  signatureAlgorithm: SignatureAlgorithmIdentifier,
+  signatureValue: BIT_STRING,
+})
+
+const EncapsulatedContentInfo = SEQUENCE({
+  eContentType: ContentType,
+  eContent: OPTIONAL(CTX(0, EXPLICIT(OCTET_STRING))),
+})
+
+const CertificateChoices = CHOICE({
+  certificate: Certificate,
+  extendedCertificate: CTX(0, IMPLICIT(ExtendedCertificate)), // Obsolete
+  v1AttrCert: CTX(1, IMPLICIT(AttributeCertificateV1)), // Obsolete
+  v2AttrCert: CTX(2, IMPLICIT(AttributeCertificateV2)),
+  other: CTX(3, IMPLICIT(OtherCertificateFormat)),
+}, function (value) {
+  return value.holder ? 'AttributeCertificateV2' : value.certificate ?
+    'ExtendedCertificate' : value.otherCertFormat ? 'other' :
+      'certificate'
+})
+
+const OtherRevocationInfoFormat = SEQUENCE({
+  otherRevInfoFormat: OBJECT_IDENTIFIER,
+  otherRevInfo: ANY,
+})
+
+const RevocationInfoChoice = CHOICE({
+  crl: CertificateList,
+  other: CTX(1, IMPLICIT(OtherRevocationInfoFormat)),
+}, function (value) {
+  return value.otherRevInfoFormat ? 'other' : 'crl'
+})
+
+const CertificateSet = SET_OF(CertificateChoices),
+  RevocationInfoChoices = SET_OF(RevocationInfoChoice)
+
+/**
+ * The signed-data content type consists of a content of any type and zero or more
+ * signature values.  Any number of signers in parallel can sign any type of content.<br><br>
+ *
+ * The signed-data content type shall have ASN.1 type SignedData:<br><br>
+ *<pre>
+ *
+ *      SignedData ::= SEQUENCE {
+ *        version CMSVersion,
+ *        digestAlgorithms DigestAlgorithmIdentifiers,
+ *        encapContentInfo EncapsulatedContentInfo,
+ *        certificates [0] IMPLICIT CertificateSet OPTIONAL,
+ *        crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,
+ *        signerInfos SignerInfos }
+ *
+ *      DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier
+ *
+ *      SignerInfos ::= SET OF SignerInfo
+ *
+ *       EncapsulatedContentInfo ::= SEQUENCE {
+ *        eContentType ContentType,
+ *        eContent [0] EXPLICIT OCTET STRING OPTIONAL }
+ *
+ *</pre>
+ * Per-signer information is represented in the type SignerInfo:<br><br>
+ *<pre>
+ *
+ *      SignerInfo ::= SEQUENCE {
+ *        version CMSVersion,
+ *        sid SignerIdentifier,
+ *        digestAlgorithm DigestAlgorithmIdentifier,
+ *        signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
+ *        signatureAlgorithm SignatureAlgorithmIdentifier,
+ *        signature SignatureValue,
+ *        unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }
+ *
+ *      SignerIdentifier ::= CHOICE {
+ *        issuerAndSerialNumber IssuerAndSerialNumber,
+ *        subjectKeyIdentifier [0] SubjectKeyIdentifier }
+ *
+ *      SignedAttributes ::= SET SIZE (1..MAX) OF Attribute
+ *
+ *      UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute
+ *
+ *     SignatureValue ::= OCTET STRING
+ *
+ *</pre>
+ * See also {@link GostASN1.SignedAttributes} and {@link GostASN1.UnsignedAttributes}
+ * @class GostASN1.SignedData
+ * @extends GostASN1.Sequence
+ * @property {number} version The syntax version number
+ * @property {AlgorithmIdentifier[]} digestAlgorithms Collection of message digest algorithm identifiers
+ * @property {GostASN1.Sequence} encapContentInfo The content is represented in the type EncapsulatedContentInfo
+ * @property {GostASN1.Certificate[]} certificates Certificates
+ * @property {GostASN1.CertificateList[]} crls Certificates
+ * @property {GostASN1.Sequence[]} signerInfos The Signer information
+ */
+const SignedData = SEQUENCE({
+  version: CMSVersion,
+  digestAlgorithms: DigestAlgorithmIdentifiers,
+  encapContentInfo: EncapsulatedContentInfo,
+  certificates: OPTIONAL(CTX(0, IMPLICIT(CertificateSet))),
+  crls: OPTIONAL(CTX(1, IMPLICIT(RevocationInfoChoices))),
+  signerInfos: SignerInfos,
+})
+
+const RecipientIdentifier = CHOICE({
+  issuerAndSerialNumber: IssuerAndSerialNumber,
+  subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier)),
+}, function (value) {
+  return isBinary(value) ? 'subjectKeyIdentifier' : 'issuerAndSerialNumber'
+})
+
+const KeyTransRecipientInfo = SEQUENCE({
+  version: CMSVersion, // always set to 0 or 2
+  rid: RecipientIdentifier,
+  keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
+  encryptedKey: EncryptedKey,
+})
+
+const OtherKeyAttribute = SEQUENCE({
+  keyAttrId: OBJECT_IDENTIFIER,
+  keyAttr: OPTIONAL(ANY),
+})
+
+const RecipientKeyIdentifier = SEQUENCE({
+  subjectKeyIdentifier: SubjectKeyIdentifier,
+  date: OPTIONAL(GeneralizedTime),
+  other: OPTIONAL(OtherKeyAttribute),
+})
+
+const KeyAgreeRecipientIdentifier = CHOICE({
+  issuerAndSerialNumber: IssuerAndSerialNumber,
+  rKeyId: CTX(0, IMPLICIT(RecipientKeyIdentifier)),
+}, function (value) {
+  return isBinary(value) ? 'rKeyId' : 'issuerAndSerialNumber'
+})
+
+const RecipientEncryptedKey = SEQUENCE({
+  rid: KeyAgreeRecipientIdentifier,
+  encryptedKey: EncryptedKey,
+})
+
+const RecipientEncryptedKeys = SEQUENCE_OF(RecipientEncryptedKey)
+
+const OriginatorPublicKey = SEQUENCE({
+  algorithm: KeyAlgorithmIdentifier,
+  publicKey: BIT_STRING,
+})
+
+const MQVuserKeyingMaterial = SEQUENCE({ // ECC rfc5753 KeyAgreeRecipientInfo in ukm
+  ephemeralPublicKey: OriginatorPublicKey,
+  addedukm: OPTIONAL(CTX(0, EXPLICIT(UserKeyingMaterial))),
+})
+
+const OriginatorIdentifierOrKey = CHOICE({
+  issuerAndSerialNumber: IssuerAndSerialNumber,
+  subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier)),
+  originatorKey: CTX(1, IMPLICIT(OriginatorPublicKey)),
+}, function (value) {
+  return isBinary(value) ? 'subjectKeyIdentifier' : value.algorithm ?
+    'originatorKey' : 'issuerAndSerialNumber'
+})
+
+const KeyAgreeRecipientInfo = SEQUENCE({
+  version: CMSVersion, // always set to 3
+  originator: CTX(0, EXPLICIT(OriginatorIdentifierOrKey)),
+  ukm: OPTIONAL(CTX(1, EXPLICIT(UserKeyingMaterial))),
+  keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
+  recipientEncryptedKeys: RecipientEncryptedKeys,
+})
+
+const KEKIdentifier = SEQUENCE({
+  keyIdentifier: OCTET_STRING,
+  date: OPTIONAL(GeneralizedTime),
+  other: OPTIONAL(OtherKeyAttribute),
+})
+
+const KEKRecipientInfo = SEQUENCE({
+  version: CMSVersion, // always set to 4
+  kekid: KEKIdentifier,
+  keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
+  encryptedKey: EncryptedKey,
+})
+
+const PasswordRecipientInfo = SEQUENCE({
+  version: CMSVersion, // always set to 0
+  friendlyName: OPTIONAL(CTX(0, IMPLICIT(KeyDerivationAlgorithmIdentifier))),
+  keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
+  encryptedKey: EncryptedKey,
+})
+
+const OtherRecipientInfo = SEQUENCE({
+  oriType: OBJECT_IDENTIFIER,
+  oriValue: ANY,
+})
+
+const RecipientInfo = CHOICE({
+  ktri: KeyTransRecipientInfo,
+  kari: CTX(1, IMPLICIT(KeyAgreeRecipientInfo)),
+  kekri: CTX(2, IMPLICIT(KEKRecipientInfo)),
+  pwri: CTX(3, IMPLICIT(PasswordRecipientInfo)),
+  ori: CTX(4, IMPLICIT(OtherRecipientInfo)),
+}, function (value) {
+  return value.rid ? 'ktri' : value.originator ? 'kari' :
+    value.kekid ? 'kekri' : value.oriType ? 'ori' : 'pwri'
+})
+
+const OriginatorInfo = SEQUENCE({
+  certs: OPTIONAL(CTX(0, IMPLICIT(CertificateSet))),
+  crls: OPTIONAL(CTX(1, IMPLICIT(RevocationInfoChoices))),
+})
+
+const RecipientInfos = SET_OF(RecipientInfo)
+
+// EncryptedContentInfo
+const EncryptedContentInfo = SEQUENCE({
+  contentType: ContentType,
+  contentEncryptionAlgorithm: ContentEncryptionAlgorithmIdentifier,
+  encryptedContent: OPTIONAL(CTX(0, IMPLICIT(EncryptedContent))),
+})
+
+/**
+ * The enveloped-data content type consists of an encrypted content of
+ * any type and encrypted content-encryption keys for one or more
+ * recipients.  The combination of the encrypted content and one
+ * encrypted content-encryption key for a recipient is a "digital
+ * envelope" for that recipient.  Any type of content can be enveloped
+ * for an arbitrary number of recipients using any of the supported key
+ * management techniques for each recipient.<br><br>
+ *
+ * The typical application of the enveloped-data content type will
+ * represent one or more recipients' digital envelopes on content of the
+ * data or signed-data content types.<br><br>
+ * <pre>
+ *
+ *      EnvelopedData ::= SEQUENCE {
+ *        version CMSVersion,
+ *        originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
+ *        recipientInfos RecipientInfos,
+ *        encryptedContentInfo EncryptedContentInfo,
+ *        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
+ *
+ *      OriginatorInfo ::= SEQUENCE {
+ *        certs [0] IMPLICIT CertificateSet OPTIONAL,
+ *        crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }
+ *
+ *      RecipientInfos ::= SET SIZE (1..MAX) OF RecipientInfo
+ *
+ *      EncryptedContentInfo ::= SEQUENCE {
+ *        contentType ContentType,
+ *        contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
+ *        encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }
+ *
+ *      EncryptedContent ::= OCTET STRING
+ *
+ *      UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute
+ *
+ * </pre>
+ * @class GostASN1.EnvelopedData
+ * @extends GostASN1.Sequence
+ * @property {number} version The syntax version number
+ * @property {GostASN1.Sequence} originatorInfo Optionally provides information about the originator.
+ * @property {GostASN1.Sequence[]} recipientInfos Collection of per-recipient information.
+ * @property {GostASN1.Sequence} encryptedContentInfo The content is represented in the type EncryptedContentInfo
+ * @property {Attributes} unprotectedAttrs The unprotected attributes
+ */
+const EnvelopedData = SEQUENCE({
+  version: CMSVersion,
+  originatorInfo: OPTIONAL(CTX(0, IMPLICIT(OriginatorInfo))),
+  recipientInfos: RecipientInfos,
+  encryptedContentInfo: EncryptedContentInfo,
+  unprotectedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnprotectedAttributes))),
+})
+
+/**
+ * The digested-data content type consists of content of any type and a
+ * message digest of the content.<br><br>
+ * Typically, the digested-data content type is used to provide content
+ * integrity, and the result generally becomes an input to the
+ * enveloped-data content type.<br><br>
+ * <pre>
+ *
+ *      DigestedData ::= SEQUENCE {
+ *        version CMSVersion,
+ *        digestAlgorithm DigestAlgorithmIdentifier,
+ *        encapContentInfo EncapsulatedContentInfo,
+ *        digest Digest }
+ *
+ *      Digest ::= OCTET STRING
+ *
+ *</pre>
+ * @class GostASN1.DigestedData
+ * @extends GostASN1.Sequence
+ * @property {number} version The syntax version number
+ * @property {AlgorithmIdentifier} digestAlgorithm Message digest algorithm identifier
+ * @property {GostASN1.Sequence} encapContentInfo The content is represented in the type EncapsulatedContentInfo
+ * @property {CryptoOperationData} digest The degist
+ */
+const DigestedData = SEQUENCE({
+  version: CMSVersion,
+  digestAlgorithm: DigestAlgorithmIdentifier,
+  encapContentInfo: EncapsulatedContentInfo,
+  digest: Digest,
+})
+
+/**
+ * The encrypted-data content type consists of encrypted content of any
+ * type.  Unlike the enveloped-data content type, the encrypted-data
+ * content type has neither recipients nor encrypted content-encryption
+ * keys.  Keys MUST be managed by other means.<br><br>
+ *
+ * The typical application of the encrypted-data content type will be to
+ * encrypt the content of the data content type for local storage,
+ * perhaps where the encryption key is derived from a password.<br><br>
+ * <pre>
+ *
+ *      EncryptedData ::= SEQUENCE {
+ *        version CMSVersion,
+ *        encryptedContentInfo EncryptedContentInfo,
+ *        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
+ *
+ *      EncryptedContentInfo ::= SEQUENCE {
+ *        contentType ContentType,
+ *        contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
+ *        encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }
+ *
+ *      EncryptedContent ::= OCTET STRING
+ *
+ * </pre>
+ * @class GostASN1.EncryptedData
+ * @extends GostASN1.Sequence
+ * @property {number} version The syntax version number
+ * @property {GostASN1.Sequence} encryptedContentInfo The content is represented in the type EncryptedContentInfo
+ * @property {Attributes} unprotectedAttrs The unprotected attributes
+ */
+const EncryptedData = SEQUENCE({
+  version: CMSVersion,
+  encryptedContentInfo: EncryptedContentInfo,
+  unprotectedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnprotectedAttributes))),
+})
+
+/**
+ * The authenticated-data content type consists of content of any type,
+ * a message authentication code (MAC), and encrypted authentication
+ * keys for one or more recipients.  The combination of the MAC and one
+ * encrypted authentication key for a recipient is necessary for that
+ * recipient to verify the integrity of the content.  Any type of
+ * content can be integrity protected for an arbitrary number of
+ * recipients.<br><br>
+ * <pre>
+ *
+ *      AuthenticatedData ::= SEQUENCE {
+ *        version CMSVersion,
+ *        originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
+ *        recipientInfos RecipientInfos,
+ *        macAlgorithm MessageAuthenticationCodeAlgorithm,
+ *        digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
+ *        encapContentInfo EncapsulatedContentInfo,
+ *        authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
+ *        mac MessageAuthenticationCode,
+ *        unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
+ *
+ *      AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
+ *
+ *      UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
+ *
+ *      MessageAuthenticationCode ::= OCTET STRING
+ *
+ * </pre>
+ * @class GostASN1.AuthenticatedData
+ * @extends GostASN1.Sequence
+ * @property {number} version The syntax version number
+ * @property {GostASN1.Sequence} originatorInfo Optionally provides information about the originator.
+ * @property {GostASN1.Sequence[]} recipientInfos Collection of per-recipient information.
+ * @property {AlgorithmIdentifier} macAlgorithm Identifies the Message Authentication Code algorithm
+ * @property {AlgorithmIdentifier} digestAlgorithm Identifies the Digest algorithm
+ * @property {GostASN1.Sequence} encapContentInfo The content is represented in the type EncapsulatedContentInfo
+ * @property {Attributes} authAttrs The autheniticated attributes
+ * @property {CryptoOpertionData} mac The Message Authentication Code
+ * @property {Attributes} unauthAttrs The unautheniticated attributes
+ */
+const AuthenticatedData = SEQUENCE({
+  version: CMSVersion,
+  originatorInfo: OPTIONAL(CTX(0, IMPLICIT(OriginatorInfo))),
+  recipientInfos: RecipientInfos,
+  macAlgorithm: MessageAuthenticationCodeAlgorithm,
+  digestAlgorithm: OPTIONAL(CTX(1, DigestAlgorithmIdentifier)),
+  encapContentInfo: EncapsulatedContentInfo,
+  authAttrs: OPTIONAL(CTX(2, IMPLICIT(AuthAttributes))),
+  mac: MessageAuthenticationCode,
+  unauthAttrs: OPTIONAL(CTX(3, IMPLICIT(UnauthAttributes))),
+})
+
+// AuthEnvelopedData RFC 5911
+const AuthEnvelopedData = SEQUENCE({
+  version: CMSVersion,
+  originatorInfo: OPTIONAL(CTX(0, IMPLICIT(OriginatorInfo))),
+  recipientInfos: RecipientInfos,
+  authEncryptedContentInfo: EncryptedContentInfo,
+  authAttrs: OPTIONAL(CTX(1, IMPLICIT(AuthAttributes))),
+  mac: MessageAuthenticationCode,
+  unauthAttrs: OPTIONAL(CTX(2, IMPLICIT(UnauthAttributes))),
+})
+
+// EncryptedKeyPackage rfc6032
+const EncryptedKeyPackage = CHOICE({
+  encrypted: EncryptedData,
+  enveloped: CTX(0, IMPLICIT(EnvelopedData)),
+  authEnveloped: CTX(1, IMPLICIT(AuthEnvelopedData)),
+}, function (value) {
+  return value.encryptedContentInfo ? (value.recipientInfos ?
+    'enveloped' : 'encrypted') : 'authEnveloped'
+})
+
+/**
+ * Cryptographic Message Syntax<br>
+ * The CMS associates a content type identifier with a content. The syntax
+ * MUST have ASN.1 type ContentInfo:
+ * <pre>
+ *
+ *  ContentInfo ::= SEQUENCE {
+ *    contentType ContentType,
+ *    content [0] EXPLICIT ANY DEFINED BY contentType }
+ *
+ *  ContentType ::= OBJECT IDENTIFIER
+ *
+ * </pre>
+ * The fields of ContentInfo have the following meanings:
+ * <ul>
+ * <li>contentType indicates the type of the associated content.  It is
+ * an object identifier; it is a unique string of integers assigned
+ * by an authority that defines the content type.</li>
+ * <li>content is the associated content.  The type of content can be
+ * determined uniquely by contentType.  Content types for data,
+ * signed-data, enveloped-data, digested-data, encrypted-data, and
+ * authenticated-data are defined in this document.  If additional
+ * content types are defined in other documents, the ASN.1 type
+ * defined SHOULD NOT be a CHOICE type.</li>
+ * </ul>
+ * RFC 5652 references {@link http://tools.ietf.org/html/rfc5652}
+ *
+ * @class GostASN1.ContentInfo
+ * @extends GostASN1.Sequence
+ * @property {string} contentType The content type identifier
+ * @property {(GostASN1.Sequence|CryptoOperationData)} content The content
+ */
+var ContentType = OBJECT_IDENTIFIER
+
+const ContentInfo = ATTRIBUTE({
+  contentType: ContentType,
+  content: function (type) {
+    return CTX(0, EXPLICIT(type))
+  },
+}, 'contentType', 'content', undefined, 'CMS')({
+  data: OCTET_STRING,
+  signedData: COMBINE(SignedData),
+  envelopedData: COMBINE(EnvelopedData),
+  digestedData: COMBINE(DigestedData),
+  encryptedData: COMBINE(EncryptedData),
+  authData: COMBINE(AuthenticatedData),
+  encryptedKeyPkg: COMBINE(EncryptedKeyPackage),
+  aKeyPackage: COMBINE(AsymmetricKeyPackage),
+})
+
+const DigestInfo = SEQUENCE({
+  digestAlgorithm: DigestAlgorithmIdentifier,
+  digest: Digest,
+})
+// </editor-fold>
+
+/*
+ * PFX format syntax PKCS#12
+ *
+ * http://tools.ietf.org/html/rfc7292
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const PKCS12Attributes = Attributes({
+  friendlyName: SET_OF_SINGLE(BMPString),
+  keyProviderNameAttr: SET_OF_SINGLE(BMPString),
+  localKeyId: SET_OF_SINGLE(OCTET_STRING),
+  certKeyIdentifierPropId: SET_OF_SINGLE(OCTET_STRING),
+})
+
+const SafeBagType = OBJECT_IDENTIFIER
+
+const CertType = OBJECT_IDENTIFIER
+
+const CRLType = OBJECT_IDENTIFIER
+
+const SecretType = OBJECT_IDENTIFIER
+
+const KeyBag = PrivateKeyInfo
+
+const PKCS8ShroudedKeyBag = EncryptedPrivateKeyInfo
+
+const CertBag = ATTRIBUTE({
+  certId: CertType,
+  certValue: function (type) {
+    return CTX(0, EXPLICIT(type))
+  },
+}, 'certId', 'certValue')({
+  // DER-encoded X.509 certificate stored in OCTET STRING
+  x509Certificate: OCTET_STRING(ENCAPSULATES(Certificate)),
+  // Base64-encoded SDSI certificate stored in IA5String
+  sdsiCertificate: IA5String,
+}, OCTET_STRING)
+
+const CRLBag = ATTRIBUTE({
+  crlId: CRLType,
+  crlValue: function (type) {
+    return CTX(0, EXPLICIT(type))
+  },
+}, 'crlId', 'crlValue')({
+  // DER-encoded X.509 certificate stored in OCTET STRING
+  x509CRL: OCTET_STRING(ENCAPSULATES(CertificateList)),
+}, OCTET_STRING)
+
+const SecretBag = ATTRIBUTE({
+  secretTypeId: SecretType,
+  secretValue: function (type) {
+    return CTX(0, EXPLICIT(type))
+  },
+}, 'secretTypeId', 'secretValue')({
+  secret: OCTET_STRING,
+}, OCTET_STRING)
+
+const SafeBag = ATTRIBUTE({
+  bagId: SafeBagType,
+  bagValue: function (type) {
+    return CTX(0, EXPLICIT(type))
+  },
+  bagAttributes: OPTIONAL(PKCS12Attributes),
+}, 'bagId', 'bagValue')(function (type) {
+  return ({
+    keyBag: KeyBag,
+    pkcs8ShroudedKeyBag: PKCS8ShroudedKeyBag,
+    certBag: CertBag,
+    crlBag: CRLBag,
+    secretBag: SecretBag,
+    safeContentsBag: SafeContents, // recursion
+  })[type]
+})
+
+/**
+ * The SafeContents Type<br><br>
+ *
+ * The sixth type of bag that can be held in a SafeBag is a
+ * SafeContents. This recursive structure allows for arbitrary nesting
+ * of multiple KeyBags, PKCS8ShroudedKeyBags, CertBags, CRLBags, and
+ * SecretBags within the top-level SafeContents.
+ * <pre>
+ *  SafeContents ::= SEQUENCE OF SafeBag
+ *   SafeBag ::= SEQUENCE {
+ *       bagId BAG-TYPE.&id ({PKCS12BagSet})
+ *       bagValue [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
+ *       bagAttributes SET OF PKCS12Attribute OPTIONAL
+ *   }
+ *
+ *   PKCS12Attribute ::= SEQUENCE {
+ *       attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
+ *       attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
+ *   } -- This type is compatible with the X.500 type ’Attribute’
+ *
+ *   PKCS12AttrSet ATTRIBUTE ::= {
+ *       friendlyName | -- from PKCS #9 [23]
+ *       localKeyId, -- from PKCS #9
+ *       ... -- Other attributes are allowed
+ *   }
+ * </pre>
+ * The SafeContents type is made up of SafeBags. Each SafeBag holds one
+ * piece of information -- a key, a certificate, etc. -- which is
+ * identified by an object identifier.<br><br>
+ *
+ * See {@link GostASN1.ContentInfo} and {@link GostASN1.PFX}<br><br>
+ *
+ * RFC 7292 references {@link http://tools.ietf.org/html/rfc7292}
+ * @class GostASN1.SafeContents
+ */
+var SafeContents = SEQUENCE_OF(SafeBag)
+
+/**
+ * The AuthenticatedSafe<br><br>
+ * Each compliant platform shall be able to import and export
+ * AuthenticatedSafe PDUs wrapped in PFX PDUs.<br>
+ * For integrity, the AuthenticatedSafe is either signed (if public-key
+ * integrity mode is used) or MACed (if password integrity mode is used)
+ * to produce a PFX PDU.
+ * <pre>
+ *      AuthenticatedSafe ::= SEQUENCE OF ContentInfo
+ *
+ *      -- Data if unencrypted
+ *      -- EncryptedData if password-encrypted
+ *      -- EnvelopedData if public key-encrypted
+ * </pre>
+ * As mentioned, the contentType field of authSafe shall be of type data
+ * or signedData. The content field of the authSafe shall, either
+ * directly (data case) or indirectly (signedData case), contain a BER-
+ * encoded value of type AuthenticatedSafe.<br><br>
+ *
+ * See {@link GostASN1.ContentInfo} and {@link GostASN1.PFX}<br><br>
+ *
+ * RFC 7292 references {@link http://tools.ietf.org/html/rfc7292}
+ *
+ * @class GostASN1.AuthenticatedSafe
+ */
+const AuthenticatedSafe = SEQUENCE_OF(ContentInfo)
+
+const MacData = SEQUENCE({
+  mac: DigestInfo,
+  macSalt: OCTET_STRING,
+  // Note: The default is for historical reasons and its use is deprecated.
+  iterations: DEFAULT(INTEGER, 1),
+})
+
+/**
+ * PFX format syntax<br><br>
+ *
+ * This format corresponds to the data model presented above, with
+ * wrappers for privacy and integrity. This section makes free
+ * reference to PKCS #7 {@link GostASN1.ContentInfo}<br>
+ * All modes of direct exchange use the same PDU format.  ASN.1 and BER-
+ * encoding ensure platform independence.<br>
+ * This standard has one ASN.1 export: PFX.  This is the outer integrity
+ * wrapper.<br><br>
+ * Instances of PFX contain:
+ *  <ol>
+ *  <li>A version indicator.  The version shall be v3 for this version of
+ *      this document.</li>
+ *  <li>A PKCS #7 ContentInfo, whose contentType is signedData in public-
+ *      key integrity mode and data in password integrity mode.</li>
+ *  <li>An optional instance of MacData, present only in password
+ *      integrity.  This object, if present, contains a PKCS #7
+ *      DigestInfo, which holds the MAC value, a macSalt, and an
+ *      iterationCount.  As described in Appendix B, the MAC key is
+ *      derived from the password, the macSalt, and the iterationCount;
+ *      the MAC is computed from the authSafe value and the MAC key via HMAC.
+ *      The password and the MAC key are not actually present anywhere in the PFX.
+ *      The salt and (to a certain extent) the iteration count thwarts dictionary
+ *      attacks against the integrity password. </li>
+ *  </ol>
+ *  <pre>
+ *  PFX ::= SEQUENCE {
+ *      version     INTEGER {v3(3)}(v3,...),
+ *      authSafe    ContentInfo,
+ *      macData     MacData OPTIONAL
+ *  }
+ *
+ *  MacData ::= SEQUENCE {
+ *      mac         DigestInfo,
+ *      macSalt     OCTET STRING,
+ *      iterations  INTEGER DEFAULT 1
+ *      -- Note: The default is for historical reasons and its
+ *      --       use is deprecated.
+ *  }
+ *  </pre>
+ * See {@link GostASN1.ContentInfo}<br><br>
+ *
+ * RFC 7292 references {@link http://tools.ietf.org/html/rfc7292}
+ * @class GostASN1.PFX
+ * @extends GostASN1.Sequence
+ * @property {number} version Encoded version number
+ * @property {GostASN1.ContentInfo} authSafe ContentInfo with {@link GostASN1.AuthenticatedSafe} content
+ */
+const PFX = SEQUENCE({
+  version: INTEGER,
+  authSafe: ContentInfo,
+  macData: OPTIONAL(MacData),
+}, 'PFX')
+// </editor-fold>
+
+/*
+ * Certificate Request Message Format
+ *
+ * http://tools.ietf.org/html/rfc4211
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const RegToken = UTF8String
+
+const Authenticator = UTF8String
+
+const CertId = SEQUENCE({
+  issuer: GeneralName,
+  serialNumber: INTEGER,
+})
+const OldCertId = CertId
+
+const ProtocolEncrKey = SubjectPublicKeyInfo
+
+const EncryptedValue = SEQUENCE({
+  // the intended algorithm for which the value will be used
+  intendedAlg: OPTIONAL(CTX(0, IMPLICIT(AlgorithmIdentifier))),
+  // the symmetric algorithm used to encrypt the value
+  symmAlg: OPTIONAL(CTX(1, IMPLICIT(AlgorithmIdentifier))),
+  // the (encrypted) symmetric key used to encrypt the value
+  encSymmKey: OPTIONAL(CTX(2, IMPLICIT(BIT_STRING))),
+  // algorithm used to encrypt the symmetric key
+  keyAlg: OPTIONAL(CTX(3, IMPLICIT(AlgorithmIdentifier))),
+  valueHint: OPTIONAL(CTX(4, IMPLICIT(OCTET_STRING))),
+  // a brief description or identifier of the encValue content
+  // (may be meaningful only to the sending entity, and used only
+  // if EncryptedValue might be re-examined by the sending entity
+  // in the future)
+  encValue: BIT_STRING,
+})
+const KeyGenParameters = OCTET_STRING
+
+// The encrypted private key MUST be placed in the envelopedData
+// encryptedContentInfo encryptedContent OCTET STRING.
+var EncryptedKey = CHOICE({
+  encryptedValue: EncryptedValue, // Deprecated
+  envelopedData: CTX(0, IMPLICIT(EnvelopedData)),
+}, function (value) {
+  return value.encryptedContentInfo ? 'envelopedData' : 'encryptedValue'
+})
+
+const PKIArchiveOptions = CHOICE({
+  // the actual value of the private key
+  encryptedPrivKey: CTX(0, EncryptedKey),
+  // parameters that allow the private key to be re-generated
+  keyGenParameters: CTX(1, IMPLICIT(KeyGenParameters)),
+  // set to TRUE if sender wishes receiver to archive the private
+  // key of a key pair that the receiver generates in response to
+  // this request; set to FALSE if no archival is desired.
+  archiveRemGenPrivKey: CTX(2, IMPLICIT(BOOLEAN)),
+})
+
+const SinglePubInfo = SEQUENCE({
+  pubMethod: INTEGER({
+    dontCare: 0,
+    x500: 1,
+    web: 2,
+    ldap: 3,
+  }),
+  pubLocation: OPTIONAL(GeneralName),
+})
+
+// pubInfos MUST NOT be present if action is "dontPublish"
+// (if action is "pleasePublish" and pubInfos is omitted,
+// "dontCare" is assumed)
+const PKIPublicationInfo = SEQUENCE({
+  action: INTEGER({
+    dontPublish: 0,
+    pleasePublish: 1,
+  }),
+  pubInfos: OPTIONAL(SEQUENCE_OF(SinglePubInfo)),
+})
+
+const SubsequentMessage = INTEGER({
+  // requests that resulting certificate be encrypted for the
+  // end entity (following which, POP will be proven in a
+  // confirmation message)
+  encrCert: 0,
+  // requests that CA engage in challenge-response exchange with
+  // end entity in order to prove private key possession
+  challengeResp: 1,
+})
+
+const POPOPrivKey = CHOICE({
+  // possession is proven in this message (which contains the private
+  // key itself (encrypted for the CA))
+  thisMessage: CTX(0, IMPLICIT(BIT_STRING)), // Deprecated
+  subsequentMessage: CTX(1, IMPLICIT(SubsequentMessage)),
+  // possession will be proven in a subsequent message
+  dhMAC: CTX(2, IMPLICIT(BIT_STRING)), // Deprecated
+  agreeMAC: CTX(3, IMPLICIT(PKMACValue)),
+  encryptedKey: CTX(4, IMPLICIT(EnvelopedData)),
+})
+
+const PBMParameter = SEQUENCE({
+  salt: OCTET_STRING,
+  // AlgId for a One-Way Function (SHA-1 recommended)
+  owf: AlgorithmIdentifier,
+  // number of times the OWF is applied
+  iterationCount: INTEGER,
+  // the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11], or HMAC [HMAC, RFC2202])
+  mac: AlgorithmIdentifier,
+})
+
+var PKMACValue = SEQUENCE({
+  // algorithm value shall be PasswordBasedMac {1 2 840 113533 7 66 13}
+  // parameter value is PBMParameter
+  algId: AlgorithmIdentifier,
+  value: BIT_STRING,
+})
+
+const POPOSigningKeyInput = SEQUENCE({
+  authInfo: CHOICE({
+    // used only if an authenticated identity has been
+    // established for the sender (e.g., a DN from a
+    // previously-issued and currently-valid certificate)
+    sender: CTX(0, EXPLICIT(GeneralName)), // GeneralName choice - explicit
+    // used if no authenticated GeneralName currently exists for
+    // the sender; publicKeyMAC contains a password-based MAC
+    // on the DER-encoded value of publicKey
+    publicKeyMAC: PKMACValue,
+  }),
+  publicKey: SubjectPublicKeyInfo,
+}) // from CertTemplate
+
+const POPOSigningKey = SEQUENCE({
+  poposkInput: OPTIONAL(CTX(0, POPOSigningKeyInput)),
+  algorithmIdentifier: AlgorithmIdentifier,
+  signature: BIT_STRING,
+})
+
+const ProofOfPossession = CHOICE({
+  // used if the RA has already verified that the requester is in
+  // possession of the private key
+  raVerified: CTX(0, IMPLICIT(NULL)),
+  signature: CTX(1, IMPLICIT(POPOSigningKey)),
+  keyEncipherment: CTX(2, IMPLICIT(POPOPrivKey)),
+  keyAgreement: CTX(3, IMPLICIT(POPOPrivKey)),
+})
+
+const Controls = SEQUENCE_OF(AttributeTypeAndValue({
+  regToken: RegToken,
+  authenticator: Authenticator,
+  pkiPublicationInfo: PKIPublicationInfo,
+  pkiArchiveOptions: PKIArchiveOptions,
+  oldCertID: OldCertId,
+  protocolEncrKey: ProtocolEncrKey,
+}))
+
+const OptionalValidity = SEQUENCE({
+  notBefore: OPTIONAL(CTX(0, IMPLICIT(Time))),
+  notAfter: OPTIONAL(CTX(1, IMPLICIT(Time))),
+}) // at least one MUST be present
+
+const CertTemplate = SEQUENCE({
+  version: OPTIONAL(CTX(0, IMPLICIT(Version))),
+  serialNumber: OPTIONAL(CTX(1, IMPLICIT(INTEGER))),
+  signingAlg: OPTIONAL(CTX(2, IMPLICIT(AlgorithmIdentifier))),
+  issuer: OPTIONAL(CTX(3, IMPLICIT(Name))),
+  validity: OPTIONAL(CTX(4, IMPLICIT(OptionalValidity))),
+  subject: OPTIONAL(CTX(5, IMPLICIT(Name))),
+  publicKey: OPTIONAL(CTX(6, IMPLICIT(SubjectPublicKeyInfo))),
+  issuerUID: OPTIONAL(CTX(7, IMPLICIT(UniqueIdentifier))),
+  subjectUID: OPTIONAL(CTX(8, IMPLICIT(UniqueIdentifier))),
+  extensions: OPTIONAL(CTX(9, IMPLICIT(Extensions))),
+})
+
+const CertRequest = SEQUENCE({
+  certReqId: INTEGER, // ID for matching request and reply
+  certTemplate: CertTemplate, // Selected fields of cert to be issued
+  controls: OPTIONAL(Controls),
+}) // Attributes affecting issuance
+
+const UTF8Pairs = UTF8String
+
+const CertReq = CertRequest
+
+const EncKeyWithID = SEQUENCE({
+  privateKey: PrivateKeyInfo,
+  identifier: OPTIONAL(CHOICE({
+    string: UTF8String,
+    generalName: GeneralName,
+  }, function (value) {
+    return typeof value === 'string' || value instanceof String ?
+      'string' : 'generalName'
+  })),
+})
+
+const CertReqMsg = SEQUENCE({
+  certReq: CertRequest,
+  popo: OPTIONAL(ProofOfPossession),
+  // content depends upon key type
+  regInfo: OPTIONAL(SEQUENCE_OF(AttributeTypeAndValue({
+    utf8Pairs: UTF8Pairs,
+    certReq: CertReq,
+    encKeyWithID: EncKeyWithID,
+  }))),
+})
+
+const CertReqMessages = SEQUENCE_OF(CertReqMsg)
+
+// </editor-fold>
+
+/*
+ * Certificate Management over CMS
+ *
+ * http://tools.ietf.org/html/rfc5272
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const PendInfo = SEQUENCE({
+  pendToken: OCTET_STRING,
+  pendTime: GeneralizedTime,
+})
+
+const CMCStatus = INTEGER({
+  success: 0,
+  failed: 2,
+  pending: 3,
+  noSupport: 4,
+  confirmRequired: 5,
+  popRequired: 6,
+  partial: 7,
+})
+
+const CMCFailInfo = INTEGER({
+  badAlg: 0,
+  badMessageCheck: 1,
+  badRequest: 2,
+  badTime: 3,
+  badCertId: 4,
+  unsupportedExt: 5,
+  mustArchiveKeys: 6,
+  badIdentity: 7,
+  popRequired: 8,
+  popFailed: 9,
+  noKeyReuse: 10,
+  internalCAError: 11,
+  tryLater: 12,
+  authDataFail: 13,
+})
+
+const CMCStatusInfo = SEQUENCE({
+  cMCStatus: CMCStatus,
+  bodyList: SEQUENCE_OF(BodyPartID),
+  statusString: OPTIONAL(UTF8String),
+  otherInfo: OPTIONAL(CHOICE({
+    failInfo: CMCFailInfo,
+    pendInfo: PendInfo,
+  })),
+})
+
+const AddExtensions = SEQUENCE({
+  pkiDataReference: BodyPartID,
+  certReferences: SEQUENCE_OF(BodyPartID),
+  extensions: SEQUENCE_OF(Extension),
+})
+
+const LraPopWitness = SEQUENCE({
+  pkiDataBodyid: BodyPartID,
+  bodyIds: SEQUENCE_OF(BodyPartID),
+})
+
+const GetCert = SEQUENCE({
+  issuerName: GeneralName,
+  serialNumber: INTEGER,
+})
+
+const GetCRL = SEQUENCE({
+  issuerName: Name,
+  cRLName: OPTIONAL(GeneralName),
+  time: OPTIONAL(GeneralizedTime),
+  reasons: OPTIONAL(ReasonFlags),
+})
+
+const RevokeRequest = SEQUENCE({
+  issuerName: Name,
+  serialNumber: INTEGER,
+  reason: CRLReason,
+  invalidityDate: OPTIONAL(GeneralizedTime),
+  passphrase: OPTIONAL(OCTET_STRING),
+  comment: OPTIONAL(UTF8String),
+})
+
+const DecryptedPOP = SEQUENCE({
+  bodyPartID: BodyPartID,
+  thePOPAlgID: AlgorithmIdentifier,
+  thePOP: OCTET_STRING,
+})
+
+const CMCCertId = IssuerAndSerialNumber
+
+const BodyPartReference = CHOICE({
+  bodyPartID: BodyPartID,
+  bodyPartPath: BodyPartPath,
+})
+
+const CMCStatusInfoV2 = SEQUENCE({
+  cMCStatus: CMCStatus,
+  bodyList: SEQUENCE_OF(BodyPartReference),
+  statusString: OPTIONAL(UTF8String),
+  otherInfo: OPTIONAL(CHOICE({
+    failInfo: CMCFailInfo,
+    pendInfo: PendInfo,
+    extendedFailInfo: SEQUENCE({
+      failInfoOID: OBJECT_IDENTIFIER,
+      failInfoValue: AttributeValue,
+    }),
+  })),
+})
+
+const PublishTrustAnchors = SEQUENCE({
+  seqNumber: INTEGER,
+  hashAlgorithm: AlgorithmIdentifier,
+  anchorHashes: SEQUENCE_OF(OCTET_STRING),
+})
+
+const AuthPublish = BodyPartID
+
+const BodyPartList = SEQUENCE_OF(BodyPartID)
+
+const CMCPublicationInfo = SEQUENCE({
+  hashAlg: AlgorithmIdentifier,
+  certHashes: SEQUENCE_OF(OCTET_STRING),
+  pubInfo: PKIPublicationInfo,
+})
+
+const ModCertTemplate = SEQUENCE({
+  pkiDataReference: BodyPartPath,
+  certReferences: BodyPartList,
+  replace: DEFAULT(BOOLEAN, true),
+  certTemplate: CertTemplate,
+})
+
+const ControlsProcessed = SEQUENCE({
+  bodyList: SEQUENCE_OF(BodyPartReference),
+})
+
+const IdentifyProofV2 = SEQUENCE({
+  proofAlgID: AlgorithmIdentifier,
+  macAlgId: AlgorithmIdentifier,
+  witness: OCTET_STRING,
+})
+
+const PopLinkWitnessV2 = SEQUENCE({
+  keyGenAlgorithm: AlgorithmIdentifier,
+  macAlgorithm: AlgorithmIdentifier,
+  witness: OCTET_STRING,
+})
+
+const TaggedCertificationRequest = SEQUENCE({
+  bodyPartID: BodyPartID,
+  certificationRequest: CertificationRequest,
+})
+
+const TaggedContentInfo = SEQUENCE({
+  bodyPartID: BodyPartID,
+  contentInfo: ContentInfo,
+})
+
+const OtherMsg = SEQUENCE({
+  bodyPartID: BodyPartID,
+  otherMsgType: OBJECT_IDENTIFIER,
+  otherMsgValue: ANY,
+}) //DEFINED BY otherMsgType
+
+const TaggedRequest = CHOICE({
+  tcr: CTX(0, IMPLICIT(TaggedCertificationRequest)),
+  crm: CTX(1, IMPLICIT(CertReqMsg)),
+  orm: CTX(2, IMPLICIT(SEQUENCE({
+    bodyPartID: BodyPartID,
+    requestMessageType: OBJECT_IDENTIFIER,
+    requestMessageValue: ANY,
+  }))),
+}) // DEFINED BY requestMessageType
+
+const EncryptedPOP = SEQUENCE({
+  request: TaggedRequest,
+  cms: ContentInfo,
+  thePOPAlgID: AlgorithmIdentifier,
+  witnessAlgID: AlgorithmIdentifier,
+  witness: OCTET_STRING,
+})
+
+const TaggedAttribute = ATTRIBUTE({
+  bodyPartID: BodyPartID,
+  attrType: OBJECT_IDENTIFIER,
+  attrValues: function (type) {
+    return SET_OF(type)
+  },
+}, 'attrType', 'attrValues', AttributeValue)({
+  statusInfo: CMCStatusInfo,
+  identification: UTF8String,
+  identityProof: OCTET_STRING,
+  dataReturn: OCTET_STRING,
+  transactionId: INTEGER,
+  senderNonce: OCTET_STRING,
+  recipientNonce: OCTET_STRING,
+  addExtensions: AddExtensions,
+  encryptedPOP: EncryptedPOP,
+  decryptedPOP: DecryptedPOP,
+  lraPOPWitness: LraPopWitness,
+  getCert: GetCert,
+  getCRL: GetCRL,
+  revokeRequest: RevokeRequest,
+  regInfo: OCTET_STRING,
+  responseInfo: OCTET_STRING,
+  queryPending: OCTET_STRING,
+  popLinkRandom: OCTET_STRING,
+  popLinkWitness: OCTET_STRING,
+  confirmCertAcceptance: CMCCertId,
+  statusInfoV2: CMCStatusInfoV2,
+  trustedAnchors: PublishTrustAnchors,
+  authPublish: AuthPublish,
+  batchRequests: BodyPartList,
+  batchResponses: BodyPartList,
+  publishCert: CMCPublicationInfo,
+  modCertTemplate: ModCertTemplate,
+  controlProcessed: ControlsProcessed,
+  popLinkWitnessV2: PopLinkWitnessV2,
+  identityProofV2: IdentifyProofV2,
+})
+/**
+ * PKIData Content Type<br><br>
+ *
+ * The PKIData content type is used for the Full PKI Request.  A PKIData
+ * content type is identified by:
+ * <pre>
+ *   id-cct-PKIData ::= {id-pkix id-cct(12) 2 }
+ * </pre>
+ * The ASN.1 structure corresponding to the PKIData content type is:
+ * <pre>
+ *   PKIData ::= SEQUENCE {
+ *       controlSequence    SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
+ *       reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,
+ *       cmsSequence        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
+ *       otherMsgSequence   SEQUENCE SIZE(0..MAX) OF OtherMsg
+ *   }
+ * </pre>
+ * All certification requests encoded into a single PKIData SHOULD be
+ * for the same identity.  RAs that batch process (see Section 6.17) are
+ * expected to place the PKI Requests received into the cmsSequence of a
+ * PKIData. <br><br>
+ * See {@link GostASN1.ContentInfo} and {@link GostASN1.PKIResponse}<br><br>
+ * RFC 5272 references {@link http://tools.ietf.org/html/rfc5272}
+ *
+ * @class GostASN1.PKIData
+ * @extends GostASN1.Sequence
+ * @property {GostASN1.Attributes[]} controlSequence
+ * @property {GostASN1.Sequence[]} reqSequence
+ * @property {GostASN1.ContentInfo[]} cmsSequence
+ * @property {GostASN1.Sequence[]} otherMsgSequence
+ */
+const PKIData = SEQUENCE({
+  controlSequence: SEQUENCE_OF(TaggedAttribute),
+  reqSequence: SEQUENCE_OF(TaggedRequest),
+  cmsSequence: SEQUENCE_OF(TaggedContentInfo),
+  otherMsgSequence: SEQUENCE_OF(OtherMsg),
+}, 'PKI REQUEST')
+
+/**
+ * PKIResponse Content Type<br><br>
+ *
+ * The PKIResponse content type is used for the Full PKI Response.  The
+ * PKIResponse content type is identified by:
+ * <pre>
+ *   id-cct-PKIResponse ::= {id-pkix id-cct(12) 3  }
+ * </pre>
+ * The ASN.1 structure corresponding to the PKIResponse content type is:
+ * <pre>
+ *    PKIResponse ::= SEQUENCE {
+ *        controlSequence   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
+ *        cmsSequence       SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
+ *        otherMsgSequence  SEQUENCE SIZE(0..MAX) OF OtherMsg
+ *    }
+ *
+ *    ReponseBody ::= PKIResponse
+ * </pre>
+ *
+ * Note: In [RFC2797], this ASN.1 type was named ResponseBody.  It has
+ * been renamed to PKIResponse for clarity and the old name kept as a
+ * synonym.<br><br>
+ *
+ * See {@link GostASN1.ContentInfo} and {@link GostASN1.PKIData}<br><br>
+ *
+ * RFC 5272 references {@link http://tools.ietf.org/html/rfc5272}
+ *
+ * @class GostASN1.PKIResponse
+ * @extends GostASN1.Sequence
+ * @property {GostASN1.Attributes[]} controlSequence
+ * @property {GostASN1.ContentInfo[]} cmsSequence
+ * @property {GostASN1.Sequence[]} otherMsgSequence
+ */
+const PKIResponse = SEQUENCE({
+  controlSequence: SEQUENCE_OF(TaggedAttribute),
+  cmsSequence: SEQUENCE_OF(TaggedContentInfo),
+  otherMsgSequence: SEQUENCE_OF(OtherMsg),
+}, 'PKI RESPONSE')
+
+// </editor-fold>
+
+/**
+ * ASN.1 syntax definitions
+ *
+ * @class GostASN1
+ */
+function GostASN1() {
+}
+
+GostASN1.prototype = {
+  /**
+     * Gost PrivateKey info encoder
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostPrivateKeyInfo
+     */
+  GostPrivateKeyInfo: GostPrivateKeyInfo,
+  /**
+     * Gost subject PublicKey info encoder
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostSubjectPublicKeyInfo
+     */
+  GostSubjectPublicKeyInfo: GostSubjectPublicKeyInfo,
+  /**
+     * CryptoPro key container header
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostKeyContainer
+     */
+  GostKeyContainer: GostKeyContainer,
+  /**
+     * CryptoPro key container name
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostKeyContainerName
+     */
+  GostKeyContainerName: GostKeyContainerName,
+  /**
+     * CryptoPro encrypted PrivateKey for key containers
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostPrivateKeys
+     */
+  GostPrivateKeys: GostPrivateKeys,
+  /**
+     * CryptoPro PrivateKey masks for key containers
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostPrivateMasks
+     */
+  GostPrivateMasks: GostPrivateMasks,
+  /**
+     * ViPNet key container
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.ViPNetInfo
+     */
+  ViPNetInfo: ViPNetInfo,
+  /**
+     * Gost Signature encoders
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostSignature
+     */
+  GostSignature: GostSignature,
+  /**
+     * Gost Encrypted key encoder for CMS
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostEncryptedKey
+     */
+  GostEncryptedKey: GostEncryptedKey,
+  /**
+     * SignalCom wrapped PrivateKey
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.GostWrappedPrivateKey
+     */
+  GostWrappedPrivateKey: GostWrappedPrivateKey,
+  /**
+     * PKCS#8 PrivateKey info
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.PrivateKeyInfo
+     */
+  PrivateKeyInfo: PrivateKeyInfo,
+  /**
+     * PKCS#8 encrypted PrivateKey info
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.EncryptedPrivateKeyInfo
+     */
+  EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo,
+  /**
+     * X.509 subject PublicKey info
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.SubjectPublicKeyInfo
+     */
+  SubjectPublicKeyInfo: SubjectPublicKeyInfo,
+  /**
+     * X.509 To be signed Certificate
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.TBSCertificate
+     */
+  TBSCertificate: TBSCertificate,
+  /**
+     * X.509 Certificate
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.Certificate
+     */
+  Certificate: Certificate,
+  /**
+     * PKCS#10 Certification request definition
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.CertificationRequestInfo
+     */
+  CertificationRequestInfo: CertificationRequestInfo,
+  /**
+     * PKCS#10 Certification request
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.CertificationRequest
+     */
+  CertificationRequest: CertificationRequest,
+  /**
+     * X.509 To be signed CRL
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.TBSCertList
+     */
+  TBSCertList: TBSCertList,
+  /**
+     * X.509 CRL
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.CertificateList
+     */
+  CertificateList: CertificateList,
+  /**
+     * X.509 Attribute Certificate definition
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.AttributeCertificateInfo
+     */
+  AttributeCertificateInfo: AttributeCertificateInfo,
+  /**
+     * X.509 Attribute Certificate
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.AttributeCertificate
+     */
+  AttributeCertificate: AttributeCertificate,
+  /**
+     * CMS Signed Attributes
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.SignedAttributes
+     */
+  SignedAttributes: SignedAttributes,
+  /**
+     * CMS Unsigned Attributes
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.UnsignedAttributes
+     */
+  UnsignedAttributes: UnsignedAttributes,
+  /**
+     * CMS Content definition
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.ContentInfo
+     */
+  ContentInfo: ContentInfo,
+  /**
+     * PKCS#12 Safe Contents
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.SafeContents
+     */
+  SafeContents: SafeContents,
+  /**
+     * PKCS#12 Authenticated Safe
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.AuthenticatedSafe
+     */
+  AuthenticatedSafe: AuthenticatedSafe,
+  /**
+     * PKCS#12 Personal Information Exchange (PFX)
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.PFX
+     */
+  PFX: PFX,
+  /**
+     * PKI Request
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.PKIData
+     */
+  PKIData: PKIData,
+  /**
+     * PKI Response
+     *
+     * @memberOf GostASN1
+     * @instance
+     * @type GostASN1.PKIResponse
+     */
+  PKIResponse: PKIResponse,
+}
+
+/**
+ * PKCS ASN.1 message syntax and converters
+ *
+ * @memberOf gostCrypto
+ * @type GostASN1
+ */
+gostCrypto.asn1 = new GostASN1()
+
+module.exports = GostASN1
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCMS.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCMS.js
new file mode 100644
index 0000000..bd02f15
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCMS.js
@@ -0,0 +1,1292 @@
+/**
+ * @file Implements the Cryptographic Message Syntax as specified in RFC-2630.
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const gostCrypto = require('./gostCrypto')
+const GostASN1 = require('./gostASN1')
+const GostCert = require('./gostCert')
+
+/*
+ * Common algorithms
+ */ // <editor-fold defaultstate="collapsed">
+const Promise = global.Promise
+const Object = global.Object
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
+
+const subtle = gostCrypto.subtle
+const asn1 = gostCrypto.asn1
+const coding = gostCrypto.coding
+const cert = gostCrypto.cert
+const providers = gostCrypto.security.providers
+
+// Expand javascript object
+function expand() {
+  const r = {}
+  for (let i = 0, n = arguments.length; i < n; i++) {
+    const item = arguments[i]
+    if (typeof item === 'object') {
+      for (const name in item) {
+        if (item.hasOwnProperty(name)) {r[name] = item[name]}
+      }
+    }
+  }
+  return r
+}
+
+function defineProperty(object, name, descriptor, enumerable) {
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
+}
+
+function defineProperties(object, properties, enumerable) {
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
+}
+
+// Extend javascript class
+function extend(Super, Class, propertiesObject, propertiesClass) {
+  // If constructor not defined
+  if (typeof Class !== 'function') {
+    propertiesClass = propertiesObject
+    propertiesObject = Class
+    Class = function () {
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
+  Class.prototype = Object.create(Super.prototype, {
+    constructor: {
+      value: Class,
+    },
+    superclass: {
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject, true)}
+  // Inherites super class properties
+  if (Super !== Object) {
+    for (const name in Super) {Class[name] = Super[name]}
+  }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
+
+// Self resolver
+function call(callback) {
+  try {
+    callback()
+  } catch (e) {
+  }
+}
+
+// Check the buffers to equal
+function equalBuffers(r1, r2) {
+  const s1 = new Uint8Array(r1),
+    s2 = new Uint8Array(r2)
+  if (s1.length !== s2.length) {return false}
+  for (let i = 0, n = s1.length; i < n; i++) {
+    if (s1[i] !== s2[i]) {return false}
+  }
+  return true
+}
+
+// True if equal numbers
+const equalNumbers = (function () {
+  // Convert number to bigendian hex string
+  const hex = function (s) {
+    const t = typeof s
+    return t === 'undefined' || s === '' ? '0' :
+      t === 'number' || s instanceof Number ? s.toString(16).toLowerCase() :
+        s.replace('0x', '').toLowerCase()
+  }
+  // Zero left padding
+  const lpad = function (s, size) {
+    return (new Array(size + 1).join('0') + s).slice(-size)
+  }
+  return function (s1, s2) {
+    s1 = hex(s1)
+    s2 = hex(s2)
+    const len = Math.max(s1.length, s2.length)
+    return lpad(s1, len) === lpad(s2, len)
+  }
+})()
+
+// Check equal names
+function equalNames(name1, name2) {
+  for (var key in name1) {
+    if (name1[key] !== name2[key]) {return false}
+  }
+  for (var key in name2) {
+    if (name1[key] !== name2[key]) {return false}
+  }
+  return true
+}
+
+// Add unique value to array
+function addUnique(array, item, comparator) {
+  let found = false
+  for (let i = 0, n = array.length; i < n; i++) {
+    if (comparator(array[i], item)) {
+      found = true
+      break
+    }
+  }
+  if (!found) {array.push(item)}
+}
+
+// Set content data
+function setContentData(object, data) {
+  const content = object.content
+  switch (object.contentType) {
+    case 'data':
+      object.content = data.content
+      break
+    case 'digestedData':
+    case 'signedData':
+    case 'authData':
+      content.encapContentInfo = {
+        eContentType: data.contentType,
+        eContent: data.content,
+      }
+      break
+    case 'envelopedData':
+    case 'encryptedData':
+      content.encryptedContentInfo = {
+        contentType: data.contentType,
+        encryptedContent: data.content,
+      }
+      break
+  }
+}
+
+// Get content data
+function getContentData(object) {
+  const content = object.content
+  switch (object.contentType) {
+    case 'data':
+      return {
+        contentType: object.contentType,
+        content: object.content,
+      }
+    case 'digestedData':
+    case 'signedData':
+    case 'authData':
+      var encap = content.encapContentInfo
+      return {
+        contentType: encap.eContentType,
+        content: encap.eContent,
+      }
+    case 'envelopedData':
+    case 'encryptedData':
+      var enc = content.encryptedContentInfo
+      return {
+        contentType: enc.contentType,
+        content: enc.encryptedContent,
+      }
+  }
+}
+
+// Check content info type
+function checkContentInfo(contentInfo) {
+  let content, contentType
+  if (contentInfo) {
+    if (typeof contentInfo === 'string') {
+      try {
+        contentInfo = coding.PEM.decode(contentInfo)
+      } catch (e1) {
+        contentInfo = coding.Chars.decode(contentInfo)
+      }
+    }
+    if (contentInfo instanceof CryptoOperationData) {
+      try {
+        contentInfo = asn1.ContentInfo.decode(contentInfo)
+      } catch (e) {
+        contentInfo = { contentType: 'data', content: contentInfo }
+      }
+    }
+    contentType = contentInfo.contentType
+    if (!contentType) {throw new Error('Invalid content object')}
+    content = contentInfo.content
+    if (!(content instanceof CryptoOperationData)) {content = content.encode()}
+    return { contentType: contentType, content: content }
+  } contentInfo = { contentType: 'data' }
+  return contentInfo
+}
+
+function createContentInfo(contentInfo) {
+  try {
+    // Some provider has mistake to envelop ContentInfo enstead
+    // content field of ContentInfo
+    contentInfo = new asn1.ContentInfo(contentInfo.content, true)
+  } catch (e) {
+  }
+  // Create situable content info object
+  switch (contentInfo.contentType) {
+    case 'data':
+      return new DataContentInfo(contentInfo)
+    case 'digestedData':
+      return new DigestedDataContentInfo(contentInfo)
+    case 'signedData':
+      return new SignedDataContentInfo(contentInfo)
+    case 'encryptedData':
+      return new EncryptedDataContentInfo(contentInfo)
+    case 'envelopedData':
+      return new EnvelopedDataContentInfo(contentInfo)
+    default:
+      return new asn1.ContentInfo(contentInfo)
+  }
+}
+
+
+function matchCert(id, cert) {
+  return (id instanceof CryptoOperationData ? cert.extensions &&
+        equalBuffers(id, cert.extensions.subjectKeyIdentifier) :
+    equalNames(cert.issuer, id.issuer) &&
+        equalNumbers(cert.serialNumber, id.serialNumber))
+}
+
+// Get random values
+function getSeed(length) {
+  const seed = new Uint8Array(length)
+  gostCrypto.getRandomValues(seed)
+  return seed.buffer
+}
+
+// Salt size
+function saltSize(algorithm) {
+  switch (algorithm.id) {
+    case 'pbeWithSHAAnd40BitRC2-CBC':
+    case 'pbeWithSHAAnd128BitRC2-CBC':
+      return 8
+    case 'pbeUnknownGost':
+      return 16
+    case 'sha1':
+      return 20
+    default:
+      return 32
+  }
+}
+
+// Password to bytes
+function passwordData(derivation, password) {
+  if (!password) {return new CryptoOperationData(0)}
+  if (password instanceof CryptoOperationData) {return password}
+  if (typeof password !== 'string') {throw new Error('The password must be string or raw data type')}
+  if (derivation.name.indexOf('CPKDF') >= 0) {
+    // CryptoPro store password
+    const r = []
+    for (let i = 0; i < password.length; i++) {
+      const c = password.charCodeAt(i)
+      r.push(c & 0xff)
+      r.push(c >>> 8 & 0xff)
+      r.push(0)
+      r.push(0)
+    }
+    return new Uint8Array(r).buffer
+  } if (derivation.name.indexOf('PFXKDF') >= 0)
+  // PKCS#12 unicode password
+  {return coding.Chars.decode(`${password }\0`, 'unicode')}
+  return coding.Chars.decode(password, 'utf8')
+}
+
+// Define provider for encription algorithm
+function encryptionProvider(algorithm) {
+  const id = algorithm.id
+  for (const name in providers) {
+    const provider = providers[name]
+    if (provider.encryption.id === id) {return provider}
+  }
+}
+
+// </editor-fold>
+
+/**
+ * Provides facilities for handling certificates, CRLs, etc.
+ * @class GostCMS
+ */
+function GostCMS() {
+}
+
+/**
+ * Message templates
+ * <ul>
+ *      <li>providerName - provider name for key generation, default 'CP-01'</li>
+ *      <li>autoAddCert - automatic add signer certificate to signature, default false</li>
+ *      <li>useKeyIdentifier - true to add Signer as the SignerIdentifier (v3), otherwise, as the IssuerAndSerialNumber (v1) (default false).</li>
+ * </ul>
+ *
+ * @memberOf GostCMS
+ * @instance
+ */
+const options = { // <editor-fold defaultstate="collapsed">
+  providerName: 'CP-01',
+  autoAddCert: false,
+  useKeyIdentifier: false, // </editor-fold>
+}
+
+GostCMS.prototype.options = options
+
+/**
+ * The base class for all CMS objects.<br><br>
+ *
+ * A CMS object consists of a content type, and content.<br><br>
+ *
+ * @class GostCMS.DataContentInfo
+ * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The content object.
+ * @param {string} defaultSet The default object initialization set.
+ * @extends GostASN1.ContentInfo
+ */
+function DataContentInfo(contentInfo, defaultSet) // <editor-fold defaultstate="collapsed">
+{
+  asn1.ContentInfo.call(this, contentInfo || defaultSet || { contentType: 'data' })
+  if (defaultSet && this.contentType !== (defaultSet.contentType || 'data')) {throw new Error('Invalid content type')}
+} // </editor-fold>
+
+extend(asn1.ContentInfo, DataContentInfo, {
+  /**
+     * Indicates if this is a detached CMS object.
+     *
+     * @memberOf GostCMS.DataContentInfo
+     * @instance
+     * @returns {boolean} true if detached; false otherwise.
+     */
+  isDetached: { // <editor-fold defaultstate="collapsed">
+    value: false,
+    enumerable: true,
+    writable: true, // </editor-fold>
+  },
+  /**
+     * Indicates if an external (detached) signature must be created.
+     *
+     * @memberOf GostCMS.DataContentInfo
+     * @instance
+     * @param {boolean} createDetached True if detached; false otherwise.
+     */
+  writeDetached: function (createDetached) // <editor-fold defaultstate="collapsed">
+  {
+    // Define external signature mode
+    this.isDetached = createDetached
+  }, // </editor-fold>
+  /**
+     * Encode the message to binary format 'DER' or 'PEM'
+     *
+     * @memberOf GostCMS.DataContentInfo
+     * @instance
+     * @param {string} format
+     * @returns {FormatedData}
+     */ // <editor-fold defaultstate="collapsed">
+  encode: function (format) // <editor-fold defaultstate="collapsed">
+  {
+    if (this.isDetached) {
+      const data = getContentData(this)
+      setContentData(this, { contentType: data.contentType })
+      const result = asn1.ContentInfo.method('encode').call(this, format)
+      setContentData(this, data)
+      return result
+    } return asn1.ContentInfo.method('encode').call(this, format)
+  }, // </editor-fold>
+  /**
+     * Enclose content to document.
+     *
+     * @memberOf GostCMS.DataContentInfo
+     * @instance
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo
+     * @returns {Promise} Promise to return self object after enclose content
+     */
+  encloseContent: function (contentInfo) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      self.setEnclosed(contentInfo)
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Sets the content of attached document.<br><br>
+     *
+     * This is necessary only in detached mode.
+     *
+     * @memberOf GostCMS.DataContentInfo
+     * @instance
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo - The encapsulated CMS Object.
+     */
+  setEnclosed: function (contentInfo) // <editor-fold defaultstate="collapsed">
+  {
+    setContentData(this, checkContentInfo(contentInfo))
+  }, // </editor-fold>
+  /**
+     * Returns the document which attached. If the content is not attached, the CMS object
+     * which is returned will be degenerate.
+     *
+     * @memberOf GostCMS.DataContentInfo
+     * @instance
+     * @returns {GostASN1.ContentInfo} The encapsulated CMS Object.
+     */
+  getEnclosed: function () // <editor-fold defaultstate="collapsed">
+  {
+    return createContentInfo(getContentData(this))
+  }, // </editor-fold>
+})
+
+/**
+ * This class encapsulates a CMS object of content type binary data.
+ *
+ * @memberOf GostCMS
+ * @type GostCMS.DigestedDataContentInfo
+ */
+GostCMS.prototype.DataContentInfo = DataContentInfo
+
+/**
+ * This class encapsulates a CMS object of content type digested-data.
+ *
+ * @class GostCMS.DigestedDataContentInfo
+ * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo - The content that is to be signed.
+ * @extends GostCMS.DataContentInfo
+ * @extends GostASN1.DigestedData
+ */
+function DigestedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
+{
+  DataContentInfo.call(this, contentInfo, {
+    contentType: 'digestedData',
+    version: 0,
+    digestAlgorithm: providers[options.providerName].digest,
+    encapContentInfo: {
+      eContentType: 'data',
+    },
+    digest: new CryptoOperationData(0),
+  })
+} // </editor-fold>
+
+extend(DataContentInfo, DigestedDataContentInfo, {
+  /**
+     * Enclose the content and calculate the message digest with given digest algorithm
+     *
+     * @memberOf GostCMS.DigestedDataContentInfo
+     * @instance
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo Content data to be enclosed.
+     * @param {(AlgorithmIdentifier|string)} digestAlgorithm Digest algorithm or provider name
+     * @returns {Promise}
+     */
+  encloseContent: function (contentInfo, digestAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      // Set enclosed data
+      self.setEnclosed(contentInfo)
+
+      // Define digest algorithm
+      if (digestAlgorithm) {
+        const digestProvider = providers[digestAlgorithm]
+        self.digestAlgorithm = (digestProvider && digestProvider.digest) || digestAlgorithm
+      }
+
+      // Calculate digest
+      return subtle.digest(self.digestAlgorithm, self.encapContentInfo.eContent)
+    }).then(function (digest) {
+
+      // Set digest attribute
+      self.digest = digest
+    })
+  }, // </editor-fold>
+  /**
+     * Verify the Message Digest. <br><br>
+     *
+     * @memberOf GostCMS.DigestedDataContentInfo
+     * @instance
+     * @param contentInfo Detached content (optional)
+     * @returns {Promise} Promise to return enclosed object {@link GostASN1.ContentInfo} if digest verified
+     */
+  verify: function (contentInfo) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      // Append attached
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+
+      // Check data
+      const dataToVerify = self.encapContentInfo &&
+                self.encapContentInfo.eContent
+      if (!dataToVerify) {throw new Error('Detached content is not found')}
+
+      // Calculate digest
+      return subtle.digest(self.digestAlgorithm, self.encapContentInfo.eContent)
+    }).then(function (digest) {
+      if (!equalBuffers(digest, self.digest)) {throw Error('Message digest is not verified')}
+      // Return content
+      return createContentInfo({
+        contentType: self.encapContentInfo.eContentType,
+        content: self.encapContentInfo.eContent,
+      })
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * This class encapsulates a CMS object of content type digested-data.
+ *
+ * @memberOf GostCMS
+ * @type GostCMS.DigestedDataContentInfo
+ */
+GostCMS.prototype.DigestedDataContentInfo = DigestedDataContentInfo
+
+/**
+ * This class encapsulates a CMS object of content type signed-data.
+ *
+ * Use encloseContent or setEnclosed methods to add a enclosed content before add signatures
+ *
+ * @class GostCMS.SignedDataContentInfo
+ * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo - The signed content.
+ * @extends GostCMS.DataContentInfo
+ * @extends GostASN1.SignedData
+ */
+function SignedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
+{
+  DataContentInfo.call(this, contentInfo, {
+    contentType: 'signedData',
+    version: 1,
+    digestAlgorithms: [],
+    encapContentInfo: {
+      eContentType: 'data',
+    },
+    signerInfos: [],
+  })
+} // </editor-fold>
+
+extend(DataContentInfo, SignedDataContentInfo, {
+  /**
+     * Add a Signer using the the IssuerAndSerialNumber as the SignerIdentifier i.e a Version1 CMSSignerInfo
+     * or SubjectPublicKeyIdentifier as the SignerIdentifier i.e a Version3 CMSSignerInfo.
+     *
+     * @memberOf GostCMS.SignedDataContentInfo
+     * @instance
+     * @param {GostASN1.PrivateKeyInfo} signerKey Private Key of the signer.
+     * @param {GostCert.X509} signerCert Signer certificate or certificate chain
+     * @param {GostASN1.SignedAttributes} signedAttrs The set of signed attributes. Default undefined. If true or {} standard attributes will be appended: contentType and messageDigest
+     * @param {GostASN1.UnsignedAttributes} unsignedAttrs  The set of unsigned attributes. Default undefined.
+     * @returns {Promise} Promise to return self object after add signature
+     */
+  addSignature: function (signerKey, signerCert, signedAttrs, unsignedAttrs) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, signerInfo, dataToSign, signerCertChain
+    return new Promise(call).then(function () {
+      // Check attribures
+      if (!signerKey || !signerCert) {throw new Error('Signer key or certificate is not defined')}
+      // Cert chain
+      if (signerCert instanceof Array) {
+        signerCertChain = signerCert
+        signerCert = signerCertChain[0]
+      } else {signerCertChain = [signerCert]}
+      // Signature algorithm provider
+      const provider = signerCert.getProvider() ||
+                providers[options.providerName]
+      const useKeyIdentifier = options.useKeyIdentifier && signerCert.extensions &&
+                signerCert.extensions.subjectKeyIdentifier
+      // Get enclosed data
+      dataToSign = self.encapContentInfo.eContent
+      // Prepare signer info structure
+      signerInfo = {
+        version: useKeyIdentifier ? 2 : 0,
+        sid: useKeyIdentifier ? signerCert.extensions.subjectKeyIdentifier : {
+          issuer: signerCert.issuer,
+          serialNumber: signerCert.serialNumber,
+        },
+        digestAlgorithm: provider.digest,
+        signatureAlgorithm: signerCert.subjectPublicKeyInfo.algorithm,
+      }
+      // Set an unsigned attributes
+      if (unsignedAttrs) {signerInfo.unsignedAttrs = unsignedAttrs}
+      // For a signed attributes calculate digest
+      if (signedAttrs) {
+        if (typeof signedAttrs !== 'object') {signedAttrs = {}}
+        return subtle.digest(signerInfo.digestAlgorithm, dataToSign)
+      }
+    }).then(function (digest) {
+      if (digest) {
+        // Add standard signed attributes
+        signedAttrs.contentType = self.encapContentInfo.eContentType,
+        signedAttrs.messageDigest = digest,
+        signedAttrs.signingTime = new Date()
+        signerInfo.signedAttrs = signedAttrs,
+        // Now data to sign = attributes
+        dataToSign = asn1.SignedAttributes.encode(signerInfo.signedAttrs)
+      }
+
+      // Import the private key
+      return subtle.importKey('pkcs8', asn1.PrivateKeyInfo.encode(signerKey),
+        signerKey.privateKeyAlgorithm, false, ['sign'])
+    }).then(function (key) {
+
+      // Sign data
+      const algorithm = expand(signerInfo.signatureAlgorithm, { hash: signerInfo.digestAlgorithm })
+      return subtle.sign(algorithm, key, dataToSign)
+    }).then(function (signatureValue) {
+      signerInfo.signatureValue = signatureValue
+
+      // Add digest algorithm
+      addUnique(self.digestAlgorithms, signerInfo.digestAlgorithm, function (algorithm1, algorithm2) {
+        return algorithm1.id === algorithm2.id
+      })
+
+      // Add signer certificate
+      if (options.autoAddCert) {
+        if (!self.certificates) {self.certificates = []}
+        for (let i = 0, n = signerCertChain.length; i < n; i++) {
+          addUnique(self.certificates, signerCertChain[i], function (cert1, cert2) {
+            return equalNames(cert1.issuer, cert2.issuer) &&
+                            equalNumbers(cert1.serialNumber, cert2.serialNumber)
+          })
+        }
+      }
+
+      // Add signer info
+      self.signerInfos.push(signerInfo)
+    })
+  }, // </editor-fold>
+  /**
+     * Indicates if this object has any signers i.e. checks for the absence of any SignerInfo structures.
+     * CMS (RFC-2630) defines a degenerate object as one which has no signers.
+     *
+     * @memberOf GostCMS.SignedDataContentInfo
+     * @instance
+     * @returns {boolean} True if this object has no signers; false otherwise.
+     */
+  isDegenerate: { // <editor-fold defaultstate="collapsed">
+    get: function () {
+      return !(this.signerInfos && this.signerInfos.length > 0)
+    }, // </editor-fold>
+  },
+  /**
+     * Returns normally if this CMS signed data object contains at least one valid signature,
+     * according to the given trust policy; otherwise throws an Error.<br><br>
+     *
+     * In order to be considered valid, there must be at least one signature on this CMS
+     * message which is validated by one of the certificates included with it; furthermore,
+     * the validating certificate must itself be valid according to the given certificate
+     * trust policy. This latter validation process may involve examining the other certificates
+     * or CRLs included with this object, if called for by the trust policy.<br><br>
+     *
+     * If a signature is encountered for which a certification path can be found, but is
+     * invalid, an Error will be created, but will not be thrown until
+     * all other signatures have been checked. If another signature is found which is valid,
+     * then the method simply returns and no exception at all is thrown.
+     *
+     * @memberOf GostCMS.SignedDataContentInfo
+     * @instance
+     * @param {GostCert.CertificateTrustPolicy} trustPolicy The trust prolicy for verification
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The content that was signed (optional)
+     * @returns {Promise} Promise to return enclosed object {@link GostASN1.ContentInfo} if signature verified
+     */
+  verify: function (trustPolicy, contentInfo) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, result
+    return new Promise(call).then(function () {
+      // Append attached
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      if (!self.signerInfos || self.signerInfos.length === 0) {throw new Error('No signatures found')}
+      // Validate certificate of signers
+      return Promise.all(self.signerInfos.map(function (signerInfo, i) {
+        const sid = signerInfo.sid, selector = sid instanceof CryptoOperationData ? {
+          subjectKeyIdentifier: sid,
+        } : {
+          issuer: sid.issuer,
+          serialNumber: sid.serialNumber,
+        }
+        // Signing date
+        let date
+        if (signerInfo.signedAttrs && signerInfo.signedAttrs.signingTime) {date = signerInfo.signedAttrs.signingTime}
+        // Use certificate trust policy validation
+        return trustPolicy.getValidCertificate(selector,
+          self.certificates, self.crls, date).catch(function () {
+          return // Ignore error
+        })
+      }))
+
+    }).then(function (certs) {
+      // Get encapsulated data
+      const verifiers = []
+      // Verify signatures for each signers
+      certs.forEach(function (signerCert) {
+        if (signerCert) {
+          verifiers.push(self.verifySignature(signerCert).then(function (data) {
+            result = data // Enough one valid signature
+          }, function () {
+            return // Ignore error
+          }))
+        }
+      })
+      if (verifiers.length === 0) {throw new Error('Valid verification path not found')}
+      return Promise.all(verifiers)
+    }).then(function () {
+      if (!result) {throw Error('Verification path found but no valid signature')}
+      // Return content
+      return result
+    })
+  }, // </editor-fold>
+  /**
+     * Returns successfully if this CMS signed data object contains a signature which is
+     * validated by the given certificate and data; otherwise throws an Error.<br><br>
+     *
+     * This method verifies the specified signature directly and ignores any certificates
+     * or CRLs which may be contained in this CMS object. A more complex verification process,
+     * which does make use of attached certificates and CRLs, is provided by the verify method.
+     *
+     * @memberOf GostCMS.SignedDataContentInfo
+     * @instance
+     * @param {GostCert.X509} signerCert The signer certificate
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The content that was signed (optional)
+     * @returns {Promise} Promise to return enclosed object {@link GostASN1.ContentInfo} if signature verified
+     */
+  verifySignature: function (signerCert, contentInfo) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, signerInfo, dataToVerify, dataDigest
+    return new Promise(call).then(function () {
+      // Append attached
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      dataToVerify = self.encapContentInfo && self.encapContentInfo.eContent
+      if (!dataToVerify) {throw new Error('Detached content is not found')}
+      // Find signer
+      for (let i = 0; i < self.signerInfos.length; i++) {
+        const sid = self.signerInfos[i].sid
+        if (matchCert(sid, signerCert)) {
+          signerInfo = self.signerInfos[i]
+          break
+        }
+      }
+      if (!signerInfo) {throw new Error('Signature not found for the certificate')}
+      // Choice data for verification
+      if (signerInfo.signedAttrs) {
+        dataDigest = signerInfo.signedAttrs.messageDigest
+        if (!dataDigest) {throw new Error('Message digest must present in signed attributes')}
+
+        // To exclude implicit [0] need to reassemble signed attributes (auto on CTX object)
+        dataToVerify = signerInfo.signedAttrs.encode()
+      }
+      if (!dataToVerify) {throw new Error('Data for verification not found')}
+      // Verify signature
+      const algorithm = expand(signerInfo.signatureAlgorithm, { hash: signerInfo.digestAlgorithm })
+      return signerCert.verifySignature(dataToVerify, signerInfo.signatureValue, algorithm)
+    }).then(function (result) {
+      if (!result) {throw new Error('Signature not verified')}
+      // Verify digest
+      if (signerInfo.signedAttrs) {return subtle.digest(signerInfo.digestAlgorithm, self.encapContentInfo.eContent)}
+    }).then(function (digest) {
+      if (digest && !equalBuffers(digest, dataDigest)) {throw new Error('Message digest not verified')}
+      // Return content
+      return createContentInfo({
+        contentType: self.encapContentInfo.eContentType,
+        content: self.encapContentInfo.eContent,
+      })
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * This class encapsulates a CMS object of content type signed-data.
+ *
+ * @memberOf GostCMS
+ * @type GostCMS.SignedDataContentInfo
+ */
+GostCMS.prototype.SignedDataContentInfo = SignedDataContentInfo
+
+/**
+ * This class encapsulates a CMS object of content type encrypted-data.
+ *
+ * @class GostCMS.EncryptedDataContentInfo
+ * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The encrypted data content.
+ * @extends GostCMS.DataContentInfo
+ * @extends GostASN1.EncryptedData
+ */
+function EncryptedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
+{
+  DataContentInfo.call(this, contentInfo, {
+    contentType: 'encryptedData',
+    version: 0,
+    encryptedContentInfo: {
+      contentType: 'data',
+      contentEncryptionAlgorithm: providers[options.providerName].encryption,
+    },
+  })
+} // </editor-fold>
+
+extend(DataContentInfo, EncryptedDataContentInfo, {
+  /**
+     * Encrypt the content with given encryption algorithm, secret key or password
+     *
+     * @memberOf GostCMS.EncryptedDataContentInfo
+     * @instance
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The content data to be enclosed.
+     * @param {Key|string} contentEncryptionKey content The encryption key or password for derive key
+     * @param {(AlgorithmIdentifier|string)} encryptionAlgorithm The encryption algorithm or provider name
+     * @returns {Promise} Promise to return self object after encrypt content
+     */
+  encloseContent: function (contentInfo, contentEncryptionKey, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, encryption, derivation
+    return new Promise(call).then(function () {
+      // Check content info
+      contentInfo = checkContentInfo(contentInfo)
+      if (!contentInfo.content) {throw new Error('Content for encryption must be specified')}
+
+      // Define encryption algorithm
+      const type = typeof contentEncryptionKey === 'string' ? 'pbes' : 'encryption'
+      if (encryptionAlgorithm) {
+        const provider = providers[encryptionAlgorithm]
+        encryptionAlgorithm = (provider && provider[type]) || encryptionAlgorithm
+      } else {encryptionAlgorithm = providers[options.providerName][type]}
+      // Prepare content encryption key
+      if (encryptionAlgorithm.derivation) {
+        // Encrypt with password
+        derivation = expand(encryptionAlgorithm.derivation)
+        encryption = expand(encryptionAlgorithm.encryption)
+        derivation.salt = getSeed(saltSize(encryptionAlgorithm))
+        // Import password for key generation
+        let integrityKey
+        return subtle.importKey('raw', passwordData(derivation, contentEncryptionKey),
+          derivation, false, ['deriveKey', 'deriveBits']).then(function (key) {
+          integrityKey = key
+          // Derive IV
+          if (derivation.name.indexOf('PFXKDF') >= 0) {
+            derivation.diversifier = 2
+            return subtle.deriveBits(derivation, integrityKey, 64)
+          }
+        }).then(function (iv) {
+          if (iv) {encryption.iv = iv}
+          // Generate key from password
+          derivation.diversifier = 1
+          return subtle.deriveKey(derivation, integrityKey, encryption, false, ['encrypt'])
+        }).then(function (encryptionKey) {
+          // Content encryption with key
+          return encryptionKey
+        })
+      }
+      // Base encryption
+      encryption = expand(encryptionAlgorithm)
+      if (contentEncryptionKey instanceof CryptoOperationData) {
+        // Import key
+        return subtle.importKey('raw', contentEncryptionKey, encryption, false, ['encrypt'])
+      } if (contentEncryptionKey.type === 'secret') {
+        return contentEncryptionKey
+      } throw new Error('Content encryption key must be raw data or secret key type')
+
+    }).then(function (encryptionKey) {
+      // Initial vector
+      if (!encryption.iv) {encryption.iv = getSeed(8)}
+
+      return subtle.encrypt(encryption, encryptionKey, contentInfo.content)
+    }).then(function (encryptedContent) {
+      if (encryptionAlgorithm.derivation) {
+        delete derivation.diversifier
+        encryptionAlgorithm = expand(encryptionAlgorithm, {
+          derivation: derivation,
+          encryption: encryption,
+        })
+      } else {encryptionAlgorithm = encryption}
+      // Set enclosed data
+      self.encryptedContentInfo = {
+        contentType: contentInfo.contentType,
+        contentEncryptionAlgorithm: encryptionAlgorithm,
+        encryptedContent: encryptedContent,
+      }
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Returns the decrypted content.
+     *
+     * @memberOf GostCMS.EncryptedDataContentInfo
+     * @instance
+     * @param {Key|string} decryptionKey The decryption key or password for derive key
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The detached content (optional).
+     * @returns {Promise} Promise to return enclosed object {@ling GostASN1.ContentInfo} after decrypt content
+     */
+  getEnclosed: function (decryptionKey, contentInfo) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, encryption, derivation, encryptedContent
+    return new Promise(call).then(function () {
+      // Append attached
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      encryptedContent = self.encryptedContentInfo.encryptedContent
+      if (!encryptedContent) {throw new Error('Encrypted content must be specified')}
+
+      encryption = expand(self.encryptedContentInfo.contentEncryptionAlgorithm)
+      if (encryption.derivation) {
+        // Decrypt with password
+        derivation = expand(encryption.derivation)
+        encryption = expand(encryption.encryption)
+        // Derive encryption key from password
+        let integrityKey
+        return subtle.importKey('raw', passwordData(derivation, decryptionKey),
+          derivation, false, ['deriveKey', 'deriveBits']).then(function (key) {
+          integrityKey = key
+          // Derive iv for PFX
+          if (derivation.name.indexOf('PFXKDF') >= 0) {
+            derivation.diversifier = 2
+            return subtle.deriveBits(derivation, integrityKey, 64)
+          }
+        }).then(function (iv) {
+          if (iv) {encryption.iv = iv}
+          // Generate key from password
+          derivation.diversifier = 1
+          return subtle.deriveKey(derivation, integrityKey, encryption, false, ['decrypt'])
+        })
+      }
+      // Base encryption. Password should be secret key
+      if (decryptionKey instanceof CryptoOperationData) {
+        // Import key
+        return subtle.importKey('raw', decryptionKey, encryption, false, ['decrypt'])
+      } if (decryptionKey.type === 'secret') {
+        return decryptionKey
+      } throw new Error('Decryption key must be raw data or secret key type')
+
+    }).then(function (encryptionKey) {
+      // Decrypt key with encryption key
+      return subtle.decrypt(encryption, encryptionKey, encryptedContent)
+    }).then(function (decryptedContent) {
+      // Create content info object
+      return createContentInfo({
+        contentType: self.encryptedContentInfo.contentType,
+        content: decryptedContent,
+      })
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * This class encapsulates a CMS object of content type encrypted-data.
+ *
+ * @memberOf GostCMS
+ * @type GostCMS.EncryptedDataContentInfo
+ */
+GostCMS.prototype.EncryptedDataContentInfo = EncryptedDataContentInfo
+/**
+ * This class encapsulates a CMS object of content type enveloped-data.
+ *
+ * @class GostCMS.EnvelopedDataContentInfo
+ * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The encrypted data content.
+ * @extends GostCMS.DataContentInfo
+ * @extends GostASN1.EnvelopedData
+ */
+function EnvelopedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
+{
+  DataContentInfo.call(this, contentInfo, {
+    contentType: 'envelopedData',
+    version: 0,
+    recipientInfos: [],
+    encryptedContentInfo: {
+      contentType: 'data',
+      contentEncryptionAlgorithm: providers[options.providerName].encryption,
+    },
+  })
+} // </editor-fold>
+
+extend(DataContentInfo, EnvelopedDataContentInfo, {
+  /**
+     * Generate content encryption key with given encryption algorithm and encrypt the content
+     *
+     * @memberOf GostCMS.EnvelopedDataContentInfo
+     * @instance
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The content data to be enclosed.
+     * @param {(AlgorithmIdentifier|string)} encryptionAlgorithm The encryption algorithm or provider name
+     * @returns {Promise} Promise to return self object after encrypt content
+     */
+  encloseContent: function (contentInfo, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      // Check content info
+      contentInfo = checkContentInfo(contentInfo)
+      if (!contentInfo.content) {throw new Error('Content for encryption must be specified')}
+      // Define encryption algorithm
+      if (encryptionAlgorithm) {
+        const provider = providers[encryptionAlgorithm]
+        encryptionAlgorithm = (provider && provider.encryption) || encryptionAlgorithm
+      } else {encryptionAlgorithm = providers[options.providerName].encryption}
+      // Generate key for encryption content
+      return subtle.generateKey(encryptionAlgorithm, true, ['encrypt'])
+    }).then(function (encryptionKey) {
+      // Encrypt content
+      self.contentEncryptionKey = encryptionKey
+      // Initial vector
+      if (!encryptionAlgorithm.iv) {encryptionAlgorithm.iv = getSeed(8)}
+      return subtle.encrypt(encryptionAlgorithm, encryptionKey, contentInfo.content)
+    }).then(function (encryptedContent) {
+      self.encryptedContentInfo = {
+        contentType: contentInfo.contentType,
+        contentEncryptionAlgorithm: encryptionAlgorithm,
+        encryptedContent: encryptedContent,
+      }
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Add a recipient. <br><br>
+     *
+     * Uses the Recipient Information with IssuerAndSerialNumber as the Recipient Identifier.
+     * Note: If senderCert specified uses the Key Agreement algorithm overwise Key Transport algorithm.
+     *
+     * @memberOf GostCMS.EnvelopedDataContentInfo
+     * @instance
+     * @param {GostCert.X509} recipientCert The certificate of recepient
+     * @param {(AlgorithmIdentifier|string)} keyEncryptionAlgorithm Key encryption algorithm or provider name
+     * @param {GostASN1.PrivateKeyInfo} senderKey The private key of sender for key agreement protocol
+     * @param {GostCert.X509} senderCert The certificate of sender for key agreement protocol
+     * @returns {Promise} Promise to return self object after add recipient
+     */
+  addRecipient: function (recipientCert, keyEncryptionAlgorithm, senderKey, senderCert) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, privateKey, encryptionProvider, derivation, wrapping
+    return new Promise(call).then(function () {
+      // Check for recepient cert
+      recipientCert = new cert.X509(recipientCert)
+      if (keyEncryptionAlgorithm && typeof keyEncryptionAlgorithm !== 'string' &&
+                !keyEncryptionAlgorithm.algorithm) {
+        // Sender parameters
+        senderCert = senderKey
+        senderKey = keyEncryptionAlgorithm
+        keyEncryptionAlgorithm = undefined
+      }
+      if (keyEncryptionAlgorithm) {
+        encryptionProvider = providers[keyEncryptionAlgorithm]
+      } else {encryptionProvider = recipientCert.getProvider()}
+
+      // Check for content encryption key
+      if (!self.contentEncryptionKey) {throw new Error('The content encryption key is not assigned')}
+
+      if (senderCert) {
+        // Sender certificate for agreement protocol
+        let senderCertChain
+        if (senderCert instanceof Array) {
+          senderCertChain = senderCert
+          senderCert = senderCertChain[0]
+        } else {senderCertChain = [senderCert]}
+
+        // Add sender certificate
+        if (options.autoAddCert) {
+          if (!self.originatorInfo) {self.originatorInfo = { certs: [] }} else if (!self.originatorInfo.certs) {self.originatorInfo.certs = []}
+          for (let i = 0, n = senderCertChain.length; i < n; i++) {
+            addUnique(self.originatorInfo.certs, senderCertChain[i], function (cert1, cert2) {
+              return equalNames(cert1.issuer, cert2.issuer) &&
+                                equalNumbers(cert1.serialNumber, cert2.serialNumber)
+            })
+          }
+        }
+        // Key Agreement
+        if (encryptionProvider) {keyEncryptionAlgorithm = expand(encryptionProvider.agreement)} else {encryptionProvider = recipientCert.getProvider()}
+        // Certificates must have similar curve parameters
+        if (recipientCert.subjectPublicKeyInfo.algorithm.namedCurve !==
+                    senderCert.subjectPublicKeyInfo.algorithm.namedCurve) {throw new Error('The sender and the recipient have different public key algorithms')}
+        // Get private sender key
+        return subtle.importKey('pkcs8', senderKey.encode(), senderKey.privateKeyAlgorithm,
+          false, ['deriveKey'])
+      }
+      // Key Transport
+      if (encryptionProvider) {keyEncryptionAlgorithm = expand(recipientCert.subjectPublicKeyInfo.algorithm)} else {encryptionProvider = recipientCert.getProvider()}
+      // Generate key pair
+      return subtle.generateKey(keyEncryptionAlgorithm, true, ['deriveKey']).then(function (keyPair) {
+        keyEncryptionAlgorithm['public'] = keyPair.publicKey
+        return keyPair.privateKey
+      })
+
+    }).then(function (key) {
+      privateKey = key
+      // Get public key from recipient certificate
+      return subtle.importKey('spki', recipientCert.subjectPublicKeyInfo.encode(),
+        recipientCert.subjectPublicKeyInfo.algorithm, false, ['deriveKey', 'deriveBits'])
+    }).then(function (publicKey) {
+      // Derivate key encryption key
+      keyEncryptionAlgorithm.ukm = getSeed(8)
+      derivation = expand(encryptionProvider.agreement,
+        { sBox: keyEncryptionAlgorithm.sBox, ukm: keyEncryptionAlgorithm.ukm, 'public': publicKey })
+      wrapping = expand(keyEncryptionAlgorithm.wrapping || encryptionProvider.wrapping,
+        { ukm: keyEncryptionAlgorithm.ukm })
+      return subtle.deriveKey(derivation, privateKey, wrapping, true, ['wrapKey'])
+    }).then(function (wrappingKey) {
+      // Wrap content encryption key
+      keyEncryptionAlgorithm.wrapping = wrapping
+      return subtle.wrapKey('raw', self.contentEncryptionKey, wrappingKey, wrapping)
+    }).then(function (wrappedKey) {
+      // Create recipient info
+      let recipientInfo
+      const useKeyIdentifier = options.useKeyIdentifier && recipientCert.extensions &&
+                recipientCert.extensions.subjectKeyIdentifier,
+        rid = useKeyIdentifier ? recipientCert.extensions.subjectKeyIdentifier : {
+          issuer: recipientCert.issuer,
+          serialNumber: recipientCert.serialNumber,
+        }
+      if (senderCert) {
+        const spki = senderCert.subjectPublicKeyInfo
+        recipientInfo = { // KeyAgreeRecipientInfo
+          version: 3, // always set to 3
+          originator: {
+            algorithm: spki.algorithm,
+            publicKey: spki.subjectPublicKey,
+          },
+          ukm: keyEncryptionAlgorithm.ukm,
+          keyEncryptionAlgorithm: keyEncryptionAlgorithm,
+          recipientEncryptedKeys: [{ // use only one recipient in domain
+            rid: rid,
+            encryptedKey: asn1.GostEncryptedKey(keyEncryptionAlgorithm).encode(wrappedKey),
+          }],
+        }
+      } else {
+        recipientInfo = {
+          version: 0, // always set to 0 or 2
+          rid: rid,
+          keyEncryptionAlgorithm: keyEncryptionAlgorithm,
+          encryptedKey: asn1.GostEncryptedKey(keyEncryptionAlgorithm).encode({
+            algorithm: keyEncryptionAlgorithm,
+            sessionEncryptedKey: wrappedKey,
+          }),
+        }
+      }
+      self.recipientInfos.push(recipientInfo)
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Returns the decrypted content.
+     *
+     * @memberOf GostCMS.EnvelopedDataContentInfo
+     * @instance
+     * @param {GostASN1.PrivateKeyInfo} recipientKey The decryption key or password for derive key
+     * @param {GostCert.X509} recipientCert  The decryption key or password for derive key
+     * @param {(FormatedData|GostASN1.ContentInfo)} contentInfo The detached content (optional).
+     * @param {GostCert.X509} originatorCert The originator certificate (optional).
+     * @returns {Promise} Promise to return enclosed object {@ling GostASN1.ContentInfo} after decrypt content
+     */
+  getEnclosed: function (recipientKey, recipientCert, contentInfo, originatorCert) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, wrappedKey, encryptedContent, derivation, wrapping, encryption
+    return new Promise(call).then(function () {
+      const encryptionProvider = recipientCert.getProvider()
+      // Append attached
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      encryptedContent = self.encryptedContentInfo.encryptedContent
+      if (!encryptedContent) {throw new Error('Encrypted content must be specified')}
+
+      encryption = self.encryptedContentInfo.contentEncryptionAlgorithm
+
+      // Find receiver
+      for (let i = 0; i < self.recipientInfos.length; i++) {
+        let recipientInfo = self.recipientInfos[i],
+          algorithm = expand(recipientInfo.keyEncryptionAlgorithm)
+        if (recipientInfo.rid) {
+          if (matchCert(recipientInfo.rid, recipientCert)) {
+            // Algorithm and wrapped key
+            const transportKey = asn1.GostEncryptedKey(algorithm).decode(recipientInfo.encryptedKey).object
+            wrappedKey = transportKey.sessionEncryptedKey
+            algorithm = expand(algorithm, transportKey.algorithm)
+            derivation = expand(encryptionProvider.agreement, { ukm: algorithm.ukm, sBox: algorithm.sBox })
+            wrapping = expand(encryptionProvider.wrapping, algorithm.wrapping, { ukm: algorithm.ukm })
+            return algorithm['public']
+          }
+        } else {
+          const keys = recipientInfo.recipientEncryptedKeys
+          if (keys) {
+            for (let j = 0; j < keys.length; j++) {
+              if (matchCert(keys[j].rid, recipientCert)) {
+                // Algorithm and wrapped key
+                algorithm = expand(encryptionProvider.agreement, algorithm, { ukm: recipientInfo.ukm })
+                wrappedKey = asn1.GostEncryptedKey(algorithm).decode(keys[j].encryptedKey).object
+                derivation = algorithm
+                wrapping = expand(algorithm.wrapping || encryptionProvider.wrapping, { ukm: recipientInfo.ukm })
+                // Check originator
+                const originator = recipientInfo.originator
+                if (originator.algorithm) {
+                  const spki = new asn1.SubjectPublicKeyInfo({
+                    algorithm: originator.algorithm,
+                    subjectPublicKey: originator.publicKey,
+                  })
+                  return subtle.importKey('spki', spki.encode(), spki.algorithm, false, ['deriveKey', 'deriveBits'])
+                } if (originatorCert && matchCert(originator, originatorCert)) {
+                  return importKey('pkcs', originatorCert.subjectPublicKeyInfo.encode(),
+                    originatorCert.subjectPublicKeyInfo.algorithm, false, ['deriveKey', 'deriveBits'])
+                }
+                throw Error('Originator certificate not specified or not valid')
+              }
+            }
+          }
+        }
+      }
+      throw new Error('Recipient not found or format not supported')
+    }).then(function (publicKey) {
+      derivation['public'] = publicKey
+      // Import private key
+      return subtle.importKey('pkcs8', recipientKey.encode(), recipientKey.privateKeyAlgorithm,
+        false, ['deriveKey', 'deriveBits'])
+    }).then(function (privateKey) {
+      // Derive key
+      return subtle.deriveKey(derivation, privateKey, wrapping, true, ['unwrapKey'])
+    }).then(function (unwrappingKey) {
+      // Unwrap key
+      return subtle.unwrapKey('raw', wrappedKey, unwrappingKey,
+        wrapping, encryption, false, ['decrypt'])
+    }).then(function (encryptionKey) {
+      // Decrypt content
+      return subtle.decrypt(encryption, encryptionKey, encryptedContent)
+    }).then(function (decryptedContent) {
+      return createContentInfo({
+        contentType: self.encryptedContentInfo.contentType,
+        content: decryptedContent,
+      })
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * This class encapsulates a CMS object of content type enveloped-data.
+ *
+ * @memberOf GostCMS
+ * @type GostCMS.EnvelopedDataContentInfo
+ */
+GostCMS.prototype.EnvelopedDataContentInfo = EnvelopedDataContentInfo
+
+/**
+ * Implements the Cryptographic Message Syntax as specified in RFC-2630.
+ *
+ * @memberOf gostCrypto
+ * @type GostCMS
+ */
+gostCrypto.cms = new GostCMS()
+
+module.exports = GostCMS
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCert.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCert.js
new file mode 100644
index 0000000..9b33091
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCert.js
@@ -0,0 +1,1221 @@
+/**
+ * @file Provides facilities for handling certificates, CRLs, etc.
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const gostCrypto = require('./gostCrypto')
+
+/*
+ * Common algorithms
+ *
+ */ // <editor-fold defaultstate="collapsed">
+const Promise = global.Promise
+const Object = global.Object
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
+
+// Crypto subtle
+const subtle = gostCrypto.subtle
+
+// Coding
+const coding = gostCrypto.coding
+
+// ASN.1 syntax
+const asn1 = gostCrypto.asn1
+
+// Providers
+const providers = gostCrypto.security.providers
+
+// Expand javascript object
+function expand(r) {
+  for (let i = 1, n = arguments.length; i < n; i++) {
+    const item = arguments[i]
+    if (typeof item === 'object') {
+      for (const name in item) {
+        if (item.hasOwnProperty(name)) {r[name] = item[name]}
+      }
+    }
+  }
+  return r
+}
+
+// // Extend javascript class
+// function extend(Class) {
+//     var F = function () {
+//     };
+//     F.prototype = Class.prototype;
+//     var r = new F, args = [r];
+//     for (var i = 1; i < arguments.length; i++)
+//         args.push(arguments[i]);
+//     return expand.apply(this, args);
+// }
+
+// Today date + n days
+function today(n) {
+  const date = new Date()
+  date.setHours(0, 0, 0, 0)
+  if (n) {date.setDate(date.getDate() + n)}
+  return date
+}
+
+// Self resolver
+function call(callback) {
+  try {
+    callback()
+  } catch (e) {
+  }
+}
+
+// Serial number
+function genSerialNumber() {
+  const seed = new Uint8Array(4)
+  gostCrypto.getRandomValues(seed)
+  seed[0] = seed[0] & 0x7f
+  return coding.Int16.encode(seed)
+}
+
+// True if equal numbers
+const equalNumbers = (function () {
+  // Convert number to bigendian hex string
+  const hex = function (s) {
+    const t = typeof s
+    return t === 'undefined' || s === '' ? '0' :
+      t === 'number' || s instanceof Number ? s.toString(16).toLowerCase() :
+        s.replace('0x', '').toLowerCase()
+  }
+  // Zero left padding
+  const lpad = function (s, size) {
+    return (new Array(size + 1).join('0') + s).slice(-size)
+  }
+  return function (s1, s2) {
+    s1 = hex(s1)
+    s2 = hex(s2)
+    const len = Math.max(s1.length, s2.length)
+    return lpad(s1, len) === lpad(s2, len)
+  }
+})()
+
+// Check equal names
+function equalNames(name1, name2) {
+  for (var key in name1) {
+    if (name1[key] !== name2[key]) {return false}
+  }
+  for (var key in name2) {
+    if (name1[key] !== name2[key]) {return false}
+  }
+  return true
+}
+
+// Check the buffers to equal
+function equalBuffers(r1, r2) {
+  const s1 = new Uint8Array(r1),
+    s2 = new Uint8Array(r2)
+  if (s1.length !== s2.length) {return false}
+  for (let i = 0, n = s1.length; i < n; i++) {
+    if (s1[i] !== s2[i]) {return false}
+  }
+  return true
+}
+
+// Match certificate
+function matchCertificate(cert, selector) {
+  const skid = cert.extensions && cert.extensions.subjectKeyIdentifier
+  return (cert && selector &&
+        (!selector.issuer || equalNames(cert.issuer, selector.issuer)) &&
+        (!selector.serialNumber || equalNumbers(cert.serialNumber, selector.serialNumber)) &&
+        (!selector.subjectKeyIdentifier || equalBuffers(skid, selector.subjectKeyIdentifier)) &&
+        (!selector.subject || equalNames(cert.subject, selector.subject)) &&
+        (!selector.date || (cert.notBefore.getTime() <= selector.date.getTime() &&
+            cert.notAfter.getTime() > selector.date.getTime())))
+}
+
+// Create authority certificate selector
+function authoritySelector(cert, extensions, date) {
+  const selector = { subject: cert.issuer, date: date },
+    akid = extensions && extensions.authorityKeyIdentifier
+  if (akid) {
+    selector.subjectKeyIdentifier = akid.keyIdentifier
+    if (akid.authorityCertIssuer && akid.authorityCertIssuer[0] &&
+            akid.authorityCertSerialNumber) {
+      selector.issuer = akid.authorityCertIssuer[0]
+      selector.serialNumber = akid.authorityCertSerialNumber
+    }
+  }
+  return selector
+}
+
+// Find certificates
+function selectCertificates(certs, selector) {
+  const result = []
+  for (let i = 0, n = certs.length; i < n; i++) {
+    if (matchCertificate(certs[i], selector)) {result.push(certs[i])}
+  }
+  return result
+}
+
+// Match CRL
+function matchCRL(crl, selector) {
+  return ((!selector.issuer || equalNames(crl.issuer, selector.issuer)) &&
+        (!selector.date || (crl.thisUpdate.getTime() < selector.date.getTime())))
+}
+
+// Find certificates
+function selectCRLs(crls, selector) {
+  const result = []
+  for (let i = 0, n = crls.length; i < n; i++) {
+    if (matchCRL(crls[i], selector)) {result.push(crls[i])}
+  }
+  return result
+}
+
+// Define provider for key algorithm
+function keyProvider(algorithm) {
+  const id = algorithm.id
+  for (const name in providers) {
+    const provider = providers[name]
+    if (provider.publicKey.id === id) {return provider}
+  }
+}
+
+function defineProperty(object, name, descriptor, enumerable) {
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
+}
+
+function defineProperties(object, properties, enumerable) {
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
+}
+
+// Extend javascript class
+function extend(Super, Class, propertiesObject, propertiesClass) {
+  // If constructor not defined
+  if (typeof Class !== 'function') {
+    propertiesClass = propertiesObject
+    propertiesObject = Class
+    Class = function () {
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
+  Class.prototype = Object.create(Super.prototype, {
+    constructor: {
+      value: Class,
+    },
+    superclass: {
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject, true)}
+  // Inherites super class properties
+  if (Super !== Object) {
+    for (const name in Super) {Class[name] = Super[name]}
+  }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
+
+// </editor-fold>
+
+/**
+ * Provides facilities for handling certificates, CRLs, etc.
+ *
+ * @class GostCert
+ */
+function GostCert() {
+}
+
+/**
+ * Certificate templates
+ * <ul>
+ *      <li>providerName - provider name for key generation, default 'CP-01'</li>
+ *      <li>subject - template of subject name {countryName: 'RU', commonName: 'Anonymous'}</li>
+ *      <li>caKeyUsage - default key usages for a CA certificates
+ *          ['digitalSignature', 'nonRepudiation', 'keyEncipherment',
+ *          'dataEncipherment', 'keyAgreement', 'keyCertSign', 'cRLSign']</li>
+ *      <li>caExtKeyUsage - default extended key usages for a CA certificates
+ *          ['serverAuth', 'clientAuth', 'codeSigning', 'emailProtection', 'ipsecEndSystem',
+ *          'ipsecTunnel', 'ipsecUser', 'timeStamping', 'OCSPSigning']</li>
+ *      <li>userKeyUsage - default key usages for a user certificate
+ *          ['digitalSignature', 'nonRepudiation', 'keyEncipherment', 'dataEncipherment', 'keyAgreement'],
+ *      <li>userExtKeyUsage - default extended key usages for user certificate
+ *          ['clientAuth', 'emailProtection']</li>
+ *      <li>days - validity of the certificate in days, default 7305</li>
+ * </ul>
+ *
+ * @memberOf GostCert
+ * @instance
+ */
+const options = { // <editor-fold defaultstate="collapsed">
+  providerName: 'CP-01',
+  subject: { countryName: 'RU', commonName: 'Anonymous' },
+  caKeyUsage: ['digitalSignature', 'nonRepudiation', 'keyEncipherment',
+    'dataEncipherment', 'keyAgreement', 'keyCertSign', 'cRLSign'],
+  caExtKeyUsage: ['serverAuth', 'clientAuth', 'codeSigning', 'emailProtection', 'ipsecEndSystem',
+    'ipsecTunnel', 'ipsecUser', 'timeStamping', 'OCSPSigning'],
+  userKeyUsage: ['digitalSignature', 'nonRepudiation', 'keyEncipherment', 'dataEncipherment', 'keyAgreement'],
+  userExtKeyUsage: ['clientAuth', 'emailProtection'],
+  days: 7305, // </editor-fold>
+}
+
+GostCert.prototype.options = options
+
+/**
+ * This class encapsulates X.509 Version 3 certificates.<br><br>
+ *
+ * Constructs an X.509 certificate from the given DER encoding or ASN.1 Certificate object.
+ *
+ * @class GostCert.X509
+ * @extends GostASN1.Certificate
+ * @param {(FormatedData|GostASN1.Certificate)} cert The certificate
+ */
+const X509 = function (cert) // <editor-fold defaultstate="collapsed">
+{
+  try {
+    // Try to use decode X.509 certificate
+    asn1.Certificate.call(this, cert, true)
+  } catch (e) {
+    try {
+      // Try to decode certification request
+      cert = new asn1.CertificationRequest(cert, true)
+    } catch (e) {
+    }
+    // Create new certificate structure
+    cert = cert || {}
+    asn1.Certificate.call(this, {
+      version: 2,
+      serialNumber: cert.serialNumber || genSerialNumber(),
+      signature: cert.signature || { id: 'noSignature' },
+      issuer: cert.subject || options.subject,
+      notBefore: cert.notBefore || today(),
+      notAfter: cert.notAfter ||
+                today(cert.days || options.days),
+      subject: cert.subject || options.subject,
+      subjectPublicKeyInfo: cert.subjectPublicKeyInfo || {
+        algorithm: { id: 'noSignature' },
+        subjectPublicKey: new CryptoOperationData(0),
+      },
+      extensions: (cert.attributes && (cert.attributes.extensionRequest ||
+                cert.attributes.msCertExtensions)) || cert.extensions,
+      signatureAlgorithm: { id: 'noSignature' },
+      signatureValue: new CryptoOperationData(0),
+    })
+  }
+} // </editor-fold>
+
+extend(asn1.Certificate, X509, {
+  /**
+     * Generate the contents of this certificate and sign it.<br><br>
+     *
+     * If issuerCertificate is not defined self signed certificate generated
+     *
+     * @memberOf GostCert.X509
+     * @instance
+     * @param {GostASN1.PrivateKeyInfo} issuerPrivateKey The issuer's private key
+     * @param {GostCert.X509} issuerCertificate The issuer's certificate or undefined for self-signed certificate
+     * @returns {Promise} Promise to return self object after sign the certificate
+     */
+  sign: function (issuerPrivateKey, issuerCertificate) // <editor-fold defaultstate="collapsed">
+  {
+
+    const self = this, spki = self.subjectPublicKeyInfo
+    return new Promise(call).then(function () {
+
+      // Need generated key
+      if (!spki || !spki.algorithm || spki.algorithm === 'noSignature') {throw new Error('Key pair was not generated for the certificate')}
+      // Check issuer private key
+      if (!issuerPrivateKey) {throw new Error('The private key of the issuer is not defined')}
+
+      // Certificate can be self signed
+      issuerCertificate = issuerCertificate || self
+
+      // Calculate subject key indentifier
+      return subtle.digest('SHA-1', spki.subjectPublicKey)
+    }).then(function (digest) {
+
+      // Signature algorithm
+      const provider = issuerCertificate.getProvider() || providers[options.providerName]
+      if (!self.signature || self.signature.id === 'noSignature') {self.signature = provider.signature}
+      self.signatureAlgorithm = self.signature
+
+      // Set issuer
+      self.issuer = issuerCertificate.subject
+      // Set default extensions
+      if (!self.extensions) {self.extensions = {}}
+      const exts = self.extensions, ae = issuerCertificate.extensions
+      if (self === issuerCertificate) { // Self-signed CA certificate
+        // Set key usage
+        exts.keyUsage = exts.keyUsage || options.caKeyUsage
+        exts.extKeyUsage = exts.extKeyUsage || options.caExtKeyUsage
+        // Set basic constraints
+        exts.basicConstraints = exts.basicConstraints || { cA: true }
+      } else {
+        // Check key usage and validity
+        if (!issuerCertificate.checkUsage('keyCertSign', self.notBefore)) {throw new Error('The issuer\'s certificate is not valid for signing a certificate')}
+
+        // Set key usage
+        exts.keyUsage = exts.keyUsage || options.userKeyUsage
+        exts.extKeyUsage = exts.extKeyUsage || options.userExtKeyUsage
+        // Set basic constraints
+        exts.basicConstraints = exts.basicConstraints || {
+          cA: exts.keyUsage.indexOf('keyCertSign') >= 0,
+        }
+        // Check path length constraint
+        if (exts.basicConstraints.cA) {
+          const pathLen = ae && ae.basicConstraints && ae.pathLenConstraint
+          if (pathLen !== undefined) {
+            if (pathLen > 0) {exts.basicConstraints.pathLenConstraint = pathLen - 1} else {throw new Error('Path length constraint exceeded')}
+          }
+        }
+      }
+      // Subject key identifier 160 bit from public key hash
+      exts.subjectKeyIdentifier = digest
+      // Authority key identifier
+      if (ae && ae.subjectKeyIdentifier) {
+        exts.authorityKeyIdentifier = {
+          keyIdentifier: ae.subjectKeyIdentifier,
+          authorityCertIssuer: [issuerCertificate.issuer],
+          authorityCertSerialNumber: issuerCertificate.serialNumber,
+        }
+      }
+
+      // Import the private key
+      return subtle.importKey('pkcs8', issuerPrivateKey.encode(), issuerPrivateKey.privateKeyAlgorithm, false, ['sign'])
+    }).then(function (key) {
+
+      // Sign certificate
+      return subtle.sign(self.signatureAlgorithm, key, self.tbsCertificate.encode())
+    }).then(function (signatureValue) {
+      // Siganture value
+      self.signatureValue = signatureValue
+
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Generate key pair for certificate
+     *
+     * @memberOf GostCert.X509
+     * @instance
+     * @param {(AlgorithmIdentifier|string)} keyAlgorithm The key algorithm or name of provider
+     * @returns {Promise} Promise to return {@link GostASN1.PrivateKeyInfo} after self-signed certificate generation
+     */
+  generate: function (keyAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, privateKey, provider
+    if (keyAlgorithm) {provider = providers[keyAlgorithm]} else {provider = this.getProvider() || providers[options.providerName]}
+    if (provider) {keyAlgorithm = expand(provider.publicKey, { privateKey: provider.privateKey })}
+
+    return new Promise(call).then(function () {
+
+      // Generate key pair
+      return subtle.generateKey(keyAlgorithm, 'true', ['sign', 'verify'])
+    }).then(function (keyPair) {
+      privateKey = keyPair.privateKey
+
+      // Export public key
+      return subtle.exportKey('spki', keyPair.publicKey)
+    }).then(function (spki) {
+      self.subjectPublicKeyInfo = new asn1.SubjectPublicKeyInfo(spki)
+
+      return subtle.exportKey('pkcs8', privateKey)
+    }).then(function (pkcs8) {
+
+      return new asn1.PrivateKeyInfo(pkcs8)
+    })
+  }, // </editor-fold>
+  /**
+     * Gets the public key.
+     *
+     * @memberOf GostCert.X509
+     * @instance
+     * @returns {Promise} Promise to return {@link Key}
+     */
+  getPublicKey: function () // <editor-fold defaultstate="collapsed">
+  {
+    const spki = this.subjectPublicKeyInfo,
+      keyUsages = (spki.algorithm.id === 'rsaEncryption') ? ['verify'] :
+        ['verify', 'deriveKey', 'deriveBits']
+    return subtle.importKey('spki', spki.encode(), spki.algorithm, 'false', keyUsages)
+  }, // </editor-fold>
+  /**
+     * Get appropriate crypto provider for public key
+     *
+     * @memberOf GostCert.X509
+     * @instance
+     * @returns Object Set of crypto provider algorithms
+     */
+  getProvider: function () // <editor-fold defaultstate="collapsed">
+  {
+    return keyProvider(this.subjectPublicKeyInfo.algorithm)
+  }, // </editor-fold>
+  /**
+     * Verifies this certificate.<br><br>
+     *
+     * More precisely:<br><br>
+     * <ul>
+     *      <li>Verifies that the current VM date/time is within the validity period of the certificate.</li>
+     *      <li>If an unrecognized critical extension is present, the certificate is rejected.</li>
+     *      <li>If the issuer certificate has been set, verifies that the signing certificate is a
+     *          CA certificate, and that the signature is correct. The signing certificate is considered
+     *          to be a CA certificate unless one of the following two conditions hold: The signing
+     *          certificate contains a basicConstraints extension, and the CA flag is false; or the
+     *          signing certificate contains a keyUsage extension, the keyUsage extension is marked
+     *          critical, and the keyCertSign bit is false.</li>
+     *      <li>If the issuer CRL has been set, verifies that the certificate has not been revoked.</li>
+     * </ul>
+     *
+     * @memberOf GostCert.X509
+     * @instance
+     * @param {GostCert.X509} issuerCertificate The issuer X.509 certificate
+     * @param {GostCert.CRL} issuerCRL The issuer CRL
+     * @param {Date} date Validation date. Default current date
+     * @returns {Promise} Promise to return self object if the certificate is valid
+     */
+  verify: function (issuerCertificate, issuerCRL, date) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this, exts = self.extensions
+    return new Promise(call).then(function () {
+      // Current date
+      date = date || today()
+      if (self.notBefore.getTime() > date.getTime() ||
+                self.notAfter.getTime() <= date.getTime()) {throw new Error('The certificate has not yet started or expired')}
+      // A unrecognized critical extensions
+      for (const name in exts) {
+        const value = exts[name]
+        if (value.critical &&
+                    ['authorityKeyIdentifier', 'subjectKeyIdentifier', 'keyUsage', 'certificatePolicies',
+                      'policyMappings', 'basicConstraints', 'nameConstraints', 'policyConstraints',
+                      'extKeyUsage'].indexOf(name) < 0) {throw new Error(`The critical extension '${ name }' is unrecognized`)}
+      }
+      // The certificate can be self-signed
+      const selector = authoritySelector(self, exts, self.notBefore)
+      if (!issuerCertificate && matchCertificate(self, selector)) {issuerCertificate = self}
+      // Check issuer
+      if (issuerCertificate) {
+        if (!matchCertificate(issuerCertificate, selector) ||
+                    !issuerCertificate.checkUsage('keyCertSign', self.notBefore)) {throw new Error('The issuer\'s certificate is not valid')}
+        // Check certificate signature
+        return issuerCertificate.verifySignature(self.tbsCertificate.encode(),
+          self.signatureValue, self.signatureAlgorithm)
+      }
+      return true
+    }).then(function (result) {
+      if (!result) {throw new Error('The certificate has invalid signature')}
+      // Check CRL
+      if (issuerCRL) {
+        if (!matchCRL(issuerCRL, { issuer: self.issuer, date: date })) {throw new Error('The issuer\'s CRL is not valid')}
+        if (issuerCRL.isRevoked(self.serialNumber)) {throw new Error('The certificate is revoked')}
+      }
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Verify a signature made with this certificate's public key.
+     *
+     * @memberOf GostCert.X509
+     * @instance
+     * @param {CryptoOperationData} data The signed document.
+     * @param {CryptoOperationData} signature The signature
+     * @param {AlgorithmIdentifier} algorithm The algorithm ID used for the signature.
+     * @returns {Promise} Promise to return true if the signature is verified, and false otherwise
+     */
+  verifySignature: function (data, signature, algorithm) // <editor-fold defaultstate="collapsed">
+  {
+    return this.getPublicKey().then(function (publicKey) {
+      return subtle.verify(algorithm, publicKey, signature, data)
+    })
+  }, // </editor-fold>
+  /**
+     * Check key usage and date validation
+     *
+     * @memberOf GostCert.X509
+     * @instance
+     * @param {DOMString} operation The operation
+     * @param {Date} date Operation date. Default current date
+     * @returns {boolean}
+     */
+  checkUsage: function (operation, date) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this, exts = self.extensions
+    date = date || today()
+    return (self.notBefore.getTime() <= date.getTime() && self.notAfter.getTime() > date.getTime()) &&
+            (!exts || !((['keyCertSign', 'cRLSign'].indexOf(operation) > 0 && exts.basicConstraints && !exts.basicConstraints.cA) ||
+                ((exts.keyUsage && exts.keyUsage.indexOf(operation) < 0) && (exts.extKeyUsage && exts.extKeyUsage.indexOf(operation) < 0))))
+  }, // </editor-fold>
+})
+
+/**
+ * This class encapsulates X.509 Version 3 certificates.
+ *
+ * @memberOf GostCert
+ * @type GostCert.X509
+ */
+GostCert.prototype.X509 = X509
+
+/**
+ * This class encapsulates a X.509 certificate revocation list (CRL) of RevokedCertificate objects.<br><br>
+ *
+ * Note: the methods and constructors that input a CRL do not automatically verify it.
+ * You need to explicitly call the verify method.
+ *
+ * @class GostCert.CRL
+ * @extends GostASN1.CertificateList
+ * @param {(FormatedData|GostASN1.CertificateList)} crl
+ */
+var CRL = function (crl) // <editor-fold defaultstate="collapsed">
+{
+  // Call super
+  CRL.super.call(this, crl)
+  // Initialize defaults
+  if (!this.version) {this.version = 1}
+  if (!this.revokedCertificates) {this.revokedCertificates = []}
+  if (!this.thisUpdate) {this.thisUpdate = today()}
+} // </editor-fold>
+
+extend(asn1.CertificateList, CRL, {
+  /**
+     * Signs this CRL. The issuer's private key has to be set. The default random number generator is used, if needed.<br><br>
+     *
+     * Note: Making any modifications to the contents of the CRL after signing invalidates the signature.
+     * The sign method must be invoked again after any modifications for a valid signature to be computed.
+     *
+     * @memberOf GostCert.CRL
+     * @instance
+     * @param {GostASN1.PrivateKeyInfo} issuerPrivateKey the issuer's private signing key
+     * @param {GostCert.X509} issuerCertificate the issuer's certificate
+     * @returns {Promise} Promise to return self object after sign the CRL
+     */
+  sign: function (issuerPrivateKey, issuerCertificate) // <editor-fold defaultstate="collapsed">
+  {
+
+    const self = this
+    return new Promise(call).then(function () {
+      // Check issuer private key
+      if (!issuerPrivateKey) {throw new Error('The issuer\'s private key is not defined')}
+      // Check issuer certificate
+      if (!issuerCertificate) {throw new Error('The issuer\'s certificate is not defined')}
+      // Check issuer name
+      if (!self.issuer) {self.issuer = issuerCertificate.issuer} else if (!equalNames(self.issuer, issuerCertificate.issuer)) {throw new Error('The CRL prototype and authority certificate have different issuers')}
+      // Check key usage and validity
+      if (!issuerCertificate.checkUsage('cRLSign', self.thisUpdate)) {throw new Error('The issuer\'s certificate is not valid for signing a CRL')}
+
+      // Signature algorithm
+      const provider = issuerCertificate.getProvider() || providers[options.providerName]
+      if (!self.signature) {self.signature = provider.signature}
+      self.signatureAlgorithm = self.signature
+
+      // Set issuer
+      self.issuer = issuerCertificate.subject
+      // Set default extensions
+      if (!self.crlExtensions) {self.crlExtensions = {}}
+      const exts = self.crlExtensions,
+        ae = issuerCertificate.extensions
+      if (ae && ae.subjectKeyIdentifier) {
+        exts.authorityKeyIdentifier = {
+          keyIdentifier: ae.subjectKeyIdentifier,
+          authorityCertIssuer: [issuerCertificate.issuer],
+          authorityCertSerialNumber: issuerCertificate.serialNumber,
+        }
+      }
+      exts.cRLNumber = exts.cRLNumber || 0
+
+      // Import the private key
+      return subtle.importKey('pkcs8', issuerPrivateKey.encode(),
+        issuerPrivateKey.privateKeyAlgorithm, false, ['sign'])
+    }).then(function (key) {
+
+      // Sign CRL
+      return subtle.sign(self.signatureAlgorithm, key, self.tbsCertList.encode())
+    }).then(function (signatureValue) {
+
+      // Siganture value
+      self.signatureValue = signatureValue
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Verify the CRL. Checks the date and signature if issuer's certifiate has been defined.
+     *
+     * @memberOf GostCert.CRL
+     * @instance
+     * @param {GostCert.X509} issuerCertificate the issuer's certificate
+     * @param {Date} date Validation date. Default current date
+     * @returns {Promise} Promise to return self object if the certificate is valid
+     */
+  verify: function (issuerCertificate, date) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this, exts = self.crlExtensions
+    return new Promise(call).then(function () {
+      // Current date
+      date = date || today()
+      if (!self.thisUpdate.getTime() > date.getTime()) {throw new Error('The CRL has not yet started')}
+      // Check issuer
+      if (issuerCertificate) {
+        if (!matchCertificate(issuerCertificate, authoritySelector(self, exts, self.thisUpdate)) ||
+                    !issuerCertificate.checkUsage('cRLSign', self.thisUpdate)) {throw new Error('The issuer\'s certificate is not valid')}
+        if (!self.signatureValue || !self.signatureAlgorithm) {throw new Error('The has no signature')}
+        // Check CRL signature
+        return issuerCertificate.verifySignature(self.tbsCertList.encode(),
+          self.signatureValue, self.signatureAlgorithm)
+      }
+    }).then(function (result) {
+      if (!result) {throw new Error('The CRL has invalid signature')}
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Checks whether this certificate serial number is on the list.
+     *
+     * @memberOf GostCert.CRL
+     * @instance
+     * @param {Number} serialNumber the issuer's certificate
+     * @param {Date} date Validation date. Default current date
+     * @returns {boolean} True if the certificate is valid, and false otherwise
+     */
+  isRevoked: function (serialNumber, date) // <editor-fold defaultstate="collapsed">
+  {
+    const rc = this.revokedCertificates
+    date = date || today()
+    for (let i = 0; i < rc.length; i++) {
+      // Check date and serial number
+      if (date.getTime() >= rc[i].revocationDate.getTime() &&
+                equalNumbers(rc[i].userCertificate, serialNumber)) {return true}
+    }
+    return false
+  }, // </editor-fold>
+})
+
+/**
+ * This class encapsulates a X.509 certificate revocation list (CRL) of RevokedCertificate objects.
+ *
+ * @memberOf GostCert
+ * @type GostCert.CRL
+ */
+GostCert.prototype.CRL = CRL
+
+/**
+ * A class that encapsulates a DER-encoded PKCS #10 certificate request. The request contains
+ * the subject's name and public key, and it is signed with the subject's private key.
+ * The public key contained in the request is used to verify the signature.
+ * The signature on the request is verified automatically when the request is read.
+ * Note that the subject's private key is used only to produce a signature when the request is output,
+ * and is not actually stored with the request.
+ *
+ * @class GostCert.Request
+ * @extends GostASN1.CertificationRequest
+ * @param {(FormatedData|GostASN1.CertificationRequest)} req
+ */
+function Request(req) // <editor-fold defaultstate="collapsed">
+{
+  try {
+    // Try to use encode
+    asn1.CertificationRequest.call(this, req, true)
+  } catch (e) {
+    // Create new certificate structure
+    req = req || {}
+    asn1.CertificationRequest.call(this, {
+      version: 0,
+      subject: req.subject || options.subject,
+      subjectPublicKeyInfo: req.subjectPublicKeyInfo || {
+        algorithm: { id: 'noSignature' },
+        subjectPublicKey: new CryptoOperationData(0),
+      },
+      attributes: req.attributes || {
+        extensionRequest: {
+          keyUsage: options.userKeyUsage,
+          extKeyUsage: options.userExtKeyUsage,
+        },
+      },
+      signatureAlgorithm: { id: 'noSignature' },
+      signatureValue: new CryptoOperationData(0),
+    })
+  }
+} // </editor-fold>
+
+extend(asn1.CertificationRequest, Request, {
+  /**
+     * Generate key pair and sign request
+     *
+     * @memberOf GostCert.Request
+     * @instance
+     * @param {(AlgorithmIdentifier|string)} keyAlgorithm The name of provider or algorithm
+     * @returns {Promise} Promise to return {@link GostASN1.PrivateKeyInfo} after request generation
+     */
+  generate: function (keyAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, privateKey, provider
+    if (keyAlgorithm) {provider = providers[keyAlgorithm]} else {provider = this.getProvider() || providers[options.providerName]}
+    if (provider) {keyAlgorithm = expand(provider.publicKey, { privateKey: provider.privateKey })}
+
+    return new Promise(call).then(function () {
+
+      // Generate key pair
+      return subtle.generateKey(keyAlgorithm, 'true', ['sign', 'verify'])
+    }).then(function (keyPair) {
+      privateKey = keyPair.privateKey
+
+      // Export public key
+      return subtle.exportKey('spki', keyPair.publicKey)
+    }).then(function (spki) {
+      self.subjectPublicKeyInfo = new asn1.SubjectPublicKeyInfo(spki)
+
+      return subtle.exportKey('pkcs8', privateKey)
+    }).then(function (pkcs8) {
+      privateKey = new asn1.PrivateKeyInfo(pkcs8)
+
+      // Sign request
+      return self.sign(privateKey)
+    }).then(function () {
+
+      return privateKey
+    })
+  }, // </editor-fold>
+  /**
+     * Get appropriate crypto provider for public key
+     *
+     * @memberOf GostCert.Request
+     * @instance
+     * @returns Object Set of crypto provider algorithms
+     */
+  getProvider: function () // <editor-fold defaultstate="collapsed">
+  {
+    return keyProvider(this.subjectPublicKeyInfo.algorithm)
+  }, // </editor-fold>
+  /**
+     * Generate the contents of this request and sign it.<br><br>
+     *
+     * @memberOf GostCert.Request
+     * @instance
+     * @param {GostASN1.PrivateKeyInfo} privateKey The subject's private key
+     * @returns Promise to return self object after sign the request
+     */
+  sign: function (privateKey) // <editor-fold defaultstate="collapsed">
+  {
+
+    const self = this, spki = self.subjectPublicKeyInfo
+    return new Promise(call).then(function () {
+
+      // Need generated key
+      if (!spki || !spki.algorithm || spki.algorithm === 'noSignature') {throw new Error('Key pair was not generated for the certificate')}
+      // Check issuer private key
+      if (!privateKey) {throw new Error('The private key is not defined')}
+
+      // Signature algorithm
+      const provider = keyProvider(spki.algorithm) || providers[options.providerName]
+      self.signatureAlgorithm = provider.signature
+
+      // Import the private key
+      return subtle.importKey('pkcs8', privateKey.encode(),
+        privateKey.privateKeyAlgorithm, false, ['sign'])
+    }).then(function (key) {
+
+      // Sign the certification request
+      return subtle.sign(self.signatureAlgorithm, key, self.requestInfo.encode())
+    }).then(function (signatureValue) {
+
+      // Siganture value
+      self.signatureValue = signatureValue
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Verify the Certification Request. Checks the signature on the public key in the request.
+     *
+     * @memberOf GostCert.Request
+     * @instance
+     * @returns {Promise} Promise to return self object  if the certificate is valid
+     */
+  verify: function () // <editor-fold defaultstate="collapsed">
+  {
+    const self = this, spki = self.subjectPublicKeyInfo
+    return new Promise(call).then(function () {
+
+      // Import key
+      return subtle.importKey('spki', spki.encode(), spki.algorithm, 'false', ['verify'])
+    }).then(function (publicKey) {
+
+      // Verify signature
+      return subtle.verify(self.signatureAlgorithm, publicKey, self.signatureValue,
+        self.requestInfo.encode())
+    }).then(function (result) {
+      if (!result) {throw new Error('The certification request has invalid signature')}
+      return self
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A class that encapsulates a DER-encoded PKCS #10 certificate request.
+ *
+ * @memberOf GostCert
+ * @type GostCert.Request
+ */
+GostCert.prototype.Request = Request
+
+/**
+ * A class for retrieving Certificates and CRLs from a repository.<br><br>
+ *
+ * Once the CertStore has been created, it can be used to retrieve Certificates
+ * and CRLs by calling its getCertificates and getCRLs methods. Unlike a KeyStore,
+ * which provides access to a cache of private keys and trusted certificates,
+ * a CertStore is designed to provide access to a potentially vast repository
+ * of untrusted certificates and CRLs.
+ *
+ * @class GostCert.CertStore
+ * @param {GostCert.X509[]} certificates Certificates
+ * @param {GostCert.CRL[]} crls CLRs
+ */
+function CertStore(certificates, crls) // <editor-fold defaultstate="collapsed">
+{
+  this.certificates = certificates || []
+  this.crls = crls || []
+} // </editor-fold>
+
+extend(Object, CertStore, {
+  /**
+     * Returns a Array of Certificates that match the specified selector.
+     *
+     * @memberOf GostCert.CertStore
+     * @instance
+     * @param {GostCert.CertSelector} selector Certificate filter selector
+     * @returns {GostCert.X509[]} Selected certificates
+     */
+  getCertificates: function (selector) // <editor-fold defaultstate="collapsed">
+  {
+    return selectCertificates(this.certificates, selector)
+  }, // </editor-fold>
+  /**
+     * Returns a Collection of CRLs that match the specified selector.
+     *
+     * @memberOf GostCert.CertStore
+     * @instance
+     * @param {GostCert.CertSelector} selector CRL filter selector
+     * @returns {GostCert.CRL[]} selected CRLs
+     */
+  getCRLs: function (selector) // <editor-fold defaultstate="collapsed">
+  {
+    return selectCRLs(this.certificates, selector)
+  }, // </editor-fold>
+  /**
+     * Loads this CertStore from the given PKCS#7 formated input stream.
+     *
+     * @memberOf GostCert.CertStore
+     * @instance
+     * @param {(FormatedData|GostASN1.ContentInfo)} store The input stream from which the certstore is loaded
+     * @returns {GostCert.CertStore} Self object after store loaded
+     */
+  load: function (store) // <editor-fold defaultstate="collapsed">
+  {
+    const info = new asn1.ContentInfo(store),
+      certs = info.certificates, crls = info.crls
+    for (var i = 0; i < certs.length; i++) {this.certificates.push(new X509(certs[i]))}
+    for (var i = 0; i < crls.length; i++) {this.crls.push(new CRL(crls[i]))}
+    return this
+  }, // </editor-fold>
+  /**
+     * Stores this CertStore to the given output stream in PKCS#7 format.
+     *
+     * @memberOf GostCert.CertStore
+     * @instance
+     * @returns {GostASN1.ContentInfo} PKCS#7 content info with certificates and crls from CertStore
+     */
+  store: function () // <editor-fold defaultstate="collapsed">
+  {
+    return new asn1.ContentInfo({
+      contentType: 'signedData',
+      version: 0,
+      digestAlgorithms: [],
+      encapContentInfo: { contentType: 'data' },
+      certificates: this.certs,
+      crls: this.crls,
+      signerInfos: [],
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A class for retrieving Certificates and CRLs from a repository.
+ *
+ * @memberOf GostCert
+ * @type GostCert.Request
+ */
+GostCert.prototype.CertStore = CertStore
+
+/**
+ * A class for building and validating certification paths (also known as certificate chains).
+ *
+ * @class GostCert.CertPath
+ * @param {GostCert.CertStore} certStore
+ */
+function CertPath(certStore) // <editor-fold defaultstate="collapsed">
+{
+  this.certStore = certStore
+} // </editor-fold>
+
+extend(Object, CertPath, {
+  /**
+     * Attempts to build a certification path using the specified algorithm parameter set.
+     *
+     * @memberOf GostCert.CertPath
+     * @instance
+     * @param {GostCert.X509} certificate Starting path certificate
+     * @param {Date} date Validation date. Default today
+     * @returns {Promise} Promise to return array of {@link GostCert.X509} with certification path
+     */
+  build: function (certificate, date) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      // Build certification path
+      let current = new X509(certificate), certPath = [], success = false, verifiers = []
+      while (current) {
+        let foundCRLs = [], founds = []
+        certPath.push(current)
+        if (!success) {
+          // Select issuer CRL
+          foundCRLs = self.certStore.getCRLs({ issuer: current.issuer, date: date })
+          // Create issuer's selection criteria
+          const selector = authoritySelector(current, current.extensions,
+            current.notBefore)
+          // Self-signed certificate?
+          if (!matchCertificate(current, selector))
+          // Select issuer form trusted CA global.list
+          {founds = self.certStore.getCertificates(selector)} else {success = true}
+        }
+        // Add verification tasks
+        const next = founds.length > 0 && new X509(founds[0]),
+          crl = foundCRLs.length > 0 && new CRL(foundCRLs[0])
+        // Verify CRLs
+        if (crl) {verifiers.push(crl.verify(next, date))}
+
+        // Verify the certificate
+        verifiers.push(current.verify(next, crl, date))
+        current = next
+      }
+      if (!success) {throw new Error('global.certificate is not found')}
+      // Verify all certificates in path
+      return Promise.all(verifiers).then(function (results) {
+        for (let i = 0; i < results; i++) {
+          if (!results[i]) {throw new Error('Certification path is not validated')}
+        }
+        return certPath
+      })
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A class for building and validating certification paths (also known as certificate chains).
+ *
+ * @memberOf GostCert
+ * @type GostCert.CertPath
+ */
+GostCert.prototype.CertPath = CertPath
+
+/**
+ * A generic interface for implementing a particular certificate verification
+ * scheme, such as constructing and verifying
+ * certificate chains.
+ *
+ * @class GostCert.CertificateTrustPolicy
+ */
+function CertificateTrustPolicy() {
+}
+
+extend(Object, CertificateTrustPolicy, {
+  /**
+     * Returns a certificate, known to be valid (according to criteria dependent
+     * on the verification scheme), which has the given selector, certificate and
+     * CRL lists to implement a particular certificate verification  scheme,
+     * such a forming valid certificate chains.<br>
+     * Second and third argument to this method may be undefined, and such a case
+     * must be treated exactly the same as if the particular argument was an empty array.
+     *
+     * @memberOf GostCert.CertificateTrustPolicy
+     * @instance
+     * @param {GostCert.CertificateSelector} selector Certificate selector
+     * @param {GostCert.X509[]} certificates Certificates
+     * @param {GostCert.CRL[]} crls CLRs
+     * @returns {Promise} Promise to return valid {@link GostCert.X509}
+     */
+  getValidCertificate: function (selector, certificates, crls) {
+  },
+})
+
+/**
+ * A generic interface for implementing a particular certificate verification
+ *
+ * @memberOf GostCert
+ * @type GostCert.CertificateTrustPolicy
+ */
+GostCert.prototype.CertificateTrustPolicy = CertificateTrustPolicy
+
+/**
+ * A certificate trust policy based on a set of trusted global.CAs.<br><br>
+ *
+ * In this policy, a certificate will be trusted if and only if it is part of a
+ * valid certificate chain which terminates in one of the trusted global.CAs. <br><br>
+ *
+ * This policy has two options for certificate chain verification:
+ * <ul>
+ *      <li>requireCRL - If true, then for every certificate in a chain
+ *          (unless it is one of the trusted global.CA certificates) a valid CRL
+ *          must be provided to determine its revocation status. The default is false.</li>
+ *      <li>requireCAFlag - If true, then every intermediate CA certificate (excluding
+ *          the global.CA or the end entity certificate) must contain a Basic Constraints
+ *          extension, with the CA flag set. The default for this option is true.</li>
+ * </ul>
+ *
+ * @class GostCert.TrustedCAPolicy
+ * @extends GostCert.CertificateTrustPolicy
+ * @param {GostCert.X509[]} trustedCACerts
+ * @param {boolean} requireCRL
+ * @param {boolean} requireCA
+ */
+function TrustedCAPolicy(trustedCACerts, requireCRL, requireCA) // <editor-fold defaultstate="collapsed">
+{
+  this.trustedCACerts = trustedCACerts || []
+  this.requireCRL = requireCRL || false
+  this.requireCA = requireCA || true
+} // </editor-fold>
+
+extend(CertificateTrustPolicy, TrustedCAPolicy, {
+  /**
+     * Returns a certificate, known to be valid (according to criteria dependent
+     * on the verification scheme), which has the given selector, certificate and
+     * CRL lists to implement a particular certificate verification  scheme,
+     * such a forming valid certificate chains.<br>
+     * Second and third argument to this method may be undefined, and such a case
+     * must be treated exactly the same as if the particular argument was an empty array.
+     *
+     * @memberOf GostCert.TrustedCAPolicy
+     * @instance
+     * @param {GostCert.CertificateSelector} selector Certificate selector
+     * @param {GostASN1.Certificate[]} certificates Certificates
+     * @param {GostASN1.CertificateList[]} crls CLRs
+     * @param {Date} date Validation date. Default today
+     * @returns {Promise} Promise to return valid {@link GostCert.X509}
+     */
+  getValidCertificate: function (selector, certificates, crls, date) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, certPath
+    return new Promise(call).then(function () {
+      certificates = certificates || []
+      crls = crls || []
+      // Get certificates from the trusted list
+      let certs = selectCertificates(self.trustedCACerts, selector)
+      if (certs.length > 0) {return new X509(certs[0])}
+      // Get certificates from the list
+      certs = selectCertificates(certificates, selector)
+      if (certs.length === 0) {return}
+      // Build certification path
+      let current = new X509(certs[0]), success = false, verifiers = []
+      certPath = []
+      while (current) {
+        let foundCRLs = [], founds = []
+        certPath.push(current)
+        if (!success) {
+          // Select issuer CRL
+          foundCRLs = selectCRLs(crls, { issuer: current.issuer, date: date })
+          if (foundCRLs.length === 0 && self.requireCRL) {return} // The issuer\'s CRL is not found
+          // Create issuer's selection criteria
+          selector = authoritySelector(current, current.extensions,
+            current.notBefore)
+          // Select issuer form trusted CA global.list
+          founds = selectCertificates(self.trustedCACerts, selector)
+          if (founds.length === 0) {
+            // Non-trusted self-signed certificate?
+            if (!matchCertificate(current, selector)) {
+              // Select issuer from certificate list
+              founds = selectCertificates(certificates, selector)
+              if (founds.length > 0) {
+                // Check basic contrains and CA flag
+                const exts = founds[0].extensions
+                if (self.requireCA) {
+                  if (!exts || !exts.basicConstraints || !exts.basicConstraints.cA) {return} // The issuer\'s certificate is not valid
+                  // Check path length limit
+                  if (exts.basicConstraints.pathLenConstraint !== undefined &&
+                                        exts.basicConstraints.pathLenConstraint < certPath.length - 1) {return} // The issuer\'s certificate path length constraint exceeded
+                }
+              } else {return} // Certification path is not built
+            }
+          } else {success = true}
+        }
+        // Add verification tasks
+        const next = founds.length > 0 && new X509(founds[0]),
+          crl = foundCRLs.length > 0 && new CRL(foundCRLs[0])
+        // Verify CRLs
+        if (crl) {verifiers.push(crl.verify(next, date))}
+
+        // Verify the certificate
+        verifiers.push(current.verify(next, crl, date))
+        current = next
+      }
+      if (!success) {throw new Error('Trusted global.certificate is not found')}
+      // Verify all certificates in path
+      return Promise.all(verifiers).then(function (results) {
+        for (let i = 0; i < results; i++) {
+          if (!results[i]) {throw new Error('Certification path is not validated')}
+        }
+        return certPath[0]
+      })
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A certificate trust policy based on a set of trusted global.CAs.
+ *
+ * @memberOf GostCert
+ * @type GostCert.TrustedCAPolicy
+ */
+GostCert.prototype.TrustedCAPolicy = TrustedCAPolicy
+
+/**
+ * Provides facilities for handling certificates, CRLs, etc.
+ *
+ * @memberOf gostCrypto
+ * @type GostCert
+ */
+gostCrypto.cert = new GostCert()
+
+module.exports = GostCert
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCipher.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCipher.js
new file mode 100644
index 0000000..c29f93b
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCipher.js
@@ -0,0 +1,2126 @@
+/**
+ * @file GOST 28147-89/GOST R 34.12-2015/GOST R 32.13-2015 Encryption Algorithm
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const GostRandom = require('./gostRandom')
+
+/*
+ * Initial parameters and common algortithms of GOST 28147-89
+ *
+ * http://tools.ietf.org/html/rfc5830
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const rootcrypto = global.crypto || global.msCrypto
+const CryptoOperationData = global.ArrayBuffer
+const SyntaxError = global.SyntaxError || global.Error,
+  DataError = global.DataError || global.Error,
+  NotSupportedError = global.NotSupportedError || global.Error
+/*
+ * Check supported
+ * This implementation support only Little Endian arhitecture
+ */
+
+const littleEndian = (function () {
+  const buffer = new CryptoOperationData(2)
+  new DataView(buffer).setInt16(0, 256, true)
+  return new Int16Array(buffer)[0] === 256
+})()
+
+// Default initial vector
+const defaultIV = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
+
+// Predefined sBox collection
+const sBoxes = {
+  'E-TEST': [
+    0x4, 0x2, 0xF, 0x5, 0x9, 0x1, 0x0, 0x8, 0xE, 0x3, 0xB, 0xC, 0xD, 0x7, 0xA, 0x6,
+    0xC, 0x9, 0xF, 0xE, 0x8, 0x1, 0x3, 0xA, 0x2, 0x7, 0x4, 0xD, 0x6, 0x0, 0xB, 0x5,
+    0xD, 0x8, 0xE, 0xC, 0x7, 0x3, 0x9, 0xA, 0x1, 0x5, 0x2, 0x4, 0x6, 0xF, 0x0, 0xB,
+    0xE, 0x9, 0xB, 0x2, 0x5, 0xF, 0x7, 0x1, 0x0, 0xD, 0xC, 0x6, 0xA, 0x4, 0x3, 0x8,
+    0x3, 0xE, 0x5, 0x9, 0x6, 0x8, 0x0, 0xD, 0xA, 0xB, 0x7, 0xC, 0x2, 0x1, 0xF, 0x4,
+    0x8, 0xF, 0x6, 0xB, 0x1, 0x9, 0xC, 0x5, 0xD, 0x3, 0x7, 0xA, 0x0, 0xE, 0x2, 0x4,
+    0x9, 0xB, 0xC, 0x0, 0x3, 0x6, 0x7, 0x5, 0x4, 0x8, 0xE, 0xF, 0x1, 0xA, 0x2, 0xD,
+    0xC, 0x6, 0x5, 0x2, 0xB, 0x0, 0x9, 0xD, 0x3, 0xE, 0x7, 0xA, 0xF, 0x4, 0x1, 0x8,
+  ],
+  'E-A': [
+    0x9, 0x6, 0x3, 0x2, 0x8, 0xB, 0x1, 0x7, 0xA, 0x4, 0xE, 0xF, 0xC, 0x0, 0xD, 0x5,
+    0x3, 0x7, 0xE, 0x9, 0x8, 0xA, 0xF, 0x0, 0x5, 0x2, 0x6, 0xC, 0xB, 0x4, 0xD, 0x1,
+    0xE, 0x4, 0x6, 0x2, 0xB, 0x3, 0xD, 0x8, 0xC, 0xF, 0x5, 0xA, 0x0, 0x7, 0x1, 0x9,
+    0xE, 0x7, 0xA, 0xC, 0xD, 0x1, 0x3, 0x9, 0x0, 0x2, 0xB, 0x4, 0xF, 0x8, 0x5, 0x6,
+    0xB, 0x5, 0x1, 0x9, 0x8, 0xD, 0xF, 0x0, 0xE, 0x4, 0x2, 0x3, 0xC, 0x7, 0xA, 0x6,
+    0x3, 0xA, 0xD, 0xC, 0x1, 0x2, 0x0, 0xB, 0x7, 0x5, 0x9, 0x4, 0x8, 0xF, 0xE, 0x6,
+    0x1, 0xD, 0x2, 0x9, 0x7, 0xA, 0x6, 0x0, 0x8, 0xC, 0x4, 0x5, 0xF, 0x3, 0xB, 0xE,
+    0xB, 0xA, 0xF, 0x5, 0x0, 0xC, 0xE, 0x8, 0x6, 0x2, 0x3, 0x9, 0x1, 0x7, 0xD, 0x4,
+  ],
+  'E-B': [
+    0x8, 0x4, 0xB, 0x1, 0x3, 0x5, 0x0, 0x9, 0x2, 0xE, 0xA, 0xC, 0xD, 0x6, 0x7, 0xF,
+    0x0, 0x1, 0x2, 0xA, 0x4, 0xD, 0x5, 0xC, 0x9, 0x7, 0x3, 0xF, 0xB, 0x8, 0x6, 0xE,
+    0xE, 0xC, 0x0, 0xA, 0x9, 0x2, 0xD, 0xB, 0x7, 0x5, 0x8, 0xF, 0x3, 0x6, 0x1, 0x4,
+    0x7, 0x5, 0x0, 0xD, 0xB, 0x6, 0x1, 0x2, 0x3, 0xA, 0xC, 0xF, 0x4, 0xE, 0x9, 0x8,
+    0x2, 0x7, 0xC, 0xF, 0x9, 0x5, 0xA, 0xB, 0x1, 0x4, 0x0, 0xD, 0x6, 0x8, 0xE, 0x3,
+    0x8, 0x3, 0x2, 0x6, 0x4, 0xD, 0xE, 0xB, 0xC, 0x1, 0x7, 0xF, 0xA, 0x0, 0x9, 0x5,
+    0x5, 0x2, 0xA, 0xB, 0x9, 0x1, 0xC, 0x3, 0x7, 0x4, 0xD, 0x0, 0x6, 0xF, 0x8, 0xE,
+    0x0, 0x4, 0xB, 0xE, 0x8, 0x3, 0x7, 0x1, 0xA, 0x2, 0x9, 0x6, 0xF, 0xD, 0x5, 0xC,
+  ],
+  'E-C': [
+    0x1, 0xB, 0xC, 0x2, 0x9, 0xD, 0x0, 0xF, 0x4, 0x5, 0x8, 0xE, 0xA, 0x7, 0x6, 0x3,
+    0x0, 0x1, 0x7, 0xD, 0xB, 0x4, 0x5, 0x2, 0x8, 0xE, 0xF, 0xC, 0x9, 0xA, 0x6, 0x3,
+    0x8, 0x2, 0x5, 0x0, 0x4, 0x9, 0xF, 0xA, 0x3, 0x7, 0xC, 0xD, 0x6, 0xE, 0x1, 0xB,
+    0x3, 0x6, 0x0, 0x1, 0x5, 0xD, 0xA, 0x8, 0xB, 0x2, 0x9, 0x7, 0xE, 0xF, 0xC, 0x4,
+    0x8, 0xD, 0xB, 0x0, 0x4, 0x5, 0x1, 0x2, 0x9, 0x3, 0xC, 0xE, 0x6, 0xF, 0xA, 0x7,
+    0xC, 0x9, 0xB, 0x1, 0x8, 0xE, 0x2, 0x4, 0x7, 0x3, 0x6, 0x5, 0xA, 0x0, 0xF, 0xD,
+    0xA, 0x9, 0x6, 0x8, 0xD, 0xE, 0x2, 0x0, 0xF, 0x3, 0x5, 0xB, 0x4, 0x1, 0xC, 0x7,
+    0x7, 0x4, 0x0, 0x5, 0xA, 0x2, 0xF, 0xE, 0xC, 0x6, 0x1, 0xB, 0xD, 0x9, 0x3, 0x8,
+  ],
+  'E-D': [
+    0xF, 0xC, 0x2, 0xA, 0x6, 0x4, 0x5, 0x0, 0x7, 0x9, 0xE, 0xD, 0x1, 0xB, 0x8, 0x3,
+    0xB, 0x6, 0x3, 0x4, 0xC, 0xF, 0xE, 0x2, 0x7, 0xD, 0x8, 0x0, 0x5, 0xA, 0x9, 0x1,
+    0x1, 0xC, 0xB, 0x0, 0xF, 0xE, 0x6, 0x5, 0xA, 0xD, 0x4, 0x8, 0x9, 0x3, 0x7, 0x2,
+    0x1, 0x5, 0xE, 0xC, 0xA, 0x7, 0x0, 0xD, 0x6, 0x2, 0xB, 0x4, 0x9, 0x3, 0xF, 0x8,
+    0x0, 0xC, 0x8, 0x9, 0xD, 0x2, 0xA, 0xB, 0x7, 0x3, 0x6, 0x5, 0x4, 0xE, 0xF, 0x1,
+    0x8, 0x0, 0xF, 0x3, 0x2, 0x5, 0xE, 0xB, 0x1, 0xA, 0x4, 0x7, 0xC, 0x9, 0xD, 0x6,
+    0x3, 0x0, 0x6, 0xF, 0x1, 0xE, 0x9, 0x2, 0xD, 0x8, 0xC, 0x4, 0xB, 0xA, 0x5, 0x7,
+    0x1, 0xA, 0x6, 0x8, 0xF, 0xB, 0x0, 0x4, 0xC, 0x3, 0x5, 0x9, 0x7, 0xD, 0x2, 0xE,
+  ],
+  'E-SC': [
+    0x3, 0x6, 0x1, 0x0, 0x5, 0x7, 0xd, 0x9, 0x4, 0xb, 0x8, 0xc, 0xe, 0xf, 0x2, 0xa,
+    0x7, 0x1, 0x5, 0x2, 0x8, 0xb, 0x9, 0xc, 0xd, 0x0, 0x3, 0xa, 0xf, 0xe, 0x4, 0x6,
+    0xf, 0x1, 0x4, 0x6, 0xc, 0x8, 0x9, 0x2, 0xe, 0x3, 0x7, 0xa, 0xb, 0xd, 0x5, 0x0,
+    0x3, 0x4, 0xf, 0xc, 0x5, 0x9, 0xe, 0x0, 0x6, 0x8, 0x7, 0xa, 0x1, 0xb, 0xd, 0x2,
+    0x6, 0x9, 0x0, 0x7, 0xb, 0x8, 0x4, 0xc, 0x2, 0xe, 0xa, 0xf, 0x1, 0xd, 0x5, 0x3,
+    0x6, 0x1, 0x2, 0xf, 0x0, 0xb, 0x9, 0xc, 0x7, 0xd, 0xa, 0x5, 0x8, 0x4, 0xe, 0x3,
+    0x0, 0x2, 0xe, 0xc, 0x9, 0x1, 0x4, 0x7, 0x3, 0xf, 0x6, 0x8, 0xa, 0xd, 0xb, 0x5,
+    0x5, 0x2, 0xb, 0x8, 0x4, 0xc, 0x7, 0x1, 0xa, 0x6, 0xe, 0x0, 0x9, 0x3, 0xd, 0xf,
+  ],
+  'E-Z': [// This is default S-box in according to draft of new standard
+    0xc, 0x4, 0x6, 0x2, 0xa, 0x5, 0xb, 0x9, 0xe, 0x8, 0xd, 0x7, 0x0, 0x3, 0xf, 0x1,
+    0x6, 0x8, 0x2, 0x3, 0x9, 0xa, 0x5, 0xc, 0x1, 0xe, 0x4, 0x7, 0xb, 0xd, 0x0, 0xf,
+    0xb, 0x3, 0x5, 0x8, 0x2, 0xf, 0xa, 0xd, 0xe, 0x1, 0x7, 0x4, 0xc, 0x9, 0x6, 0x0,
+    0xc, 0x8, 0x2, 0x1, 0xd, 0x4, 0xf, 0x6, 0x7, 0x0, 0xa, 0x5, 0x3, 0xe, 0x9, 0xb,
+    0x7, 0xf, 0x5, 0xa, 0x8, 0x1, 0x6, 0xd, 0x0, 0x9, 0x3, 0xe, 0xb, 0x4, 0x2, 0xc,
+    0x5, 0xd, 0xf, 0x6, 0x9, 0x2, 0xc, 0xa, 0xb, 0x7, 0x8, 0x1, 0x4, 0x3, 0xe, 0x0,
+    0x8, 0xe, 0x2, 0x5, 0x6, 0x9, 0x1, 0xc, 0xf, 0x4, 0xb, 0x0, 0xd, 0xa, 0x3, 0x7,
+    0x1, 0x7, 0xe, 0xd, 0x0, 0x5, 0x8, 0x3, 0x4, 0xf, 0xa, 0x6, 0x9, 0xc, 0xb, 0x2,
+  ],
+  //S-box for digest
+  'D-TEST': [
+    0x4, 0xA, 0x9, 0x2, 0xD, 0x8, 0x0, 0xE, 0x6, 0xB, 0x1, 0xC, 0x7, 0xF, 0x5, 0x3,
+    0xE, 0xB, 0x4, 0xC, 0x6, 0xD, 0xF, 0xA, 0x2, 0x3, 0x8, 0x1, 0x0, 0x7, 0x5, 0x9,
+    0x5, 0x8, 0x1, 0xD, 0xA, 0x3, 0x4, 0x2, 0xE, 0xF, 0xC, 0x7, 0x6, 0x0, 0x9, 0xB,
+    0x7, 0xD, 0xA, 0x1, 0x0, 0x8, 0x9, 0xF, 0xE, 0x4, 0x6, 0xC, 0xB, 0x2, 0x5, 0x3,
+    0x6, 0xC, 0x7, 0x1, 0x5, 0xF, 0xD, 0x8, 0x4, 0xA, 0x9, 0xE, 0x0, 0x3, 0xB, 0x2,
+    0x4, 0xB, 0xA, 0x0, 0x7, 0x2, 0x1, 0xD, 0x3, 0x6, 0x8, 0x5, 0x9, 0xC, 0xF, 0xE,
+    0xD, 0xB, 0x4, 0x1, 0x3, 0xF, 0x5, 0x9, 0x0, 0xA, 0xE, 0x7, 0x6, 0x8, 0x2, 0xC,
+    0x1, 0xF, 0xD, 0x0, 0x5, 0x7, 0xA, 0x4, 0x9, 0x2, 0x3, 0xE, 0x6, 0xB, 0x8, 0xC,
+  ],
+  'D-A': [
+    0xA, 0x4, 0x5, 0x6, 0x8, 0x1, 0x3, 0x7, 0xD, 0xC, 0xE, 0x0, 0x9, 0x2, 0xB, 0xF,
+    0x5, 0xF, 0x4, 0x0, 0x2, 0xD, 0xB, 0x9, 0x1, 0x7, 0x6, 0x3, 0xC, 0xE, 0xA, 0x8,
+    0x7, 0xF, 0xC, 0xE, 0x9, 0x4, 0x1, 0x0, 0x3, 0xB, 0x5, 0x2, 0x6, 0xA, 0x8, 0xD,
+    0x4, 0xA, 0x7, 0xC, 0x0, 0xF, 0x2, 0x8, 0xE, 0x1, 0x6, 0x5, 0xD, 0xB, 0x9, 0x3,
+    0x7, 0x6, 0x4, 0xB, 0x9, 0xC, 0x2, 0xA, 0x1, 0x8, 0x0, 0xE, 0xF, 0xD, 0x3, 0x5,
+    0x7, 0x6, 0x2, 0x4, 0xD, 0x9, 0xF, 0x0, 0xA, 0x1, 0x5, 0xB, 0x8, 0xE, 0xC, 0x3,
+    0xD, 0xE, 0x4, 0x1, 0x7, 0x0, 0x5, 0xA, 0x3, 0xC, 0x8, 0xF, 0x6, 0x2, 0x9, 0xB,
+    0x1, 0x3, 0xA, 0x9, 0x5, 0xB, 0x4, 0xF, 0x8, 0x6, 0x7, 0xE, 0xD, 0x0, 0x2, 0xC,
+  ],
+  'D-SC': [
+    0xb, 0xd, 0x7, 0x0, 0x5, 0x4, 0x1, 0xf, 0x9, 0xe, 0x6, 0xa, 0x3, 0xc, 0x8, 0x2,
+    0x1, 0x2, 0x7, 0x9, 0xd, 0xb, 0xf, 0x8, 0xe, 0xc, 0x4, 0x0, 0x5, 0x6, 0xa, 0x3,
+    0x5, 0x1, 0xd, 0x3, 0xf, 0x6, 0xc, 0x7, 0x9, 0x8, 0xb, 0x2, 0x4, 0xe, 0x0, 0xa,
+    0xd, 0x1, 0xb, 0x4, 0x9, 0xc, 0xe, 0x0, 0x7, 0x5, 0x8, 0xf, 0x6, 0x2, 0xa, 0x3,
+    0x2, 0xd, 0xa, 0xf, 0x9, 0xb, 0x3, 0x7, 0x8, 0xc, 0x5, 0xe, 0x6, 0x0, 0x1, 0x4,
+    0x0, 0x4, 0x6, 0xc, 0x5, 0x3, 0x8, 0xd, 0xa, 0xb, 0xf, 0x2, 0x1, 0x9, 0x7, 0xe,
+    0x1, 0x3, 0xc, 0x8, 0xa, 0x6, 0xb, 0x0, 0x2, 0xe, 0x7, 0x9, 0xf, 0x4, 0x5, 0xd,
+    0xa, 0xb, 0x6, 0x0, 0x1, 0x3, 0x4, 0x7, 0xe, 0xd, 0x5, 0xf, 0x8, 0x2, 0x9, 0xc,
+  ],
+}
+
+const C = new Uint8Array([
+  0x69, 0x00, 0x72, 0x22, 0x64, 0xC9, 0x04, 0x23,
+  0x8D, 0x3A, 0xDB, 0x96, 0x46, 0xE9, 0x2A, 0xC4,
+  0x18, 0xFE, 0xAC, 0x94, 0x00, 0xED, 0x07, 0x12,
+  0xC0, 0x86, 0xDC, 0xC2, 0xEF, 0x4C, 0xA9, 0x2B,
+])
+
+function signed(x) {
+  return x >= 0x80000000 ? x - 0x100000000 : x
+}
+
+function unsigned(x) {
+  return x < 0 ? x + 0x100000000 : x
+}
+
+// Set random values into Uint8Arry
+// Random generator
+function randomSeed(e) {
+  const randomSource = GostRandom ? new (GostRandom) : rootcrypto
+  if (randomSource.getRandomValues) {randomSource.getRandomValues(e)} else {throw new NotSupportedError('Random generator not found')}
+}
+
+// Get buffer
+function buffer(d) {
+  if (d instanceof CryptoOperationData) {return d}
+  if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
+  }
+  throw new DataError('CryptoOperationData required')
+}
+
+// Get byte array
+function byteArray(d) {
+  return new Uint8Array(buffer(d))
+}
+
+// Clone byte array
+function cloneArray(d) {
+  return new Uint8Array(byteArray(d))
+}
+
+
+// Get int32 array
+function intArray(d) {
+  return new Int32Array(buffer(d))
+}
+
+// Swap bytes for version 2015
+function swap32(b) {
+  return ((b & 0xff) << 24)
+        | ((b & 0xff00) << 8)
+        | ((b >> 8) & 0xff00)
+        | ((b >> 24) & 0xff)
+}
+
+// </editor-fold>
+
+/*
+ * Initial parameters and common algortithms of GOST R 34.12-15
+ * Algorithm "Kuznechik" 128bit
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// Default initial vector
+const defaultIV128 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
+
+// Mult table for R function
+const multTable = (function () {
+
+  // Multiply two numbers in the GF(2^8) finite field defined
+  // by the polynomial x^8 + x^7 + x^6 + x + 1 = 0 */
+  function gmul(a, b) {
+    let p = 0, counter, carry
+    for (counter = 0; counter < 8; counter++) {
+      if (b & 1) {p ^= a}
+      carry = a & 0x80 // detect if x^8 term is about to be generated
+      a = (a << 1) & 0xff
+      if (carry) {a ^= 0xc3} // replace x^8 with x^7 + x^6 + x + 1
+      b >>= 1
+    }
+    return p & 0xff
+  }
+
+  // It is required only this values for R function
+  //       0   1   2    3    4    5    6    7
+  const x = [1, 16, 32, 133, 148, 192, 194, 251]
+  const m = []
+  for (let i = 0; i < 8; i++) {
+    m[i] = []
+    for (let j = 0; j < 256; j++) {m[i][j] = gmul(x[i], j)}
+  }
+  return m
+})()
+
+// 148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148, 1
+const kB = [4, 2, 3, 1, 6, 5, 0, 7, 0, 5, 6, 1, 3, 2, 4, 0]
+
+// R - function
+function funcR(d) {
+  let sum = 0
+  for (var i = 0; i < 16; i++) {sum ^= multTable[kB[i]][d[i]]}
+
+  for (var i = 16; i > 0; --i) {d[i] = d[i - 1]}
+  d[0] = sum
+}
+
+function funcReverseR(d) {
+  const tmp = d[0]
+  for (var i = 0; i < 15; i++) {d[i] = d[i + 1]}
+  d[15] = tmp
+
+  let sum = 0
+  for (i = 0; i < 16; i++) {sum ^= multTable[kB[i]][d[i]]}
+  d[15] = sum
+}
+
+// Nonlinear transformation
+const kPi = [
+  252, 238, 221, 17, 207, 110, 49, 22, 251, 196, 250, 218, 35, 197, 4, 77,
+  233, 119, 240, 219, 147, 46, 153, 186, 23, 54, 241, 187, 20, 205, 95, 193,
+  249, 24, 101, 90, 226, 92, 239, 33, 129, 28, 60, 66, 139, 1, 142, 79,
+  5, 132, 2, 174, 227, 106, 143, 160, 6, 11, 237, 152, 127, 212, 211, 31,
+  235, 52, 44, 81, 234, 200, 72, 171, 242, 42, 104, 162, 253, 58, 206, 204,
+  181, 112, 14, 86, 8, 12, 118, 18, 191, 114, 19, 71, 156, 183, 93, 135,
+  21, 161, 150, 41, 16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177,
+  50, 117, 25, 61, 255, 53, 138, 126, 109, 84, 198, 128, 195, 189, 13, 87,
+  223, 245, 36, 169, 62, 168, 67, 201, 215, 121, 214, 246, 124, 34, 185, 3,
+  224, 15, 236, 222, 122, 148, 176, 188, 220, 232, 40, 80, 78, 51, 10, 74,
+  167, 151, 96, 115, 30, 0, 98, 68, 26, 184, 56, 130, 100, 159, 38, 65,
+  173, 69, 70, 146, 39, 94, 85, 47, 140, 163, 165, 125, 105, 213, 149, 59,
+  7, 88, 179, 64, 134, 172, 29, 247, 48, 55, 107, 228, 136, 217, 231, 137,
+  225, 27, 131, 73, 76, 63, 248, 254, 141, 83, 170, 144, 202, 216, 133, 97,
+  32, 113, 103, 164, 45, 43, 9, 91, 203, 155, 37, 208, 190, 229, 108, 82,
+  89, 166, 116, 210, 230, 244, 180, 192, 209, 102, 175, 194, 57, 75, 99, 182,
+]
+
+const kReversePi = (function () {
+  const m = []
+  for (let i = 0, n = kPi.length; i < n; i++) {m[kPi[i]] = i}
+  return m
+})()
+
+function funcS(d) {
+  for (let i = 0; i < 16; ++i) {d[i] = kPi[d[i]]}
+}
+
+function funcReverseS(d) {
+  for (let i = 0; i < 16; ++i) {d[i] = kReversePi[d[i]]}
+}
+
+function funcX(a, b) {
+  for (let i = 0; i < 16; ++i) {a[i] ^= b[i]}
+}
+
+function funcL(d) {
+  for (let i = 0; i < 16; ++i) {funcR(d)}
+}
+
+function funcReverseL(d) {
+  for (let i = 0; i < 16; ++i) {funcReverseR(d)}
+}
+
+function funcLSX(a, b) {
+  funcX(a, b)
+  funcS(a)
+  funcL(a)
+}
+
+function funcReverseLSX(a, b) {
+  funcX(a, b)
+  funcReverseL(a)
+  funcReverseS(a)
+}
+
+function funcF(inputKey, inputKeySecond, iterationConst) {
+  const tmp = new Uint8Array(inputKey)
+  funcLSX(inputKey, iterationConst)
+  funcX(inputKey, inputKeySecond)
+  inputKeySecond.set(tmp)
+}
+
+function funcC(number, d) {
+  for (let i = 0; i < 15; i++) {d[i] = 0}
+  d[15] = number
+  funcL(d)
+}
+
+// </editor-fold>
+
+/**
+ * Key schedule for GOST R 34.12-15 128bits
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method keySchedule
+ * @param {type} k
+ * @returns {Uint8Array}
+ */
+function keySchedule128(k) // <editor-fold defaultstate="collapsed">
+{
+  const keys = new Uint8Array(160), c = new Uint8Array(16)
+  keys.set(byteArray(k))
+  for (let j = 0; j < 4; j++) {
+    const j0 = 32 * j, j1 = 32 * (j + 1)
+    keys.set(new Uint8Array(keys.buffer, j0, 32), j1)
+    for (let i = 1; i < 9; i++) {
+      funcC(j * 8 + i, c)
+      funcF(new Uint8Array(keys.buffer, j1, 16),
+        new Uint8Array(keys.buffer, j1 + 16, 16), c)
+    }
+  }
+  return keys
+} // </editor-fold>
+
+/**
+ * GOST R 34.12-15 128 bits encrypt/decrypt process
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method round
+ * @param {Uint8Array} k Scheduled key
+ * @param {Uint8Array} d Data
+ * @param {number} ofs Offsec
+ * @param {number} e true - decrypt
+ */
+function process128(k, d, ofs, e) // <editor-fold defaultstate="collapsed">
+{
+  ofs = ofs || d.byteOffset
+  const r = new Uint8Array(d.buffer, ofs, 16)
+  if (e) {
+    for (var i = 0; i < 9; i++) {funcReverseLSX(r, new Uint8Array(k.buffer, (9 - i) * 16, 16))}
+
+    funcX(r, new Uint8Array(k.buffer, 0, 16))
+  } else {
+    for (var i = 0; i < 9; i++) {funcLSX(r, new Uint8Array(k.buffer, 16 * i, 16))}
+
+    funcX(r, new Uint8Array(k.buffer, 16 * 9, 16))
+  }
+} // </editor-fold>
+
+/**
+ * One GOST encryption round
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method round
+ * @param {Int8Array} S sBox
+ * @param {Int32Array} m 2x32 bits cipher block
+ * @param {Int32Array} k 32 bits key[i]
+ */
+function round(S, m, k) // <editor-fold defaultstate="collapsed">
+{
+  let cm = (m[0] + k) & 0xffffffff
+
+  let om = S[0 + ((cm >> (0 * 4)) & 0xF)] << (0 * 4)
+  om |= S[16 + ((cm >> (1 * 4)) & 0xF)] << (1 * 4)
+  om |= S[32 + ((cm >> (2 * 4)) & 0xF)] << (2 * 4)
+  om |= S[48 + ((cm >> (3 * 4)) & 0xF)] << (3 * 4)
+  om |= S[64 + ((cm >> (4 * 4)) & 0xF)] << (4 * 4)
+  om |= S[80 + ((cm >> (5 * 4)) & 0xF)] << (5 * 4)
+  om |= S[96 + ((cm >> (6 * 4)) & 0xF)] << (6 * 4)
+  om |= S[112 + ((cm >> (7 * 4)) & 0xF)] << (7 * 4)
+  cm = om << 11 | om >>> (32 - 11)
+
+  cm ^= m[1]
+  m[1] = m[0]
+  m[0] = cm
+
+} // </editor-fold>
+
+/**
+ * Process encrypt/decrypt block with key K using GOST 28147-89
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method process
+ * @param k {Int32Array} 8x32 bits key
+ * @param d {Int32Array} 8x8 bits cipher block
+ * @param ofs {number} offset
+ */
+function process89(k, d, ofs) // <editor-fold defaultstate="collapsed">
+{
+  ofs = ofs || d.byteOffset
+  const s = this.sBox,
+    m = new Int32Array(d.buffer, ofs, 2)
+
+  for (let i = 0; i < 32; i++) {round(s, m, k[i])}
+
+  const r = m[0]
+  m[0] = m[1]
+  m[1] = r
+} // </editor-fold>
+
+/**
+ * Process encrypt/decrypt block with key K using GOST R 34.12-15 64bit block
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method process
+ * @param k {Int32Array} 8x32 bits key
+ * @param d {Int32Array} 8x8 bits cipher block
+ * @param ofs {number} offset
+ */
+function process15(k, d, ofs) // <editor-fold defaultstate="collapsed">
+{
+  ofs = ofs || d.byteOffset
+  const s = this.sBox,
+    m = new Int32Array(d.buffer, ofs, 2),
+    r = swap32(m[0])
+  m[0] = swap32(m[1])
+  m[1] = r
+
+  for (let i = 0; i < 32; i++) {round(s, m, k[i])}
+
+  m[0] = swap32(m[0])
+  m[1] = swap32(m[1])
+} // </editor-fold>
+
+/**
+ * Key keySchedule algorithm for GOST 28147-89 64bit cipher
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method process
+ * @param k {Uint8Array} 8 bit key array
+ * @param e {boolean}  true - decrypt
+ * @returns {Int32Array} keyScheduled 32-bit key
+ */
+function keySchedule89(k, e) // <editor-fold defaultstate="collapsed">
+{
+  const sch = new Int32Array(32),
+    key = new Int32Array(buffer(k))
+
+  for (var i = 0; i < 8; i++) {sch[i] = key[i]}
+
+  if (e) {
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[7 - i]}
+
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[7 - i]}
+  } else {
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[i]}
+
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[i]}
+  }
+
+  for (var i = 0; i < 8; i++) {sch[i + 24] = sch[7 - i]}
+
+  return sch
+} // </editor-fold>
+
+/**
+ * Key keySchedule algorithm for GOST R 34.12-15 64bit cipher
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method process
+ * @param k {Uint8Array} 8 bit key array
+ * @param e {boolean}  true - decrypt
+ * @returns {Int32Array} keyScheduled 32-bit key
+ */
+function keySchedule15(k, e) // <editor-fold defaultstate="collapsed">
+{
+  const sch = new Int32Array(32),
+    key = new Int32Array(buffer(k))
+
+  for (var i = 0; i < 8; i++) {sch[i] = swap32(key[i])}
+
+  if (e) {
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[7 - i]}
+
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[7 - i]}
+  } else {
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[i]}
+
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[i]}
+  }
+
+  for (var i = 0; i < 8; i++) {sch[i + 24] = sch[7 - i]}
+
+  return sch
+} // </editor-fold>
+
+/**
+ * Key schedule for RC2
+ *
+ * https://tools.ietf.org/html/rfc2268
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method keySchedule
+ * @param {Uint8Array} k
+ * @returns {Uint16Array}
+ */
+const keyScheduleRC2 = (function () // <editor-fold defaultstate="collapsed">
+{
+  // an array of "random" bytes based on the digits of PI = 3.14159...
+  const PITABLE = new Uint8Array([
+    0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
+    0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
+    0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
+    0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
+    0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
+    0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
+    0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
+    0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
+    0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
+    0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
+    0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
+    0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
+    0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
+    0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
+    0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
+    0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad,
+  ])
+
+  return function (k) {
+    const key = new Uint8Array(buffer(k)),
+      T = Math.min(key.length, 128),
+      T1 = this.effectiveLength,
+      T8 = Math.floor((T1 + 7) / 8),
+      TM = 0xff % Math.pow(2, 8 + T1 - 8 * T8)
+
+    const L = new Uint8Array(128), K = new Uint16Array(L.buffer)
+    for (var i = 0; i < T; i++) {L[i] = key[i]}
+    for (var i = T; i < 128; i++) {L[i] = PITABLE[(L[i - 1] + L[i - T]) % 256]}
+    L[128 - T8] = PITABLE[L[128 - T8] & TM]
+    for (var i = 127 - T8; i >= 0; --i) {L[i] = PITABLE[L[i + 1] ^ L[i + T8]]}
+    return K
+  }
+} // </editor-fold>
+)()
+
+/**
+ * RC2 encrypt/decrypt process
+ *
+ * https://tools.ietf.org/html/rfc2268
+ *
+ * @memberOf GostCipher
+ * @private
+ * @instance
+ * @method round
+ * @param {CryptoOperationData} k Scheduled key
+ * @param {CryptoOperationData} d Data
+ * @param {number} ofs Offsec
+ * @param {number} e true - decrypt
+ */
+const processRC2 = (function () // <editor-fold defaultstate="collapsed">
+{
+  let K, j, R = new Uint16Array(4),
+    s = new Uint16Array([1, 2, 3, 5]), reverse
+
+  function rol(R, s) {
+    return (R << s | R >>> (16 - s)) & 0xffff
+  }
+
+  function ror(R, s) {
+    return (R >>> s | R << (16 - s)) & 0xffff
+  }
+
+  function mix(i) {
+    if (reverse) {
+      R[i] = ror(R[i], s[i])
+      R[i] = R[i] - K[j] - (R[(i + 3) % 4] & R[(i + 2) % 4]) - ((~R[(i + 3) % 4]) & R[(i + 1) % 4])
+      j = j - 1
+    } else {
+      R[i] = R[i] + K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + ((~R[(i + 3) % 4]) & R[(i + 1) % 4])
+      j = j + 1
+      R[i] = rol(R[i], s[i])
+    }
+  }
+
+  function mash(i) {
+    if (reverse) {
+      R[i] = R[i] - K[R[(i + 3) % 4] & 63]
+    } else {
+      R[i] = R[i] + K[R[(i + 3) % 4] & 63]
+    }
+  }
+
+  function perform(method, count) {
+    count = count || 1
+    for (let j = 0; j < count; j++) {
+      if (reverse) {
+        for (var i = 3; i >= 0; --i) {method(i)}
+      } else {
+        for (var i = 0; i < 4; i++) {method(i)}
+      }
+    }
+  }
+
+  return function (k, d, ofs, e) {
+    reverse = e
+    //  1. Initialize words R[0], ..., R[3] to contain the 64-bit
+    //     ciphertext value.
+    R = new Uint16Array(d.buffer, ofs || d.byteOffset, 4)
+    //  2. Expand the key, so that words K[0], ..., K[63] become
+    //     defined.
+    K = k
+    //  3. Initialize j to zero (enc) j to 63 (dec).
+    j = e ? 63 : 0
+    //  4. Perform five mixing rounds.
+    perform(mix, 5)
+    //  5. Perform one mashing round.
+    perform(mash)
+    //  6. Perform six mixing rounds.
+    perform(mix, 6)
+    //  7. Perform one mashing round.
+    perform(mash)
+    //  8. Perform five mixing rounds.
+    perform(mix, 5)
+  }
+} // </editor-fold>
+)()
+
+/**
+ * Algorithm name GOST 28147-ECB<br><br>
+ *
+ * encryptECB (K, D) is D, encrypted with key k using GOST 28147/GOST R 34.13 in
+ * "prostaya zamena" (Electronic Codebook, ECB) mode.
+ * @memberOf GostCipher
+ * @method encrypt
+ * @instance
+ * @param k {CryptoOperationData} 8x32 bit key
+ * @param d {CryptoOperationData} 8 bits message
+ * @return {CryptoOperationData} result
+ */
+function encryptECB(k, d) // <editor-fold defaultstate="collapsed">
+{
+  const p = this.pad(byteArray(d)),
+    n = this.blockSize,
+    b = p.byteLength / n,
+    key = this.keySchedule(k)
+
+  for (let i = 0; i < b; i++) {this.process(key, p, n * i)}
+
+  return p.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-ECB<br><br>
+ *
+ * decryptECB (K, D) is D, decrypted with key K using GOST 28147/GOST R 34.13 in
+ * "prostaya zamena"  (Electronic Codebook, ECB) mode.
+ *
+ * @memberOf GostCipher
+ * @method decrypt
+ * @instance
+ * @param k {CryptoOperationData} 8x32 bits key
+ * @param d {CryptoOperationData} 8 bits message
+ * @return {CryptoOperationData} result
+ */
+function decryptECB(k, d) // <editor-fold defaultstate="collapsed">
+{
+  const p = cloneArray(d),
+    n = this.blockSize,
+    b = p.byteLength / n,
+    key = this.keySchedule(k, 1)
+
+  for (let i = 0; i < b; i++) {this.process(key, p, n * i, 1)}
+
+  return this.unpad(p).buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CFB<br><br>
+ *
+ * encryptCFB (IV, K, D) is D, encrypted with key K using GOST 28147/GOST R 34.13
+ * in "gammirovanie s obratnoj svyaziyu" (Cipher Feedback, CFB) mode, and IV is
+ * used as the initialization vector.
+ *
+ * @memberOf GostCipher
+ * @method encrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv initial vector
+ * @return {CryptoOperationData} result
+ */
+function encryptCFB(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const s = new Uint8Array(iv || this.iv),
+    c = cloneArray(d),
+    m = s.length,
+    t = new Uint8Array(m),
+    b = this.shiftBits >> 3,
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k)
+
+  for (var i = 0; i < q; i++) {
+
+    for (var j = 0; j < m; j++) {t[j] = s[j]}
+
+    this.process(key, s)
+
+    for (var j = 0; j < b; j++) {c[i * b + j] ^= s[j]}
+
+    for (var j = 0; j < m - b; j++) {s[j] = t[b + j]}
+
+    for (var j = 0; j < b; j++) {s[m - b + j] = c[i * b + j]}
+
+    k = this.keyMeshing(k, s, i, key)
+  }
+
+  if (r > 0) {
+    this.process(key, s)
+
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
+  }
+  return c.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CFB<br><br>
+ *
+ * decryptCFB (IV, K, D) is D, decrypted with key K using GOST 28147/GOST R 34.13
+ * in "gammirovanie s obratnoj svyaziyu po shifrotekstu" (Cipher Feedback, CFB) mode, and IV is
+ * used as the initialization vector.
+ *
+ * @memberOf GostCipher
+ * @method decrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv initial vector
+ * @return {CryptoOperationData} result
+ */
+function decryptCFB(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const s = new Uint8Array(iv || this.iv),
+    c = cloneArray(d),
+    m = s.length,
+    t = new Uint8Array(m),
+    b = this.shiftBits >> 3,
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k)
+
+  for (var i = 0; i < q; i++) {
+
+    for (var j = 0; j < m; j++) {t[j] = s[j]}
+
+    this.process(key, s)
+
+    for (var j = 0; j < b; j++) {
+      t[j] = c[i * b + j]
+      c[i * b + j] ^= s[j]
+    }
+
+    for (var j = 0; j < m - b; j++) {s[j] = t[b + j]}
+
+    for (var j = 0; j < b; j++) {s[m - b + j] = t[j]}
+
+    k = this.keyMeshing(k, s, i, key)
+  }
+
+  if (r > 0) {
+    this.process(key, s)
+
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
+  }
+  return c.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-OFB<br><br>
+ *
+ * encryptOFB/decryptOFB (IV, K, D) is D, encrypted with key K using GOST 28147/GOST R 34.13
+ * in "gammirovanie s obratnoj svyaziyu po vyhodu" (Output Feedback, OFB) mode, and IV is
+ * used as the initialization vector.
+ *
+ * @memberOf GostCipher
+ * @method encrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv 8x8 optional bits initial vector
+ * @return {CryptoOperationData} result
+ */
+/**
+ * Algorithm name GOST 28147-OFB<br><br>
+ *
+ * encryptOFB/decryptOFB (IV, K, D) is D, encrypted with key K using GOST 28147/GOST R 34.13
+ * in "gammirovanie s obratnoj svyaziyu po vyhodu" (Output Feedback, OFB) mode, and IV is
+ * used as the initialization vector.
+ *
+ * @memberOf GostCipher
+ * @method decrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv initial vector
+ * @return {CryptoOperationData} result
+ */
+function processOFB(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const s = new Uint8Array(iv || this.iv),
+    c = cloneArray(d),
+    m = s.length,
+    t = new Uint8Array(m),
+    b = this.shiftBits >> 3,
+    p = new Uint8Array(b),
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k)
+
+  for (var i = 0; i < q; i++) {
+
+    for (var j = 0; j < m; j++) {t[j] = s[j]}
+
+    this.process(key, s)
+
+    for (var j = 0; j < b; j++) {p[j] = s[j]}
+
+    for (var j = 0; j < b; j++) {c[i * b + j] ^= s[j]}
+
+    for (var j = 0; j < m - b; j++) {s[j] = t[b + j]}
+
+    for (var j = 0; j < b; j++) {s[m - b + j] = p[j]}
+
+    k = this.keyMeshing(k, s, i, key)
+  }
+
+  if (r > 0) {
+    this.process(key, s)
+
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
+  }
+  return c.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CTR<br><br>
+ *
+ * encryptCTR/decryptCTR (IV, K, D) is D, encrypted with key K using GOST 28147/GOST R 34.13
+ * in "gammirovanie" (Counter Mode-CTR) mode, and IV is used as the
+ * initialization vector.
+ * @memberOf GostCipher
+ * @method encrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv 8x8 optional bits initial vector
+ * @return {CryptoOperationData} result
+ */
+/**
+ * Algorithm name GOST 28147-CTR<br><br>
+ *
+ * encryptCTR/decryptCTR (IV, K, D) is D, encrypted with key K using GOST 28147/GOST R 34.13
+ * in "gammirovanie" (Counter Mode-CTR) mode, and IV is used as the
+ * initialization vector.
+ * @memberOf GostCipher
+ * @method decrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv initial vector
+ * @return {CryptoOperationData} result
+ */
+function processCTR89(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const s = new Uint8Array(iv || this.iv),
+    c = cloneArray(d),
+    b = this.blockSize,
+    t = new Int8Array(b),
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k),
+    syn = new Int32Array(s.buffer)
+
+  this.process(key, s)
+
+  for (var i = 0; i < q; i++) {
+    syn[0] = (syn[0] + 0x1010101) & 0xffffffff
+    // syn[1] = signed(unsigned((syn[1] + 0x1010104) & 0xffffffff) % 0xffffffff);
+    var tmp = unsigned(syn[1]) + 0x1010104 // Special thanks to Ilya Matveychikov
+    syn[1] = signed(tmp < 0x100000000 ? tmp : tmp - 0xffffffff)
+
+    for (var j = 0; j < b; j++) {t[j] = s[j]}
+
+    this.process(key, syn)
+
+    for (var j = 0; j < b; j++) {c[i * b + j] ^= s[j]}
+
+    for (var j = 0; j < b; j++) {s[j] = t[j]}
+
+    k = this.keyMeshing(k, s, i, key)
+  }
+  if (r > 0) {
+    syn[0] = (syn[0] + 0x1010101) & 0xffffffff
+    // syn[1] = signed(unsigned((syn[1] + 0x1010104) & 0xffffffff) % 0xffffffff);
+    var tmp = unsigned(syn[1]) + 0x1010104 // Special thanks to Ilya Matveychikov
+    syn[1] = signed(tmp < 0x100000000 ? tmp : tmp - 0xffffffff)
+
+    this.process(key, syn)
+
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
+  }
+  return c.buffer
+} // </editor-fold>
+
+function processCTR15(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const c = cloneArray(d),
+    n = this.blockSize,
+    b = this.shiftBits >> 3,
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    s = new Uint8Array(n),
+    t = new Int32Array(n),
+    key = this.keySchedule(k)
+
+  s.set(iv || this.iv)
+  for (let i = 0; i < q; i++) {
+
+    for (var j = 0; j < n; j++) {t[j] = s[j]}
+
+    this.process(key, s)
+
+    for (var j = 0; j < b; j++) {c[b * i + j] ^= s[j]}
+
+    for (var j = 0; j < n; j++) {s[j] = t[j]}
+
+    for (var j = n - 1; i >= 0; --i) {
+      if (s[j] > 0xfe) {
+        s[j] -= 0xfe
+      } else {
+        s[j]++
+        break
+      }
+    }
+  }
+
+  if (r > 0) {
+    this.process(key, s)
+    for (var j = 0; j < r; j++) {c[b * q + j] ^= s[j]}
+  }
+
+  return c.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CBC<br><br>
+ *
+ * encryptCBC (IV, K, D) is D, encrypted with key K using GOST 28147/GOST R 34.13
+ * in "Prostaya zamena s zatsepleniem" (Cipher-Block-Chaining, CBC) mode and IV is used as the initialization
+ * vector.
+ *
+ * @memberOf GostCipher
+ * @method encrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv initial vector
+ * @return {CryptoOperationData} result
+ */
+function encryptCBC(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const s = new Uint8Array(iv || this.iv),
+    n = this.blockSize,
+    m = s.length,
+    c = this.pad(byteArray(d)),
+    key = this.keySchedule(k)
+
+  for (let i = 0, b = c.length / n; i < b; i++) {
+
+    for (var j = 0; j < n; j++) {s[j] ^= c[i * n + j]}
+
+    this.process(key, s)
+
+    for (var j = 0; j < n; j++) {c[i * n + j] = s[j]}
+
+    if (m !== n) {
+      for (var j = 0; j < m - n; j++) {s[j] = s[n + j]}
+
+      for (var j = 0; j < n; j++) {s[j + m - n] = c[i * n + j]}
+    }
+
+    k = this.keyMeshing(k, s, i, key)
+  }
+
+  return c.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CBC<br><br>
+ *
+ * decryptCBC (IV, K, D) is D, decrypted with key K using GOST 28147/GOST R 34.13
+ * in "Prostaya zamena s zatsepleniem" (Cipher-Block-Chaining, CBC) mode and IV is used as the initialization
+ * vector.
+ *
+ * @memberOf GostCipher
+ * @method decrypt
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv initial vector
+ * @return {CryptoOperationData} result
+ */
+function decryptCBC(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const s = new Uint8Array(iv || this.iv),
+    n = this.blockSize,
+    m = s.length,
+    c = cloneArray(d),
+    next = new Uint8Array(n),
+    key = this.keySchedule(k, 1)
+
+  for (let i = 0, b = c.length / n; i < b; i++) {
+
+    for (var j = 0; j < n; j++) {next[j] = c[i * n + j]}
+
+    this.process(key, c, i * n, 1)
+
+    for (var j = 0; j < n; j++) {c[i * n + j] ^= s[j]}
+
+    if (m !== n) {
+      for (var j = 0; j < m - n; j++) {s[j] = s[n + j]}
+    }
+
+    for (var j = 0; j < n; j++) {s[j + m - n] = next[j]}
+
+    k = this.keyMeshing(k, s, i, key, 1)
+  }
+
+  return this.unpad(c).buffer
+} // </editor-fold>
+
+/**
+ * The generateKey method returns a new generated key.
+ *
+ * @memberOf GostCipher
+ * @method generateKey
+ * @instance
+ * @return {CryptoOperationData} result
+ */
+
+function generateKey() // <editor-fold defaultstate="collapsed">
+{
+  // Simple generate 256 bit random seed
+  const k = new Uint8Array(this.keySize)
+  randomSeed(k)
+  return k.buffer
+} // </editor-fold>
+
+
+/**
+ * makeIMIT (K, D) is the 32-bit result of the GOST 28147/GOST R 34.13 in
+ * "imitovstavka" (MAC) mode, used with D as plaintext, K as key and IV
+ * as initialization vector.  Note that the standard specifies its use
+ * in this mode only with an initialization vector of zero.
+ *
+ * @memberOf GostCipher
+ * @method processMAC
+ * @private
+ * @instance
+ * @param {Int32Array} key 8x32 bits key
+ * @param {Int32Array} s 8x8 sum array
+ * @param {Uint8Array} d 8 bits array with data
+ * @return {Uint8Array} result
+ */
+function processMAC89(key, s, d) // <editor-fold defaultstate="collapsed">
+{
+  const c = zeroPad.call(this, byteArray(d)),
+    n = this.blockSize,
+    q = c.length / n,
+    sBox = this.sBox,
+    sum = new Int32Array(s.buffer)
+
+  for (let i = 0; i < q; i++) {
+
+    for (var j = 0; j < n; j++) {s[j] ^= c[i * n + j]}
+
+    for (var j = 0; j < 16; j++) // 1-16 steps
+    {round(sBox, sum, key[j])}
+  }
+} // </editor-fold>
+
+function processKeyMAC15(s) // <editor-fold defaultstate="collapsed">
+{
+  let t = 0, n = s.length
+  for (let i = n - 1; i >= 0; --i) {
+    const t1 = s[i] >>> 7
+    s[i] = (s[i] << 1) & 0xff | t
+    t = t1
+  }
+  if (t !== 0) {
+    if (n === 16) {s[15] ^= 0x87} else {s[7] ^= 0x1b}
+  }
+} // </editor-fold>
+
+function processMAC15(key, s, d) // <editor-fold defaultstate="collapsed">
+{
+  let n = this.blockSize,
+    sBox = this.sBox, c = byteArray(d),
+    r = new Uint8Array(n)
+    // R
+  this.process(key, r)
+  // K1
+  processKeyMAC15(r)
+  if (d.byteLength % n !== 0) {
+    c = bitPad.call(this, byteArray(d))
+    // K2
+    processKeyMAC15(r)
+  }
+
+  for (let i = 0, q = c.length / n; i < q; i++) {
+
+    for (var j = 0; j < n; j++) {s[j] ^= c[i * n + j]}
+
+    if (i === q - 1) {// Last block
+      for (var j = 0; j < n; j++) {s[j] ^= r[j]}
+    }
+
+    this.process(key, s)
+  }
+} // </editor-fold>
+
+/**
+ * signMAC (K, D, IV) is the 32-bit result of the GOST 28147/GOST R 34.13 in
+ * "imitovstavka" (MAC) mode, used with D as plaintext, K as key and IV
+ * as initialization vector.  Note that the standard specifies its use
+ * in this mode only with an initialization vector of zero.
+ *
+ * @memberOf GostCipher
+ * @method sign
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv initial vector
+ * @return {CryptoOperationData} result
+ */
+function signMAC(k, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const key = this.keySchedule(k),
+    s = new Uint8Array(iv || this.iv),
+    m = Math.ceil(this.macLength >> 3) || this.blockSize >> 1
+
+  this.processMAC(key, s, d)
+
+  const mac = new Uint8Array(m) // mac size
+  mac.set(new Uint8Array(s.buffer, 0, m))
+  return mac.buffer
+} // </editor-fold>
+
+/**
+ * verifyMAC (K, M, D, IV) the 32-bit result verification of the GOST 28147/GOST R 34.13 in
+ * "imitovstavka" (MAC) mode, used with D as plaintext, K as key and IV
+ * as initialization vector.  Note that the standard specifies its use
+ * in this mode only with an initialization vector of zero.
+ *
+ * @memberOf GostCipher
+ * @method verify
+ * @instance
+ * @param {CryptoOperationData} k 8x32 bits key
+ * @param {CryptoOperationData} m 8 bits array with signature
+ * @param {CryptoOperationData} d 8 bits array with data
+ * @param {CryptoOperationData} iv 8x8 optional bits initial vector
+ * @return {boolen} MAC verified = true
+ */
+function verifyMAC(k, m, d, iv) // <editor-fold defaultstate="collapsed">
+{
+  const mac = new Uint8Array(signMAC.call(this, k, d, iv)),
+    test = byteArray(m)
+  if (mac.length !== test.length) {return false}
+  for (let i = 0, n = mac.length; i < n; i++) {
+    if (mac[i] !== test[i]) {return false}
+  }
+  return true
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-KW<br><br>
+ *
+ * This algorithm encrypts GOST 28147-89 CEK with a GOST 28147/GOST R 34.13 KEK.
+ * Ref. rfc4357 6.1 GOST 28147-89 Key Wrap
+ * Note: This algorithm MUST NOT be used with a KEK produced by VKO GOST
+ * R 34.10-94, because such a KEK is constant for every sender-recipient
+ * pair.  Encrypting many different content encryption keys on the same
+ * constant KEK may reveal that KEK.
+ *
+ * @memberOf GostCipher
+ * @method wrapKey
+ * @instance
+ * @param {CryptoOperationData} kek Key encryption key
+ * @param {CryptoOperationData} cek Content encryption key
+ * @returns {CryptoOperationData} Encrypted cek
+ */
+function wrapKeyGOST(kek, cek) // <editor-fold defaultstate="collapsed">
+{
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) For a unique symmetric KEK, generate 8 octets at random and call
+  // the result UKM.  For a KEK, produced by VKO GOST R 34.10-2001, use
+  // the UKM that was used for key derivation.
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
+  const ukm = new Uint8Array(this.ukm)
+  // 2) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK, CEK).
+  // Call the result CEK_MAC.
+  const mac = signMAC.call(this, kek, cek, ukm)
+  // 3) Encrypt the CEK in ECB mode using the KEK.  Call the ciphertext CEK_ENC.
+  const enc = encryptECB.call(this, kek, cek)
+  // 4) The wrapped content-encryption key is (UKM | CEK_ENC | CEK_MAC).
+  const r = new Uint8Array(len)
+  r.set(new Uint8Array(enc), 0)
+  r.set(new Uint8Array(mac), k)
+  return r.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-KW<br><br>
+ *
+ *  This algorithm decrypts GOST 28147-89 CEK with a GOST 28147 KEK.
+ *  Ref. rfc4357 6.2 GOST 28147-89 Key Unwrap
+ *
+ * @memberOf GostCipher
+ * @method unwrapKey
+ * @instance
+ * @param {type} kek Key encryption key
+ * @param {type} data Content encryption key
+ * @return {CryptoOperationData} result
+ */
+function unwrapKeyGOST(kek, data) // <editor-fold defaultstate="collapsed">
+{
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) If the wrapped content-encryption key is not 44 octets, then error.
+  const d = buffer(data)
+  if (d.byteLength !== len) {throw new DataError(`Wrapping key size must be ${ len } bytes`)}
+  // 2) Decompose the wrapped content-encryption key into UKM, CEK_ENC, and CEK_MAC.
+  // UKM is the most significant (first) 8 octets. CEK_ENC is next 32 octets,
+  // and CEK_MAC is the least significant (last) 4 octets.
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
+  const ukm = new Uint8Array(this.ukm),
+    enc = new Uint8Array(d, 0, k),
+    mac = new Uint8Array(d, k, n >> 1)
+    // 3) Decrypt CEK_ENC in ECB mode using the KEK.  Call the output CEK.
+  const cek = decryptECB.call(this, kek, enc)
+  // 4) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK, CEK),
+  // compare the result with CEK_MAC.  If they are not equal, then error.
+  const check = verifyMAC.call(this, kek, mac, cek, ukm)
+  if (!check) {throw new DataError('Error verify MAC of wrapping key')}
+  return cek
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CPKW<br><br>
+ *
+ * Given a random 64-bit UKM and a GOST 28147 key K, this algorithm
+ * creates a new GOST 28147-89 key K(UKM).
+ * Ref. rfc4357 6.3 CryptoPro KEK Diversification Algorithm
+ *
+ * @memberOf GostCipher
+ * @method diversify
+ * @instance
+ * @private
+ * @param {CryptoOperationData} kek Key encryption key
+ * @param {CryptoOperationData} ukm Random generated value
+ * @returns {CryptoOperationData} Diversified kek
+ */
+function diversifyKEK(kek, ukm) // <editor-fold defaultstate="collapsed">
+{
+  const n = this.blockSize
+
+  // 1) Let K[0] = K;
+  let k = intArray(kek)
+  // 2) UKM is split into components a[i,j]:
+  //    UKM = a[0]|..|a[7] (a[i] - byte, a[i,0]..a[i,7] - it’s bits)
+  const a = []
+  for (var i = 0; i < n; i++) {
+    a[i] = []
+    for (var j = 0; j < 8; j++) {
+      a[i][j] = (ukm[i] >>> j) & 0x1
+    }
+  }
+  // 3) Let i be 0.
+  // 4) K[1]..K[8] are calculated by repeating the following algorithm
+  //    eight times:
+  for (var i = 0; i < n; i++) {
+    //     A) K[i] is split into components k[i,j]:
+    //        K[i] = k[i,0]|k[i,1]|..|k[i,7] (k[i,j] - 32-bit integer)
+    //     B) Vector S[i] is calculated:
+    //        S[i] = ((a[i,0]*k[i,0] + ... + a[i,7]*k[i,7]) mod 2^32) |
+    //         (((~a[i,0])*k[i,0] + ... + (~a[i,7])*k[i,7]) mod 2^32);
+    const s = new Int32Array(2)
+    for (var j = 0; j < 8; j++) {
+      if (a[i][j]) {s[0] = (s[0] + k[j]) & 0xffffffff} else {s[1] = (s[1] + k[j]) & 0xffffffff}
+    }
+    //     C) K[i+1] = encryptCFB (S[i], K[i], K[i])
+    const iv = new Uint8Array(s.buffer)
+    k = new Int32Array(encryptCFB.call(this, k, k, iv))
+    //     D) i = i + 1
+  }
+  // 5) Let K(UKM) be K[8].
+  return k
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CPKW<br><br>
+ *
+ * This algorithm encrypts GOST 28147-89 CEK with a GOST 28147 KEK.
+ * It can be used with any KEK (e.g., produced by VKO GOST R 34.10-94 or
+ * VKO GOST R 34.10-2001) because a unique UKM is used to diversify the KEK.
+ * Ref. rfc4357 6.3  CryptoPro Key Wrap
+ *
+ * @memberOf GostCipher
+ * @method wrapKey
+ * @instance
+ * @param {CryptoOperationData} kek Key encryption key
+ * @param {CryptoOperationData} cek Content encryption key
+ * @returns {CryptoOperationData} Encrypted cek
+ */
+function wrapKeyCP(kek, cek) // <editor-fold defaultstate="collapsed">
+{
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) For a unique symmetric KEK or a KEK produced by VKO GOST R
+  // 34.10-94, generate 8 octets at random.  Call the result UKM.  For
+  // a KEK, produced by VKO GOST R 34.10-2001, use the UKM that was
+  // used for key derivation.
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
+  const ukm = new Uint8Array(this.ukm)
+  // 2) Diversify KEK, using the CryptoPro KEK Diversification Algorithm,
+  // described in Section 6.5.  Call the result KEK(UKM).
+  const dek = diversifyKEK.call(this, kek, ukm)
+  // 3) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK(UKM),
+  // CEK).  Call the result CEK_MAC.
+  const mac = signMAC.call(this, dek, cek, ukm)
+  // 4) Encrypt CEK in ECB mode using KEK(UKM).  Call the ciphertext
+  // CEK_ENC.
+  const enc = encryptECB.call(this, dek, cek)
+  // 5) The wrapped content-encryption key is (UKM | CEK_ENC | CEK_MAC).
+  const r = new Uint8Array(len)
+  r.set(new Uint8Array(enc), 0)
+  r.set(new Uint8Array(mac), k)
+  return r.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CPKW<br><br>
+ *
+ * This algorithm encrypts GOST 28147-89 CEK with a GOST 28147 KEK.
+ * Ref. rfc4357 6.4 CryptoPro Key Unwrap
+ *
+ * @memberOf GostCipher
+ * @method unwrapKey
+ * @instance
+ * @param {CryptoOperationData} kek Key encryption key
+ * @param {CryptoOperationData} data Encrypted content encryption keu
+ * @return {CryptoOperationData} result Decrypted content encryption keu
+ */
+function unwrapKeyCP(kek, data) // <editor-fold defaultstate="collapsed">
+{
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) If the wrapped content-encryption key is not 44 octets, then error.
+  const d = buffer(data)
+  if (d.byteLength !== len) {throw new DataError(`Wrapping key size must be ${ len } bytes`)}
+  // 2) Decompose the wrapped content-encryption key into UKM, CEK_ENC,
+  // and CEK_MAC.  UKM is the most significant (first) 8 octets.
+  // CEK_ENC is next 32 octets, and CEK_MAC is the least significant
+  // (last) 4 octets.
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
+  const ukm = new Uint8Array(this.ukm),
+    enc = new Uint8Array(d, 0, k),
+    mac = new Uint8Array(d, k, n >> 1)
+    // 3) Diversify KEK using the CryptoPro KEK Diversification Algorithm,
+    // described in section 6.5.  Call the result KEK(UKM).
+  const dek = diversifyKEK.call(this, kek, ukm)
+  // 4) Decrypt CEK_ENC in ECB mode using KEK(UKM).  Call the output CEK.
+  const cek = decryptECB.call(this, dek, enc)
+  // 5) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK(UKM),
+  // CEK), compare the result with CEK_MAC.  If they are not equal,
+  // then it is an error.
+  const check = verifyMAC.call(this, dek, mac, cek, ukm)
+  if (!check) {throw new DataError('Error verify MAC of wrapping key')}
+  return cek
+} // </editor-fold>
+
+/**
+ * SignalCom master key packing algorithm
+ *
+ * kek stored in 3 files - kek.opq, mk.db3, masks.db3
+ * kek.opq - always 36 bytes length = 32 bytes encrypted kek + 4 bytes mac of decrypted kek
+ * mk.db3 - 6 bytes header (1 byte magic code 0x22 + 1 byte count of masks + 4 bytes mac of
+ * xor summarizing masks value) + attached masks
+ * masks.db3 - detached masks.
+ * Total length  of attached + detached masks = 32 bits * count of masks
+ * Default value of count 8 = (7 attached + 1 detached). But really no reason for such
+ * separation - all masks xor summarizing - order is not matter.
+ * Content of file rand.opq can used as ukm. Don't forget change file content after using.
+ *
+ * For usb-token files has names:
+ * a001 - mk.db3, b001 - masks.db3, c001 - kek.opq, d001 - rand.opq
+ * For windows registry
+ * 00000001 - mk.db3, 00000002 - masks.db3, 00000003 - key.opq, 00000004 - rand.opq,
+ * 00000006 - keys\00000001.key, 0000000A - certificate
+ *
+ * @memberOf GostCipher
+ * @method packKey
+ * @instance
+ * @private
+ * @param {CryptoOperationData} unpacked - clear main key 32 bytes
+ * @param {CryptoOperationData} ukm - random vector for packing - 32 bytes * (count of masks - 1)
+ * @returns {CryptoOperationData} packed master key - concatination of mk.db3 + masks.db3
+ */
+function packKeySC(unpacked, ukm) // <editor-fold defaultstate="collapsed">
+{
+  const m = this.blockSize >> 1, k = this.keySize
+  let mcount = 8
+  const key = new Uint8Array(buffer(unpacked))
+  if (key.byteLength !== k) {throw new DataError(`Wrong cleartext size ${ key.byteLength } bytes`)}
+  // Check or generate UKM
+  ukm = ukm || this.ukm
+  if (ukm) {
+    ukm = new Uint8Array(buffer(ukm))
+    if (ukm.byteLength > 0 && ukm.byteLength % k === 0) {mcount = ukm.byteLength / k + 1} else {throw new DataError(`Wrong rand size ${ ukm.byteLength } bytes`)}
+  } else {randomSeed(ukm = new Uint8Array((mcount - 1) * k))}
+  // Output array
+  const d = new Uint8Array(mcount * k + m + 2), b = d.buffer
+  // Calculate MAC
+  const zero32 = new Uint8Array(k)
+  const mac = signMAC.call(this, key, zero32)
+  d[0] = 0x22 // Magic code
+  d[1] = mcount // Count of masks
+  d.set(new Uint8Array(mac), 2)
+  d.set(ukm, k + m + 2)
+  for (let i = 1; i < mcount; i++) {
+    const mask = new Uint8Array(b, 2 + m + k * i)
+    for (let j = 0; j < k; j++) {key[j] ^= mask[j]}
+  }
+  d.set(key, m + 2)
+  return d.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-SCKW<br><br>
+ *
+ * SignalCom master key unpacking algorithm
+ *
+ * @memberOf GostCipher
+ * @method unpackKey
+ * @instance
+ * @private
+ * @param {CryptoOperationData} packed - concatination of mk.db3 + masks.db3
+ * @returns {CryptoOperationData} unpacked master key
+ */
+function unpackKeySC(packed) // <editor-fold defaultstate="collapsed">
+{
+  const m = this.blockSize >> 1, k = this.keySize
+  const b = buffer(packed)
+  // Unpack master key
+  const magic = new Uint8Array(b, 0, 1)[0]
+  if (magic !== 0x22) {throw new DataError('Invalid magic number')}
+  const mcount = new Uint8Array(b, 1, 1)[0]
+  const mac = new Uint8Array(b, 2, m) // MAC for summarized mask
+  // Compute packKey xor summing for all masks
+  const key = new Uint8Array(k)
+  for (var i = 0; i < mcount; i++) {
+    const mask = new Uint8Array(b, 2 + m + k * i, k)
+    for (let j = 0; j < k; j++) {key[j] ^= mask[j]}
+  }
+  // Test MAC for packKey with default sBox on zero 32 bytes array
+  const zero32 = new Uint8Array(k)
+  let test = verifyMAC.call(this, key, mac, zero32)
+  if (!test) {
+    // Try to use different sBoxes
+    const names = ['E-A', 'E-B', 'E-C', 'E-D', 'E-SC']
+    for (var i = 0, n = names.length; i < n; i++) {
+      this.sBox = sBoxes[names[i]]
+      test = verifyMAC.call(this, key, mac, zero32)
+      if (test) {break}
+    }
+  }
+  if (!test) {throw new DataError('Invalid main key MAC')}
+  return key.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-SCKW<br><br>
+ *
+ * SignalCom Key Wrapping algorithm
+ *
+ * @memberOf GostCipher
+ * @method wrapKey
+ * @instance
+ * @param {CryptoOperationData} kek - clear kek or concatination of mk.db3 + masks.db3
+ * @param {CryptoOperationData} cek - key for wrapping
+ * @returns {CryptoOperationData} wrapped key - file kek.opq
+ */
+function wrapKeySC(kek, cek) // <editor-fold defaultstate="collapsed">
+{
+  const m = this.blockSize >> 1, n = this.keySize
+  let k = buffer(kek)
+  const c = buffer(cek)
+  if (k.byteLength !== n) {k = unpackKeySC.call(this, k)}
+  const enc = encryptECB.call(this, k, c)
+  const mac = signMAC.call(this, k, c)
+  const d = new Uint8Array(m + n)
+  d.set(new Uint8Array(enc), 0)
+  d.set(new Uint8Array(mac), n)
+  return d.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-SCKW<br><br>
+ *
+ * SignalCom Key UnWrapping algorithm
+ *
+ * @memberOf GostCipher
+ * @method unwrapKey
+ * @instance
+ * @param {CryptoOperationData} kek - concatination of files mk.db3 + masks.db3 or clear kek
+ * @param {CryptoOperationData} cek - wrapping key - file kek.opq
+ * @return {CryptoOperationData} result
+ */
+function unwrapKeySC(kek, cek) // <editor-fold defaultstate="collapsed">
+{
+  const m = this.blockSize >> 1, n = this.keySize
+  let k = buffer(kek)
+  const c = buffer(cek)
+  if (k.byteLength !== n) {k = unpackKeySC.call(this, k)}
+  const enc = new Uint8Array(c, 0, n) // Encrypted kek
+  const mac = new Uint8Array(c, n, m) // MAC for clear kek
+  const d = decryptECB.call(this, k, enc)
+  if (!verifyMAC.call(this, k, mac, d)) {throw new DataError('Invalid key MAC')}
+  return d
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-SCKW<br><br>
+ *
+ * SignalCom master key generation for wrapping
+ *
+ * @memberOf GostCipher
+ * @method generateKey
+ * @instance
+ * @return {CryptoOperationData} result
+ */
+function generateWrappingKeySC() // <editor-fold defaultstate="collapsed">
+{
+  return packKeySC.call(this, generateKey.call(this))
+} // </editor-fold>
+
+function maskKey(mask, key, inverse, keySize) // <editor-fold defaultstate="collapsed">
+{
+  const k = keySize / 4,
+    m32 = new Int32Array(buffer(mask)),
+    k32 = new Int32Array(buffer(key)),
+    r32 = new Int32Array(k)
+  if (inverse) {
+    for (var i = 0; i < k; i++) {r32[i] = (k32[i] + m32[i]) & 0xffffffff}
+  } else {
+    for (var i = 0; i < k; i++) {r32[i] = (k32[i] - m32[i]) & 0xffffffff}
+  }
+  return r32.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-MASK<br><br>
+ *
+ * This algorithm wrap key mask
+ *
+ * @memberOf GostCipher
+ * @method wrapKey
+ * @instance
+ * @param {CryptoOperationData} mask The mask
+ * @param {CryptoOperationData} key The key
+ * @returns {CryptoOperationData} The masked key
+ */
+function wrapKeyMask(mask, key) // <editor-fold defaultstate="collapsed">
+{
+  return maskKey(mask, key, this.procreator === 'VN', this.keySize)
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CPKW<br><br>
+ *
+ * This algorithm unwrap key mask
+ *
+ * @memberOf GostCipher
+ * @method unwrapKey
+ * @instance
+ * @param {CryptoOperationData} mask The mask
+ * @param {CryptoOperationData} key The masked key
+ * @return {CryptoOperationData} result The key
+ */
+function unwrapKeyMask(mask, key) // <editor-fold defaultstate="collapsed">
+{
+  return maskKey(mask, key, this.procreator !== 'VN', this.keySize)
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-CPKM<br><br>
+ *
+ * Key meshing in according to rfc4357 2.3.2. CryptoPro Key Meshing
+ *
+ * @memberOf GostCipher
+ * @method keyMeshing
+ * @instance
+ * @private
+ * @param {(Uint8Array|CryptoOperationData)} k 8x8 bit key
+ * @param {Uint8Array} s 8x8 bit sync (iv)
+ * @param {Integer} i block index
+ * @param {Int32Array} key 8x32 bit key schedule
+ * @param {boolean} e true - decrypt
+ * @returns CryptoOperationData next 8x8 bit key
+ */
+function keyMeshingCP(k, s, i, key, e) // <editor-fold defaultstate="collapsed">
+{
+  if ((i + 1) * this.blockSize % 1024 === 0) { // every 1024 octets
+    // K[i+1] = decryptECB (K[i], C);
+    k = decryptECB.call(this, k, C)
+    // IV0[i+1] = encryptECB (K[i+1],IVn[i])
+    s.set(new Uint8Array(encryptECB.call(this, k, s)))
+    // restore key schedule
+    key.set(this.keySchedule(k, e))
+  }
+  return k
+} // </editor-fold>
+
+/**
+ *  Null Key Meshing in according to rfc4357 2.3.1
+ *
+ * @memberOf GostCipher
+ * @method keyMeshing
+ * @instance
+ * @private
+ * @param {(Uint8Array|CryptoOperationData)} k 8x8 bit key
+ */
+function noKeyMeshing(k) // <editor-fold defaultstate="collapsed">
+{
+  return k
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-NoPadding<br><br>
+ *
+ * No padding.
+ *
+ * @memberOf GostCipher
+ * @method padding
+ * @instance
+ * @private
+ * @param {Uint8Array} d array with source data
+ * @returns {Uint8Array} result
+ */
+function noPad(d) // <editor-fold defaultstate="collapsed">
+{
+  return new Uint8Array(d)
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-PKCS5Padding<br><br>
+ *
+ *  PKCS#5 padding: 8-x remaining bytes are filled with the value of
+ *  8-x.  If there’s no incomplete block, one extra block filled with
+ *  value 8 is added
+ *
+ * @memberOf GostCipher
+ * @method padding
+ * @instance
+ * @private
+ * @param {Uint8Array} d array with source data
+ * @returns {Uint8Array} result
+ */
+function pkcs5Pad(d) // <editor-fold defaultstate="collapsed">
+{
+  const n = d.byteLength,
+    nb = this.blockSize,
+    q = nb - n % nb,
+    m = Math.ceil((n + 1) / nb) * nb,
+    r = new Uint8Array(m)
+  r.set(d)
+  for (let i = n; i < m; i++) {r[i] = q}
+  return r
+} // </editor-fold>
+
+function pkcs5Unpad(d) // <editor-fold defaultstate="collapsed">
+{
+  const m = d.byteLength,
+    nb = this.blockSize,
+    q = d[m - 1],
+    n = m - q
+  if (q > nb) {throw DataError('Invalid padding')}
+  const r = new Uint8Array(n)
+  if (n > 0) {r.set(new Uint8Array(d.buffer, 0, n))}
+  return r
+} // </editor-fold>
+
+
+/**
+ * Algorithm name GOST 28147-ZeroPadding<br><br>
+ *
+ * Zero padding: 8-x remaining bytes are filled with zero
+ *
+ * @memberOf GostCipher
+ * @method padding
+ * @instance
+ * @private
+ * @param {Uint8Array} d array with source data
+ * @returns {Uint8Array} result
+ */
+function zeroPad(d) // <editor-fold defaultstate="collapsed">
+{
+  const n = d.byteLength,
+    nb = this.blockSize,
+    m = Math.ceil(n / nb) * nb,
+    r = new Uint8Array(m)
+  r.set(d)
+  for (let i = n; i < m; i++) {r[i] = 0}
+  return r
+} // </editor-fold>
+
+
+/**
+ * Algorithm name GOST 28147-BitPadding<br><br>
+ *
+ * Bit padding: P* = P || 1 || 000...0 If there’s no incomplete block,
+ * one extra block filled with 1 || 000...0
+ *
+ * @memberOf GostCipher
+ * @method padding
+ * @instance
+ * @private
+ * @param {Uint8Array} d array with source data
+ * @returns {Uint8Array} result
+ */
+function bitPad(d) // <editor-fold defaultstate="collapsed">
+{
+  const n = d.byteLength,
+    nb = this.blockSize,
+    m = Math.ceil((n + 1) / nb) * nb,
+    r = new Uint8Array(m)
+  r.set(d)
+  r[n] = 1
+  for (let i = n + 1; i < m; i++) {r[i] = 0}
+  return r
+} // </editor-fold>
+
+function bitUnpad(d) // <editor-fold defaultstate="collapsed">
+{
+  let m = d.byteLength,
+    n = m
+  while (n > 1 && d[n - 1] === 0) {n--}
+  if (d[n - 1] !== 1) {throw DataError('Invalid padding')}
+  n--
+  const r = new Uint8Array(n)
+  if (n > 0) {r.set(new Uint8Array(d.buffer, 0, n))}
+  return r
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST 28147-RandomPadding<br><br>
+ *
+ * Random padding: 8-x remaining bytes of the last block are set to
+ * random.
+ *
+ * @memberOf GostCipher
+ * @method padding
+ * @instance
+ * @private
+ * @param {Uint8Array} d array with source data
+ * @returns {Uint8Array} result
+ */
+function randomPad(d) // <editor-fold defaultstate="collapsed">
+{
+  const n = d.byteLength,
+    nb = this.blockSize,
+    q = nb - n % nb,
+    m = Math.ceil(n / nb) * nb,
+    r = new Uint8Array(m), e = new Uint8Array(r.buffer, n, q)
+  r.set(d)
+  randomSeed(e)
+  return r
+} // </editor-fold>
+
+/**
+ * GOST 28147-89 Encryption Algorithm<br><br>
+ *
+ * References {@link http://tools.ietf.org/html/rfc5830}<br><br>
+ *
+ * When keys and initialization vectors are converted to/from byte arrays,
+ * little-endian byte order is assumed.<br><br>
+ *
+ * Normalized algorithm identifier common parameters:
+ *
+ *  <ul>
+ *      <li><b>name</b> Algorithm name 'GOST 28147' or 'GOST R 34.12'</li>
+ *      <li><b>version</b> Algorithm version, number
+ *          <ul>
+ *              <li><b>1989</b> Current version of standard</li>
+ *              <li><b>2015</b> New draft version of standard</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>length</b> Block length
+ *          <ul>
+ *              <li><b>64</b> 64 bits length (default)</li>
+ *              <li><b>128</b> 128 bits length (only for version 2015)</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>mode</b> Algorithm mode, string
+ *          <ul>
+ *              <li><b>ES</b> Encryption mode (default)</li>
+ *              <li><b>MAC</b> "imitovstavka" (MAC) mode</li>
+ *              <li><b>KW</b> Key wrapping mode</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>sBox</b> Paramset sBox for GOST 28147-89, string. Used only if version = 1989</li>
+ *  </ul>
+ *
+ * Supported algorithms, modes and parameters:
+ *
+ *  <ul>
+ *      <li>Encript/Decrypt mode (ES)
+ *          <ul>
+ *              <li><b>block</b> Block mode, string. Default ECB</li>
+ *              <li><b>keyMeshing</b> Key meshing mode, string. Default NO</li>
+ *              <li><b>padding</b> Padding mode, string. Default NO for CFB and CTR modes, or ZERO for others</li>
+ *              <li><b>iv</b> {@link CryptoOperationData} Initial vector with length of block. Default - zero block</li>
+ *          </ul>
+ *      </li>
+ *      <li>Sign/Verify mode (MAC)
+ *          <ul>
+ *              <li><b>macLength</b> Length of mac in bits (default - 32 bits)</li>
+ *              <li><b>iv</b> {@link CryptoOperationData} Initial vector with length of block. Default - zero block</li>
+ *          </ul>
+ *      </li>
+ *      <li>Wrap/Unwrap key mode (KW)
+ *          <ul>
+ *              <li><b>keyWrapping</b> Mode of keywrapping, string. Default NO - standard GOST key wrapping</li>
+ *              <li><b>ukm</b> {@link CryptoOperationData} User key material. Default - random generated value</li>
+ *          </ul>
+ *      </li>
+ *  </ul>
+ *
+ * Supported paramters values:
+ *
+ *  <ul>
+ *      <li>Block modes (parameter 'block')
+ *          <ul>
+ *              <li><b>ECB</b> "prostaya zamena" (ECB) mode (default)</li>
+ *              <li><b>CFB</b> "gammirovanie s obratnoj svyaziyu po shifrotekstu" (CFB) mode</li>
+ *              <li><b>OFB</b> "gammirovanie s obratnoj svyaziyu po vyhodu" (OFB) mode</li>
+ *              <li><b>CTR</b> "gammirovanie" (counter) mode</li>
+ *              <li><b>CBC</b> Cipher-Block-Chaining (CBC) mode</li>
+ *          </ul>
+ *      </li>
+ *      <li>Key meshing modes (parameter 'keyMeshing')
+ *          <ul>
+ *              <li><b>NO</b> No key wrapping (default)</li>
+ *              <li><b>CP</b> CryptoPor Key key meshing</li>
+ *          </ul>
+ *      </li>
+ *      <li>Padding modes (parameter 'padding')
+ *          <ul>
+ *              <li><b>NO</b> No padding only for CFB, OFB and CTR modes</li>
+ *              <li><b>PKCS5</b> PKCS#5 padding mode</li>
+ *              <li><b>ZERO</b> Zero bits padding mode</li>
+ *              <li><b>RANDOM</b> Random bits padding mode</li>
+ *              <li><b>BIT</b> One bit padding mode</li>
+ *          </ul>
+ *      </li>
+ *      <li>Wrapping key modes (parameter 'keyWrapping')
+ *          <ul>
+ *              <li><b>NO</b> Ref. rfc4357 6.1 GOST 28147-89 Key wrapping</li>
+ *              <li><b>CP</b> CryptoPro Key wrapping mode</li>
+ *              <li><b>SC</b> SignalCom Key wrapping mode</li>
+ *          </ul>
+ *      </li>
+ *  </ul>
+ *
+ * @class GostCipher
+ * @param {AlgorithmIndentifier} algorithm WebCryptoAPI algorithm identifier
+ */
+function GostCipher(algorithm) // <editor-fold defaultstate="collapsed">
+{
+  // Check little endian support
+  if (!littleEndian) {throw new NotSupportedError('Big endian platform not supported')}
+  algorithm = algorithm || {}
+  this.keySize = 32
+  this.blockLength = algorithm.length || 64
+  this.blockSize = this.blockLength >> 3
+
+  this.name = `${(algorithm.name || (algorithm.version === 1 ? 'RC2' :
+    algorithm.version === 1989 ? 'GOST 28147' : 'GOST R 34.12')) +
+        (algorithm.version > 4 ? `-${ (algorithm.version || 1989) % 100}` : '') }-${
+    this.blockLength === 64 ? '' : `${this.blockLength }-`
+  }${(algorithm.mode === 'MAC') ? `MAC-${ algorithm.macLength || this.blockLength >> 1}` :
+    (algorithm.mode === 'KW' || algorithm.keyWrapping) ?
+      `${(algorithm.keyWrapping || 'NO') !== 'NO' ? algorithm.keyWrapping : '' }KW` :
+      (algorithm.block || 'ECB') + ((algorithm.block === 'CFB' || algorithm.block === 'OFB' ||
+                    (algorithm.block === 'CTR' && algorithm.version === 2015)) &&
+                    algorithm.shiftBits && algorithm.shiftBits !== this.blockLength ? `-${ algorithm.shiftBits}` : '') +
+                (algorithm.padding ? `-${ algorithm.padding || (algorithm.block === 'CTR' ||
+                    algorithm.block === 'CFB' || algorithm.block === 'OFB' ? 'NO' : 'ZERO') }PADDING` : '') +
+                ((algorithm.keyMeshing || 'NO') !== 'NO' ? '-CPKEYMESHING' : '')
+  }${algorithm.procreator ? `/${ algorithm.procreator}` : ''
+  }${typeof algorithm.sBox === 'string' ? `/${ algorithm.sBox}` : ''}`
+
+  // Algorithm procreator
+  this.procreator = algorithm.procreator
+
+  switch (algorithm.version || 1989) {
+    case 1:
+      this.process = processRC2
+      this.keySchedule = keyScheduleRC2
+      this.blockLength = 64
+      this.effectiveLength = algorithm.length || 32
+      this.keySize = 8 * Math.ceil(this.effectiveLength / 8) // Max 128
+      this.blockSize = this.blockLength >> 3
+      break
+    case 2015:
+      this.version = 2015
+      if (this.blockLength === 64) {
+        this.process = process15
+        this.keySchedule = keySchedule15
+      } else if (this.blockLength === 128) {
+        this.process = process128
+        this.keySchedule = keySchedule128
+      } else {throw new DataError('Invalid block length')}
+      this.processMAC = processMAC15
+      break
+    case 1989:
+      this.version = 1989
+      this.process = process89
+      this.processMAC = processMAC89
+      this.keySchedule = keySchedule89
+      if (this.blockLength !== 64) {throw new DataError('Invalid block length')}
+      break
+    default:
+      throw new NotSupportedError(`Algorithm version ${ algorithm.version } not supported`)
+  }
+
+  switch (algorithm.mode || (algorithm.keyWrapping && 'KW') || 'ES') {
+
+    case 'ES':
+      switch (algorithm.block || 'ECB') {
+        case 'ECB':
+          this.encrypt = encryptECB
+          this.decrypt = decryptECB
+          break
+        case 'CTR':
+          if (this.version === 1989) {
+            this.encrypt = processCTR89
+            this.decrypt = processCTR89
+          } else {
+            this.encrypt = processCTR15
+            this.decrypt = processCTR15
+            this.shiftBits = algorithm.shiftBits || this.blockLength
+          }
+          break
+        case 'CBC':
+          this.encrypt = encryptCBC
+          this.decrypt = decryptCBC
+          break
+        case 'CFB':
+          this.encrypt = encryptCFB
+          this.decrypt = decryptCFB
+          this.shiftBits = algorithm.shiftBits || this.blockLength
+          break
+        case 'OFB':
+          this.encrypt = processOFB
+          this.decrypt = processOFB
+          this.shiftBits = algorithm.shiftBits || this.blockLength
+          break
+        default:
+          throw new NotSupportedError(`Block mode ${ algorithm.block } not supported`)
+      }
+      switch (algorithm.keyMeshing) {
+        case 'CP':
+          this.keyMeshing = keyMeshingCP
+          break
+        default:
+          this.keyMeshing = noKeyMeshing
+      }
+      if (this.encrypt === encryptECB || this.encrypt === encryptCBC) {
+        switch (algorithm.padding) {
+          case 'PKCS5P':
+            this.pad = pkcs5Pad
+            this.unpad = pkcs5Unpad
+            break
+          case 'RANDOM':
+            this.pad = randomPad
+            this.unpad = noPad
+            break
+          case 'BIT':
+            this.pad = bitPad
+            this.unpad = bitUnpad
+            break
+          default:
+            this.pad = zeroPad
+            this.unpad = noPad
+        }
+      } else {
+        this.pad = noPad
+        this.unpad = noPad
+      }
+      this.generateKey = generateKey
+      break
+    case 'MAC':
+      this.sign = signMAC
+      this.verify = verifyMAC
+      this.generateKey = generateKey
+      this.macLength = algorithm.macLength || (this.blockLength >> 1)
+      this.pad = noPad
+      this.unpad = noPad
+      this.keyMeshing = noKeyMeshing
+      break
+    case 'KW':
+      this.pad = noPad
+      this.unpad = noPad
+      this.keyMeshing = noKeyMeshing
+      switch (algorithm.keyWrapping) {
+        case 'CP':
+          this.wrapKey = wrapKeyCP
+          this.unwrapKey = unwrapKeyCP
+          this.generateKey = generateKey
+          this.shiftBits = algorithm.shiftBits || this.blockLength
+          break
+        case 'SC':
+          this.wrapKey = wrapKeySC
+          this.unwrapKey = unwrapKeySC
+          this.generateKey = generateWrappingKeySC
+          break
+        default:
+          this.wrapKey = wrapKeyGOST
+          this.unwrapKey = unwrapKeyGOST
+          this.generateKey = generateKey
+      }
+      break
+    case 'MASK':
+      this.wrapKey = wrapKeyMask
+      this.unwrapKey = unwrapKeyMask
+      this.generateKey = generateKey
+      break
+    default:
+      throw new NotSupportedError(`Mode ${ algorithm.mode } not supported`)
+  }
+
+  // Define sBox parameter
+  let sBox = algorithm.sBox, sBoxName
+  if (!sBox) {sBox = this.version === 2015 ? sBoxes['E-Z'] : this.procreator === 'SC' ? sBoxes['E-SC'] : sBoxes['E-A']} else if (typeof sBox === 'string') {
+    sBoxName = sBox.toUpperCase()
+    sBox = sBoxes[sBoxName]
+    if (!sBox) {throw new SyntaxError(`Unknown sBox name: ${ algorithm.sBox}`)}
+  } else if (!sBox.length || sBox.length !== sBoxes['E-Z'].length) {throw new SyntaxError(`Length of sBox must be ${ sBoxes['E-Z'].length}`)}
+  this.sBox = sBox
+  // Initial vector
+  if (algorithm.iv) {
+    this.iv = new Uint8Array(algorithm.iv)
+    if (this.iv.byteLength !== this.blockSize && this.version === 1989) {throw new SyntaxError(`Length of iv must be ${ this.blockLength } bits`)} else if (this.iv.byteLength !== this.blockSize >> 1 && this.encrypt === processCTR15) {throw new SyntaxError(`Length of iv must be ${ this.blockLength}` >> `${1 } bits`)} else if (this.iv.byteLength % this.blockSize !== 0 && this.encrypt !== processCTR15) {throw new SyntaxError(`Length of iv must be a multiple of ${ this.blockLength } bits`)}
+  } else {this.iv = this.blockLength === 128 ? defaultIV128 : defaultIV}
+  // User key material
+  if (algorithm.ukm) {
+    this.ukm = new Uint8Array(algorithm.ukm)
+    if (this.ukm.byteLength * 8 !== this.blockLength) {throw new SyntaxError(`Length of ukm must be ${ this.blockLength } bits`)}
+  }
+} // </editor-fold>
+
+module.exports = GostCipher
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCoding.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCoding.js
new file mode 100644
index 0000000..da693f7
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCoding.js
@@ -0,0 +1,1099 @@
+/**
+ * @file Coding algorithms: Base64, Hex, Int16, Chars, BER and PEM
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * THIS SOfTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES Of MERCHANTABILITY AND fITNESS fOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * fOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT Of SUBSTITUTE GOODS OR
+ * SERVICES; LOSS Of USE, DATA, OR PROfITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY Of LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT Of THE USE
+ * Of THIS SOfTWARE, EVEN If ADVISED Of THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const gostCrypto = require('./gostCrypto')
+
+/**
+ * The Coding interface provides string converting methods: Base64, Hex,
+ * Int16, Chars, BER and PEM
+ * @class GostCoding
+ *
+ */ // <editor-fold defaultstate="collapsed">
+const DataError = global.DataError || global.Error
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
+
+function buffer(d) {
+  if (d instanceof CryptoOperationData) {return d}
+  if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
+  }
+  throw new DataError('CryptoOperationData required')
+} // </editor-fold>
+
+function GostCoding() {
+}
+
+/**
+ * BASE64 conversion
+ *
+ * @class GostCoding.Base64
+ */
+const Base64 = { // <editor-fold defaultstate="collapsed">
+  /**
+     * Base64.decode convert BASE64 string s to CryptoOperationData
+     *
+     * @memberOf GostCoding.Base64
+     * @param {String} s BASE64 encoded string value
+     * @returns {CryptoOperationData} Binary decoded data
+     */
+  decode: function (s) {
+    s = s.replace(/[^A-Za-z0-9\+\/]/g, '')
+    const n = s.length,
+      k = n * 3 + 1 >> 2, r = new Uint8Array(k)
+
+    for (var m3, m4, u24 = 0, j = 0, i = 0; i < n; i++) {
+      m4 = i & 3
+      let c = s.charCodeAt(i)
+
+      c = c > 64 && c < 91 ?
+        c - 65 : c > 96 && c < 123 ?
+          c - 71 : c > 47 && c < 58 ?
+            c + 4 : c === 43 ?
+              62 : c === 47 ?
+                63 : 0
+
+      u24 |= c << 18 - 6 * m4
+      if (m4 === 3 || n - i === 1) {
+        for (m3 = 0; m3 < 3 && j < k; m3++ , j++) {
+          r[j] = u24 >>> (16 >>> m3 & 24) & 255
+        }
+        u24 = 0
+
+      }
+    }
+    return r.buffer
+  },
+  /**
+     * Base64.encode(data) convert CryptoOperationData data to BASE64 string
+     *
+     * @memberOf GostCoding.Base64
+     * @param {CryptoOperationData} data Bynary data for encoding
+     * @returns {String} BASE64 encoded data
+     */
+  encode: function (data) {
+    const slen = 8, d = new Uint8Array(buffer(data))
+    let m3 = 2, s = ''
+    for (let n = d.length, u24 = 0, i = 0; i < n; i++) {
+      m3 = i % 3
+      if (i > 0 && (i * 4 / 3) % (12 * slen) === 0) {s += '\r\n'}
+      u24 |= d[i] << (16 >>> m3 & 24)
+      if (m3 === 2 || n - i === 1) {
+        for (let j = 18; j >= 0; j -= 6) {
+          let c = u24 >>> j & 63
+          c = c < 26 ? c + 65 : c < 52 ? c + 71 : c < 62 ? c - 4 :
+            c === 62 ? 43 : c === 63 ? 47 : 65
+          s += String.fromCharCode(c)
+        }
+        u24 = 0
+      }
+    }
+    return s.substr(0, s.length - 2 + m3) + (m3 === 2 ? '' : m3 === 1 ? '=' : '==')
+  }, // </editor-fold>
+}
+
+/**
+ * BASE64 conversion
+ *
+ * @memberOf GostCoding
+ * @insnance
+ * @type GostCoding.Base64
+ */
+GostCoding.prototype.Base64 = Base64
+
+/**
+ * Text string conversion <br>
+ * Methods support charsets: ascii, win1251, utf8, utf16 (ucs2, unicode), utf32 (ucs4)
+ *
+ * @class GostCoding.Chars
+ */
+const Chars = (function () { // <editor-fold defaultstate="collapsed">
+
+  const _win1251_ = {
+    0x402: 0x80, 0x403: 0x81, 0x201A: 0x82, 0x453: 0x83, 0x201E: 0x84, 0x2026: 0x85, 0x2020: 0x86, 0x2021: 0x87,
+    0x20AC: 0x88, 0x2030: 0x89, 0x409: 0x8A, 0x2039: 0x8B, 0x40A: 0x8C, 0x40C: 0x8D, 0x40B: 0x8E, 0x40f: 0x8f,
+    0x452: 0x90, 0x2018: 0x91, 0x2019: 0x92, 0x201C: 0x93, 0x201D: 0x94, 0x2022: 0x95, 0x2013: 0x96, 0x2014: 0x97,
+    0x2122: 0x99, 0x459: 0x9A, 0x203A: 0x9B, 0x45A: 0x9C, 0x45C: 0x9D, 0x45B: 0x9E, 0x45f: 0x9f,
+    0xA0: 0xA0, 0x40E: 0xA1, 0x45E: 0xA2, 0x408: 0xA3, 0xA4: 0xA4, 0x490: 0xA5, 0xA6: 0xA6, 0xA7: 0xA7,
+    0x401: 0xA8, 0xA9: 0xA9, 0x404: 0xAA, 0xAB: 0xAB, 0xAC: 0xAC, 0xAD: 0xAD, 0xAE: 0xAE, 0x407: 0xAf,
+    0xB0: 0xB0, 0xB1: 0xB1, 0x406: 0xB2, 0x456: 0xB3, 0x491: 0xB4, 0xB5: 0xB5, 0xB6: 0xB6, 0xB7: 0xB7,
+    0x451: 0xB8, 0x2116: 0xB9, 0x454: 0xBA, 0xBB: 0xBB, 0x458: 0xBC, 0x405: 0xBD, 0x455: 0xBE, 0x457: 0xBf,
+  }
+  const _win1251back_ = {}
+  for (const from in _win1251_) {
+    const to = _win1251_[from]
+    _win1251back_[to] = from
+  }
+
+  return {
+    /**
+         * Chars.decode(s, charset) convert string s with defined charset to CryptoOperationData
+         *
+         * @memberOf GostCoding.Chars
+         * @param {string} s Javascript string
+         * @param {string} charset Charset, default 'win1251'
+         * @returns {CryptoOperationData} Decoded binary data
+         */
+    decode: function (s, charset) {
+      charset = (charset || 'win1251').toLowerCase().replace('-', '')
+      const r = []
+      for (let i = 0, j = s.length; i < j; i++) {
+        let c = s.charCodeAt(i)
+        if (charset === 'utf8') {
+          if (c < 0x80) {
+            r.push(c)
+          } else if (c < 0x800) {
+            r.push(0xc0 + (c >>> 6))
+            r.push(0x80 + (c & 63))
+          } else if (c < 0x10000) {
+            r.push(0xe0 + (c >>> 12))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
+          } else if (c < 0x200000) {
+            r.push(0xf0 + (c >>> 18))
+            r.push(0x80 + (c >>> 12 & 63))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
+          } else if (c < 0x4000000) {
+            r.push(0xf8 + (c >>> 24))
+            r.push(0x80 + (c >>> 18 & 63))
+            r.push(0x80 + (c >>> 12 & 63))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
+          } else {
+            r.push(0xfc + (c >>> 30))
+            r.push(0x80 + (c >>> 24 & 63))
+            r.push(0x80 + (c >>> 18 & 63))
+            r.push(0x80 + (c >>> 12 & 63))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
+          }
+        } else if (charset === 'unicode' || charset === 'ucs2' || charset === 'utf16') {
+          if (c < 0xD800 || (c >= 0xE000 && c <= 0x10000)) {
+            r.push(c >>> 8)
+            r.push(c & 0xff)
+          } else if (c >= 0x10000 && c < 0x110000) {
+            c -= 0x10000
+            const first = ((0xffc00 & c) >> 10) + 0xD800
+            const second = (0x3ff & c) + 0xDC00
+            r.push(first >>> 8)
+            r.push(first & 0xff)
+            r.push(second >>> 8)
+            r.push(second & 0xff)
+          }
+        } else if (charset === 'utf32' || charset === 'ucs4') {
+          r.push(c >>> 24 & 0xff)
+          r.push(c >>> 16 & 0xff)
+          r.push(c >>> 8 & 0xff)
+          r.push(c & 0xff)
+        } else if (charset === 'win1251') {
+          if (c >= 0x80) {
+            if (c >= 0x410 && c < 0x450) // А..Яа..я
+            {c -= 0x350} else {c = _win1251_[c] || 0}
+          }
+          r.push(c)
+        } else {r.push(c & 0xff)}
+      }
+      return new Uint8Array(r).buffer
+    },
+    /**
+         * Chars.encode(data, charset) convert CryptoOperationData data to string with defined charset
+         *
+         * @memberOf GostCoding.Chars
+         * @param {CryptoOperationData} data Binary data
+         * @param {string} charset Charset, default win1251
+         * @returns {string} Encoded javascript string
+         */
+    encode: function (data, charset) {
+      charset = (charset || 'win1251').toLowerCase().replace('-', '')
+      const r = [], d = new Uint8Array(buffer(data))
+      for (let i = 0, n = d.length; i < n; i++) {
+        let c = d[i]
+        if (charset === 'utf8') {
+          c = c >= 0xfc && c < 0xfe && i + 5 < n ? // six bytes
+            (c - 0xfc) * 1073741824 + (d[++i] - 0x80 << 24) + (d[++i] - 0x80 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+            : c >> 0xf8 && c < 0xfc && i + 4 < n ? // five bytes
+              (c - 0xf8 << 24) + (d[++i] - 0x80 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+              : c >> 0xf0 && c < 0xf8 && i + 3 < n ? // four bytes
+                (c - 0xf0 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+                : c >= 0xe0 && c < 0xf0 && i + 2 < n ? // three bytes
+                  (c - 0xe0 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+                  : c >= 0xc0 && c < 0xe0 && i + 1 < n ? // two bytes
+                    (c - 0xc0 << 6) + d[++i] - 0x80
+                    : c // one byte
+        } else if (charset === 'unicode' || charset === 'ucs2' || charset === 'utf16') {
+          c = (c << 8) + d[++i]
+          if (c >= 0xD800 && c < 0xE000) {
+            const first = (c - 0xD800) << 10
+            c = d[++i]
+            c = (c << 8) + d[++i]
+            const second = c - 0xDC00
+            c = first + second + 0x10000
+          }
+        } else if (charset === 'utf32' || charset === 'ucs4') {
+          c = (c << 8) + d[++i]
+          c = (c << 8) + d[++i]
+          c = (c << 8) + d[++i]
+        } else if (charset === 'win1251') {
+          if (c >= 0x80) {
+            if (c >= 0xC0 && c < 0x100) {c += 0x350} // А..Яа..я
+            else {c = _win1251back_[c] || 0}
+          }
+        }
+        r.push(String.fromCharCode(c))
+      }
+      return r.join('')
+    },
+  } // </editor-fold>
+})()
+
+/**
+ * Text string conversion
+ *
+ * @memberOf GostCoding
+ * @insnance
+ * @type GostCoding.Chars
+ */
+GostCoding.prototype.Chars = Chars
+
+/**
+ * HEX conversion
+ *
+ * @class GostCoding.Hex
+ */
+const Hex = { // <editor-fold defaultstate="collapsed">
+  /**
+     * Hex.decode(s, endean) convert HEX string s to CryptoOperationData in endean mode
+     *
+     * @memberOf GostCoding.Hex
+     * @param {string} s Hex encoded string
+     * @param {boolean} endean Little or Big Endean, default Little
+     * @returns {CryptoOperationData} Decoded binary data
+     */
+  decode: function (s, endean) {
+    s = s.replace(/[^A-fa-f0-9]/g, '')
+    const n = Math.ceil(s.length / 2), r = new Uint8Array(n)
+    s = (s.length % 2 > 0 ? '0' : '') + s
+    if (endean && ((typeof endean !== 'string') ||
+            (endean.toLowerCase().indexOf('little') < 0))) {
+      for (var i = 0; i < n; i++) {r[i] = parseInt(s.substr((n - i - 1) * 2, 2), 16)}
+    } else {
+      for (var i = 0; i < n; i++) {r[i] = parseInt(s.substr(i * 2, 2), 16)}
+    }
+    return r.buffer
+  },
+  /**
+     * Hex.encode(data, endean) convert CryptoOperationData data to HEX string in endean mode
+     *
+     * @memberOf GostCoding.Hex
+     * @param {CryptoOperationData} data Binary data
+     * @param {boolean} endean Little/Big Endean, default Little
+     * @returns {string} Hex decoded string
+     */
+  encode: function (data, endean) {
+    const s = [], d = new Uint8Array(buffer(data)), n = d.length
+    if (endean && ((typeof endean !== 'string') ||
+            (endean.toLowerCase().indexOf('little') < 0))) {
+      for (var i = 0; i < n; i++) {
+        const j = n - i - 1
+        s[j] = (j > 0 && j % 32 === 0 ? '\r\n' : '') +
+                    (`00${ d[i].toString(16)}`).slice(-2)
+      }
+    } else {
+      for (var i = 0; i < n; i++) {
+        s[i] = (i > 0 && i % 32 === 0 ? '\r\n' : '') +
+                    (`00${ d[i].toString(16)}`).slice(-2)
+      }
+    }
+    return s.join('')
+  }, // </editor-fold>
+}
+
+/**
+ *  HEX conversion
+ * @memberOf GostCoding
+ * @insnance
+ * @type GostCoding.Hex
+ */
+GostCoding.prototype.Hex = Hex
+
+/**
+ * String hex-encoded integer conversion
+ *
+ * @class GostCoding.Int16
+ */
+const Int16 = { // <editor-fold defaultstate="collapsed">
+  /**
+     * Int16.decode(s) convert hex big insteger s to CryptoOperationData
+     *
+     * @memberOf GostCoding.Int16
+     * @param {string} s Int16 string
+     * @returns {CryptoOperationData} Decoded binary data
+     */
+  decode: function (s) {
+    s = (s || '').replace(/[^\-A-fa-f0-9]/g, '')
+    if (s.length === 0) {s = '0'}
+    // Signature
+    let neg = false
+    if (s.charAt(0) === '-') {
+      neg = true
+      s = s.substring(1)
+    }
+    // Align 2 chars
+    while (s.charAt(0) === '0' && s.length > 1) {s = s.substring(1)}
+    s = (s.length % 2 > 0 ? '0' : '') + s
+    // Padding for singanuture
+    // '800000' - 'ffffff' - for positive
+    // '800001' - 'ffffff' - for negative
+    if ((!neg && !/^[0-7]/.test(s)) ||
+            (neg && !/^[0-7]|8[0]+$/.test(s))) {s = `00${ s}`}
+    // Convert hex
+    let n = s.length / 2, r = new Uint8Array(n), t = 0
+    for (let i = n - 1; i >= 0; --i) {
+      let c = parseInt(s.substr(i * 2, 2), 16)
+      if (neg && (c + t > 0)) {
+        c = 256 - c - t
+        t = 1
+      }
+      r[i] = c
+    }
+    return r.buffer
+  },
+  /**
+     * Int16.encode(data) convert CryptoOperationData data to big integer hex string
+     *
+     * @memberOf GostCoding.Int16
+     * @param {CryptoOperationData} data Binary data
+     * @returns {string} Int16 encoded string
+     */
+  encode: function (data) {
+    const d = new Uint8Array(buffer(data)), n = d.length
+    if (d.length === 0) {return '0x00'}
+    let s = [], neg = d[0] > 0x7f, t = 0
+    for (let i = n - 1; i >= 0; --i) {
+      let v = d[i]
+      if (neg && (v + t > 0)) {
+        v = 256 - v - t
+        t = 1
+      }
+      s[i] = (`00${ v.toString(16)}`).slice(-2)
+    }
+    s = s.join('')
+    while (s.charAt(0) === '0') {s = s.substring(1)}
+    return `${neg ? '-' : '' }0x${ s}`
+  }, // </editor-fold>
+}
+
+/**
+ * String hex-encoded integer conversion
+ * @memberOf GostCoding
+ * @insnance
+ * @type GostCoding.Int16
+ */
+GostCoding.prototype.Int16 = Int16
+
+/**
+ * BER, DER, CER conversion
+ *
+ * @class GostCoding.BER
+ */
+const BER = (function () { // <editor-fold defaultstate="collapsed">
+
+  // Predefenition block
+  function encodeBER(source, format, onlyContent) {
+    // Correct primitive type
+    let object = source.object
+    if (object === undefined) {object = source}
+
+    // Determinate tagClass
+    const tagClass = source.tagClass = source.tagClass || 0 // Universial default
+
+    // Determinate tagNumber. Use only for Universal class
+    if (tagClass === 0) {
+      var tagNumber = source.tagNumber
+      if (typeof tagNumber === 'undefined') {
+        if (typeof object === 'string') {
+          if (object === '') // NULL
+          {tagNumber = 0x05} else if (/^\-?0x[0-9a-fA-F]+$/.test(object)) // INTEGER
+          {tagNumber = 0x02} else if (/^(\d+\.)+\d+$/.test(object)) // OID
+          {tagNumber = 0x06} else if (/^[01]+$/.test(object)) // BIT STRING
+          {tagNumber = 0x03} else if (/^(true|false)$/.test(object)) // BOOLEAN
+          {tagNumber = 0x01} else if (/^[0-9a-fA-F]+$/.test(object)) // OCTET STRING
+          {tagNumber = 0x04} else {tagNumber = 0x13} // Printable string (later can be changed to UTF8String)
+        } else if (typeof object === 'number') { // INTEGER
+          tagNumber = 0x02
+        } else if (typeof object === 'boolean') { // BOOLEAN
+          tagNumber = 0x01
+        } else if (object instanceof Array) { // SEQUENCE
+          tagNumber = 0x10
+        } else if (object instanceof Date) { // GeneralizedTime
+          tagNumber = 0x18
+        } else if (object instanceof CryptoOperationData || (object && object.buffer instanceof CryptoOperationData)) {
+          tagNumber = 0x04
+        } else {throw new DataError(`Unrecognized type for ${ object}`)}
+      }
+    }
+
+    // Determinate constructed
+    let tagConstructed = source.tagConstructed
+    if (typeof tagConstructed === 'undefined') {tagConstructed = source.tagConstructed = object instanceof Array}
+
+    // Create content
+    let content
+    if (object instanceof CryptoOperationData || (object && object.buffer instanceof CryptoOperationData)) { // Direct
+      content = new Uint8Array(buffer(object))
+      if (tagNumber === 0x03) { // BITSTRING
+        // Set unused bits
+        var a = new Uint8Array(buffer(content))
+        content = new Uint8Array(a.length + 1)
+        content[0] = 0 // No unused bits
+        content.set(a, 1)
+      }
+    } else if (tagConstructed) { // Sub items coding
+      if (object instanceof Array) {
+        var bytelen = 0, ba = [], offset = 0
+        for (var i = 0, n = object.length; i < n; i++) {
+          ba[i] = encodeBER(object[i], format)
+          bytelen += ba[i].length
+        }
+        if (tagNumber === 0x11) {
+          ba.sort(function (a, b) { // Sort order for SET components
+            for (let i = 0, n = Math.min(a.length, b.length); i < n; i++) {
+              const r = a[i] - b[i]
+              if (r !== 0) {return r}
+            }
+            return a.length - b.length
+          })
+        }
+        if (format === 'CER') { // final for CER 00 00
+          ba[n] = new Uint8Array(2)
+          bytelen += 2
+        }
+        content = new Uint8Array(bytelen)
+        for (var i = 0, n = ba.length; i < n; i++) {
+          content.set(ba[i], offset)
+          offset = offset + ba[i].length
+        }
+      } else {throw new DataError('Constracted block can\'t be primitive')}
+    } else {
+      switch (tagNumber) {
+        // 0x00: // EOC
+        case 0x01: // BOOLEAN
+          content = new Uint8Array(1)
+          content[0] = object ? 0xff : 0
+          break
+        case 0x02: // INTEGER
+        case 0x0a: // ENUMIRATED
+          content = Int16.decode(
+            typeof object === 'number' ? object.toString(16) : object)
+          break
+        case 0x03: // BIT STRING
+          if (typeof object === 'string') {
+            const unusedBits = 7 - (object.length + 7) % 8
+            var n = Math.ceil(object.length / 8)
+            content = new Uint8Array(n + 1)
+            content[0] = unusedBits
+            for (var i = 0; i < n; i++) {
+              let c = 0
+              for (var j = 0; j < 8; j++) {
+                var k = i * 8 + j
+                c = (c << 1) + (k < object.length ? (object.charAt(k) === '1' ? 1 : 0) : 0)
+              }
+              content[i + 1] = c
+            }
+          }
+          break
+        case 0x04:
+          content = Hex.decode(
+            typeof object === 'number' ? object.toString(16) : object)
+          break
+          // case 0x05: // NULL
+        case 0x06: // OBJECT IDENTIFIER
+          var a = object.match(/\d+/g), r = []
+          for (var i = 1; i < a.length; i++) {
+            var n = +a[i], r1 = []
+            if (i === 1) {n = n + a[0] * 40}
+            do {
+              r1.push(n & 0x7F)
+              n = n >>> 7
+            } while (n)
+            // reverse order
+            for (j = r1.length - 1; j >= 0; --j) {r.push(r1[j] + (j === 0 ? 0x00 : 0x80))}
+          }
+          content = new Uint8Array(r)
+          break
+          // case 0x07: // ObjectDescriptor
+          // case 0x08: // EXTERNAL
+          // case 0x09: // REAL
+          // case 0x0A: // ENUMERATED
+          // case 0x0B: // EMBEDDED PDV
+        case 0x0C: // UTF8String
+          content = Chars.decode(object, 'utf8')
+          break
+          // case 0x10: // SEQUENCE
+          // case 0x11: // SET
+        case 0x12: // NumericString
+        case 0x16: // IA5String // ASCII
+        case 0x13: // PrintableString // ASCII subset
+        case 0x14: // TeletexString // aka T61String
+        case 0x15: // VideotexString
+        case 0x19: // GraphicString
+        case 0x1A: // VisibleString // ASCII subset
+        case 0x1B: // GeneralString
+          // Reflect on character encoding
+          for (var i = 0, n = object.length; i < n; i++) {
+            if (object.charCodeAt(i) > 255) {tagNumber = 0x0C}
+          }
+          if (tagNumber === 0x0C) {content = Chars.decode(object, 'utf8')} else {content = Chars.decode(object, 'ascii')}
+          break
+        case 0x17: // UTCTime
+        case 0x18: // GeneralizedTime
+          var result = object.original
+          if (!result) {
+            const date = new Date(object)
+            date.setMinutes(date.getMinutes() + date.getTimezoneOffset()) // to UTC
+            let ms = tagNumber === 0x18 ? date.getMilliseconds().toString() : '' // Milliseconds, remove trailing zeros
+            while (ms.length > 0 && ms.charAt(ms.length - 1) === '0') {ms = ms.substring(0, ms.length - 1)}
+            if (ms.length > 0) {ms = `.${ ms}`}
+            result = `${(tagNumber === 0x17 ? date.getYear().toString().slice(-2) : date.getFullYear().toString()) +
+                            (`00${ date.getMonth() + 1}`).slice(-2) +
+                            (`00${ date.getDate()}`).slice(-2) +
+                            (`00${ date.getHours()}`).slice(-2) +
+                            (`00${ date.getMinutes()}`).slice(-2) +
+                            (`00${ date.getSeconds()}`).slice(-2) + ms }Z`
+          }
+          content = Chars.decode(result, 'ascii')
+          break
+        case 0x1C: // UniversalString
+          content = Chars.decode(object, 'utf32')
+          break
+        case 0x1E: // BMPString
+          content = Chars.decode(object, 'utf16')
+          break
+      }
+    }
+
+    if (!content) {content = new Uint8Array(0)}
+    if (content instanceof CryptoOperationData) {content = new Uint8Array(content)}
+
+    if (!tagConstructed && format === 'CER') {
+      // Encoding CER-form for string types
+      var k
+      switch (tagNumber) {
+        case 0x03: // BIT_STRING
+          k = 1 // ingnore unused bit for bit string
+        case 0x04: // OCTET_STRING
+        case 0x0C: // UTF8String
+        case 0x12: // NumericString
+        case 0x13: // PrintableString
+        case 0x14: // TeletexString
+        case 0x15: // VideotexString
+        case 0x16: // IA5String
+        case 0x19: // GraphicString
+        case 0x1A: // VisibleString
+        case 0x1B: // GeneralString
+        case 0x1C: // UniversalString
+        case 0x1E: // BMPString
+          k = k || 0
+          // Split content on 1000 octet len parts
+          var size = 1000
+          var bytelen = 0, ba = [], offset = 0
+          for (var i = k, n = content.length; i < n; i += size - k) {
+            ba[i] = encodeBER({
+              object: new Unit8Array(content.buffer, i, Math.min(size - k, n - i)),
+              tagNumber: tagNumber,
+              tagClass: 0,
+              tagConstructed: false,
+            }, format)
+            bytelen += ba[i].length
+          }
+          ba[n] = new Uint8Array(2) // final for CER 00 00
+          bytelen += 2
+          content = new Uint8Array(bytelen)
+          for (var i = 0, n = ba.length; i < n; i++) {
+            content.set(ba[i], offset)
+            offset = offset + ba[i].length
+          }
+      }
+    }
+
+    // Restore tagNumber for all classes
+    if (tagClass === 0) {source.tagNumber = tagNumber} else {source.tagNumber = tagNumber = source.tagNumber || 0}
+    source.content = content
+
+    if (onlyContent) {return content}
+
+    // Create header
+    // tagNumber
+    let ha = [], first = tagClass === 3 ? 0xC0 : tagClass === 2 ? 0x80 :
+      tagClass === 1 ? 0x40 : 0x00
+    if (tagConstructed) {first |= 0x20}
+    if (tagNumber < 0x1F) {
+      first |= tagNumber & 0x1F
+      ha.push(first)
+    } else {
+      first |= 0x1F
+      ha.push(first)
+      var n = tagNumber, ha1 = []
+      do {
+        ha1.push(n & 0x7F)
+        n = n >>> 7
+      } while (n)
+      // reverse order
+      for (var j = ha1.length - 1; j >= 0; --j) {ha.push(ha1[j] + (j === 0 ? 0x00 : 0x80))}
+    }
+    // Length
+    if (tagConstructed && format === 'CER') {
+      ha.push(0x80)
+    } else {
+      const len = content.length
+      if (len > 0x7F) {
+        let l2 = len, ha2 = []
+        do {
+          ha2.push(l2 & 0xff)
+          l2 = l2 >>> 8
+        } while (l2)
+        ha.push(ha2.length + 0x80) // reverse order
+        for (var j = ha2.length - 1; j >= 0; --j) {ha.push(ha2[j])}
+      } else {
+        // simple len
+        ha.push(len)
+      }
+    }
+    const header = source.header = new Uint8Array(ha)
+
+    // Result - complete buffer
+    const block = new Uint8Array(header.length + content.length)
+    block.set(header, 0)
+    block.set(content, header.length)
+    return block
+  }
+
+  function decodeBER(source, offset) {
+
+    // start pos
+    let pos = offset || 0, start = pos
+    let tagNumber, tagClass, tagConstructed,
+      content, header, buffer, sub, len
+
+    if (source.object) {
+      // Ready from source
+      tagNumber = source.tagNumber
+      tagClass = source.tagClass
+      tagConstructed = source.tagConstructed
+      content = source.content
+      header = source.header
+      buffer = source.object instanceof CryptoOperationData ?
+        new Uint8Array(source.object) : null
+      sub = source.object instanceof Array ? source.object : null
+      len = buffer && buffer.length || null
+    } else {
+      // Decode header
+      const d = source
+
+      // Read tag
+      let buf = d[pos++]
+      tagNumber = buf & 0x1f
+      tagClass = buf >> 6
+      tagConstructed = (buf & 0x20) !== 0
+      if (tagNumber === 0x1f) { // long tag
+        tagNumber = 0
+        do {
+          if (tagNumber > 0x1fffffffffff80) {throw new DataError(`Convertor not supported tag number more then (2^53 - 1) at position ${ offset}`)}
+          buf = d[pos++]
+          tagNumber = (tagNumber << 7) + (buf & 0x7f)
+        } while (buf & 0x80)
+      }
+
+      // Read len
+      buf = d[pos++]
+      len = buf & 0x7f
+      if (len !== buf) {
+        if (len > 6) // no reason to use Int10, as it would be a huge buffer anyways
+        {throw new DataError(`Length over 48 bits not supported at position ${ offset}`)}
+        if (len === 0) {len = null} // undefined
+        else {
+          buf = 0
+          for (var i = 0; i < len; ++i) {buf = (buf << 8) + d[pos++]}
+          len = buf
+        }
+      }
+
+      start = pos
+      sub = null
+
+      if (tagConstructed) {
+        // must have valid content
+        sub = []
+        if (len !== null) {
+          // definite length
+          const end = start + len
+          while (pos < end) {
+            var s = decodeBER(d, pos)
+            sub.push(s)
+            pos += s.header.length + s.content.length
+          }
+          if (pos !== end) {throw new DataError(`Content size is not correct for container starting at offset ${ start}`)}
+        } else {
+          // undefined length
+          try {
+            for (; ;) {
+              var s = decodeBER(d, pos)
+              pos += s.header.length + s.content.length
+              if (s.tagClass === 0x00 && s.tagNumber === 0x00) {break}
+              sub.push(s)
+            }
+            len = pos - start
+          } catch (e) {
+            throw new DataError(`Exception ${ e } while decoding undefined length content at offset ${ start}`)
+          }
+        }
+      }
+
+      // Header and content
+      header = new Uint8Array(d.buffer, offset, start - offset)
+      content = new Uint8Array(d.buffer, start, len)
+      buffer = content
+    }
+
+    // Constructed types - check for string concationation
+    if (sub !== null && tagClass === 0) {
+      let k
+      switch (tagNumber) {
+        case 0x03: // BIT_STRING
+          k = 1 // ingnore unused bit for bit string
+        case 0x04: // OCTET_STRING
+        case 0x0C: // UTF8String
+        case 0x12: // NumericString
+        case 0x13: // PrintableString
+        case 0x14: // TeletexString
+        case 0x15: // VideotexString
+        case 0x16: // IA5String
+        case 0x19: // GraphicString
+        case 0x1A: // VisibleString
+        case 0x1B: // GeneralString
+        case 0x1C: // UniversalString
+        case 0x1E: // BMPString
+          k = k || 0
+          // Concatination
+          if (sub.length === 0) {throw new DataError(`No constructed encoding content of string type at offset ${ start}`)}
+          len = k
+          for (var i = 0, n = sub.length; i < n; i++) {
+            var s = sub[i]
+            if (s.tagClass !== tagClass || s.tagNumber !== tagNumber || s.tagConstructed) {throw new DataError(`Invalid constructed encoding of string type at offset ${ start}`)}
+            len += s.content.length - k
+          }
+          buffer = new Uint8Array(len)
+          for (var i = 0, n = sub.length, j = k; i < n; i++) {
+            var s = sub[i]
+            if (k > 0) {buffer.set(s.content.subarray(1), j)} else {buffer.set(s.content, j)}
+            j += s.content.length - k
+          }
+          tagConstructed = false // follow not required
+          sub = null
+          break
+      }
+    }
+    // Primitive types
+    let object = ''
+    if (sub === null) {
+      if (len === null) {throw new DataError(`Invalid tag with undefined length at offset ${ start}`)}
+
+      if (tagClass === 0) {
+        switch (tagNumber) {
+          case 0x01: // BOOLEAN
+            object = buffer[0] !== 0
+            break
+          case 0x02: // INTEGER
+          case 0x0a: // ENUMIRATED
+            if (len > 6) {
+              object = Int16.encode(buffer)
+            } else {
+              var v = buffer[0]
+              if (buffer[0] > 0x7f) {v = v - 256}
+              for (var i = 1; i < len; i++) {v = v * 256 + buffer[i]}
+              object = v
+            }
+            break
+          case 0x03: // BIT_STRING
+            if (len > 5) { // Content buffer
+              object = new Uint8Array(buffer.subarray(1)).buffer
+            } else { // Max bit mask only for 32 bit
+              var unusedBit = buffer[0],
+                skip = unusedBit, s = []
+              for (var i = len - 1; i >= 1; --i) {
+                const b = buffer[i]
+                for (var j = skip; j < 8; ++j) {s.push((b >> j) & 1 ? '1' : '0')}
+                skip = 0
+              }
+              object = s.reverse().join('')
+            }
+            break
+          case 0x04: // OCTET_STRING
+            object = new Uint8Array(buffer).buffer
+            break
+            //  case 0x05: // NULL
+          case 0x06: // OBJECT_IDENTIFIER
+            var s = '',
+              n = 0,
+              bits = 0
+            for (var i = 0; i < len; ++i) {
+              var v = buffer[i]
+              n = (n << 7) + (v & 0x7F)
+              bits += 7
+              if (!(v & 0x80)) { // finished
+                if (s === '') {
+                  var m = n < 80 ? n < 40 ? 0 : 1 : 2
+                  s = `${m }.${ n - m * 40}`
+                } else {s += `.${ n.toString()}`}
+                n = 0
+                bits = 0
+              }
+            }
+            if (bits > 0) {throw new DataError(`Incompleted OID at offset ${ start}`)}
+            object = s
+            break
+            //case 0x07: // ObjectDescriptor
+            //case 0x08: // EXTERNAL
+            //case 0x09: // REAL
+            //case 0x0A: // ENUMERATED
+            //case 0x0B: // EMBEDDED_PDV
+          case 0x10: // SEQUENCE
+          case 0x11: // SET
+            object = []
+            break
+          case 0x0C: // UTF8String
+            object = Chars.encode(buffer, 'utf8')
+            break
+          case 0x12: // NumericString
+          case 0x13: // PrintableString
+          case 0x14: // TeletexString
+          case 0x15: // VideotexString
+          case 0x16: // IA5String
+          case 0x19: // GraphicString
+          case 0x1A: // VisibleString
+          case 0x1B: // GeneralString
+            object = Chars.encode(buffer, 'ascii')
+            break
+          case 0x1C: // UniversalString
+            object = Chars.encode(buffer, 'utf32')
+            break
+          case 0x1E: // BMPString
+            object = Chars.encode(buffer, 'utf16')
+            break
+          case 0x17: // UTCTime
+          case 0x18: // GeneralizedTime
+            var shortYear = tagNumber === 0x17
+            var s = Chars.encode(buffer, 'ascii'),
+              m = (shortYear ?
+                /^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/ :
+                /^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/).exec(s)
+            if (!m) {throw new DataError(`Unrecognized time format "${ s }" at offset ${ start}`)}
+            if (shortYear) {
+              // Where YY is greater than or equal to 50, the year SHALL be interpreted as 19YY; and
+              // Where YY is less than 50, the year SHALL be interpreted as 20YY
+              m[1] = +m[1]
+              m[1] += (m[1] < 50) ? 2000 : 1900
+            }
+            var dt = new Date(m[1], +m[2] - 1, +m[3], +(m[4] || '0'), +(m[5] || '0'), +(m[6] || '0'), +(m[7] || '0')),
+              tz = dt.getTimezoneOffset()
+            if (m[8] || tagNumber === 0x17) {
+              if (m[8].toUpperCase() !== 'Z' && m[9]) {
+                tz = tz + parseInt(m[9])
+              }
+              dt.setMinutes(dt.getMinutes() - tz)
+            }
+            dt.original = s
+            object = dt
+            break
+        }
+      } else // OCTET_STRING
+      {object = new Uint8Array(buffer).buffer}
+    } else {object = sub}
+
+    // result
+    return {
+      tagConstructed: tagConstructed,
+      tagClass: tagClass,
+      tagNumber: tagNumber,
+      header: header,
+      content: content,
+      object: object,
+    }
+  }
+
+  return {
+    /**
+         * BER.decode(object, format) convert javascript object to ASN.1 format CryptoOperationData<br><br>
+         * If object has members tagNumber, tagClass and tagConstructed
+         * it is clear define encoding rules. Else method use defaul rules:
+         * <ul>
+         *   <li>Empty string or null - NULL</li>
+         *   <li>String starts with '0x' and has 0-9 and a-f characters - INTEGER</li>
+         *   <li>String like d.d.d.d (d - set of digits) - OBJECT IDENTIFIER</li>
+         *   <li>String with characters 0 and 1 - BIT STRING</li>
+         *   <li>Strings 'true' or 'false' - BOOLEAN</li>
+         *   <li>String has only 0-9 and a-f characters - OCTET STRING</li>
+         *   <li>String has only characters with code 0-255 - PrintableString</li>
+         *   <li>Other strings - UTF8String</li>
+         *   <li>Number - INTEGER</li>
+         *   <li>Date - GeneralizedTime</li>
+         *   <li>Boolean - SEQUENCE</li>
+         *   <li>CryptoOperationData - OCTET STRING</li>
+         * </ul>
+         * SEQUENCE or SET arrays recursively encoded for each item.<br>
+         * OCTET STRING and BIT STRING can presents as array with one item.
+         * It means encapsulates encoding for child element.<br>
+         *
+         * If CONTEXT or APPLICATION classes item presents as array with one
+         * item we use EXPLICIT encoding for element, else IMPLICIT encoding.<br>
+         *
+         * @memberOf GostCoding.BER
+         * @param {Object} object Object to encoding
+         * @param {string} format Encoding rule: 'DER' or 'CER', default 'DER'
+         * @param {boolean} onlyContent Encode content only, without header
+         * @returns {CryptoOperationData} BER encoded data
+         */
+    encode: function (object, format, onlyContent) {
+      return encodeBER(object, format, onlyContent).buffer
+    },
+    /**
+         * BER.encode(data) convert ASN.1 format CryptoOperationData data to javascript object<br><br>
+         *
+         * Conversion rules to javascript object:
+         *  <ul>
+         *      <li>BOOLEAN - Boolean object</li>
+         *      <li>INTEGER, ENUMIRATED - Integer object if len <= 6 (48 bits) else Int16 encoded string</li>
+         *      <li>BIT STRING - Integer object if len <= 5 (w/o unsedBit octet - 32 bits) else String like '10111100' or  Array with one item in case of incapsulates encoding</li>
+         *      <li>OCTET STRING - Hex encoded string or Array with one item in case of incapsulates encoding</li>
+         *      <li>OBJECT IDENTIFIER - String with object identifier</li>
+         *      <li>SEQUENCE, SET - Array of encoded items</li>
+         *      <li>UTF8String, NumericString, PrintableString, TeletexString, VideotexString,
+         *          IA5String, GraphicString, VisibleString, GeneralString, UniversalString,
+         *          BMPString - encoded String</li>
+         *      <li>UTCTime, GeneralizedTime - Date</li>
+         *  </ul>
+         * @memberOf GostCoding.BER
+         * @param {(CryptoOperationData|GostCoding.BER)} data Binary data to decode
+         * @returns {Object} Javascript object with result of decoding
+         */
+    decode: function (data) {
+      return decodeBER(data.object ? data : new Uint8Array(buffer(data)), 0)
+    },
+  } // </editor-fold>
+})()
+
+/**
+ * BER, DER, CER conversion
+ * @memberOf GostCoding
+ * @insnance
+ * @type GostCoding.BER
+ */
+GostCoding.prototype.BER = BER
+
+/**
+ * PEM conversion
+ * @class GostCoding.PEM
+ */
+const PEM = { // <editor-fold defaultstate="collapsed">
+  /**
+     * PEM.encode(data, name) encode CryptoOperationData to PEM format with name label
+     *
+     * @memberOf GostCoding.PEM
+     * @param {(Object|CryptoOperationData)} data Java script object or BER-encoded binary data
+     * @param {string} name Name of PEM object: 'certificate', 'private key' etc.
+     * @returns {string} Encoded object
+     */
+  encode: function (data, name) {
+    return (name ? `-----BEGIN ${ name.toUpperCase() }-----\r\n` : '') +
+            Base64.encode(data instanceof CryptoOperationData ? data : BER.encode(data)) +
+            (name ? `\r\n-----END ${ name.toUpperCase() }-----` : '')
+  },
+  /**
+     * PEM.decode(s, name, deep) decode PEM format s labeled name to CryptoOperationData or javascript object in according to deep parameter
+     *
+     * @memberOf GostCoding.PEM
+     * @param {string} s PEM encoded string
+     * @param {string} name Name of PEM object: 'certificate', 'private key' etc.
+     * @param {boolean} deep If true method do BER-decoding, else only BASE64 decoding
+     * @param {integer} index Index of decoded value
+     * @returns {(Object|CryptoOperationData)} Decoded javascript object if deep=true, else CryptoOperationData for father BER decoding
+     */
+  decode: function (s, name, deep, index) {
+    // Try clear base64
+    let re1 = /([A-Za-z0-9\+\/\s\=]+)/g,
+      valid = re1.exec(s)
+    if (valid[1].length !== s.length) {valid = false}
+    if (!valid && name) {
+      // Try with the name
+      const re2 = new RegExp(
+        `-----\\s?BEGIN ${ name.toUpperCase()
+        }-----([A-Za-z0-9\\+\\/\\s\\=]+)-----\\s?END ${
+          name.toUpperCase() }-----`, 'g')
+      valid = re2.exec(s)
+    }
+    if (!valid) {
+      // Try with some name
+      const re3 = new RegExp(
+        '-----\\s?BEGIN [A-Z0-9\\s]+' +
+                '-----([A-Za-z0-9\\+\\/\\s\\=]+)-----\\s?END ' +
+                '[A-Z0-9\\s]+-----', 'g')
+      valid = re3.exec(s)
+    }
+    const r = valid && valid[1 + (index || 0)]
+    if (!r) {throw new DataError('Not valid PEM format')}
+    let out = Base64.decode(r)
+    if (deep) {out = BER.decode(out)}
+    return out
+  }, // </editor-fold>
+}
+
+/**
+ * PEM conversion
+ * @memberOf GostCoding
+ * @insnance
+ * @type GostCoding.PEM
+ */
+GostCoding.prototype.PEM = PEM
+
+if (gostCrypto) {
+  /**
+     * Coding algorithms: Base64, Hex, Int16, Chars, BER and PEM
+     *
+     * @memberOf gostCrypto
+     * @type GostCoding
+     */
+  gostCrypto.coding = new GostCoding()
+}
+
+module.exports = GostCoding
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCrypto.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCrypto.js
new file mode 100644
index 0000000..ebdf493
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostCrypto.js
@@ -0,0 +1,1523 @@
+/**
+ * @file Implementation Web Crypto interfaces for GOST algorithms
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const GostRandom = require('./gostRandom')
+
+/*
+ * Algorithm normalization
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const rootcrypto = global.crypto || global.msCrypto
+
+const SyntaxError = global.SyntaxError || global.Error,
+  DataError = global.DataError || global.Error,
+  NotSupportedError = global.NotSupportedError || global.Error,
+  OperationError = global.OperationError || global.Error,
+  InvalidStateError = global.InvalidAccessError || global.Error,
+  InvalidAccessError = global.InvalidAccessError || global.Error
+
+// Normalize algorithm
+function normalize(algorithm, method) {
+  if (typeof algorithm === 'string' || algorithm instanceof String) {algorithm = { name: algorithm }}
+  let name = algorithm.name
+  if (!name) {throw new SyntaxError('Algorithm name not defined')}
+  // Extract algorithm modes from name
+  var modes = name.split('/'), modes = modes[0].split('-').concat(modes.slice(1))
+  // Normalize the name with default modes
+  let na = {}
+  name = modes[0].replace(/[\.\s]/g, '')
+  modes = modes.slice(1)
+  if (name.indexOf('28147') >= 0) {
+    na = {
+      name: 'GOST 28147',
+      version: 1989,
+      mode: (algorithm.mode || (// ES, MAC, KW
+        (method === 'sign' || method === 'verify') ? 'MAC' :
+          (method === 'wrapKey' || method === 'unwrapKey') ? 'KW' : 'ES')).toUpperCase(),
+      length: algorithm.length || 64,
+    }
+  } else if (name.indexOf('3412') >= 0) {
+    na = {
+      name: 'GOST R 34.12',
+      version: 2015,
+      mode: (algorithm.mode || (// ES, MAC, KW
+        (method === 'sign' || method === 'verify') ? 'MAC' :
+          (method === 'wrapKey' || method === 'unwrapKey') ? 'KW' : 'ES')).toUpperCase(),
+      length: algorithm.length || 64, // 128
+    }
+  } else if (name.indexOf('3411') >= 0) {
+    na = {
+      name: 'GOST R 34.11',
+      version: 2012, // 1994
+      mode: (algorithm.mode || (// HASH, KDF, HMAC, PBKDF2, PFXKDF, CPKDF
+        (method === 'deriveKey' || method === 'deriveBits') ? 'KDF' :
+          (method === 'sign' || method === 'verify') ? 'HMAC' : 'HASH')).toUpperCase(),
+      length: algorithm.length || 256, // 512
+    }
+  } else if (name.indexOf('3410') >= 0) {
+    na = {
+      name: 'GOST R 34.10',
+      version: 2012, // 1994, 2001
+      mode: (algorithm.mode || (// SIGN, DH, MASK
+        (method === 'deriveKey' || method === 'deriveBits') ? 'DH' : 'SIGN')).toUpperCase(),
+      length: algorithm.length || 256, // 512
+    }
+  } else if (name.indexOf('SHA') >= 0) {
+    na = {
+      name: 'SHA',
+      version: (algorithm.length || 160) === 160 ? 1 : 2, // 1, 2
+      mode: (algorithm.mode || (// HASH, KDF, HMAC, PBKDF2, PFXKDF
+        (method === 'deriveKey' || method === 'deriveBits') ? 'KDF' :
+          (method === 'sign' || method === 'verify') ? 'HMAC' : 'HASH')).toUpperCase(),
+      length: algorithm.length || 160,
+    }
+  } else if (name.indexOf('RC2') >= 0) {
+    na = {
+      name: 'RC2',
+      version: 1,
+      mode: (algorithm.mode || (// ES, MAC, KW
+        (method === 'sign' || method === 'verify') ? 'MAC' :
+          (method === 'wrapKey' || method === 'unwrapKey') ? 'KW' : 'ES')).toUpperCase(),
+      length: algorithm.length || 32, // 1 - 1024
+    }
+  } else if (name.indexOf('PBKDF2') >= 0) {
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'PBKDF2'
+  } else if (name.indexOf('PFXKDF') >= 0) {
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'PFXKDF'
+  } else if (name.indexOf('CPKDF') >= 0) {
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'CPKDF'
+  } else if (name.indexOf('HMAC') >= 0) {
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'HMAC'
+  } else {throw new NotSupportedError('Algorithm not supported')}
+
+  // Compile modes
+  modes.forEach(function (mode) {
+    mode = mode.toUpperCase()
+    if (/^[0-9]+$/.test(mode)) {
+      if ((['8', '16', '32'].indexOf(mode) >= 0) || (na.length === '128' && mode === '64')) { // Shift bits
+        if (na.mode === 'ES') {na.shiftBits = parseInt(mode)} else if (na.mode === 'MAC') {na.macLength = parseInt(mode)} else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
+      } else if (['89', '94', '01', '12', '15', '1989', '1994', '2001', '2012', '2015'].indexOf(mode) >= 0) { // GOST Year
+        let version = parseInt(mode)
+        version = version < 1900 ? (version < 80 ? 2000 + version : 1900 + version) : version
+        na.version = version
+      } else if (['1'].indexOf(mode) >= 0 && na.name === 'SHA') { // SHA-1
+        na.version = 1
+        na.length = 160
+      } else if (['256', '384', '512'].indexOf(mode) >= 0 && na.name === 'SHA') { // SHA-2
+        na.version = 2
+        na.length = parseInt(mode)
+      } else if (['40', '128'].indexOf(mode) >= 0 && na.name === 'RC2') { // RC2
+        na.version = 1
+        na.length = parseInt(mode) // key size
+      } else if (['64', '128', '256', '512'].indexOf(mode) >= 0) // block size
+      {na.length = parseInt(mode)} else if (['1000', '2000'].indexOf(mode) >= 0) // Iterations
+      {na.iterations = parseInt(mode)}
+      // Named Paramsets
+    } else if (['E-TEST', 'E-A', 'E-B', 'E-C', 'E-D', 'E-SC', 'E-Z', 'D-TEST', 'D-A', 'D-SC'].indexOf(mode) >= 0) {
+      na.sBox = mode
+    } else if (['S-TEST', 'S-A', 'S-B', 'S-C', 'S-D', 'X-A', 'X-B', 'X-C'].indexOf(mode) >= 0) {
+      na.namedParam = mode
+    } else if (['S-256-TEST', 'S-256-A', 'S-256-B', 'S-256-C', 'P-256', 'T-512-TEST', 'T-512-A',
+      'T-512-B', 'X-256-A', 'X-256-B', 'T-256-TEST', 'T-256-A', 'T-256-B', 'S-256-B', 'T-256-C', 'S-256-C'].indexOf(mode) >= 0) {
+      na.namedCurve = mode
+    } else if (['SC', 'CP', 'VN'].indexOf(mode) >= 0) {
+      na.procreator = mode
+
+      // Encription GOST 28147 or GOST R 34.12
+    } else if (na.name === 'GOST 28147' || na.name === 'GOST R 34.12' || na.name === 'RC2') {
+      if (['ES', 'MAC', 'KW', 'MASK'].indexOf(mode) >= 0) {
+        na.mode = mode
+      } else if (['ECB', 'CFB', 'OFB', 'CTR', 'CBC'].indexOf(mode) >= 0) {
+        na.mode = 'ES'
+        na.block = mode
+      } else if (['CPKW', 'NOKW', 'SCKW'].indexOf(mode) >= 0) {
+        na.mode = 'KW'
+        na.keyWrapping = mode.replace('KW', '')
+      } else if (['ZEROPADDING', 'PKCS5PADDING', 'NOPADDING', 'RANDOMPADDING', 'BITPADDING'].indexOf(mode) >= 0) {
+        na.padding = mode.replace('PADDING', '')
+      } else if (['NOKM', 'CPKM'].indexOf(mode) >= 0) {
+        na.keyMeshing = mode.replace('KM', '')
+      } else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
+
+      // Digesting GOST 34.11
+    } else if (na.name === 'GOST R 34.11' || na.name === 'SHA') {
+      if (['HASH', 'KDF', 'HMAC', 'PBKDF2', 'PFXKDF', 'CPKDF'].indexOf(mode) >= 0) {na.mode = mode} else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
+
+      // Signing GOST 34.10
+    } else if (na.name === 'GOST R 34.10') {
+      const hash = mode.replace(/[\.\s]/g, '')
+      if (hash.indexOf('GOST') >= 0 && hash.indexOf('3411') >= 0) {na.hash = mode} else if (['SIGN', 'DH', 'MASK'].indexOf(mode)) {na.mode = mode} else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
+    }
+  })
+
+  // Procreator
+  na.procreator = algorithm.procreator || na.procreator || 'CP'
+
+  // Key size
+  switch (na.name) {
+    case 'GOST R 34.10':
+      na.keySize = na.length / (na.version === 1994 ? 4 : 8)
+      break
+    case 'GOST R 34.11':
+      na.keySize = 32
+      break
+    case 'GOST 28147':
+    case 'GOST R 34.12':
+      na.keySize = 32
+      break
+    case 'RC2':
+      na.keySize = Math.ceil(na.length / 8)
+      break
+    case 'SHA':
+      na.keySize = na.length / 8
+      break
+  }
+
+  // Encrypt additional modes
+  if (na.mode === 'ES') {
+    if (algorithm.block) {na.block = algorithm.block} // ECB, CFB, OFB, CTR, CBC
+    if (na.block) {na.block = na.block.toUpperCase()}
+    if (algorithm.padding) {na.padding = algorithm.padding} // NO, ZERO, PKCS5, RANDOM, BIT
+    if (na.padding) {na.padding = na.padding.toUpperCase()}
+    if (algorithm.shiftBits) {na.shiftBits = algorithm.shiftBits} // 8, 16, 32, 64
+    if (algorithm.keyMeshing) {na.keyMeshing = algorithm.keyMeshing} // NO, CP
+    if (na.keyMeshing) {na.keyMeshing = na.keyMeshing.toUpperCase()}
+    // Default values
+    if (method !== 'importKey' && method !== 'generateKey') {
+      na.block = na.block || 'ECB'
+      na.padding = na.padding || (na.block === 'CBC' || na.block === 'ECB' ? 'ZERO' : 'NO')
+      if (na.block === 'CFB' || na.block === 'OFB') {na.shiftBits = na.shiftBits || na.length}
+      na.keyMeshing = na.keyMeshing || 'NO'
+    }
+  }
+  if (na.mode === 'KW') {
+    if (algorithm.keyWrapping) {na.keyWrapping = algorithm.keyWrapping} // NO, CP, SC
+    if (na.keyWrapping) {na.keyWrapping = na.keyWrapping.toUpperCase()}
+    if (method !== 'importKey' && method !== 'generateKey') {na.keyWrapping = na.keyWrapping || 'NO'}
+  }
+
+  // Paramsets
+  ['sBox', 'namedParam', 'namedCurve', 'curve', 'param', 'modulusLength'].forEach(function (name) {
+    algorithm[name] && (na[name] = algorithm[name])
+  })
+  // Default values
+  if (method !== 'importKey' && method !== 'generateKey') {
+    if (na.name === 'GOST 28147') {
+      na.sBox = na.sBox || (na.procreator === 'SC' ? 'E-SC' : 'E-A') // 'E-A', 'E-B', 'E-C', 'E-D', 'E-SC'
+    } else if (na.name === 'GOST R 34.12' && na.length === 64) {
+      na.sBox = 'E-Z'
+    } else if (na.name === 'GOST R 34.11' && na.version === 1994) {
+      na.sBox = na.sBox || (na.procreator === 'SC' ? 'D-SC' : 'D-A') // 'D-SC'
+    } else if (na.name === 'GOST R 34.10' && na.version === 1994) {
+      na.namedParam = na.namedParam || (na.mode === 'DH' ? 'X-A' : 'S-A') // 'S-B', 'S-C', 'S-D', 'X-B', 'X-C'
+    } else if (na.name === 'GOST R 34.10' && na.version === 2001) {
+      na.namedCurve = na.namedCurve || (na.length === 256 ?
+        na.procreator === 'SC' ? 'P-256' : (na.mode === 'DH' ? 'X-256-A' : 'S-256-A') : // 'S-256-B', 'S-256-C', 'X-256-B', 'T-256-A', 'T-256-B', 'T-256-C', 'P-256'
+        na.mode === 'T-512-A') // 'T-512-B', 'T-512-C'
+    } else if (na.name === 'GOST R 34.10' && na.version === 2012) {
+      na.namedCurve = na.namedCurve || (na.length === 256 ?
+        na.procreator === 'SC' ? 'P-256' : (na.mode === 'DH' ? 'X-256-A' : 'S-256-A') : // 'S-256-B', 'S-256-C', 'X-256-B', 'T-256-A', 'T-256-B', 'T-256-C', 'P-256'
+        na.mode === 'T-512-A') // 'T-512-B', 'T-512-C'
+    }
+  }
+
+  // Vectors
+  switch (na.mode) {
+    case 'DH':
+      algorithm.ukm && (na.ukm = algorithm.ukm)
+      algorithm['public'] && (na['public'] = algorithm['public'])
+      break
+    case 'SIGN':
+    case 'KW':
+      algorithm.ukm && (na.ukm = algorithm.ukm)
+      break
+    case 'ES':
+    case 'MAC':
+      algorithm.iv && (na.iv = algorithm.iv)
+      break
+    case 'KDF':
+      algorithm.label && (na.label = algorithm.label)
+      algorithm.contex && (na.context = algorithm.contex)
+      break
+    case 'PBKDF2':
+      algorithm.salt && (na.salt = algorithm.salt)
+      algorithm.iterations && (na.iterations = algorithm.iterations)
+      algorithm.diversifier && (na.diversifier = algorithm.diversifier)
+      break
+    case 'PFXKDF':
+      algorithm.salt && (na.salt = algorithm.salt)
+      algorithm.iterations && (na.iterations = algorithm.iterations)
+      algorithm.diversifier && (na.diversifier = algorithm.diversifier)
+      break
+    case 'CPKDF':
+      algorithm.salt && (na.salt = algorithm.salt)
+      algorithm.iterations && (na.iterations = algorithm.iterations)
+      break
+  }
+
+  // Verification method and modes
+  if (method && (
+    ((na.mode !== 'ES' && na.mode !== 'SIGN' && na.mode !== 'MAC' &&
+            na.mode !== 'HMAC' && na.mode !== 'KW' && na.mode !== 'DH'
+            && na.mode !== 'MASK') &&
+            (method === 'generateKey')) ||
+        ((na.mode !== 'ES') &&
+            (method === 'encrypt' || method === 'decrypt')) ||
+        ((na.mode !== 'SIGN' && na.mode !== 'MAC' && na.mode !== 'HMAC') &&
+            (method === 'sign' || method === 'verify')) ||
+        ((na.mode !== 'HASH') &&
+            (method === 'digest')) ||
+        ((na.mode !== 'KW' && na.mode !== 'MASK') &&
+            (method === 'wrapKey' || method === 'unwrapKey')) ||
+        ((na.mode !== 'DH' && na.mode !== 'PBKDF2' && na.mode !== 'PFXKDF' &&
+            na.mode !== 'CPKDF' && na.mode !== 'KDF') &&
+            (method === 'deriveKey' || method === 'deriveBits')))) {throw new NotSupportedError(`Algorithm mode ${ na.mode } not valid for method ${ method}`)}
+
+  // Normalize hash algorithm
+  algorithm.hash && (na.hash = algorithm.hash)
+  if (na.hash) {
+    if ((typeof na.hash === 'string' || na.hash instanceof String)
+            && na.procreator) {na.hash = `${na.hash }/${ na.procreator}`}
+    na.hash = normalize(na.hash, 'digest')
+  }
+
+  // Algorithm object identirifer
+  algorithm.id && (na.id = algorithm.id)
+
+  return na
+}
+
+// Check for possibility use native crypto.subtle
+function checkNative(algorithm) {
+  if (!rootcrypto || !rootcrypto.subtle || !algorithm) {return false}
+  // Prepare name
+  var name = (typeof algorithm === 'string' || algorithm instanceof String) ?
+    name = algorithm : algorithm.name
+  if (!name) {return false}
+  name = name.toUpperCase()
+  // Digest algorithm for key derivation
+  if ((name.indexOf('KDF') >= 0 || name.indexOf('HMAC') >= 0) && algorithm.hash) {return checkNative(algorithm.hash)}
+  // True if no supported names
+  return name.indexOf('GOST') === -1 &&
+        name.indexOf('SHA-1') === -1 &&
+        name.indexOf('RC2') === -1 &&
+        name.indexOf('?DES') === -1
+}
+// </editor-fold>
+
+/*
+ * Key conversion methods
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// Check key parameter
+function checkKey(key, method) {
+  if (!key.algorithm) {throw new SyntaxError('Key algorithm not defined')}
+
+  if (!key.algorithm.name) {throw new SyntaxError('Key algorithm name not defined')}
+
+  const name = key.algorithm.name,
+    gostCipher = name === 'GOST 28147' || name === 'GOST R 34.12' || name === 'RC2',
+    gostDigest = name === 'GOST R 34.11' || name === 'SHA',
+    gostSign = name === 'GOST R 34.10'
+
+  if (!gostCipher && !gostSign && !gostDigest) {throw new NotSupportedError(`Key algorithm ${ name } is unsupproted`)}
+
+  if (!key.type) {throw new SyntaxError('Key type not defined')}
+
+  if (((gostCipher || gostDigest) && key.type !== 'secret') ||
+        (gostSign && !(key.type === 'public' || key.type === 'private'))) {throw new DataError(`Key type ${ key.type } is not valid for algorithm ${ name}`)}
+
+  if (!key.usages || !key.usages.indexOf) {throw new SyntaxError('Key usages not defined')}
+
+  for (let i = 0, n = key.usages.length; i < n; i++) {
+    const md = key.usages[i]
+    if (((md === 'encrypt' || md === 'decrypt') && key.type !== 'secret') ||
+            (md === 'sign' && key.type === 'public') ||
+            (md === 'verify' && key.type === 'private')) {throw new InvalidStateError(`Key type ${ key.type } is not valid for ${ md}`)}
+  }
+
+  if (method) {
+    if (key.usages.indexOf(method) === -1) {throw new InvalidAccessError(`Key usages is not contain method ${ method}`)}
+  }
+
+  if (!key.buffer) {throw new SyntaxError('Key buffer is not defined')}
+
+  const size = key.buffer.byteLength * 8, keySize = 8 * key.algorithm.keySize
+  if ((key.type === 'secret' && size !== (keySize || 256) &&
+        (key.usages.indexOf('encrypt') >= 0 || key.usages.indexOf('decrypt') >= 0)) ||
+        (key.type === 'private' && !(size === 256 || size === 512)) ||
+        (key.type === 'public' && !(size === 512 || size === 1024))) {throw new SyntaxError(`Key buffer has wrong size ${ size } bit`)}
+}
+
+// Extract key and enrich cipher algorithm
+function extractKey(method, algorithm, key) {
+  checkKey(key, method)
+  if (algorithm) {
+    let params
+    switch (algorithm.mode) {
+      case 'ES':
+        params = ['sBox', 'keyMeshing', 'padding', 'block']
+        break
+      case 'SIGN':
+        params = ['namedCurve', 'namedParam', 'sBox', 'curve', 'param', 'modulusLength']
+        break
+      case 'MAC':
+        params = ['sBox']
+        break
+      case 'KW':
+        params = ['keyWrapping', 'ukm']
+        break
+      case 'DH':
+        params = ['namedCurve', 'namedParam', 'sBox', 'ukm', 'curve', 'param', 'modulusLength']
+        break
+      case 'KDF':
+        params = ['context', 'label']
+        break
+      case 'PBKDF2':
+        params = ['sBox', 'iterations', 'salt']
+        break
+      case 'PFXKDF':
+        params = ['sBox', 'iterations', 'salt', 'diversifier']
+        break
+      case 'CPKDF':
+        params = ['sBox', 'salt']
+        break
+    }
+    if (params) {
+      params.forEach(function (name) {
+        key.algorithm[name] && (algorithm[name] = key.algorithm[name])
+      })
+    }
+  }
+  return key.buffer
+}
+
+// Make key definition
+function convertKey(algorithm, extractable, keyUsages, keyData, keyType) {
+  const key = {
+    type: keyType || (algorithm.name === 'GOST R 34.10' ? 'private' : 'secret'),
+    extractable: extractable || 'false',
+    algorithm: algorithm,
+    usages: keyUsages || [],
+    buffer: keyData,
+  }
+  checkKey(key)
+  return key
+}
+
+function convertKeyPair(publicAlgorithm, privateAlgorithm, extractable, keyUsages, publicBuffer, privateBuffer) {
+
+  if (!keyUsages || !keyUsages.indexOf) {throw new SyntaxError('Key usages not defined')}
+
+  const publicUsages = keyUsages.filter(function (value) {
+    return value !== 'sign'
+  })
+  const privateUsages = keyUsages.filter(function (value) {
+    return value !== 'verify'
+  })
+
+  return {
+    publicKey: convertKey(publicAlgorithm, extractable, publicUsages, publicBuffer, 'public'),
+    privateKey: convertKey(privateAlgorithm, extractable, privateUsages, privateBuffer, 'private'),
+  }
+}
+
+// Swap bytes in buffer
+function swapBytes(src) {
+  if (src instanceof CryptoOperationData) {src = new Uint8Array(src)}
+  const dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
+}
+// </editor-fold>
+
+/**
+ * Promise stub object (not fulfill specification, only for internal use)
+ * Class not defined if Promise class already defined in global.context<br><br>
+ *
+ * The Promise object is used for deferred and asynchronous computations. A Promise is in one of the three states:
+ *  <ul>
+ *      <li>pending: initial state, not fulfilled or rejected.</li>
+ *      <li>fulfilled: successful operation</li>
+ *      <li>rejected: failed operation.</li>
+ *  </ul>
+ * Another term describing the state is settled: the Promise is either fulfilled or rejected, but not pending.<br><br>
+ * @class Promise
+ * @global
+ * @param {function} executor Function object with two arguments resolve and reject.
+ * The first argument fulfills the promise, the second argument rejects it.
+ * We can call these functions, once our operation is completed.
+ */ // <editor-fold defaultstate="collapsed">
+if (!global.Promise) {
+
+  global.Promise = (function () {
+
+    function mswrap(value) {
+      if (value && value.oncomplete === null && value.onerror === null) {
+        return new Promise(function (resolve, reject) {
+          value.oncomplete = function () {
+            resolve(value.result)
+          }
+          value.onerror = function () {
+            reject(new OperationError(value.toString()))
+          }
+        })
+      } return value
+    }
+
+    function Promise(executor) {
+
+      let state = 'pending', result,
+        resolveQueue = [], rejectQueue = []
+
+      function call(callback) {
+        try {
+          callback()
+        } catch (e) {
+        }
+      }
+
+      try {
+        executor(function (value) {
+          if (state === 'pending') {
+            state = 'fulfilled'
+            result = value
+            resolveQueue.forEach(call)
+          }
+        }, function (reason) {
+          if (state === 'pending') {
+            state = 'rejected'
+            result = reason
+            rejectQueue.forEach(call)
+          }
+        })
+      } catch (error) {
+        if (state === 'pending') {
+          state = 'rejected'
+          result = error
+          rejectQueue.forEach(call)
+        }
+      }
+      /**
+             * The then() method returns a Promise. It takes two arguments, both are
+             * callback functions for the success and failure cases of the Promise.
+             *
+             * @method then
+             * @memberOf Promise
+             * @instance
+             * @param {function} onFulfilled A Function called when the Promise is fulfilled. This function has one argument, the fulfillment value.
+             * @param {function} onRejected A Function called when the Promise is rejected. This function has one argument, the rejection reason.
+             * @returns {Promise}
+             */
+      this.then = function (onFulfilled, onRejected) {
+
+        return new Promise(function (resolve, reject) {
+
+          function asyncOnFulfilled() {
+            let value
+            try {
+              value = onFulfilled ? onFulfilled(result) : result
+            } catch (error) {
+              reject(error)
+              return
+            }
+            value = mswrap(value)
+            if (value && value.then && value.then.call) {
+              value.then(resolve, reject)
+            } else {
+              resolve(value)
+            }
+          }
+
+          function asyncOnRejected() {
+            let reason
+            try {
+              reason = onRejected ? onRejected(result) : result
+            } catch (error) {
+              reject(error)
+              return
+            }
+            reason = mswrap(reason)
+            if (reason && reason.then && reason.then.call) {
+              reason.then(resolve, reject)
+            } else {
+              reject(reason)
+            }
+          }
+
+          if (state === 'fulfilled') {
+            asyncOnFulfilled()
+          } else if (state === 'rejected') {
+            asyncOnRejected()
+          } else {
+            resolveQueue.push(asyncOnFulfilled)
+            rejectQueue.push(asyncOnRejected)
+          }
+
+        })
+
+      }
+      /**
+             * The catch() method returns a Promise and deals with rejected cases only.
+             * It behaves the same as calling Promise.prototype.then(undefined, onRejected).
+             *
+             * @method catch
+             * @memberOf Promise
+             * @instance
+             * @param {function} onRejected A Function called when the Promise is rejected. This function has one argument, the rejection reason.
+             * @returns {Promise}
+             */
+      this['catch'] = function (onRejected) {
+        return this.then(undefined, onRejected)
+      }
+    }
+
+    /**
+         * The Promise.all(iterable) method returns a promise that resolves when all
+         * of the promises in the iterable argument have resolved.<br><br>
+         *
+         * The result is passed as an array of values from all the promises.
+         * If something passed in the iterable array is not a promise, it's converted to
+         * one by Promise.resolve. If any of the passed in promises rejects, the
+         * all Promise immediately rejects with the value of the promise that rejected,
+         * discarding all the other promises whether or not they have resolved.
+         *
+         * @method all
+         * @memberOf Promise
+         * @static
+         * @param {KeyUsages} promises Array with promises.
+         * @returns {Promise}
+         */
+    Promise.all = function (promises) {
+      return new Promise(function (resolve, reject) {
+        let result = [], count = 0
+        function asyncResolve(k) {
+          count++
+          return function (data) {
+            result[k] = data
+            count--
+            if (count === 0) {resolve(result)}
+          }
+        }
+
+        function asyncReject(reason) {
+          if (count > 0) {reject(reason)}
+          count = 0
+        }
+
+        for (let i = 0, n = promises.length; i < n; i++) {
+          const data = promises[i]
+          if (data.then && data.then.call) {data.then(asyncResolve(i), asyncReject)} else {result[i] = data}
+        }
+
+        if (count === 0) {resolve(result)}
+      })
+    }
+
+    return Promise
+  })()
+} // </editor-fold>
+
+/*
+ * Worker executor
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+let baseUrl = '', nameSuffix = ''
+// Try to define from DOM model
+if (typeof document !== 'undefined') {
+  (function () {
+    const regs = /^(.*)gostCrypto(.*)\.js$/i
+    const list = document.querySelectorAll('script')
+    for (let i = 0, n = list.length; i < n; i++) {
+      const value = list[i].getAttribute('src')
+      const test = regs.exec(value)
+      if (test) {
+        baseUrl = test[1]
+        nameSuffix = test[2]
+      }
+    }
+  })()
+}
+
+
+// Create Worker
+let worker, tasks = [], sequence = 0
+// Worker will create only for first child process and
+// Gost implementation libraries not yet loaded
+if (!global.importScripts && !global.gostEngine) {
+
+  try {
+
+    worker = new Worker(global.__PUBLIC__URL__ || `//${location.host}/gostEngineWorker.js`)
+
+    // if (process.env.LOCAL_DEV) {
+    //   worker = new Worker('./gostEngine.js')
+    // } else {
+    //   worker = new Worker(global.__PUBLIC__URL__ || `//${location.host}${gostCrypto.BASE_URL || ''}/gostEngineWorker.js`)
+    // }
+
+
+    // Result of opertion
+    worker.onmessage = function (event) {
+      // Find task
+      const id = event.data.id
+      for (var i = 0, n = tasks.length; i < n; i++) {
+        if (tasks[i].id === id) {break}
+      }
+      if (i < n) {
+        const task = tasks[i]
+        tasks.splice(i, 1)
+        // Reject if error or resolve with result
+        if (event.data.error) {task.reject(new OperationError(event.data.error))} else {task.resolve(event.data.result)}
+      }
+    }
+
+    // Worker error - reject all waiting tasks
+    worker.onerror = function (event) {
+      for (let i = 0, n = tasks.length; i < n; i++) {tasks[i].reject(event.error)}
+      tasks = []
+    }
+
+  } catch (e) {
+    // Worker is't supported
+    worker = false
+  }
+}
+
+// Executor for any method
+function execute(algorithm, method, args) {
+  return new Promise(function (resolve, reject) {
+    try {
+      if (worker) {
+        const id = ++sequence
+        tasks.push({
+          id: id,
+          resolve: resolve,
+          reject: reject,
+        })
+        worker.postMessage({
+          id: id, algorithm: algorithm,
+          method: method, args: args,
+        })
+      } else {
+        if (global.gostEngine) {resolve(global.gostEngine.execute(algorithm, method, args))} else {reject(new OperationError('Module gostEngine not found'))}
+      }
+    } catch (error) {
+      reject(error)
+    }
+  })
+}
+
+// Self resolver
+function call(callback) {
+  try {
+    callback()
+  } catch (e) {
+  }
+}
+
+// </editor-fold>
+
+/*
+ * WebCrypto common class references
+ *
+ */ // <editor-fold defaultstate="collapsed">
+/**
+ * The Algorithm object is a dictionary object [WebIDL] which is used to
+ * specify an algorithm and any additional parameters required to fully
+ * specify the desired operation.<br>
+ * <pre>
+ *  dictionary Algorithm {
+ *      DOMString name;
+ *  };
+ * </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#algorithm-dictionary}
+ * @class Algorithm
+ * @param {DOMString} name The name of the registered algorithm to use.
+ */
+
+/**
+ * AlgorithmIdentifier - Algorithm or DOMString name of algorithm<br>
+ * <pre>
+ *  typedef (Algorithm or DOMString) AlgorithmIdentifier;
+ * </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#algorithm-dictionary}
+ * @class AlgorithmIdentifier
+ */
+
+/**
+ * The KeyAlgorithm interface represents information about the contents of a
+ * given Key object.
+ * <pre>
+ *  interface KeyAlgorithm {
+ *      readonly attribute DOMString name
+ *  };
+ * </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#key-algorithm-interface}
+ * @class KeyAlgorithm
+ * @param {DOMString} name The name of the algorithm used to generate the Key
+ */
+
+/**
+ * The type of a key. The recognized key type values are "public", "private"
+ * and "secret". Opaque keying material, including that used for symmetric
+ * algorithms, is represented by "secret", while keys used as part of asymmetric
+ * algorithms composed of public/private keypairs will be either "public" or "private".
+ * <pre>
+ *  typedef DOMString KeyType;
+ * </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#key-interface}
+ * @class KeyType
+ */
+
+/**
+ * Sequence of operation type that may be performed using a key. The recognized
+ * key usage values are "encrypt", "decrypt", "sign", "verify", "deriveKey",
+ * "deriveBits", "wrapKey" and "unwrapKey".
+ * <pre>
+ *  typedef DOMString[] KeyUsages;
+ * </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#key-interface}
+ * @class KeyUsages
+ */
+
+/**
+ * The Key object represents an opaque reference to keying material that is
+ * managed by the user agent.<br>
+ * This specification provides a uniform interface for many different kinds of
+ * keying material managed by the user agent. This may include keys that have
+ * been generated by the user agent, derived from other keys by the user agent,
+ * imported to the user agent through user actions or using this API,
+ * pre-provisioned within software or hardware to which the user agent has
+ * access or made available to the user agent in other ways. The term key refers
+ * broadly to any keying material including actual keys for cryptographic
+ * operations and secret values obtained within key derivation or exchange operations.<br>
+ * The Key object is not required to directly interface with the underlying key
+ * storage mechanism, and may instead simply be a reference for the user agent
+ * to understand how to obtain the keying material when needed, eg. when performing
+ * a cryptographic operation.
+ * <pre>
+ *  interface Key {
+ *      readonly attribute KeyType type;
+ *      readonly attribute boolean extractable;
+ *      readonly attribute KeyAlgorithm algorithm;
+ *      readonly attribute KeyUsages usages;
+ *  };
+ * </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#key-interface}
+ * @class Key
+ * @param {KeyType} type The type of a key. The recognized key type values are "public", "private" and "secret".
+ * @param {boolean} extractable Whether or not the raw keying material may be exported by the application.
+ * @param {KeyAlgorithm} algorithm The Algorithm used to generate the key.
+ * @param {KeyUsages} usages Key usage array: type of operation that may be performed using a key.
+ */
+
+/**
+ * The KeyPair interface represents an asymmetric key pair that is comprised of both public and private keys.
+ * <pre>
+ *  interface KeyPair {
+ *      readonly attribute Key publicKey;
+ *      readonly attribute Key privateKey;
+ *  };
+ * </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#keypair}
+ * @class KeyPair
+ * @param {Key} privateKey Private key
+ * @param {Key} publicKey Public key
+ */
+
+/**
+ * Specifies a serialization format for a key. The recognized key format values are:
+ *  <ul>
+ *      <li>'raw' - An unformatted sequence of bytes. Intended for secret keys.</li>
+ *      <li>'pkcs8' - The DER encoding of the PrivateKeyInfo structure from RFC 5208.</li>
+ *      <li>'spki' - The DER encoding of the SubjectPublicKeyInfo structure from RFC 5280.</li>
+ *      <li>'jwk' - The key is represented as JSON according to the JSON Web Key format.</li>
+ *  </ul>
+ *  <pre>
+ *  typedef DOMString KeyFormat;
+ *  </pre>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#key-interface}
+ *  @class KeyFormat
+ */
+
+/**
+ * Binary data
+ *  <pre>
+ *  typedef (ArrayBuffer or ArrayBufferView) CryptoOperationData;
+ *  </pre>
+ * @class CryptoOperationData
+ */
+var CryptoOperationData = global.ArrayBuffer
+
+/**
+ * DER-encoded ArrayBuffer or PEM-encoded DOMString constains ASN.1 object<br>
+ * <pre>
+ *  typedef (ArrayBuffer or DOMString) FormatedData;
+ * </pre>
+ * @class FormatedData
+ */
+// </editor-fold>
+
+/**
+ * The gostCrypto provide general purpose cryptographic functionality for
+ * GOST standards including a cryptographically strong pseudo-random number
+ * generator seeded with truly random values.
+ *
+ * @namespace gostCrypto
+ */
+const gostCrypto = {}
+
+/**
+ * The SubtleCrypto class provides low-level cryptographic primitives and algorithms.
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface}
+ *
+ * @class SubtleCrypto
+ */ // <editor-fold>
+function SubtleCrypto() {
+}
+
+/**
+ * The encrypt method returns a new Promise object that will encrypt data
+ * using the specified algorithm identifier with the supplied Key.
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-encrypt}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST 28147-ECB</b> "prostaya zamena" (ECB) mode (default)</li>
+ *      <li><b>GOST 28147-CFB</b> "gammirovanie s obratnoj svyaziyu po shifrotekstu" (CFB) mode</li>
+ *      <li><b>GOST 28147-OFB</b> "gammirovanie s obratnoj svyaziyu po vyhodu" (OFB) mode</li>
+ *      <li><b>GOST 28147-CTR</b> "gammirovanie" (counter) mode</li>
+ *      <li><b>GOST 28147-CBC</b> Cipher-Block-Chaining (CBC) mode</li>
+ *      <li><b>GOST R 34.12-ECB</b> "prostaya zamena" (ECB) mode (default)</li>
+ *      <li><b>GOST R 34.12-CFB</b> "gammirovanie s obratnoj svyaziyu po shifrotekstu" (CFB) mode</li>
+ *      <li><b>GOST R 34.12-OFB</b> "gammirovanie s obratnoj svyaziyu po vyhodu" (OFB) mode</li>
+ *      <li><b>GOST R 34.12-CTR</b> "gammirovanie" (counter) mode</li>
+ *      <li><b>GOST R 34.12-CBC</b> Cipher-Block-Chaining (CBC) mode</li>
+ *  </ul>
+ *  For more information see {@link GostCipher}
+ *
+ * @memberOf SubtleCrypto
+ * @method encrypt
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Algorithm identifier
+ * @param {Key} key Key object
+ * @param {CryptoOperationData} data Operation data
+ * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
+ */
+SubtleCrypto.prototype.encrypt = function (algorithm, key, data) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.encrypt(algorithm, key, data)}
+
+    algorithm = normalize(algorithm, 'encrypt')
+    return execute(algorithm, 'encrypt',
+      [extractKey('encrypt', algorithm, key), data])
+  })
+} // </editor-fold>
+
+/**
+ * The decrypt method returns a new Promise object that will decrypt data
+ * using the specified algorithm identifier with the supplied Key.
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-decrypt}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST 28147-ECB</b> "prostaya zamena" (ECB) mode (default)</li>
+ *      <li><b>GOST 28147-CFB</b> "gammirovanie s obratnoj svyaziyu po shifrotekstu" (CFB) mode</li>
+ *      <li><b>GOST 28147-OFB</b> "gammirovanie s obratnoj svyaziyu po vyhodu" (OFB) mode</li>
+ *      <li><b>GOST 28147-CTR</b> "gammirovanie" (counter) mode</li>
+ *      <li><b>GOST 28147-CBC</b> Cipher-Block-Chaining (CBC) mode</li>
+ *      <li><b>GOST R 34.12-ECB</b> "prostaya zamena" (ECB) mode (default)</li>
+ *      <li><b>GOST R 34.12-CFB</b> "gammirovanie s obratnoj svyaziyu po shifrotekstu" (CFB) mode</li>
+ *      <li><b>GOST R 34.12-OFB</b> "gammirovanie s obratnoj svyaziyu po vyhodu" (OFB) mode</li>
+ *      <li><b>GOST R 34.12-CTR</b> "gammirovanie" (counter) mode</li>
+ *      <li><b>GOST R 34.12-CBC</b> Cipher-Block-Chaining (CBC) mode</li>
+ *  </ul>
+ *  For additional modes see {@link GostCipher}
+ *
+ * @memberOf SubtleCrypto
+ * @method decrypt
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Algorithm identifier
+ * @param {Key} key Key object
+ * @param {CryptoOperationData} data Operation data
+ * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
+ */
+SubtleCrypto.prototype.decrypt = function (algorithm, key, data) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.decrypt(algorithm, key, data)}
+
+    algorithm = normalize(algorithm, 'decrypt')
+    return execute(algorithm, 'decrypt',
+      [extractKey('decrypt', algorithm, key), data])
+  })
+} // </editor-fold>
+
+/**
+ * The sign method returns a new Promise object that will sign data using
+ * the specified algorithm identifier with the supplied Key.
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-sign}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.10-94</b> GOST Signature</li>
+ *      <li><b>GOST R 34.10-94/GOST R 34.11-94</b> GOST Signature with Hash</li>
+ *      <li><b>GOST R 34.10</b> ECGOST Signature</li>
+ *      <li><b>GOST R 34.10/GOST R 34.11-94</b> ECGOST Signature with Old-Style Hash</li>
+ *      <li><b>GOST R 34.10/GOST R 34.11</b> ECGOST Signature with Streebog Hash</li>
+ *      <li><b>GOST 28147-MAC</b> MAC base on GOST 28147</li>
+ *      <li><b>GOST R 34.12-MAC</b> MAC base on GOST R 43.12</li>
+ *      <li><b>GOST R 34.11-HMAC</b> HMAC base on GOST 34.11</li>
+ *      <li><b>SHA-HMAC</b> HMAC base on SHA</li>
+ *  </ul>
+ *  For additional modes see {@link GostSign}, {@link GostDigest} and {@link GostCipher}
+ *
+ * @memberOf SubtleCrypto
+ * @method sign
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Algorithm identifier
+ * @param {Key} key Key object
+ * @param {CryptoOperationData} data Operation data
+ * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
+ */
+SubtleCrypto.prototype.sign = function (algorithm, key, data) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.sign(algorithm, key, data)}
+
+    algorithm = normalize(algorithm, 'sign')
+    const value = execute(algorithm, 'sign',
+      [extractKey('sign', algorithm, key), data]).then(function (data) {
+      if (algorithm.procreator === 'SC' && algorithm.mode === 'SIGN') {
+        data = gostCrypto.asn1.GostSignature.encode(data)
+      }
+      return data
+    })
+    return value
+  })
+} // </editor-fold>
+
+/**
+ * The verify method returns a new Promise object that will verify data
+ * using the specified algorithm identifier with the supplied Key.
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-verify}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.10-94</b> GOST Signature</li>
+ *      <li><b>GOST R 34.10-94/GOST R 34.11-94</b> GOST Signature with Hash</li>
+ *      <li><b>GOST R 34.10</b> ECGOST Signature</li>
+ *      <li><b>GOST R 34.10/GOST R 34.11-94</b> ECGOST Signature with Old-Style Hash</li>
+ *      <li><b>GOST R 34.10/GOST R 34.11</b> ECGOST Signature with Streebog Hash</li>
+ *      <li><b>GOST 28147-MAC</b> MAC base on GOST 28147</li>
+ *      <li><b>GOST R 34.12-MAC</b> MAC base on GOST R 34.12</li>
+ *      <li><b>GOST R 34.11-HMAC</b> HMAC base on GOST 34.11</li>
+ *      <li><b>SHA-HMAC</b> HMAC base on SHA</li>
+ *  </ul>
+ *  For additional modes see {@link GostSign}, {@link GostDigest} and {@link GostCipher}
+ *
+ * @memberOf SubtleCrypto
+ * @method verify
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Algorithm identifier
+ * @param {Key} key Key object
+ * @param {CryptoOperationData} signature Signature data
+ * @param {CryptoOperationData} data Operation data
+ * @returns {Promise} Promise that resolves with boolean value of verification result
+ */
+SubtleCrypto.prototype.verify = function (algorithm, key, signature, data) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.verify(algorithm, key, signature, data)}
+
+    algorithm = normalize(algorithm, 'verify')
+    if (algorithm.procreator === 'SC' && algorithm.mode === 'SIGN') {
+      const obj = gostCrypto.asn1.GostSignature.decode(signature)
+      signature = { r: obj.r, s: obj.s }
+    }
+    return execute(algorithm, 'verify',
+      [extractKey('verify', algorithm, key), signature, data])
+  })
+} // </editor-fold>
+
+/**
+ * The digest method returns a new Promise object that will digest data
+ * using the specified algorithm identifier.
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-digest}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.11-94</b> Old-Style GOST Hash</li>
+ *      <li><b>GOST R 34.11</b> GOST Streebog Hash</li>
+ *      <li><b>SHA</b> SHA Hash</li>
+ *  </ul>
+ *  For additional modes see {@link GostDigest}
+ *
+ * @memberOf SubtleCrypto
+ * @method digest
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Algorithm identifier
+ * @param {CryptoOperationData} data Operation data
+ * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
+ */
+SubtleCrypto.prototype.digest = function (algorithm, data) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.digest(algorithm, data)}
+
+    algorithm = normalize(algorithm, 'digest')
+    return execute(algorithm, 'digest', [data])
+  })
+} // </editor-fold>
+
+/**
+ * The generateKey method returns a new Promise object that will key(s) using
+ * the specified algorithm identifier. Key can be used in according with
+ * KeyUsages sequence. The recognized key usage values are "encrypt", "decrypt",
+ * "sign", "verify", "deriveKey", "deriveBits", "wrapKey" and "unwrapKey".
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-generateKey}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.10</b> ECGOST Key Pairs</li>
+ *      <li><b>GOST 28147</b> Key for encryption GOST 28147 modes</li>
+ *      <li><b>GOST 28147-KW</b> Key for wrapping GOST 28147 modes</li>
+ *      <li><b>GOST R 34.12</b> Key for encryption GOST R 34.12 modes</li>
+ *      <li><b>GOST R 34.12-KW</b> Key for wrapping GOST R 34.12 modes</li>
+ *      <li><b>GOST R 34.11-KDF</b> Key for Derivation Algorithm</li>
+ *  </ul>
+ *  For additional modes see {@link GostSign}, {@link GostDigest} and {@link GostCipher}<br>
+ *  Note: Generation key for GOST R 34.10-94 not supported.
+ *
+ * @memberOf SubtleCrypto
+ * @method generateKey
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Key algorithm identifier
+ * @param {boolean} extractable Whether or not the raw keying material may be exported by the application
+ * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
+ * @returns {Promise} Promise that resolves with {@link Key} or {@link KeyPair} in according to key algorithm
+ */
+SubtleCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.generateKey(algorithm, extractable, keyUsages)}
+
+    let privateAlgorithm = algorithm.privateKey,
+      publicAlgorithm = algorithm.publicKey
+    algorithm = normalize(algorithm, 'generateKey')
+    if (privateAlgorithm) {privateAlgorithm = normalize(privateAlgorithm, 'generateKey')} else {privateAlgorithm = algorithm}
+    if (publicAlgorithm) {publicAlgorithm = normalize(publicAlgorithm, 'generateKey')} else {publicAlgorithm = algorithm}
+    return execute(algorithm, 'generateKey', []).then(function (data) {
+      if (data.publicKey && data.privateKey) {return convertKeyPair(publicAlgorithm, privateAlgorithm, extractable, keyUsages, data.publicKey, data.privateKey)}
+      return convertKey(algorithm, extractable, keyUsages, data)
+    })
+  })
+} // </editor-fold>
+
+/**
+ * The deriveKey method returns a new Promise object that will key(s) using
+ * the specified algorithm identifier. Key can be used in according with
+ * KeyUsage sequence. The recognized key usage values are "encrypt", "decrypt",
+ * "sign", "verify", "deriveKey", "deriveBits", "wrapKey" and "unwrapKey".
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-deriveKey}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.10-DH</b> ECDH Key Agreement mode</li>
+ *      <li><b>GOST R 34.11-KDF</b> Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-PBKDF2</b> Password Based Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-PFXKDF</b> PFX Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-CPKDF</b> Password Based Key for CryptoPro Derivation Algorithm</li>
+ *      <li><b>SHA-PBKDF2</b> Password Based Key for Derivation Algorithm</li>
+ *      <li><b>SHA-PFXKDF</b> PFX Key for Derivation Algorithm</li>
+ *  </ul>
+ *  For additional modes see {@link GostSign} and {@link GostDigest}
+ *
+ * @memberOf SubtleCrypto
+ * @method deriveKey
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Algorithm identifier
+ * @param {Key} baseKey Derivation key object
+ * @param {AlgorithmIdentifier} derivedKeyType Derived key algorithm identifier
+ * @param {boolean} extractable Whether or not the raw keying material may be exported by the application
+ * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
+ * @returns {Promise} Promise that resolves with {@link Key}
+ */
+SubtleCrypto.prototype.deriveKey = function (algorithm, baseKey,
+  derivedKeyType, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {
+      return rootcrypto.subtle.deriveKey(algorithm, baseKey,
+        derivedKeyType, extractable, keyUsages)
+    }
+
+    algorithm = normalize(algorithm, 'deriveKey')
+    derivedKeyType = normalize(derivedKeyType, 'generateKey')
+    algorithm.keySize = derivedKeyType.keySize
+    if (algorithm['public']) {
+      algorithm['public'].algorithm = normalize(algorithm['public'].algorithm)
+      algorithm['public'] = extractKey('deriveKey', algorithm, algorithm['public'])
+    }
+    return execute(algorithm, 'deriveKey', [extractKey('deriveKey', algorithm, baseKey)]).then(function (data) {
+      return convertKey(derivedKeyType, extractable, keyUsages, data)
+    })
+  })
+} // </editor-fold>
+
+/**
+ * The deriveBits method returns length bits on baseKey using the
+ * specified algorithm identifier.
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-deriveBits}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.10-DH</b> ECDH Key Agreement mode</li>
+ *      <li><b>GOST R 34.11-KDF</b> Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-PBKDF2</b> Password Based Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-PFXKDF</b> PFX Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-CPKDF</b> Password Based Key for CryptoPro Derivation Algorithm</li>
+ *      <li><b>SHA-PBKDF2</b> Password Based Key for Derivation Algorithm</li>
+ *      <li><b>SHA-PFXKDF</b> PFX Key for Derivation Algorithm</li>
+ *  </ul>
+ *  For additional modes see {@link GostSign} and {@link GostDigest}
+ *
+ * @memberOf SubtleCrypto
+ * @method deriveBits
+ * @instance
+ * @param {AlgorithmIdentifier} algorithm Algorithm identifier
+ * @param {Key} baseKey Derivation key object
+ * @param {number} length Length bits
+ * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
+ */
+SubtleCrypto.prototype.deriveBits = function (algorithm, baseKey, length) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.deriveBits(algorithm, baseKey, length)}
+
+    algorithm = normalize(algorithm, 'deriveBits')
+    if (algorithm['public']) {algorithm['public'] = extractKey('deriveBits', algorithm, algorithm['public'])}
+    return execute(algorithm, 'deriveBits', [extractKey('deriveBits', algorithm, baseKey), length])
+  })
+} // </editor-fold>
+
+/**
+ * The importKey method returns a new Promise object that will key(s) using
+ * the specified algorithm identifier. Key can be used in according with
+ * KeyUsage sequence. The recognized key usage values are "encrypt", "decrypt",
+ * "sign", "verify", "deriveKey", "deriveBits", "wrapKey" and "unwrapKey".<br><br>
+ * Parameter keyData contains data in defined format.
+ * The suppored key format values are:
+ *  <ul>
+ *      <li>'raw' - An unformatted sequence of bytes. Intended for secret keys.</li>
+ *      <li>'pkcs8' - The DER encoding of the PrivateKeyInfo structure from RFC 5208.</li>
+ *      <li>'spki' - The DER encoding of the SubjectPublicKeyInfo structure from RFC 5280.</li>
+ *  </ul>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-importKey}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.10-94</b> GOST Private and Public keys</li>
+ *      <li><b>GOST R 34.10</b> ECGOST Private and Public keys</li>
+ *      <li><b>GOST 28147</b> Key for encryption GOST 28147 modes</li>
+ *      <li><b>GOST 28147-KW</b> Key for key wrapping GOST 28147 modes</li>
+ *      <li><b>GOST R 34.12</b> Key for encryption GOST 34.12 modes</li>
+ *      <li><b>GOST R 34.12-KW</b> Key for key wrapping GOST 34.12 modes</li>
+ *      <li><b>GOST R 34.11-KDF</b> Key for Derivation Algorithm</li>
+ *  </ul>
+ *  For additional modes see {@link GostSign}, {@link GostDigest} and {@link GostCipher}<br>
+ *
+ * @memberOf SubtleCrypto
+ * @method importKey
+ * @instance
+ * @param {KeyFormat} format Key format Format specifies a serialization format for a key
+ * @param {CryptoOperationData} keyData
+ * @param {AlgorithmIdentifier} algorithm Key algorithm identifier
+ * @param {boolean} extractable Whether or not the raw keying material may be exported by the application
+ * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
+ * @returns {Promise} Promise that resolves with {@link Key}
+ */
+SubtleCrypto.prototype.importKey = function (format, keyData, algorithm, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
+{
+  let type
+  return new Promise(call).then(function () {
+    if (checkNative(algorithm)) {return rootcrypto.subtle.importKey(format, keyData, algorithm, extractable, keyUsages)}
+
+    if (format === 'raw') {
+      algorithm = normalize(algorithm, 'importKey')
+      if (keyUsages && keyUsages.indexOf) {
+        const name = algorithm.name.toUpperCase().replace(/[\.\s]/g, '')
+        if (name.indexOf('3410') >= 0 && keyUsages.indexOf('sign') >= 0) {type = 'private'} else if (name.indexOf('3410') >= 0 && keyUsages.indexOf('verify') >= 0) {type = 'public'}
+      }
+      return keyData
+    }
+    let key
+    if (format === 'pkcs8') {key = gostCrypto.asn1.GostPrivateKeyInfo.decode(keyData).object} else if (format === 'spki') {key = gostCrypto.asn1.GostSubjectPublicKeyInfo.decode(keyData).object} else {throw new NotSupportedError('Key format not supported')}
+
+    algorithm = normalize(key.algorithm, 'importKey')
+    type = key.type
+    if (extractable !== false) {extractable = extractable || key.extractable}
+    if (keyUsages) {
+      for (var i = 0; i < keyUsages.length; i++) {
+        if (key.usages.indexOf(keyUsages[i]) < 0) {throw DataError('Key usage not valid for this key')}
+      }
+    } else {keyUsages = key.usages}
+    const data = key.buffer, keySize = algorithm.keySize, dataLen = data.byteLength
+    if (type === 'public' || keySize === dataLen) {return data}
+
+    // Remove private key masks
+    if (dataLen % keySize > 0) {throw new DataError('Invalid key size')}
+    algorithm.mode = 'MASK'
+    algorithm.procreator = 'VN'
+    const chain = []
+    for (var i = keySize; i < dataLen; i += keySize) {
+      chain.push((function (mask) {
+        return function (data) {
+          return execute(algorithm, 'unwrapKey', [mask, data]).then(function (data) {
+            const next = chain.pop()
+            if (next) {return next(data)}
+
+            delete algorithm.mode
+            return data
+
+          })
+        }
+      })(new Uint8Array(data, i, keySize)))
+    }
+    return chain.pop()(new Uint8Array(data, 0, keySize))
+
+
+  }).then(function (data) {
+    return convertKey(algorithm, extractable, keyUsages, data, type)
+  })
+} // </editor-fold>
+
+/**
+ * The exportKey method returns a new Promise object that will key data in
+ * defined format. <br><br>
+ * The suppored key format values are:
+ *  <ul>
+ *      <li>'raw' - An unformatted sequence of bytes. Intended for secret keys.</li>
+ *      <li>'pkcs8' - The DER encoding of the PrivateKeyInfo structure from RFC 5208.</li>
+ *      <li>'spki' - The DER encoding of the SubjectPublicKeyInfo structure from RFC 5280.</li>
+ *  </ul>
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-exportKey}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST R 34.10-94</b> GOST Private and Public keys</li>
+ *      <li><b>GOST R 34.10</b> ECGOST Private and Public keys</li>
+ *      <li><b>GOST 28147</b> Key for encryption GOST 28147 modes</li>
+ *      <li><b>GOST 28147-KW</b> Key for key wrapping GOST 28147 modes</li>
+ *      <li><b>GOST R 34.12</b> Key for encryption GOST R 34.12 modes</li>
+ *      <li><b>GOST R 34.12-KW</b> Key for key wrapping GOST R 34.12 modes</li>
+ *      <li><b>GOST R 34.11-KDF</b> Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-PBKDF2</b> Import Password for Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-PFXKDF</b> Import PFX Key for Derivation Algorithm</li>
+ *      <li><b>GOST R 34.11-CPKDF</b> Import Password Key for CryptoPro Derivation Algorithm</li>
+ *      <li><b>SHA-PBKDF2</b> Import Password for Key for Derivation Algorithm</li>
+ *      <li><b>SHA-PFXKDF</b> Import PFX Key for Derivation Algorithm</li>
+ *  </ul>
+ *  For additional modes see {@link GostSign}, {@link GostDigest} and {@link GostCipher}<br>
+ *
+ * @memberOf SubtleCrypto
+ * @method exportKey
+ * @instance
+ * @param {KeyFormat} format Format specifies a serialization format for a key
+ * @param {Key} key Key object
+ * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
+ */
+SubtleCrypto.prototype.exportKey = function (format, key) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (key && checkNative(key.algorithm)) {return rootcrypto.subtle.exportKey(format, key)}
+
+    if (!key.extractable) {throw new InvalidAccessError('Key not extractable')}
+
+    const raw = extractKey(null, null, key)
+    if (format === 'raw') {return raw}
+    if (format === 'pkcs8' && key.algorithm && key.algorithm.id) {
+      if (key.algorithm.procreator === 'VN') {
+        // Add masks for ViPNet
+        let algorithm = key.algorithm, mask
+        algorithm.mode = 'MASK'
+        return execute(algorithm, 'generateKey').then(function (data) {
+          mask = data
+          return execute(algorithm, 'wrapKey', [mask, key.buffer])
+        }).then(function (data) {
+          delete algorithm.mode
+          const d = new Uint8Array(data.byteLength + mask.byteLength)
+          d.set(new Uint8Array(data, 0, data.byteLength))
+          d.set(new Uint8Array(mask, 0, mask.byteLength), data.byteLength)
+          const buffer = d.buffer
+          buffer.enclosed = true
+          return gostCrypto.asn1.GostPrivateKeyInfo.encode({
+            algorithm: algorithm,
+            buffer: buffer,
+          })
+        })
+      } return gostCrypto.asn1.GostPrivateKeyInfo.encode(key)
+    } if (format === 'spki' && key.algorithm && key.algorithm.id) {return gostCrypto.asn1.GostSubjectPublicKeyInfo.encode(key)}
+    throw new NotSupportedError('Key format not supported')
+  })
+} // </editor-fold>
+
+/**
+ * The wrapKey method returns a new Promise object that will wrapped key(s).
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-wrapKey}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST 28147-KW</b> Key Wrapping GOST 28147 modes</li>
+ *      <li><b>GOST R 34.12-KW</b> Key Wrapping GOST R 34.12 modes</li>
+ *      <li><b>GOST 28147-MASK</b> Key Mask GOST 28147 modes</li>
+ *      <li><b>GOST R 34.12-MASK</b> Key Mask GOST R 34.12 modes</li>
+ *      <li><b>GOST R 34.10-MASK</b> Key Mask GOST R 34.10 modes</li>
+ *  </ul>
+ *  For additional modes see {@link GostCipher}<br>
+ *
+ * @memberOf SubtleCrypto
+ * @method wrapKey
+ * @instance
+ * @param {KeyFormat} format Format specifies a serialization format for a key. Now suppored only 'raw' key format.
+ * @param {Key} key Key object
+ * @param {Key} wrappingKey Wrapping key object
+ * @param {AlgorithmIdentifier} wrapAlgorithm Algorithm identifier
+ * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
+ */
+SubtleCrypto.prototype.wrapKey = function (format, key, wrappingKey, wrapAlgorithm) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(wrapAlgorithm)) {return rootcrypto.subtle.wrapKey(format, key, wrappingKey, wrapAlgorithm)}
+
+    wrapAlgorithm = normalize(wrapAlgorithm, 'wrapKey')
+    let keyData = extractKey(null, null, key)
+    if (wrapAlgorithm.procreator === 'SC' && key.type === 'private') {keyData = swapBytes(keyData)}
+    return execute(wrapAlgorithm, 'wrapKey',
+      [extractKey('wrapKey', wrapAlgorithm, wrappingKey), keyData]).then(function (data) {
+      if (format === 'raw') {return data}
+      throw new NotSupportedError('Key format not supported')
+    })
+  })
+} // </editor-fold>
+
+/**
+ * The unwrapKey method returns a new Promise object that will unwrapped key(s).
+ * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-unwrapKey}<br><br>
+ *
+ * Supported algorithm names:
+ *  <ul>
+ *      <li><b>GOST 28147-KW</b> Key Wrapping GOST 28147 modes</li>
+ *      <li><b>GOST R 34.12-KW</b> Key Wrapping GOST R 34.12 modes</li>
+ *      <li><b>GOST 28147-MASK</b> Key Mask GOST 28147 modes</li>
+ *      <li><b>GOST R 34.12-MASK</b> Key Mask GOST R 34.12 modes</li>
+ *      <li><b>GOST R 34.10-MASK</b> Key Mask GOST R 34.10 modes</li>
+ *  </ul>
+ *  For additional modes see {@link GostCipher}<br>
+ *
+ * @memberOf SubtleCrypto
+ * @method unwrapKey
+ * @instance
+ * @param {KeyFormat} format Format specifies a serialization format for a key. Now suppored only 'raw' key format.
+ * @param {CryptoOperationData} wrappedKey Wrapped key data
+ * @param {Key} unwrappingKey Unwrapping key object
+ * @param {AlgorithmIdentifier} unwrapAlgorithm Algorithm identifier
+ * @param {AlgorithmIdentifier} unwrappedKeyAlgorithm Key algorithm identifier
+ * @param {boolean} extractable Whether or not the raw keying material may be exported by the application
+ * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
+ * @returns {Promise} Promise that resolves with {@link Key}
+ */
+SubtleCrypto.prototype.unwrapKey = function (format, wrappedKey, unwrappingKey,
+  unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
+{
+  return new Promise(call).then(function () {
+    if (checkNative(unwrapAlgorithm)) {
+      return rootcrypto.subtle.unwrapKey(format, wrappedKey, unwrappingKey,
+        unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages)
+    }
+
+    unwrapAlgorithm = normalize(unwrapAlgorithm, 'unwrapKey')
+    unwrappedKeyAlgorithm = normalize(unwrappedKeyAlgorithm, 'importKey')
+    if (format !== 'raw') {throw new NotSupportedError('Key format not supported')}
+
+    return execute(unwrapAlgorithm, 'unwrapKey', [extractKey('unwrapKey', unwrapAlgorithm, unwrappingKey), wrappedKey]).then(function (data) {
+      let type
+      if (unwrappedKeyAlgorithm && unwrappedKeyAlgorithm.name) {
+        const name = unwrappedKeyAlgorithm.name.toUpperCase().replace(/[\.\s]/g, '')
+        if (name.indexOf('3410') >= 0 && keyUsages.indexOf('sign') >= 0) {type = 'private'} else if (name.indexOf('3410') >= 0 && keyUsages.indexOf('verify') >= 0) {type = 'public'}
+      }
+      if (unwrapAlgorithm.procreator === 'SC' && type === 'private') {data = swapBytes(data)}
+      return convertKey(unwrappedKeyAlgorithm, extractable, keyUsages, data, type)
+    })
+  })
+} // </editor-fold>
+
+/**
+ * The subtle attribute provides an instance of the SubtleCrypto
+ * interface which provides low-level cryptographic primitives and
+ * algorithms.
+ *
+ * @memberOf gostCrypto
+ * @type SubtleCrypto
+ */
+gostCrypto.subtle = new SubtleCrypto()
+
+/**
+ * The getRandomValues method generates cryptographically random values.
+ *
+ * First try to use Web Crypto random genereator. Next make random
+ * bytes based on standart Math.random mixed with time and mouse pointer
+ *
+ * @memberOf gostCrypto
+ * @param {(CryptoOperationData)} array Destination buffer for random data
+ */
+gostCrypto.getRandomValues = function (array) // <editor-fold defaultstate="collapsed">
+{
+  // Execute randomizer
+  const randomSource = GostRandom ? new GostRandom() : rootcrypto
+  if (randomSource.getRandomValues) {randomSource.getRandomValues(array)} else {throw new NotSupportedError('Random generator not found')}
+} // </editor-fold>
+// </editor-fold>
+
+
+gostCrypto.BASE_URL = ''
+
+module.exports = gostCrypto
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostDigest.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostDigest.js
new file mode 100644
index 0000000..bbb2a79
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostDigest.js
@@ -0,0 +1,1203 @@
+/**
+ * @file GOST R 34.11-94 / GOST R 34.11-12 implementation
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Converted to JavaScript from source https://www.streebog.net/
+ * Copyright (c) 2013, Alexey Degtyarev.
+ * All rights reserved.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+
+const GostRandom = require('./gostRandom')
+const GostCipher = require('./gostCipher')
+
+
+/*
+ * GOST R 34.11
+ * Common methods
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const rootcrypto = global.crypto || global.msCrypto
+
+const DataError = global.DataError || Error,
+  NotSupportedError = global.NotSupportedError || Error
+
+// Copy len values from s[sOfs] to d[dOfs]
+function arraycopy(s, sOfs, d, dOfs, len) {
+  for (let i = 0; i < len; i++) {d[dOfs + i] = s[sOfs + i]}
+}
+
+// Swap bytes in buffer
+function swap(s) {
+  const src = new Uint8Array(s),
+    dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
+}
+
+// Convert BASE64 string to Uint8Array
+// for decompression of constants and precalc values
+function b64decode(s) {
+  // s = s.replace(/[^A-Za-z0-9\+\/]/g, '');
+  const n = s.length,
+    k = n * 3 + 1 >> 2, r = new Uint8Array(k)
+
+  for (var m3, m4, u24 = 0, j = 0, i = 0; i < n; i++) {
+    m4 = i & 3
+    let c = s.charCodeAt(i)
+
+    c = c > 64 && c < 91 ?
+      c - 65 : c > 96 && c < 123 ?
+        c - 71 : c > 47 && c < 58 ?
+          c + 4 : c === 43 ?
+            62 : c === 47 ?
+              63 : 0
+
+    u24 |= c << 18 - 6 * m4
+    if (m4 === 3 || n - i === 1) {
+      for (m3 = 0; m3 < 3 && j < k; m3++ , j++) {
+        r[j] = u24 >>> (16 >>> m3 & 24) & 255
+      }
+      u24 = 0
+
+    }
+  }
+  return r.buffer
+}
+
+// Random seed
+function getSeed(length) {
+
+  const randomSource = GostRandom ? new (GostRandom || global.GostRandom) : rootcrypto
+  if (randomSource.getRandomValues) {
+    const d = new Uint8Array(Math.ceil(length / 8))
+    randomSource.getRandomValues(d)
+    return d
+  } throw new NotSupportedError('Random generator not found')
+}
+
+// Check buffer
+function buffer(d) {
+  if (d instanceof ArrayBuffer) {return d}
+  if (d && d.buffer && d.buffer instanceof ArrayBuffer) {
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
+  }
+  throw new DataError('ArrayBuffer or ArrayBufferView required')
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.11 or GOST R 34.11-12<br><br>
+ *
+ * http://tools.ietf.org/html/rfc6986
+ *
+ * The digest method returns digest data in according to GOST R 4311-2012.<br>
+ * Size of digest also defines in algorithm name.
+ *  <ul>
+ *      <li>GOST R 34.11-256-12 - 256 bits digest</li>
+ *      <li>GOST R 34.11-512-12 - 512 bits digest</li>
+ *  </ul>
+ *
+ * @memberOf GostDigest
+ * @method digest
+ * @instance
+ * @param {(ArrayBuffer|TypedArray)} data Data
+ * @returns {ArrayBuffer} Digest of data
+ */
+const digest2012 = (function () // <editor-fold defaultstate="collapsed">
+{
+  // Constants
+  const buffer0 = new Int32Array(16) // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
+
+  const buffer512 = new Int32Array(16) // [512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
+  buffer512[0] = 512
+
+  // Constant C
+  const C = (function (s) {
+    const h = new Int32Array(b64decode(s)),
+      r = new Array(12)
+    for (let i = 0; i < 12; i++) {r[i] = new Int32Array(h.buffer, i * 64, 16)}
+    return r
+  })(
+    'B0Wm8lllgN0jTXTMNnR2BRXTYKQIKkKiAWlnkpHgfEv8xIV1jbhOcRbQRS5DdmovH3xlwIEvy+vp2soe2lsIsbebsSFwBHnmVs3L1xui3VXKpwrbwmG1XFiZ1hJrF7WaMQG1Fg9e1WGYKyMKcur+89e1cA9GneNPGi+dqYq1o2+yCroK9ZYemTHbeoZD9LbCCdtiYDc6ycGxnjWQ5A/i03t7KbEUderyix+cUl9e8QY1hD1qKPw5Cscvzius3HT1LtHjhLy+DCLxN+iToepTNL4DUpMzE7fYddYD7YIs16k/NV5orRxynX08XDN+hY5I3eRxXaDhSPnSZhXos98f71f+bHz9WBdg9WPqqX6iVnoWGicjtwD/36P1OiVHF82/vf8PgNc1njVKEIYWHxwVf2MjqWwMQT+amUdHraxr6ktufWRGekBo+jVPkDZyxXG/tsa+wmYf8gq0t5oct6b6z8aO8Jq0mn8YbKRCUfnEZi3AOTB6O8Okb9nTOh2urk+uk9QUOk1WhojzSjyiTEUXNQQFSiiDaUcGNyyCLcWrkgnJk3oZMz5H08mHv+bHxp45VAkkv/6GrFHsxaruFg7H9B7nAr/UDX+k' +
+        '2ahRWTXCrDYvxKXRK43RaZAGm5LLK4n0msTbTTtEtIke3jaccfi3TkFBbgwCqucDp8mTTUJbH5vbWiODUURhcmAqH8uS3DgOVJwHppqKK3uxzrLbC0QKgIQJDeC3Vdk8JEKJJRs6fTreXxbs2JpMlJsiMRZUWo837ZxFmPvHtHTDtjsV0fqYNvRSdjswbB56SzNprwJn558DYTMbiuH/H9t4iv8c50GJ8/PkskjlKjhSbwWApt6+qxst84HNpMprXdhvwEpZot6Ybkd9Hc2678q5SOrvcR2KeWaEFCGAASBhB6vru2v62JT+WmPNxgIw+4nI79CezXsg1xvxSpK8SJkbstnVF/T6UijhiKqkHeeGzJEYne+AXZufITDUEiD4dx3fvDI8pM16sUkEsIAT0roxFvFn5443')
+
+  // Precalc Ax
+  const Ax = (function (s) {
+    return new Int32Array(b64decode(s))
+  })(
+    '5vh+XFtxH9Alg3eACST6FshJ4H6FLqSoW0aGoY8GwWoLMumi13tBbqvaN6RngVxm9heWqBpoZnb13AtwY5GVS0hi84235kvx/1ximmi9hcXLgn2m/NdXlWbTba9pufCJNWyfdEg9g7B8vOyxI4yZoTanAqwxxHCNnrao0C+839aLGfpR5bOuN5zPtUCKEn0LvAx4tQggj1rlM+OEIojs7c7Cx9N3wV/S7HgXtlBdD165TMLAgzaHHYwgXbTLCwStdjyFWyigiS9YjRt59v8yVz/s9p5DEZM+D8DTn4A6GMnuAQom9fOtgxDv6PRBGXmmXc2hDH3pOhBKG+4dEkjpLFO/8tshhHM5tPUMz6aiPQlftLyc2EeYzeiKLYsHHFb5f3dxaVp1apzF8C5xoLoevKZj+atCFeZyLrGeIt5fu3gNuc4PJZS6FIJSDmOXZk2ELwMeagII6phcfyFEob5r8Ho3yxzRY2Lbg+COK0sxHGTPcEebq5YOMoVrqYa53ucetUeMh3r1bOm4/kKIX2HW/RvdAVaWYjjIYiFXkj74qS78l/9CEUR2+J19NQhWRSzrTJDJsOCnElYjCFAt+8sBbC16A/qnpkhF' +
+        '9G6LOL/GxKu9vvj91HfeujqsTOvIB5t58JyxBeiHnQwn+moQrIpYy4lg58FAHQzqGm+BHko1aSiQxPsHc9GW/0NQGi9gnQqf96UW4MY/N5Yc5KazuNqSUhMkdSw44IqbpahkczvsFU8r8SRXVUmzP9dm2xVEDcXHp9F5455Ct5La3xUaYZl/04agNF7AJxQjONVRe22pOaRlGPB3EEADtAJ5HZClrqLdiNJniZxKXQqTD2bfCihlwk7p1CBFCbCLMlU4kWaFKSpBKQe/xTOoQrJ+K2JUTcZzbFMERWKV4Ada9AbpU1GQih8vO2vBI2Fvw3sJ3FJV5cY5Z9Ezsf5oRCmIOcfw5xHiQJuH9xlk+aLpOK3D20sHGQwLTkf5w+v0VTTVdtNriENGEKBa64sC2CDDzfWCMvJRbeGEDb7Cseeg6N4GsPodCHuFS1QNNDM7QuKaZ7zKW3/YpgiKxDfdDsY7s6nZQ+2BIXFNvV5lo7FnYe3nte6haSQx98jVc6v21R/GheGjZxpeBjzUBBDJLSg6uY8ssEACj+vAbLLy95AX1k8Rb6HTPOBzWfGpnuSqeE7WjHTNwAZuKhnVxztC2ocStBYccEXD' +
+        'NxWC5O2TIW2s45BBSTn2/H7F8SGGIjt8wLCUBCusFvv510U3mlJ+v3N8Py6jtoFoM+e42brSeMqpoyo0wi/+u+SBY8z+370NjllAJG6lpnBRxu9LhCrR5CK60GUnnFCM2RSIwhhgjO4xnqVJH3zaF9OU4SgTTJxgCUv0MnLV47Ob9hKlpKrXkcy72kPSb/0PNN4fPJRq0lBPW1RomV7ha9+fr2/qj3eUJkjqWHDdCSu/x+Vtcdl8Z93msv9PIdVJPCdrRjroYAORdntPr4bHH2ihPng11LmgtowRXwMMn9QUHdLJFlggAZg9j33dUySsZKpwP8wXUlTCyYmUjgK0Jj5edtafRsLeUHRvA1h9gARF2z2CknLx5WBYSgKbVgvz+65Ypz/83GKhWl5ObK1M6EupblXOH7jMCPl0eq6CslPBAhRM9/tHG58EKJjz6442BosnrfLv+3rtypf+jApevneOBRP099jPMCwlAcMri/eNkt38F1xVTfhlxX9GBS9f6vMwG6Ky9CSqaLfsu9YNhpmPDzUBBHVMAAAAAAAAAADxLjFNNNDM7HEFIr4GGCO1rygNmTDABcGX/VziXWk8ZRmkHMYzzJoV' +
+        'lYRBcvjHnrjcVDK3k3aEqZQ2wTokkM9YgCsT8zLI71nEQq45fO1PXPoc2O/jq42C8uWslU0pP9Fq2CPokHobfU0iSfg88EO2A8ud2Hn58z3eLS8nNtgmdCpDpB+JHuLfb5iZnRtsEzrUrUbNPfQ2+rs131AmmCXAlk/cqoE+bYXrQbBTfuWlxAVAunWLFghHpBrkO+e7RK/juMQp0GcXl4GZk7vun765rpqN0eyXVCHzVyzdkX5uMWOT19rir/jOR6IgEjfcUzijI0PeyQPuNXn8VsSompHmAbKASNxXUeASlvVk5Lfbe3X3GINRWXoS222VUr3OLjMenbsjHXQwj1INcpP90yLZ4gpEYQwwRnf+7uLStOrUJcow/e4ggAZ1YerKSkcBWhPnSv4UhyZOMCzIg7J78RmlFmTPWbP2gtyoEap8HnivWx1WJvtkjcOytz6RF99bzjTQX3zwarVvXf0lfwrNEycYV03I5nbFKp4HOaflLriqmlSGVT4PPNmjVv9IrqqSe36+dWUlrY4th30ObPn/28hBOx7MoxRQyplpE74w6YPoQK1REAmVbqccsbW2ui20NU5Eab3KTiWgBRWvUoHKD3Hh' +
+        'dEWYy40OK/JZP5sxKqhjt++zim4ppPxja2qjoEwtSp09lesO5r8x46KRw5YVVL/VGBacju+by/URXWi8nU4oRrqHXxj6z3Qg0e38uLbiPr2wBzby8eNkroTZKc5libb+cLei9tpPclUOclPXXG1JKQTyOj1XQVmnCoBp6gssEI5J0HPFa7EaEYqrehk55P/XzQlaCw44rO/J+2A2WXn1SJK95pfWfzQix4kz4QUUvGHhwdm5dcm1StImYWDPG82AmkSS7Xj9hnGzzKsqiBqXk3LOv2Z/4dCI1tRbXZhalCfIEagFjD9V3mX1tDGWtQYZ90+WsdZwbkOFnR6Ly0PTNlqrioXM+j2E+ce/mcKV/P2iH9Wh3ktjD82z73Y7i0VtgD9Z+Hz3w4WyfHO+XzGRPJjjrGYzsEghv2FnTCa4+BgP+8mVxMEwyKqghiAQdhqYYFfzQiEBFqr2PHYMBlTMNS3bRcxmfZBCvPRalkvUA4Jo6KDD7zxvPae9ktJp/3O8KQriAgHtIoe33jTN6IWBj9kB7qfdYQWb1vonMhmgNVPVbxrodMzOyeoxJFwug/VUcDRVXaB75JnOJtKsVue+9/0WGFelBU44' +
+        'ag59pFJ0NtFb2Go4HN6f8sr3dWIxdwwysJqu2eJ5yNBd7xCRxgZ02xEQRqJRXlBFI1Ns5HKYAvzFDLz39bY8+nOhaIfNFx8DfSlBr9nyjb0/Xj60Wk87nYTu/jYbZ3FAPbjj0+cHYnEaOij58g/SSH68fHW0nnYndOXyk8frVlwY3PWeT0eLpAxu9E+prctSxpmBLZjax2B4iwbcbkadDvxl+Op1IexOMKX3IZ6OC1Ur7D9lvKV7a93QSWm68bdemZBM2+OU6lcUsgHR5upA9ruwwIJBKErdUPIEY7+PHf/o1/k7k8usuE2Mto5HfIbowd0bOZImjj98WqESCdYvyy89mKvbNcmuZxNpViv9X/UVweFsNs7igB1+su3485sX2pTTfbAN/gGHe8PsdguK2suEld/hU65EBaJHc7e0ELMShXt4PDKr3463cNBoElE7U2c5udLj5mVYTVficbJkaNeJx4/JhJclqTW7+n0a4QKLFTej36ZBiNDNXZvDeN56Ssgsmk2Az7dCd38bg722IHLSiDodM711XnotS6tqj0H02qtruxyV2ZBc/+f9jTG2g6pkIhGbOB/ArvuEQgIsSaD5CMZjAzrj' +
+        'pCivCASTiCat5Bw0GopTx65xIe535qhdxH9cSiWSnoy1OOmqVc3YYwY3eqna2OspoYroe7MnmJVu39pqNeSEFGt9nRmCUJSn1Bz6VaTobL/lyu3J6kLFnKNsNRwOb8F5UYHk3m+rv4n/8MUwGE0X1J1B6xWEBFiSHA1SUCjXOWHxeOwYDKiFapoFcQGO+BHNQJGifD7178wZrxUjn2Mp0jR0UO/5HrmQ4RtKB43Sd1m5Vh3l/GATMZEvH1otqZPAFlTctluiGRo+Ld4JimuZ64pm1x4PguP+jFGtt9VaCNdFM+UPiUH/fwLm3We9SFns4Giqul321S/CSCbj/0p1pWw5Bw2IrN34ZIZUjEaRpG/Rvr0mE1x8DLMPkwOPFTNKgtmEn8G/mmmcMguoVCD65PpSgkOv+QdnntTWz+loowi4Jf1YLESxR5t2kbxe3LO7x+phkEj+ZRYQY6YfgXryM0fVOGg0CaaTY8LOmExt7TAqn9/YbIHZHXseOwYDKmaUZmCJ6/vZ/YMKWY7mc3UgewdEmhQK/ElfLKilcbZZMjQfmG+KRbvC+zgapKBQs3LCVCOjrdgfrzoXJzwLi4a7bP6DJY3IabWi' +
+        'KHkCv9HJgPH1qUvWazg3r4iACnmyyroSVVBDEAg7DUzfNpQOB7nusgTRp85nkLLFYSQT//EltNwm8SuXxSwST4YII1GmLyis75NjL5k35ec1B7BSKTob5ucsMK5XCpxw01hgQa4UJeDeRXSz151MxJK6IoBAxWha8AsMpdyMJxy+Eofx9pxabvOeMX+x4NyGSV0RQCDsNC1pm0B+PxjNS9yjqdRq1RUoDR0U8nmJaSQAAAAAAAAAAFk+t1+hlsYeLk54FgsRa9htSuewWIh/juZf0BOHLj4Gem3bu9MOxOKsl/yJyq7xsQnMszweGdvhifPqxGLuGGR3cM9JqoetxlbFfsplV/bWA5U92m1s+5o2ko2IRFbgfB7rjzeVn2CNMdYXnE6qqSNvrDrX5cAmYkMEn6ZTmRRWq9NmncBSuO6vAsFTp8IKKzzLA243I8AHk8nCPZDhyizDO8ZeL27X00z/VjOXWCSeselOZDJdaqY34W01lHJCCnn45mG+Yj94UhTZBALHRBNILvH98MiWWxP2m8XsFgmpDogpKBTlkr5OGYtUKhB9cszAD8vrr+cbG0nIRCIrcD4lZBZNqEDp1SDGUT4f9Plm' +
+        'usMgP5EM6Kvy7dHCYcR+8IFMuUWs02Hzlf64lEo5IQVcnPAsFiLWrZcYZfP3cXjpvYe6K5vwofREQAWyWWVdCe11vkgkf7wLdZYSLhfP9Cq0SwkXhel6FZZrhU4nVdqf7uCDkkkTR5EyQypGI8ZSuahGW0etPkN0+LRfJBKxXoskF/bweGRLo/shYv5/3aURS7vMJ52kbcEBc+C90CSidiIgjFmivKCKj8SQbbg2803kuQ10OmZn6nFHteBwX0bvJ4LLKhUIsDnsBl719FsefSG1sYPP0FsQ2+czwGApXHefpzZyOUwBfs9VMhGGwxyB2HIOGg1Fp+07j5l6Pd+JWDr8ecft+ysu6aQZhkPvDs5fCc32e04tN09qa+n6NN8Etq3UcDihI/mNIk0KBX6qocliSLhcG/eo4/2XYDCaLrULKm5bo1GCDetCxOH+p1cilI1YKZodg3N/z5zIZLrUUaVbT7XUtypQCL9Tgc49eZdGptjV5C0E5dIrgPx+MIeWV7aed7VzVKA5aUQdgJfQtDMwyvvz4vDP4o533eC+jMNisS4lnElPRqbOcm+529HKQeJCwe7RTbp2Ay/0eqMPsEWyaKk6zeTM' +
+        'r38L6IRUnQgEg1SzwUaCY5JUNcLIDv7S7k438n/f+6cWejOSDGDxTfsSO1LqA+WESgyrU/27kAed6vY4D3iKGctI7FWPDLMqtZ3Estb+9+Dc28oi9PPsthHfWBNUmpxA4z/e31aKztOgwcgSQyLpwwela4FY+m0NdyeVebHh893ZsYt0QirABLjsLZ//q8KU9Kz4qC11kU97v2mx7ytoeMT2L69Iesfhds6AnMZ+XQxnEdiPkuTBTGJ7mdkkPe3+I0qlw9+2i1GQmx8VJi2/bU9m6gVLYry1GuLPWlKqaui+oFP70M4BSO1oCMDmYxTJQ/4WzRWoJxDNBJIxoGlw9ue8imyXzEywM3zoNfyzucBl3vJYfMeA81IhTt5BMrtQlfFeQ5D0k9+HCDliXdLg8UExPBr7i2avkXIK8FGyEbxHfUJ+1O6lcy47TO72474lgmJ4NOsLzEOcA+PdeOckyCh3MorZhn35FLUZReJDsPJXSw+I9+uX4oi2+piapJQ6GcTwaMsWhYZQ7mQJrxH6733zF9XATqukelZ8VJi0xqm2u/uAT0IYjjzCK887xc0L0EM26qo5dxPwL6wb7DMTLCUG26fw00iN' +
+        '1+Zda/LDGh5eubIWH/gg9YQuBlDEbg+fcWvrHZ6EMAGpM3WMqzFe1D/kFP2ieSJlJ8nxcB7wCTJzpMHKcKdxvpQYS6bnaz0OQNgp/4wUyH4PvsP6x3Z0yzYWqWNKapVyjxORGcJe+Tf1Re1NWuo/nugCSZZQujh7ZDfnvQtYLiLmVZ+J4FPiYYCtUuMFKI38bcVaI+NLmTXeFOD1GtCtCcY5BXimWYZeltdhcQlIfLHi1ss6IRVgAgHpFeV3n67RrbAhP2p33LeYgLduuaGmq12fjSSGRM+b/V5FNsVmJljxxrn+m6y9/erNY0G+mXnE76ciFwhAVXZRB3Hs2I5UPsK6UctnHwQ9CtSCrHGvWHn+eHoEXNrJNrI4rzOOBJrtvYZsyUly7iZhXabrvYECkDKV/dCLLBcR+DQEYHO/CurzCZMpdY/8QhyusT59z6k0uiMHSBGIgysk785Ch0zmXA5X1h+w6doas9G61vmbNDzAdXsciTxFgitRDbhAOpKXXHaYwfHbYUo+DQEY1eaMtNYPSI6FXLTPrpYeDfPLM9k6jlWrFKAO10IXAyhiN4nBg4tt0ZyUYpKJX+997Ts668/LuOZOSjFJ' +
+        'Bkx+ZC9lw9w9Kz4qTFpj2lvT80CpIQxHtHTRV6FhWTGsWTTaHehyZm7jZRF693ZbyG7TZxawXESbpohcIB1JxbkFOHqINGxFExByxLq53f+/SUYep1GvmdUpd7wc4FuhsPeF5GAn21JUbTC6bld4jDBa1wdlD1auyYfGgmEv8pWlq4lE9fvFcX7VKOdZ8kTKjdy7zix9uIiqFUq+Mo2xuh5hm+mT7OiLCfK9nugTtxd0AapLKF0csyGFjxQxlcruSMOBhBOY0bj8t1DTsvmIiTmoapmNHOG5H4iODORzRlp4mVaDdpeHFgLPKtfuI0G/hccTtbPxoU7/kW/hK0Vn53waAjC30QV1DJj8yF7Km6Wj5/cg2p4GrWpgMaK7sfQ4lz50lH7X0mAs9GY5GMD/ml9Qp/NoZ44kNNmDtKRJ1M1orxt1VZK1h388PQIubeobq/xfW0USH2sNcektKVU1dN/99RBtTwPYCBuoe5+MGcbbfqGjrAmBu7vKEq1mFy36eXBDZgEIKccXkyZ3e/9fnAAAAAAAAAAA6yR2pMkG1xVyTdQvBzjfb7dS7mU43bZfN/+8hj31O6OO+oT8tcFX5unrXHMnJZaq' +
+        'GwvavyU1xDmG4SyHKk1OIJlpoovOPgh6+vsut52cS1UFakFWttksslo65qXevqKWIqOwJqgpJYBTyFs7Nq0VgbEekAEXuHWDxR86Sj/laTDgGeHtzzYhveyBHSWR/LoYRFt9TE1SSh2o2mBp3K7wBVj1zHIwneMp1MBiWWt/9XDOIq0DOdWfmFkc2ZdHAk34i5DFqgMYe1T2Y9J/w1bQ8NhYnpE1tW7VNTCWUdPWehwS+WchzSZzLtKMHD1EGjasSSqUYWQHf2ktHXPcb19RS28KcPQNaNiKYLSzDsoerEHTZQnYM4WYfQs9l0kGMPaonszJCpbEZXeiDuLFrQGofOSatV4OcKPepEKcoYJka6Dal7RG25Yvaszth9TX9t4nKrgYXTelPEafJdzv4VvLpsGcbvn+o+tTp2SjkxvYhM4v0lkLgXwQ9FaiGm2AdDkz5XOgu3nvDQ8VXAygldweI2wsT8aU1DfkEDZN9iMFMpHdMt/Hg2xCZwMmPzKZvO9uZvjNauV7b52MNa4rW+IWWTGzwuISkPh/k70gJ7+RUANpRg6QIg0bVimeJ2+uGdMoY5KMPFOiQy9wgv746Rue0LxveSw+7UD3' +
+        'TEDVN9LeU9t16L+uX8KyYk2pwNKlQf0KTo//4Dz9EmQmIOSVaW+n4+Hw9Ai4qY9s0aojD92m2cLH0BCd0cYoj4p50E90h9WFRpRXm6NxC6I4QX98+oNPaB1HpNsKUAflIGya8UYKZD+hKN33NL1HEoFERwZytyMt8uCGzAIQUpMYLeWNvIkrV8qh+bD4kx37a4kkR8wuWun53RGFBCCkO0vlvraKJD7WVYQlXxnI1l07Z0BOYz+gBqaNtnZsRyof94rHmrTJfiHDU0QuEICq7JpPnblXgucUBbp7yCybMiAxpUZl+LZeT7G2Ufd1R/TUi/oNhXukZoKFqWxaoWqYu5kPrvkI63nJoV43okf0pi12hX3NXSd0HvjFC4AKGCC8vmXcsgH3orRmbRuYb5Qm50zJIb9TxOZIlUEKD5PZykIgzcyqZHuk70KaQGCJChhxDE6k9psys4vM2jYt3jVM05bcI7x8Wy+pwwm7aKqFGrPSYTGnNkjgEwIdxSlB/E2yzVrat3BL5IqneWXZhO1x5jI4b9YXNLuk6C1t1TirckVcIUfqYXe0sV2hq3DPCRzorJB/znK4vf9XyF39lyJ4qKTkTGprb5QN' +
+        'OFGZW08f3+RiV4zK7XG8ntmIK7DAHSwKkXudXRE8UDuiwx4RqHZDxuRjySOjmcHO9xaGxX6odtyHtKlz4JbVCa8NVn2dOlgUtAwqP1ncxvQ2AviEldEh3dPh3T2YNkhK+UXnGqRmiOV1GFR+sqWR9ZNmWHRQwB2JnqgQGGWMBltPVAgMvEYDoy0DhMZRN7893DJQeOyGHirqMKj8eVc/9yFNIDDKBQy2ZfAyK4AWwwxpvpbdGyRwh9uV7pmB4WG40fwYFNnKBfiCDtK7zA3nKWPXYFBDDxTHO8yw6KCdOg+OQHZNVz9UojnRdcHhYXe9EvWjfHNPH0urN8EvH9/CbVZIsWc5XNDxbATtFTe/QqftlxYdFDBAZX1sZ9qrcrgH7Bf6h7pO6Dzfr3nLAwT7wXM/BgVxvEY+eNYcEofpiifQfPSOd7StobnCYlNskN0m4kSbWGCAFgWPwJrX+UH8+/rYzqlL5G0Oo0PyiwYI65+bEmvQSRc0e5qSh0rnaZwiGwF8QsTmnuA6TFxyDuOSVktun14+o5naa6NT9FrYPTXn/uCQTBskJSLQCYMlh+ldhCmAwA8UMOLGs8Cghh4okwh0M6QZ1yny' +
+        'NB89rdQtbG/uCj+u+7Kljkruc8SQ3TGDqrcttbGhajSpKgQGXiOP33tLNaFoa2/MaiO/bvSmlWwZHLlrhRrTUlXVmNTW3jUayWBN5fKufvMcpsKjqYHhct4vlVGtelOYMCWq/1bI9hYVUh2dHihg2VBv4xz6RQc6GJxV8StkewsBgOyarn6oWXzsi0AFDBBeI1DlGYv5QQTvitM0VcwN1wenvuFtZ3+S5eMluQ3naZdaBhWRom5jerYR7xYYIItGCfTfPrepgaseuweK6H2swLeRA4y2XiMfD9ONRXSwVmBn7fcCweqOvrpfS+CDEjjN48R3ws7+vlwNzkhsNUwb0oxds2QWwxkQJuqe0adicyQDnSmz74Ll658o/ILL8q4CqKronPBdJ4ZDGqz6J3SwKM9HH54xt6k4WBvQuOOSLsi8eBmbQAvvBpD7cce/QvhiHzvrEEYDBJloPnpHtVrY3piPQmOmldGQ2AjHKm5jhFMGJ1J7wxnXy+uwRGbXKZeu5n4MCuJljHwU0vEHsFbIgHEiwywwQAuMinrhH9Xaztug3ts46YoOdK0Qk1TcxhWmC+kaF/ZVzBmN3V/+uL2xSb/lMCiviQrt' +
+        '1lum9bStemp5VvCIKZcifhDoZlUys1L5DlNh39rO/jnOx/MEn8kBYf9itWFnf18ul1zPJtIlh/BR7w+GVDuvYy8eQe8Qy/KPUnImNbu5SoiujbrnM0TwTUEHadNmiP2as6uU3jS7uWaAExeSjfGqm6VkoPDFETxU8THUvr2xoRd/caLz6o71tUCHhUnI9lXDfvFOaUTwXezURmPc9VE32PKs/Q1SM0T8AAAAAAAAAABfvG5ZjvVRWhbPNC7xqoUysDa9bds5XI0TdU/m3TG3Ervfp3otbJCUiefIrDpYKzA8aw4JzfpFncSuBYnH4mUhSXNad39f1GjK/WRWHSybGNoVAgMvn8nhiGckNpQmg2k3ghQeO6+JhJy11TEkcEvp19tKbxrT0jOm+YlDKpPZv501OauKDuOwU/LKrxXH4tFuGSg8dkMPFT3r4pNjhO3EXjyCwyCL+QMzuINMuUoT/WRw3rEuaGtVNZ/RN3pTxDZhyqV5AvNZdQQ6l1KC5Zp5/X9wSCaDEpzFLukTaZzNeCi5/w59rI0dVFV0TnignUPLfYjMs1IzQUS9EhtKE8+6TUnNJf26ThE+dssgjAYILz/2J7oieKB2' +
+        'wolX8gT7supFPf6B5G1n45TB5pU9p2IbLINoXP9JF2TzLBGX/E3spSsk1r2SLmj2sit4RJrFET9I87bt0SF8MS6erXW+tVrWF0/YtF/ULWtO1OSWEjir+pLmtO7+vrXQRqDXMgvvgghHIDuopZEqUST3W/jmnj6W8LE4JBPPCU7+4ln7yQH3dydqcksJHNt9vfj1Ae51R19ZmzwiTeyGkW2EAY+Zwer+dJi45BzbOazgWV5xIXxbtyqkOic8UMCv9QtD7D9UO26Djj4hYnNPcMCUkttFB/9Ycr/qn9/C7mcRaIrPnM36oBqBkNhqmDa5esvZO8YVx5XHMyw6KGCAyoY0RelO6H1Q9pZqX9DW3oXprYFPltXaHHCiL7aePqPVCmn2jVgrZEC4Qo7Jwu51f2BKSeOsjfEsW4b5CwwQyyPh2bLrjwLz7ik5E5TT0iVEyOChf1zQ1qq1jMal96JurYGT+wgjjwLC1caPRlsvn4H8/5zSiP26xXcFkVfzWdxHHSYuOQf/SSv7WCIz5ZrFV92yvOJC+LZzJXe3Ykjgls9vmcSm2D2nTMEUfkHreVcB9IuvdpEqkzc+8p0kmywKGenhYyK2+GIv' +
+        'VTaZQEd1f3qfTVbVpHsLM4IlZ0ZqoRdMuPUFfesIL7LMSMEL9EdfUzcwiNQnXew6lo9DJRgK7RAXPSMs9wFhUa5O0J+Ub8wT/UtHQcRTmHMbWz8N2ZM3ZS/8sJZ7ZEBS4CN20gqJhAyjrjpwMpsY10GcvSM13oUm+v6/EVt8MZkDlwdPhaqbDcWK1PtINrlwvsYL4/xBBKge/zbcS3CHchMf3DPthFO2CETjPjQXZNMP8RtuqzjNOWQ1Hwp3YbhaO1aU9QnPug4whXCEuHJF0Eevs70il6488rpcL29rVUp0vcR2H09w4c/fxkRx7cRe5hB4TB3ArxZ6yinWPBE/KC3tQRd2qFmvrF8hHpmj1e7UhPlJqH7zOzzjbKWW4BPk0SDwmDqdQyxrxARk3Fl1Y2nV9eXRlWyemulfBDaYuyTJ7MjaZqTvRNaVCMilsurGxAwiNcBQO4A4wZO6jGUhAxzux11GvJ6P0zEBGTdRWtHY4uVohuylD7E3EI1XecmRcJ87aQXKQgZP61CDFoDK7+xFavMkG9I4WNZzr+GBq74kL1Tnytm/jAIR8YENzBn9kLxNuw9DxgqVGERqnaB2HaG/y/E/VwEq' +
+        'K95PiWHhcrUnuFOoT3MkgbCx5kPfH0thGMw4Qlw5rGjSt/fXvzfYITEDhkowFMcgFKokY3Kr+lxuYA21TrrFdDlHZXQEA6PzCcIV8Lxx5iMqWLlH6YfwRXtM3xi0d73Ylwm165Bsb+BzCDwmgGDZC/7cQA5B+QN+KElIxuRL6bhyjsroCAZb+wYzDp4XSSsaWVCFYWnnKU665PT85sQ2T8p7z5XjDnRJfX/RhqM+lsJSg2EQ2FrWkE36oQIbTNMSkTq7dYclRPrdRuy5FA8VGD1lmmsehpEUwj8sq9cZEJrXE/4GLdRoNtCmBlay+8HcIhxaed2QlJbv0m28obFJNQ537aAjXk/Jy/05W2to9rkN4OrvpvTUxAQi/x8ahTLn+Wm4Xt7WqpR/biAHrvKPPzrQYjuBqTj+ZiTui3qtoae2gujdyFZge6eMxW8oHiowx5slekX6oI1bQXTgZCsws19ji/9+rgJUS8mvnAwF+AjOWTCK+YtGro/FjanMVcOIgDSWx2dtDrHzPKrh5w3XurtiAjJuorS/1QIPhyAYccudXKdUqbcSzoQWadh96DxWimGEeF62c59CC7pssHQeK/EtW2Dqwc5H' +
+        'dqw19xKDaRwsa7fZ/s7bX/zNsY9MNRqDH3nAEsMWBYLwq62uYqdMt+GlgByC7wb8Z6IYRfLLI1dRFGZfXfBNnb9A/S10J4ZYoDk9P7cxg9oFpAnRkuOwF6n7KM8LQGX5JamiKUK/PXzbdeInA0Y+ArMm4QxatdBs55aOgpWmLea5c/OzY26tQt9XHTgZwwzl7lSbcinXy8USmSr9ZeLRRvjvTpBWsChktwQeE0Aw4ovALt0q2tUJZ5MrSvSK6V0Hb+b7e8bcR4Qjmqy3VfYWZkAaS+29uAfWSF6o04mvYwWkG8IgrbSxPXU7MriXKfIRmX5YS7MyICkdaDGTztocf/9atsDJn4GOFrvV4n9n46GlnTTuJdIzzZj4roU7VKLZbfcK+ssQXnl5XS6ZubukJY5De2dEM0F4AYb2zohmgvDr8JKjuzR70rzX+mLxjR1VrdnX0BHFVx4L0+Rxsb3/3qpsL4CO6v70XuV9MfbIgKT1D6R/8ET8oBrdycNR9bWV6nZkbTNS+SIAAAAAAAAAAIWQnxb1jr6mRilFc6rxLMwKVRK/Odt9Lnjb2Fcx3SbVKc++CGwta0ghi102WDoPmxUs0q36zXis' +
+        'g6ORiOLHlbzDudplX3+Sap7LoBssHYnDB7X4UJ8vqep+6NbJJpQNzza2fhqvO27KhgeYWXAkJav7eEnf0xqzaUx8V8yTKlHi2WQTpg6KJ/8mPqVmxxWmcWxx/DRDdtyJSk9ZUoRjevja8xTpiyC88lcnaMFKuWaHEIjbfGguyLuIcHX5U3pqYi56RljzAsKiYZEW2+WCCE2ofd4BgybnCdzAGnecaZfo7cOcPax9UMimCjOhoHiowMGoK+RSs4uXP3Rr6hNKiOmiKMy+uv2aJ6vq2U4GjHwE9IlSsXgiflBc9Iyw+wSZWWAX4BVt5Iq9RDi08qc9NTGMUormSf9YhbUV75JN/Pt2DGYcIS6SVjS0kxlcxZp5hpzaUZoh0ZA+MpSBBbW+XC0ZSs6M1F8umEONTKI4Epzbm2+pyr7+OdSBsmAJ7wuMQd7R6/aRpY4VTm2mTZ7mSB9UsG+OzxP9iknYXh0ByeH1r8gmURwJTuP2mKMwde5nrVrHgi7sTbJDjdR8KMGZ2nWJ9oM32xzoks3ON8V8Id2jUwWX3lA8VGBqQvKqVD/3k11yen5zYhup4jKHUwdFnfFWoZ4Pwt/kd8Yd07TNnCJ9' +
+        '5Yd/A5hqNBuUnrKkFcb07WIGEZRgKJNAY4DnWuhOEbCL53K21tDxb1CSkJHVls9t6GeV7D6e4N98+SdIK1gUMshqPhTuwm20cRnNp42swPbkAYnNEAy265KtvDoCj9/3sqAXwtLTUpwgDav40FyNazSnj5ui93c347RxnY8jHwFFvkI8L1u3wfceVf79iOVdaFMDK1nz7m5ls+nE/wc6qncqwzma5evsh4Ful/hCp1sRDi2y4EhKSzMSd8s92N7dvVEMrHnrn6U1IXlVKpH1x4qwqWhG4GptQ8foC0vwszoIybNUaxYe5TnxwjXrqZC+wb7yN2YGx7IsIJIzYUVpqusBUjtvwyialGlTq5Nazt0nKDj2PhM0DosEVeyhK6BSd6GyxJeP+KKlUSLKE+VAhiJ2E1hi0/HN243f3gi3bP5dHhLInkoXig5WgWsDlphn7l95lTMD7Vmv7XSLq3jXHW2Sny35PlPu9dio+Lp5jCr2GbFpjjnPa5Xdry90kQTi7CqcgOCIZCfOXI/YgluV6sTg2Zk6xgJxRpnDpRcwdvk9GxUfUKKfQp7VBeorx1lGNGZaz9x/S5hhsftTKSNC98chwAgOhkEw' +
+        'hpPNFpb9e3SHJzGScTaxS9NEbIpjoXIbZpo16KZoDkrKtljyOVCaFqTl3k70Loq5N6dDXug/CNkTTmI54mx/loJ5Gjwt9nSIP27wCoMpFjyOWn5C/etlkVyq7kx5gd21GfI0eFrx6A0lXd3j7Zi9cFCJijKpnMysKMpFGdpOZlauWYgPTLMdIg2XmPo31tsmMvlo8LT/zRqgDwlkTyWFRfo61RdeJN5y9GxUfF2yRhVxPoD7/w9+IHhDzytz0qr6vRfqNq7fYrT9ERus0W+Sz0q6p9vHLWfgs0FrXa1J+tO8oxaySRSoixXRUAaK7PkU4nwd6+Me/EBP5Ix1m+2iI37c/RQbUix4TlBw8XwmaBzmlsrBWBXzvDXSpks7tIGngAz/Kf59/fYe2frD1bqksGwmY6ke9ZnRA8EZkTRAQ0H3rU3tafIFVM2dlkm2G9aryMO95+rbE2jRMYmfsCr7ZR0Y41Lh+ufx2jkjWu98psGhu/XgqO5PepE3eAXPmgseMThxYYC/jlvZ+DrL2zzlgAJ15RXTi4l+Ry0/IfD7vMYtlG63ho6jlbo8JI0hlC4J5yI2Rb/eOYP/ZP65AuQbscl3QWMNENlX' +
+        'w8sXIrWNTsyieuxxnK4MO5n+y1GkjBX7FGWsgm0nMyvhvQR6116/AXn3M6+UGWDFZy7JbEGjxHXCf+umUkaE82Tv0P1144c07Z5gBAdDrhj7jimTue8UTThFPrEMYlqBaXhIB0I1XBJIz0LOFKbunhysH9YGMS3Oe4LWukeS6budFBx7H4caB1YWuA3BHEouuEnBmPIfp3d8qRgByNmlBrE0jkh+wnOtQbINHph7OkR0YKtVo8+744TmKANFdvIKG4fRbYl6YXMP4n3v5F1SWIPN5rjKPb63DCNkftAdERl6Nio+oFkjhLYfQPPxiT8QddRX0UQEcdxFWNo0I3A1uNymEWWH/CBDjZtn08mrJtArC1yI7g4lF2/nejgqtdqQJpzEctnY/jFjxB5G+qjLibervHcWQvUvfR3khS8SbzmoxrowJDOboGAFB9fO6IjIj+6Cxhogr65XokSJJteAEfyl5yg2pFjwByvOu49LTL1Je75K820koTyv6Zu3aVV9EvqevQWntanowEuqW4Nr20JzFI+sO3kFkIOEgShRwSHlV9NQbFWw/XL/mWrLTz1hPtoMjmTi3APwhoNW5rlJ6QTq1yq7Cw/8' +
+        'F6S1E1lncGrjyOFvBNU2f/hPMAKNr1cMGEbI/L06IjJbgSD39sqRCNRvojHs6j6mM02UdFM0ByVYQDlmworSSb7W86eanyH1aMy0g6X+li3QhXUbV+ExWv7QAj3lL9GOSw5bXyDmrd8aMy3pbrGrTKPOEPV7ZcYEEI97qNYsPNerB6OhEHPY4WsNrRKRvtVs8vNmQzUywJcuVXcmss7g1AAAAAAAAAAAywKkdt6bUCnk4y/Ui556wnNLZe4shPdeblOGvM1+EK8BtPyE58vKP8/oc1xlkF/VNhO/2g/0wuYRO4csMef26C/hi6JVBSrr6XS3LrxIoeQKvFZBuJ2Xm7RqpeYiArZuROwmsMS7/4emkDtbJ6UDx39oAZD8meZHl6hKOqcajZzdEu3hYDfqfMVUJR3dDchOiMVMfZVr4xNNkWlgSGYrXbCAcsyZCbmStd5ZYsXJfFGBuAOtGbY3ybL1l9lKgjDsCwiqxV9WXaTxMn/SAXKD1q2YkZ54815jarlRlnZ1H1Mk6SFnClN3T7n9PRwV1G1IkvZhlPvaSF9aNdxzEQFbN97T9HBUd6k9wAoOs4HNDY27iNgJxl/kNhYQSZe+rLpV' +
+        'IbcKyVaTsoxZ9MXiJUEYdtXbXrULIfSZVdehnPVcCW+pcka0w/hRn4VS1IeivTg1VGNdGBKXw1Ajwu/chRg78p9h+W7MDJN5U0iTo53cj+1e3wtZqgpUy6wsbRqfOJRc1667oNiqfecqv6AMCcXvKNhMxk889y+/IAP2TbFYeLOnJMffwG7J+AafMj9ogIaCzClqzVHQHJQFXiuuXMDFw2Jw4sIdYwG2O4QnIDgiGcDS8JAOhGq4JFL8byd6F0XSxpU8jOlNiw/gCfj+MJV1PmVbLHmSKE0LmEo31UNH38Tqta6/iAjipZo/0sCQzFa6nKDg//hM0DhMJZXkr63hYt9nCPSzvGMCv2IPI31U68qTQp0QHBGCYAl9T9CM3dTajC+bVy5g7O9winx/GMS0Hzow26Tf6dP/QAbxmn+w8Htfa/fdTcGe9B9tBkcycW6P+fvMhmpknTMwjI3lZ3REZIlxsPlyoCks1hpHJD9ht9jv64UR1MgnZpYctr5A0UejqrNfJfe4Et52FU5AcEQynVE9drZOVwaT80eax9L5Cqibiy5EdwechSl+uZ09haxpfjfmLfx9QMN3byWk7pOeW+BFyFDdj7Wt' +
+        'hu1bpxH/GVLpHQvZz2FrNTfgqyVuQI/7lgf2wDECWnoLAvXhFtI8nfPYSGv7UGUMYhz/J8QIdfV9QMtx+l/TSm2qZhbaopBin181SSPshOLshHw9xQfDswJaNmgEPOIFqL+ebE2sCxn6gIvi6b67lLW5nFJ3x0+jeNm8lfA5e8zjMuUM260mJMdPzhKTMnl+Fyns6y6nCavC1rn2mVTR+F2JjL+6uFUahZp2+xfditsb6FiGNi9/tfZBP4/xNs2K0xEPpbu341wKL+7VFMxNEegwEO3Nfxq5oedd5V9C1YHu3kpVwTshtvL1U1/5ThSADMG0bRiIdh684V/bZSmROy0l6JdacYHCcYF/HOLXpVQuUsXLXFMSS/n3pr7vnCgdnnIufSHy9W7OFw2bgdyn5g6bggUctJQbHnEvYjxJ1zMh5Fz6Qvn33MuOen+Lug9gjpiDGgEPtkZHTM8NjolbI6mShVhPsnqVjMK1cgUzVENC1bjphO/zpQEtGzQCHnGMV6Ziaq50GAv/GfwG49gTEjW6nU1qfG3+ydRMF4+G7WVQZSPmoC5SiAN3LVwGIpOJiwH0/gtpHsD42r2K7YJZkUxOOuyYW2e+' +
+        'sQ3wgn+/lqlqaSea1Pja4eeGidzT1f8ugS4aKx+lU9H7rZDW66DKGBrFQ7I0MQ45FgT33yy5eCemJBxpURifAnU1E8zqr3xeZPKln8hMTvokfSseSJ9fWttk1xirR0xIefSnofInCkAVc9qDKpvrrjSXhnloYhxyUUg40qIwIwTwr2U3/XL2hR0GAj46a0S6Z4WIw85u3XNmqJP3zHCs/9TSTim17anfOFYyFHDqamwHw0GMDlpKgyvLsi9WNbrNBLRs0Ah42QoG7lq4DEQ7DzshH0h2yPnlCVjDiRLu3pjRSznNv4sBWTl7KSBy9Bvgh8BAkxPhaN6tJumIR8qjn04UDIScZ4W71f9VHbfz2FOgykbRXVykDc1gIMeH/jRvhLdtzxXD+1fe/aD8oSHkzkuNe2CWAS09msZCrSmKLGQIddi9EPCvFLNXxup7g3SsTWMh2JpFFjLtqWcJxxmyP/dsJLvzKLwGxmLVJpEsCPI84l7EeJKzZrl4KD9vTzm9wIyPnp1oM/1PORewnnn0N1k94G+ywIwQ1oh4QbHRS9oZsm7uMhOdsLSUh2Z12T4vglk3dxmHwFiQ6ax4PUZhdfGCfgP/bIcJ' +
+        'lF3AqDU+uH9FFvllirW5Jj+Vc5h+sCDvuFUzC21RSDEq5qkbVCvLQWMx5BPGFgR5QI+OgYDTEaDv81FhwyVQOtBmIvm9lXDViHbZog1LjUmlUzE1VzoMi+Fo02TfkcQh9BsJ5/UKL48SsJsPJMGhLdpJzCypWT3EH1w0Vj5Xpr9U0U82qFaLgq983+BD9kGa6momhclD+Lzl3L+01+kdK7J63d55nQUga0Q8rtbmq217rpHJ9hvoRT64aKx8rlFjEce2UyLjMqTSPBSRuamS0I+1mC4DEcfKcKxkKODJ1NiJW8KWD1X8xXZCPpDsje/Xb/BQft6ecmc9z0XweozC6kqgYFSUH1yxWBD7W7De/Zxe/qHjvJrGk27dS0rcgAPrdBgI+OixDdIUXsG3KIWaIii8n3NQFylEJwoGQk69zNOXKu30Mxwr9gWZd+QKZqiGJVAwKkqBLtbdio2gpwN3R8UV+HqXDpt7MCPqqWAaxXi346o6c/utpg+2mTEequWXAAAAAAAAAAAxDvGdYgS09CKTcaZE22RVDeyvWRqWB5JcpJeLuKYklhwrGQo4dTU2QaKVtYLNYCwyedzBZCYnfcGhlKqfdkJx' +
+        'E52AOybf0KGuUcTUQegwFtgT+kStZd/BrAvyvEXU0hMjvmqSRsUV2UnXTQiSPc84nQUDISfQZucvf97/Xk1jx6R+KgFVJH0HmbFv8S+ov+1GYdQ5jJcqr9/Qu8ijP5VC3KeWlKUdBsuwIOu2faHnJboPBWNpbao05PGkgNX3bKfEOONOlRDq95OegSQ7ZPL8je+uRgctJc8sCPOjWG/wTtelY3WzzzpWIMlHzkDnhlBD+KPdhvGCKVaLeV6sammHgAMBHx27Il31NhLT9xReAxifddowDew8lXDbnDcgyfO7Ih5Xa3PbuHL2UkDk9TbdRDviUYiryKriH/442bNXqP1Dym7n5PEXyqNhS4mkfuz+NOcy4cZinoN0LEMbmbHUzzoWr4PC1mqq5agESZDpHCYnHXZMo71fkcS3TD9YEPl8bdBF+EGixn8a/Rn+YzFPyPlXI42YnOmnCQddUwbujlX8VAKqSPoOSPpWPJAjvrRl376rylI/dmyHfSLYvOHuzE0784XgReO+u2mzYRVzPhDqrWcg/UMots6xDnHl3Cq9zETvZzfgt1I/FY6kErCNmJx0xS22zmGb61mZK5Rd6Ios78oJd29M' +
+        'o71rjVt+N4TrRz2xy12JMMP7osKbSqB0nCgYFSXOF2toMxHy0MQ45F/Tute+hLcf/G7RWuX6gJs2zbARbF7+dymRhEdSCVjIopBwuVlgRghTEg66pgzBAToMBHx01ohpaR4KxtLaSWhz20l05utHUXqDiv30BZnJWkrNM7TiH5lgRslPwDSX8OarkujRy46iM1TH9WY4VvHZPuFwr3uuTWFr0nvCKuZ8krOaEDl6g3CryLMwS46YkL+WcodjCwKyW2fWB7b8bhXQMcOXzlU/5ha6WwGwBrUlqJut5ilucMhqH1Jdd9NDW24QNXBXPfoLZg77Khf8lat2Mnqel2NL9kutnWRiRYv18YMMrtvD90jFyPVCZpEx/5UEShzcSLDLiSli3zz4uGawueII6TDBNaFPs/BhGnZ8jSYF8hwWATbWtxki/sxUnjcIlDilkH2LC12jjlgD1JxaW8yc6m88vO2uJG07c//l0rh+D94i7c5eVKuxyoGF7B3n+I/oBWG5rV4ahwE1oIwvKtvWZc7MdleAtaeC9YNYPtyKLu3kez/J2Vw1Br7nD4O+ER1sTgXupgO5CVk2dBAQPIG0gJ/eXSxptgJ9DHdK' +
+        'OZCA19XIeVMJ1B4WSHQGtM3WOxgmUF5f+Z3C9JsCmOic0FQKlDy2f7yoS3+JHxfFcj0ds7eN8qZ4qm5x5ztPLhQz5pmgcWcNhPIb5FRiB4KY3zMntNIPL/BJ3OLTdp5c22xgGZZW63pkh0ayB4tHgzLNI1mNy63PHqSVW/DH2oXpoUNAG51Gtf2Spdm77CG4yBOMeQ4Ljhsu4AuabXulYvhXEriTt/H86yj+2AvqlJ1WSmXrikDqTGyZiOhHSigjRTWJixIdjy2r2MAyMazL9Loukcq5hny9eWC+Pe+OJjoMEal3YC/W8MtQ4a0WyTUn6uIulANf/YkoZtEvXeLOGv8bGEGrm/OQn5M53oz+DUOWRyfIxIoL91JFAsaqrlMcm5xe86wQtBNPovpJQqsypT8WWmLlURIrx0FI2nbm49eSSEDl5GSyp9NyrkPWl4TaIztyoQXhGoakigSRSUGmOLS2hSXJ3nhl3eq6rKbPgAIKl3PCULa9iMKE/7tevTOTi6DfRyyPak4q72y3TZUcMkJ5g3IqMY1Bc/fN/784m7IHTAr5OCwCbIpqDwskOgNab9rlPF+Ikx/Gi5iWflOKw0T/WccaqOY5' +
+        '4vzgzkOekimiDN4kedjNQBnon6LI69jp9Ea7z/OYJwxDs1M+IoTkVdgvDc2OlFBGUQZvErJs6CDnOVeva8VCbQgezlpAwW+gOxk9T8W/q3t/5mSI3xdNQg6YFO9wWATYgTeshXw518axczJE4YWoIWlcP4lvEfhn9s8GV+Pv9SQaq/J20Clj1S2jZk51uR5eAom9mBB30iiQwf199BNgjzxVN7b9k6kXqhIQfjkZouAGhtq1MJlreNqmsFWe44Juw04v91YIWodtU1ikT/9BN/xYdZWzWUisfKUJXMfV9n77FH9si3VKwL/rJquR3az5aJbvxWekkXPKmjHhHnxcM7vkQYaxMxWpDdt5O2iav+RwtKArp/ogjuR6OntzB/lRjOzVvhSjaCLu7Um5I7FE2Rdwi024s9wxYIghnydl/tOz+o/c8fJ6CZELLTH8pgmbD1LEo3jtbcxQzL9eutmBNGvVghF/ZipPlM6aUNT92d8rJbz7RSB1JmfEK2YfSfy/SSQg/HIyWd0DQ23UGMK7PB9uRRf4crORoIVjvGmvH2jUPqS67ruGtgHK0EwItWkUrJTKywmAyZhUw9hzmjc4ZCb+xcAtusrC' +
+        '3qnXeL4NOz4ED2ctIO65UOWw6jd7spBF8wqxNsu0JWBiAZwHNxIs++hrkwwTKC+hzBzrVC7lN0tTj9KKohs6CBthIjrYnArBNsJEdK0lFJ96I9Pp90ydBr4h9ueZaMXtz1+GgDYnjHf3BdYb61qcME0rR9FS3OCNX557/cI07Pgkd3hYPc0Y6oZ7pnxEFdWqTOGXnVppiZkAAAAAAAAAAOxk9CEzxpbxtXxVacFrEXHBx5JvRn+Ir2VNlv4PPi6XFfk21ajEDhm4pyxSqfGulalRfaoh2xncWNJxBPoY7pRZGKFI8q2HgFzdFina9lfEgnTBUWT7bPrR+xPbxuBW8n1v2RDPYJ9qtj84vdmpqk09n+f69SbAA3S7xwaHFJne32MHNLa4Uio60+0DzQrCb/reryCDwCPUwA1CI07K4buFOMuoXNdulsQCJQ5uJFjrR7w0EwJqXQWv16cfEUJypJeN94TMP2LjuW38HqFEx4Ehss85FZbIrjGOTo2VCRbzzpVWzD6S5WM4WlCb3X0QRzWBKaC156+j5vOH42NwK3ngdV1WU+lAAXvpA6X/+fQSErU8LJDoDHUzB/MVhX7E24+vuGoMYdMe' +
+        '2eXdgYYhOVJ3+KrSn9Yi4iW9qBQ1eHH+dXEXSo+h8MoTf+xgmF1lYTBEnsGdvH/npUDU3UH0zyzcIGrgrnrpFluRHNDi2lWosjBfkPlHEx00S/nsvVLGt10XxmXSQz7QGCJP7sBesf2eWemShEtkV5pWjr+kpd0Ho8YOaHFtpFR+LLTE16IkVoexdjBMoLy+QTrupjLzNn2ZFeNrvGdmO0DwPuo6Rl9pHC0ow+CwCK1OaCoFSh5bsQXFt2EoW9BE4b+NGltcKRXywGF6wwFMdLf16PHRHMNZY8tMSz+nRe+dGoRGnInfa+M2MIJLK/s91fR09uYO76L1jGuD+y1OGEZ25F8K3zQRIHgfdR0jobq9Ypszgap+0a4dd1MZ9xuw/tHIDaMumoRVCQg/koJRcCmsAWNVV6cOp8lpRVGDHQSOZWgmBNS6ChH2UfiIKrdJ133JbvZ5PYrvJ5n1KwQtzUju8LB6hzDJIvGi7Q1Uc5JhQvHTL9CXx0pnTShq8OLhgP18yXSMvtJxfnBnr09JmpOCkKns0duziOOykzRN0XInNBWMJQ+j1g') //==
+
+  // Variables
+  let sigma, N, h
+
+  // 64bit tools
+  function get8(x, i) {
+    return (x[i >> 2] >> ((i & 3) << 3)) & 0xff
+  }
+
+  // 512bit tools
+  function add512(x, y) {
+    let CF = 0, w0, w1
+    for (let i = 0; i < 16; i++) {
+      w0 = (x[i] & 0xffff) + (y[i] & 0xffff) + (CF || 0)
+      w1 = (x[i] >>> 16) + (y[i] >>> 16) + (w0 >>> 16)
+      x[i] = (w0 & 0xffff) | (w1 << 16)
+      CF = (w1 >>> 16)
+    }
+  }
+
+  function get512(d) {
+    return new Int32Array(d.buffer, d.byteOffset, 16)
+  }
+
+
+  function copy512(r, d) {
+    for (let i = 0; i < 16; i++) {r[i] = d[i]}
+  }
+
+  function new512() {
+    return new Int32Array(16)
+  }
+
+  // Core private algorithms
+  function xor512(x, y) {
+    for (let i = 0; i < 16; i++) {x[i] = x[i] ^ y[i]}
+  }
+
+
+  const r = new512()
+  function XLPS(x, y) {
+    copy512(r, x)
+    xor512(r, y)
+    for (let i = 0; i < 8; i++) {
+      var z0, z1, k = get8(r, i) << 1
+      z0 = Ax[k]
+      z1 = Ax[k + 1]
+      for (let j = 1; j < 8; j++) {
+        k = (j << 9) + (get8(r, (j << 3) + i) << 1)
+        z0 = z0 ^ Ax[k]
+        z1 = z1 ^ Ax[k + 1]
+      }
+      x[i << 1] = z0
+      x[(i << 1) + 1] = z1
+    }
+  }
+
+  const data = new512(), Ki = new512()
+  function g(h, N, m) {
+    let i
+
+    copy512(data, h)
+    XLPS(data, N)
+
+    /* Starting E() */
+    copy512(Ki, data)
+    XLPS(data, m)
+
+    for (i = 0; i < 11; i++) {
+      XLPS(Ki, C[i])
+      XLPS(data, Ki)
+    }
+
+    XLPS(Ki, C[11])
+    xor512(data, Ki)
+    /* E() done */
+
+    xor512(h, data)
+    xor512(h, m)
+  }
+
+  // Stages
+  function stage2(d) {
+    const m = get512(d)
+    g(h, N, m)
+
+    add512(N, buffer512)
+    add512(sigma, m)
+  }
+
+  function stage3(d) {
+    const n = d.length
+    if (n > 63) {return}
+
+    const b0 = new Int32Array(16)
+    b0[0] = n << 3
+
+    const b = new Uint8Array(64)
+    for (let i = 0; i < n; i++) {b[i] = d[i]}
+    b[n] = 0x01
+
+    const m = get512(b), m0 = get512(b0)
+    g(h, N, m)
+
+    add512(N, m0)
+    add512(sigma, m)
+
+    g(h, buffer0, N)
+    g(h, buffer0, sigma)
+  }
+
+  return function (data) {
+
+    // Cleanup
+    sigma = new512()
+    N = new512()
+
+    // Initial vector
+    h = new512()
+    for (var i = 0; i < 16; i++) {
+      if (this.bitLength === 256) {h[i] = 0x01010101}
+    }
+
+    // Make data
+    const d = new Uint8Array(buffer(data))
+
+    const n = d.length
+    const r = n % 64, q = (n - r) / 64
+
+    for (var i = 0; i < q; i++) {stage2.call(this, new Uint8Array(d.buffer, i * 64, 64))}
+
+    stage3.call(this, new Uint8Array(d.buffer, q * 64, r))
+
+    let digest
+    if (this.bitLength === 256) {
+      digest = new Int32Array(8)
+      for (var i = 0; i < 8; i++) {digest[i] = h[8 + i]}
+    } else {
+      digest = new Int32Array(16)
+      for (var i = 0; i < 16; i++) {digest[i] = h[i]}
+    }
+    // Swap hash for SignalCom
+    if (this.procreator === 'SC' || this.procreator === 'VN') {return swap(digest.buffer)}
+    return digest.buffer
+  }
+} // </editor-fold>
+)()
+
+/**
+ * Algorithm name GOST R 34.11-94<br><br>
+ *
+ * http://tools.ietf.org/html/rfc5831
+ *
+ * The digest method returns digest data in according to GOST R 34.11-94.
+ * @memberOf GostDigest
+ * @method digest
+ * @instance
+ * @param {(ArrayBuffer|TypedArray)} data Data
+ * @returns {ArrayBuffer} Digest of data
+ */
+const digest94 = (function () // <editor-fold defaultstate="collapsed">
+{
+  let C, H, M, Sum
+
+  // (i + 1 + 4(k - 1)) = 8i + k      i = 0-3, k = 1-8
+  function P(d) {
+    const K = new Uint8Array(32)
+
+    for (let k = 0; k < 8; k++) {
+      K[4 * k] = d[k]
+      K[1 + 4 * k] = d[8 + k]
+      K[2 + 4 * k] = d[16 + k]
+      K[3 + 4 * k] = d[24 + k]
+    }
+
+    return K
+  }
+
+  //A (x) = (x0 ^ x1) || x3 || x2 || x1
+  function A(d) {
+    const a = new Uint8Array(8)
+
+    for (let j = 0; j < 8; j++) {
+      a[j] = (d[j] ^ d[j + 8])
+    }
+
+    arraycopy(d, 8, d, 0, 24)
+    arraycopy(a, 0, d, 24, 8)
+
+    return d
+  }
+
+  // (in:) n16||..||n1 ==> (out:) n1^n2^n3^n4^n13^n16||n16||..||n2
+  function fw(d) {
+    const wS = new Uint16Array(d.buffer, 0, 16)
+    const wS15 = wS[0] ^ wS[1] ^ wS[2] ^ wS[3] ^ wS[12] ^ wS[15]
+    arraycopy(wS, 1, wS, 0, 15)
+    wS[15] = wS15
+  }
+
+  //Encrypt function, ECB mode
+  function encrypt(key, s, sOff, d, dOff) {
+    const t = new Uint8Array(8)
+    arraycopy(d, dOff, t, 0, 8)
+    const r = new Uint8Array(this.cipher.encrypt(key, t))
+    arraycopy(r, 0, s, sOff, 8)
+  }
+
+  // block processing
+  function process(d, dOff) {
+    let S = new Uint8Array(32), U = new Uint8Array(32),
+      V = new Uint8Array(32), W = new Uint8Array(32)
+
+    arraycopy(d, dOff, M, 0, 32)
+
+    //key step 1
+
+    // H = h3 || h2 || h1 || h0
+    // S = s3 || s2 || s1 || s0
+    arraycopy(H, 0, U, 0, 32)
+    arraycopy(M, 0, V, 0, 32)
+    for (var j = 0; j < 32; j++) {
+      W[j] = (U[j] ^ V[j])
+    }
+    // Encrypt GOST 28147-ECB
+    encrypt.call(this, P(W), S, 0, H, 0) // s0 = EK0 [h0]
+
+    //keys step 2,3,4
+    for (let i = 1; i < 4; i++) {
+      const tmpA = A(U)
+      for (var j = 0; j < 32; j++) {
+        U[j] = (tmpA[j] ^ C[i][j])
+      }
+      V = A(A(V))
+      for (var j = 0; j < 32; j++) {
+        W[j] = (U[j] ^ V[j])
+      }
+      // Encrypt GOST 28147-ECB
+      encrypt.call(this, P(W), S, i * 8, H, i * 8) // si = EKi [hi]
+    }
+
+    // x(M, H) = y61(H^y(M^y12(S)))
+    for (var n = 0; n < 12; n++) {
+      fw(S)
+    }
+    for (var n = 0; n < 32; n++) {
+      S[n] = (S[n] ^ M[n])
+    }
+
+    fw(S)
+
+    for (var n = 0; n < 32; n++) {
+      S[n] = (H[n] ^ S[n])
+    }
+    for (var n = 0; n < 61; n++) {
+      fw(S)
+    }
+    arraycopy(S, 0, H, 0, H.length)
+  }
+
+
+  //  256 bitsblock modul -> (Sum + a mod (2^256))
+  function summing(d) {
+    let carry = 0
+    for (let i = 0; i < Sum.length; i++) {
+      const sum = (Sum[i] & 0xff) + (d[i] & 0xff) + carry
+
+      Sum[i] = sum
+
+      carry = sum >>> 8
+    }
+  }
+
+  // reset the chaining variables to the IV values.
+  const C2 = new Uint8Array([
+    0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
+    0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
+    0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF,
+    0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
+  ])
+
+  return function (data) {
+
+    // Reset buffers
+    H = new Uint8Array(32)
+    M = new Uint8Array(32)
+    Sum = new Uint8Array(32)
+
+    // Reset IV value
+    C = new Array(4)
+    for (var i = 0; i < 4; i++) {C[i] = new Uint8Array(32)}
+    arraycopy(C2, 0, C[2], 0, C2.length)
+
+    // Make data
+    const d = new Uint8Array(buffer(data))
+
+    const n = d.length
+    const r = n % 32, q = (n - r) / 32
+
+    // Proccess full blocks
+    for (var i = 0; i < q; i++) {
+      var b = new Uint8Array(d.buffer, i * 32, 32)
+
+      summing.call(this, b) // calc sum M
+      process.call(this, b, 0)
+    }
+
+    // load d the remadder with padding zero;
+    if (r > 0) {
+      var b = new Uint8Array(d.buffer, q * 32),
+        c = new Uint8Array(32)
+      arraycopy(b, 0, c, 0, r)
+      summing.call(this, c) // calc sum M
+      process.call(this, c, 0)
+
+    }
+
+    // get length into L (byteCount * 8 = bitCount) in little endian.
+    let L = new Uint8Array(32), n8 = n * 8, k = 0
+    while (n8 > 0) {
+      L[k++] = n8 & 0xff
+      n8 = Math.floor(n8 / 256)
+    }
+    process.call(this, L, 0)
+    process.call(this, Sum, 0)
+
+    let h = H.buffer
+
+    // Swap hash for SignalCom
+    if (this.procreator === 'SC') {h = swap(h)}
+
+    return h
+  }
+
+} // </editor-fold>
+)()
+
+/**
+ * Algorithm name SHA-1<br><br>
+ *
+ * https://tools.ietf.org/html/rfc3174
+ *
+ * The digest method returns digest data in according to SHA-1.<br>
+ *
+ * @memberOf GostDigest
+ * @method digest
+ * @instance
+ * @param {(ArrayBuffer|TypedArray)} data Data
+ * @returns {ArrayBuffer} Digest of data
+ */
+const digestSHA1 = (function () // <editor-fold defaultstate="collapsed">
+{
+
+  // Create a buffer for each 80 word block.
+  let state, block = new Uint32Array(80)
+
+  function common(a, e, w, k, f) {
+    return (f + e + w + k + ((a << 5) | (a >>> 27))) >>> 0
+  }
+
+  function f1(a, b, c, d, e, w) {
+    return common(a, e, w, 0x5A827999, d ^ (b & (c ^ d)))
+  }
+
+  function f2(a, b, c, d, e, w) {
+    return common(a, e, w, 0x6ED9EBA1, b ^ c ^ d)
+  }
+
+  function f3(a, b, c, d, e, w) {
+    return common(a, e, w, 0x8F1BBCDC, (b & c) | (d & (b | c)))
+  }
+
+  function f4(a, b, c, d, e, w) {
+    return common(a, e, w, 0xCA62C1D6, b ^ c ^ d)
+  }
+
+  function cycle(state, block) {
+    let a = state[0],
+      b = state[1],
+      c = state[2],
+      d = state[3],
+      e = state[4]
+
+    // Partially unroll loops so we don't have to shift variables.
+    let fn = f1
+    for (let i = 0; i < 80; i += 5) {
+      if (i === 20) {
+        fn = f2
+      } else if (i === 40) {
+        fn = f3
+      } else if (i === 60) {
+        fn = f4
+      }
+      e = fn(a, b, c, d, e, block[i])
+      b = ((b << 30) | (b >>> 2)) >>> 0
+      d = fn(e, a, b, c, d, block[i + 1])
+      a = ((a << 30) | (a >>> 2)) >>> 0
+      c = fn(d, e, a, b, c, block[i + 2])
+      e = ((e << 30) | (e >>> 2)) >>> 0
+      b = fn(c, d, e, a, b, block[i + 3])
+      d = ((d << 30) | (d >>> 2)) >>> 0
+      a = fn(b, c, d, e, a, block[i + 4])
+      c = ((c << 30) | (c >>> 2)) >>> 0
+    }
+    state[0] += a
+    state[1] += b
+    state[2] += c
+    state[3] += d
+    state[4] += e
+  }
+
+  // Swap bytes for 32bits word
+  function swap32(b) {
+    return ((b & 0xff) << 24)
+            | ((b & 0xff00) << 8)
+            | ((b >> 8) & 0xff00)
+            | ((b >> 24) & 0xff)
+  }
+
+  // input is a Uint8Array bitstream of the data
+  return function (data) {
+    const d = new Uint8Array(buffer(data)), dlen = d.length
+
+    // Pad the input string length.
+    let len = dlen + 9
+    if (len % 64) {
+      len += 64 - (len % 64)
+    }
+
+    state = new Uint32Array(5)
+    state[0] = 0x67452301
+    state[1] = 0xefcdab89
+    state[2] = 0x98badcfe
+    state[3] = 0x10325476
+    state[4] = 0xc3d2e1f0
+
+    for (let ofs = 0; ofs < len; ofs += 64) {
+
+      // Copy input to block and write padding as needed
+      for (var i = 0; i < 64; i++) {
+        let b = 0,
+          o = ofs + i
+        if (o < dlen) {
+          b = d[o]
+        } else if (o === dlen) {
+          b = 0x80
+        } else {
+          // Write original bit length as a 64bit big-endian integer to the end.
+          const x = len - o - 1
+          if (x >= 0 && x < 4) {
+            b = (dlen << 3 >>> (x * 8)) & 0xff
+          }
+        }
+
+        // Interpret the input bytes as big-endian per the spec
+        if (i % 4 === 0) {
+          block[i >> 2] = b << 24
+        } else {
+          block[i >> 2] |= b << ((3 - (i % 4)) * 8)
+        }
+      }
+
+      // Extend the block
+      for (var i = 16; i < 80; i++) {
+        const w = block[i - 3] ^ block[i - 8] ^ block[i - 14] ^ block[i - 16]
+        block[i] = (w << 1) | (w >>> 31)
+      }
+
+      cycle(state, block)
+
+    }
+
+    // Swap the bytes around since they are big endian internally
+    for (var i = 0; i < 5; i++) {state[i] = swap32(state[i])}
+    return state.buffer
+  }
+
+} // </editor-fold>
+)()
+
+/**
+ * Algorithm name GOST R 34.11-HMAC<br><br>
+ *
+ * HMAC with the specified hash function.
+ * @memberOf GostDigest
+ * @method sign
+ * @instance
+ * @param {ArrayBuffer} key The key for HMAC.
+ * @param {Hash} data Data
+ */
+function signHMAC(key, data) // <editor-fold defaultstate="collapsed">
+{
+  // GOST R 34.11-94 - B=32b, L=32b
+  // GOST R 34.11-256 - B=64b, L=32b
+  // GOST R 34.11-512 - B=64b, L=64b
+  var b = (this.digest === digest94) ? 32 : 64,
+    l = this.bitLength / 8,
+    k = buffer(key),
+    d = buffer(data), k0
+  if (k.byteLength === b) {k0 = new Uint8Array(k)} else {
+    var k0 = new Uint8Array(b)
+    if (k.byteLength > b) {
+      k0.set(new Uint8Array(this.digest(k)))
+    } else {
+      k0.set(new Uint8Array(k))
+    }
+  }
+  const s0 = new Uint8Array(b + d.byteLength),
+    s1 = new Uint8Array(b + l)
+  for (let i = 0; i < b; i++) {
+    s0[i] = k0[i] ^ 0x36
+    s1[i] = k0[i] ^ 0x5C
+  }
+  s0.set(new Uint8Array(d), b)
+  s1.set(new Uint8Array(this.digest(s0)), b)
+  return this.digest(s1)
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.11-HMAC<br><br>
+ *
+ * Verify HMAC based on GOST R 34.11 hash
+ *
+ * @memberOf GostDigest
+ * @method verify
+ * @instance
+ * @param {(ArrayBuffer|TypedArray)} key Key which used for HMAC generation
+ * @param {(ArrayBuffer|TypedArray)} signature generated HMAC
+ * @param {(ArrayBuffer|TypedArray)} data Data
+ * @returns {boolean} HMAC verified = true
+ */
+function verifyHMAC(key, signature, data) // <editor-fold defaultstate="collapsed">
+{
+  const hmac = new Uint8Array(this.sign(key, data)),
+    test = new Uint8Array(signature)
+  if (hmac.length !== test.length) {return false}
+  for (let i = 0, n = hmac.length; i < n; i++) {
+    if (hmac[i] !== test[i]) {return false}
+  }
+  return true
+} // </editor-fold>
+
+
+/**
+ * Algorithm name GOST R 34.11-KDF<br><br>
+ *
+ * Simple generate key 256/512 bit random seed for derivation algorithms
+ *
+ * @memberOf GostDigest
+ * @method generateKey
+ * @instance
+ * @returns {ArrayBuffer} Generated key
+ */
+function generateKey() // <editor-fold defaultstate="collapsed">
+{
+  return getSeed(this.bitLength).buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.11-PFXKDF<br><br>
+ *
+ * Derive bits from password (PKCS12 mode)
+ *  <ul>
+ *      <li>algorithm.salt - random value, salt</li>
+ *      <li>algorithm.iterations - number of iterations</li>
+ *  </ul>
+ * @memberOf GostDigest
+ * @method deriveBits
+ * @instance
+ * @param {ArrayBuffer} baseKey - password after UTF-8 decoding
+ * @param {number} length output bit-length
+ * @returns {ArrayBuffer} result
+ */
+function deriveBitsPFXKDF(baseKey, length) // <editor-fold defaultstate="collapsed">
+{
+  if (length % 8 > 0) {throw new DataError('Length must multiple of 8')}
+  const u = this.bitLength / 8, v = (this.digest === digest94) ? 32 : 64,
+    n = length / 8, r = this.iterations
+    //   1.  Construct a string, D (the "diversifier"), by concatenating v/8
+    //       copies of ID.
+  const ID = this.diversifier, D = new Uint8Array(v)
+  for (var i = 0; i < v; i++) {D[i] = ID}
+  //   2.  Concatenate copies of the salt together to create a string S of
+  //       length v(ceiling(s/v)) bits (the final copy of the salt may be
+  //       truncated to create S).  Note that if the salt is the empty
+  //       string, then so is S.
+  const S0 = new Uint8Array(buffer(this.salt)), s = S0.length,
+    slen = v * Math.ceil(s / v), S = new Uint8Array(slen)
+  for (var i = 0; i < slen; i++) {S[i] = S0[i % s]}
+  //   3.  Concatenate copies of the password together to create a string P
+  //       of length v(ceiling(p/v)) bits (the final copy of the password
+  //       may be truncated to create P).  Note that if the password is the
+  //       empty string, then so is P.
+  const P0 = new Uint8Array(buffer(baseKey)), p = P0.length,
+    plen = v * Math.ceil(p / v), P = new Uint8Array(plen)
+  for (var i = 0; i < plen; i++) {P[i] = P0[i % p]}
+  //   4.  Set I=S||P to be the concatenation of S and P.
+  const I = new Uint8Array(slen + plen)
+  arraycopy(S, 0, I, 0, slen)
+  arraycopy(P, 0, I, slen, plen)
+  //   5.  Set c=ceiling(n/u).
+  const c = Math.ceil(n / u)
+  //   6.  For i=1, 2, ..., c, do the following:
+  const A = new Uint8Array(c * u)
+  for (var i = 0; i < c; i++) {
+    //  A.  Set A2=H^r(D||I). (i.e., the r-th hash of D||1,
+    //      H(H(H(... H(D||I))))
+    let H = new Uint8Array(v + slen + plen)
+    arraycopy(D, 0, H, 0, v)
+    arraycopy(I, 0, H, v, slen + plen)
+    for (var j = 0; j < r; j++) {H = new Uint8Array(this.digest(H))}
+    arraycopy(H, 0, A, i * u, u)
+    //  B.  Concatenate copies of Ai to create a string B of length v
+    //      bits (the final copy of Ai may be truncated to create B).
+    const B = new Uint8Array(v)
+    for (var j = 0; j < v; j++) {B[j] = H[j % u]}
+    //  C.  Treating I as a concatenation I_0, I_1, ..., I_(k-1) of v-bit
+    //      blocks, where k=ceiling(s/v)+ceiling(p/v), modify I by
+    //      setting I_j=(I_j+B+1) mod 2^v for each j.
+    const k = (slen + plen) / v
+    for (j = 0; j < k; j++) {
+      var cf = 1, w
+      for (let l = v - 1; l >= 0; --l) {
+        w = I[v * j + l] + B[l] + cf
+        cf = w >>> 8
+        I[v * j + l] = w & 0xff
+      }
+    }
+  }
+  //   7.  Concatenate A_1, A_2, ..., A_c together to form a pseudorandom
+  //       bit string, A.
+  //   8.  Use the first n bits of A as the output of this entire process.
+  const R = new Uint8Array(n)
+  arraycopy(A, 0, R, 0, n)
+  return R.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.11-KDF<br><br>
+ *
+ * Derive bits for KEK deversification in 34.10-2012 algorithm
+ * KDF(KEK, UKM, label) = HMAC256 (KEK,  0x01|label|0x00|UKM|0x01|0x00)
+ * Default label = 0x26|0xBD|0xB8|0x78
+ *
+ * @memberOf GostDigest
+ * @method deriveBits
+ * @instance
+ * @param {(ArrayBuffer|TypedArray)} baseKey base key for deriviation
+ * @param {number} length output bit-length
+ * @returns {ArrayBuffer} result
+ */
+function deriveBitsKDF(baseKey, length) // <editor-fold defaultstate="collapsed">
+{
+  if (length % 8 > 0) {throw new DataError('Length must be multiple of 8')}
+  let rlen = length / 8, label, context = new Uint8Array(buffer(this.context)),
+    blen = this.bitLength / 8, n = Math.ceil(rlen / blen)
+  if (this.label) {label = new Uint8Array(buffer(this.label))} else {label = new Uint8Array([0x26, 0xBD, 0xB8, 0x78])}
+  const result = new Uint8Array(rlen)
+  for (let i = 0; i < n; i++) {
+    const data = new Uint8Array(label.length + context.length + 4)
+    data[0] = i + 1
+    data.set(label, 1)
+    data[label.length + 1] = 0x00
+    data.set(context, label.length + 2)
+    data[data.length - 2] = length >>> 8
+    data[data.length - 1] = length & 0xff
+    result.set(new Uint8Array(signHMAC.call(this, baseKey, data), 0,
+      i < n - 1 ? blen : rlen - i * blen), i * blen)
+  }
+  return result.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.11-PBKDF1<br><br>
+ *
+ * Derive bits from password
+ *  <ul>
+ *      <li>algorithm.salt - random value, salt</li>
+ *      <li>algorithm.iterations - number of iterations</li>
+ *  </ul>
+ * @memberOf GostDigest
+ * @method deriveBits
+ * @instance
+ * @param {ArrayBuffer} baseKey - password after UTF-8 decoding
+ * @param {number} length output bit-length
+ * @returns {ArrayBuffer} result
+ */
+function deriveBitsPBKDF1(baseKey, length) // <editor-fold defaultstate="collapsed">
+{
+  if (length < this.bitLength / 2 || length % 8 > 0) {throw new DataError(`Length must be more than ${ this.bitLength / 2 } bits and multiple of 8`)}
+  let hLen = this.bitLength / 8, dkLen = length / 8,
+    c = this.iterations,
+    P = new Uint8Array(buffer(baseKey)),
+    S = new Uint8Array(buffer(this.salt)),
+    slen = S.length, plen = P.length,
+    T = new Uint8Array(plen + slen),
+    DK = new Uint8Array(dkLen)
+  if (dkLen > hLen) {throw new DataError('Invalid parameters: Length value')}
+  arraycopy(P, 0, T, 0, plen)
+  arraycopy(S, 0, T, plen, slen)
+  for (let i = 0; i < c; i++) {T = new Uint8Array(this.digest(T))}
+  arraycopy(T, 0, DK, 0, dkLen)
+  return DK.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.11-PBKDF2<br><br>
+ *
+ * Derive bits from password
+ *  <ul>
+ *      <li>algorithm.salt - random value, salt</li>
+ *      <li>algorithm.iterations - number of iterations</li>
+ *  </ul>
+ * @memberOf GostDigest
+ * @method deriveBits
+ * @instance
+ * @param {ArrayBuffer} baseKey - password after UTF-8 decoding
+ * @param {number} length output bit-length
+ * @returns {ArrayBuffer} result
+ */
+function deriveBitsPBKDF2(baseKey, length) // <editor-fold defaultstate="collapsed">
+{
+  const diversifier = this.diversifier || 1 // For PKCS12 MAC required 3*length
+  length = length * diversifier
+  if (length < this.bitLength / 2 || length % 8 > 0) {throw new DataError(`Length must be more than ${ this.bitLength / 2 } bits and multiple of 8`)}
+  const hLen = this.bitLength / 8, dkLen = length / 8,
+    c = this.iterations,
+    P = new Uint8Array(buffer(baseKey)),
+    S = new Uint8Array(buffer(this.salt))
+  const slen = S.byteLength,
+    data = new Uint8Array(slen + 4)
+  arraycopy(S, 0, data, 0, slen)
+
+  if (dkLen > (0xffffffff - 1) * 32) {throw new DataError('Invalid parameters: Length value')}
+  const n = Math.ceil(dkLen / hLen),
+    DK = new Uint8Array(dkLen)
+  for (let i = 1; i <= n; i++) {
+    data[slen] = i >>> 24 & 0xff
+    data[slen + 1] = i >>> 16 & 0xff
+    data[slen + 2] = i >>> 8 & 0xff
+    data[slen + 3] = i & 0xff
+
+    let U = new Uint8Array(signHMAC.call(this, P, data)), Z = U
+    for (let j = 1; j < c; j++) {
+      U = new Uint8Array(signHMAC.call(this, P, U))
+      for (let k = 0; k < hLen; k++) {Z[k] = U[k] ^ Z[k]}
+    }
+    const ofs = (i - 1) * hLen
+    arraycopy(Z, 0, DK, ofs, Math.min(hLen, dkLen - ofs))
+  }
+  if (diversifier > 1) {
+    const rLen = dkLen / diversifier, R = new Uint8Array(rLen)
+    arraycopy(DK, dkLen - rLen, R, 0, rLen)
+    return R.buffer
+  } return DK.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.11-CPKDF<br><br>
+ *
+ * Derive bits from password. CryptoPro algorithm
+ *  <ul>
+ *      <li>algorithm.salt - random value, salt</li>
+ *      <li>algorithm.iterations - number of iterations</li>
+ *  </ul>
+ * @memberOf GostDigest
+ * @method deriveBits
+ * @instance
+ * @param {ArrayBuffer} baseKey - password after UTF-8 decoding
+ * @param {number} length output bit-length
+ * @returns {ArrayBuffer} result
+ */
+function deriveBitsCP(baseKey, length) {
+  if (length > this.bitLength || length % 8 > 0) {throw new DataError(`Length can't be more than ${ this.bitLength } bits and multiple of 8`)}
+  // GOST R 34.11-94 - B=32b, L=32b
+  // GOST R 34.11-256 - B=64b, L=32b
+  // GOST R 34.11-512 - B=64b, L=64b
+  let b = (this.digest === digest94) ? 32 : 64,
+    l = this.bitLength / 8,
+    p = baseKey && baseKey.byteLength > 0 ? new Uint8Array(buffer(baseKey)) : false,
+    plen = p ? p.length : 0,
+    iterations = this.iterations,
+    salt = new Uint8Array(buffer(this.salt)),
+    slen = salt.length,
+    d = new Uint8Array(slen + plen)
+  arraycopy(salt, 0, d, 0, slen)
+  if (p) {arraycopy(p, 0, d, slen, plen)}
+
+  let h = new Uint8Array(this.digest(d)),
+    k = new Uint8Array(b),
+    s0 = new Uint8Array(b),
+    s1 = new Uint8Array(b)
+  const c = 'DENEFH028.760246785.IUEFHWUIO.EF'
+  for (var i = 0; i < c.length; i++) {k[i] = c.charCodeAt(i)}
+
+  d = new Uint8Array(2 * (b + l))
+  for (let j = 0; j < iterations; j++) {
+    for (var i = 0; i < b; i++) {
+      s0[i] = k[i] ^ 0x36
+      s1[i] = k[i] ^ 0x5C
+      k[i] = 0
+    }
+    arraycopy(s0, 0, d, 0, b)
+    arraycopy(h, 0, d, b, l)
+    arraycopy(s1, 0, d, b + l, b)
+    arraycopy(h, 0, d, b + l + b, l)
+    arraycopy(new Uint8Array(this.digest(d)), 0, k, 0, l)
+  }
+  for (var i = 0; i < l; i++) {
+    s0[i] = k[i] ^ 0x36
+    s1[i] = k[i] ^ 0x5C
+    k[i] = 0
+  }
+  d = new Uint8Array(2 * l + slen + plen)
+  arraycopy(s0, 0, d, 0, l)
+  arraycopy(salt, 0, d, l, slen)
+  arraycopy(s1, 0, d, l + slen, l)
+  if (p) {arraycopy(p, 0, d, l + slen + l, plen)}
+  h = this.digest(this.digest(d))
+  if (length === this.bitLength) {return h}
+
+  const rlen = length / 8, r = new Uint8Array(rlen)
+  arraycopy(h, 0, r, 0, rlen)
+  return r.buffer
+
+}
+
+/**
+ * Algorithm name GOST R 34.11-KDF or GOST R 34.11-PBKDF2 or other<br><br>
+ *
+ * Derive key from derive bits subset
+ *
+ * @memberOf GostDigest
+ * @method deriveKey
+ * @instance
+ * @param {ArrayBuffer} baseKey
+ * @returns {ArrayBuffer}
+ */
+function deriveKey(baseKey) // <editor-fold defaultstate="collapsed">
+{
+  return this.deriveBits(baseKey, this.keySize * 8)
+} // </editor-fold>
+
+/**
+ * GOST R 34.11 Algorithm<br><br>
+ *
+ * References: {@link http://tools.ietf.org/html/rfc6986} and {@link http://tools.ietf.org/html/rfc5831}<br><br>
+ *
+ * Normalized algorithm identifier common parameters:
+ *
+ *  <ul>
+ *      <li><b>name</b> Algorithm name 'GOST R 34.11'</li>
+ *      <li><b>version</b> Algorithm version
+ *          <ul>
+ *              <li><b>1994</b> old-style 256 bits digest based on GOST 28147-89</li>
+ *              <li><b>2012</b> 256 ro 512 bits digest algorithm "Streebog" GOST R 34.11-2012 (default)</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>length</b> Digest length
+ *          <ul>
+ *              <li><b>256</b> 256 bits digest</li>
+ *              <li><b>512</b> 512 bits digest, valid only for algorithm "Streebog"</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>mode</b> Algorithm mode
+ *          <ul>
+ *              <li><b>HASH</b> simple digest mode (default)</li>
+ *              <li><b>HMAC</b> HMAC algorithm based on GOST R 34.11</li>
+ *              <li><b>KDF</b> Derive bits for KEK deversification</li>
+ *              <li><b>PBKDF2</b> Password based key dirivation algorithms PBKDF2 (based on HMAC)</li>
+ *              <li><b>PFXKDF</b> Password based PFX key dirivation algorithms</li>
+ *              <li><b>CPKDF</b> CpyptoPro Password based key dirivation algorithms</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>sBox</b> Paramset sBox for GOST 28147-89. Used only if version = 1994</li>
+ *  </ul>
+ *
+ * Supported algorithms, modes and parameters:
+ *
+ *  <ul>
+ *      <li>Digest HASH mode (default)</li>
+ *      <li>Sign/Verify HMAC modes parameters depends on version and length
+ *          <ul>
+ *              <li><b>version: 1994</b> HMAC parameters (B = 32, L = 32)</li>
+ *              <li><b>version: 2012, length: 256</b> HMAC parameters (B = 64, L = 32)</li>
+ *              <li><b>version: 2012, length: 512</b> HMAC parameters  (B = 64, L = 64)</li>
+ *          </ul>
+ *      </li>
+ *      <li>DeriveBits/DeriveKey KDF mode
+ *          <ul>
+ *              <li><b>context</b> {@link CryptoOperationData} Context of the key derivation</li>
+ *              <li><b>label</b> {@link CryptoOperationData} Label that identifies the purpose for the derived keying material</li>
+ *          </ul>
+ *      </li>
+ *      <li>DeriveBits/DeriveKey PBKDF2 mode
+ *          <ul>
+ *              <li><b>salt</b> {@link CryptoOperationData} Random salt as input for HMAC algorithm</li>
+ *              <li><b>iterations</b> Iteration count. GOST recomended value 1000 (default) or 2000</li>
+ *              <li><b>diversifier</b> Deversifier, ID=1 - key material for performing encryption or decryption, ID=3 - integrity key for MACing</li>
+ *          </ul>
+ *      </li>
+ *      <li>DeriveBits/DeriveKey PFXKDF mode
+ *          <ul>
+ *              <li><b>salt</b> {@link CryptoOperationData} Random salt as input for HMAC algorithm</li>
+ *              <li><b>iterations</b> Iteration count. GOST recomended value 1000 (default) or 2000</li>
+ *              <li><b>diversifier</b> Deversifier, ID=1 - key material for performing encryption or decryption,
+ *              ID=2 - IV (Initial Value) for encryption or decryption, ID=3 - integrity key for MACing</li>
+ *          </ul>
+ *      </li>
+ *      <li>DeriveBits/DeriveKey CPKDF mode
+ *          <ul>
+ *              <li><b>salt</b> {@link CryptoOperationData} Random salt as input for HMAC algorithm</li>
+ *              <li><b>iterations</b> Iteration count. GOST recomended value 1000 (default) or 2000</li>
+ *          </ul>
+ *      </li>
+ *  </ul>
+ *
+ * @class GostDigest
+ * @param {AlgorithmIdentifier} algorithm WebCryptoAPI algorithm identifier
+ */
+function GostDigest(algorithm) // <editor-fold defaultstate="collapsed">
+{
+
+  algorithm = algorithm || {}
+
+  this.name = `${algorithm.name || 'GOST R 34.10' }-${ (algorithm.version || 2012) % 100
+  }${(algorithm.version || 2012) > 1 ? `-${ algorithm.length || 256}` : ''
+  }${((algorithm.mode || 'HASH') !== 'HASH') ? `-${ algorithm.mode}` : ''
+  }${algorithm.procreator ? `/${ algorithm.procreator}` : ''
+  }${typeof algorithm.sBox === 'string' ? `/${ algorithm.sBox}` : ''}`
+
+  // Algorithm procreator
+  this.procreator = algorithm.procreator
+
+  // Bit length
+  this.bitLength = algorithm.length || 256
+
+  switch (algorithm.version || 2012) {
+    case 1: // SHA-1
+      this.digest = digestSHA1
+      this.bitLength = 160
+      break
+    case 1994:
+      this.digest = digest94
+      // Define chiper algorithm
+      this.sBox = (algorithm.sBox || (algorithm.procreator === 'SC' ? 'D-SC' : 'D-A')).toUpperCase()
+
+      if (!GostCipher) {GostCipher = global.GostCipher}
+      if (!GostCipher) {throw new NotSupportedError('Object GostCipher not found')}
+
+      this.cipher = new GostCipher({
+        name: 'GOST 28147',
+        block: 'ECB',
+        sBox: this.sBox,
+        procreator: this.procreator,
+      })
+
+      break
+    case 2012:
+      this.digest = digest2012
+      break
+    default:
+      throw new NotSupportedError(`Algorithm version ${ algorithm.version } not supported`)
+  }
+
+  // Key size
+  this.keySize = algorithm.keySize || (algorithm.version <= 2 ? this.bitLength / 8 : 32)
+
+  switch (algorithm.mode || 'HASH') {
+    case 'HASH':
+      break
+    case 'HMAC':
+      this.sign = signHMAC
+      this.verify = verifyHMAC
+      this.generateKey = generateKey
+      break
+    case 'KDF':
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsKDF
+      this.label = algorithm.label
+      this.context = algorithm.context
+      break
+    case 'PBKDF2':
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsPBKDF2
+      this.generateKey = generateKey
+      this.salt = algorithm.salt
+      this.iterations = algorithm.iterations || 2000
+      this.diversifier = algorithm.diversifier || 1
+      break
+    case 'PFXKDF':
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsPFXKDF
+      this.generateKey = generateKey
+      this.salt = algorithm.salt
+      this.iterations = algorithm.iterations || 2000
+      this.diversifier = algorithm.diversifier || 1
+      break
+    case 'CPKDF':
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsCP
+      this.generateKey = generateKey
+      this.salt = algorithm.salt
+      this.iterations = algorithm.iterations || 2000
+      break
+    default:
+      throw new NotSupportedError(`Algorithm mode ${ algorithm.mode } not supported`)
+  }
+} // </editor-fold>
+
+module.exports = GostDigest
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostEngine.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostEngine.js
new file mode 100644
index 0000000..3627648
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostEngine.js
@@ -0,0 +1,406 @@
+/**
+ * @file GOST 34.10-2012 signature function with 1024/512 bits digest
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const GostRandom = require('./gostRandom')
+const GostCipher = require('./gostCipher')
+const GostDigest = require('./gostDigest')
+const GostSign = require('./gostSign')
+
+
+/*
+ * Engine definition base on normalized algorithm identifier
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+
+// Define engine
+function defineEngine(method, algorithm) {
+  if (!algorithm) {throw new (global.SyntaxError || Error)('Algorithm not defined')}
+
+  if (!algorithm.name) {throw new (global.SyntaxError || Error)('Algorithm name not defined')}
+
+  const name = algorithm.name, mode = algorithm.mode
+  if ((name === 'GOST 28147' || name === 'GOST R 34.12' || name === 'RC2') && (method === 'generateKey' ||
+        (mode === 'MAC' && (method === 'sign' || method === 'verify')) ||
+        ((mode === 'KW' || mode === 'MASK') && (method === 'wrapKey' || method === 'unwrapKey')) ||
+        ((!mode || mode === 'ES') && (method === 'encrypt' || method === 'decrypt')))) {
+    return 'GostCipher'
+
+  } if ((name === 'GOST R 34.11' || name === 'SHA') && (method === 'digest' ||
+        (mode === 'HMAC' && (method === 'sign' || method === 'verify' || method === 'generateKey')) ||
+        ((mode === 'KDF' || mode === 'PBKDF2' || mode === 'PFXKDF' || mode === 'CPKDF') &&
+            (method === 'deriveKey' || method === 'deriveBits' || method === 'generateKey')))) {
+    return 'GostDigest'
+
+  } if (name === 'GOST R 34.10' && (method === 'generateKey' ||
+        ((!mode || mode === 'SIGN') && (method === 'sign' || method === 'verify')) ||
+        (mode === 'MASK' && (method === 'wrapKey' || method === 'unwrapKey')) ||
+        (mode === 'DH' && (method === 'deriveKey' || method === 'deriveBits')))) {
+    return 'GostSign'
+  } throw new (global.NotSupportedError || Error)(`Algorithm ${ name }-${ mode } is not valid for ${ method}`)
+} // </editor-fold>
+
+/**
+ * Object implements dedicated Web Workers and provide a simple way to create
+ * and run GOST cryptographic algorithms in background thread.
+ *
+ * Object provide interface to GOST low-level cryptogric classes:
+ *  <ul>
+ *      <li>GostCipher - implementation of GOST 28147, GOST R 34.12, GOST R 34.13 Encryption algorithms. Reference {@link http://tools.ietf.org/html/rfc5830}</li>
+ *      <li>GostDigest - implementation of GOST R 34.11 Hash Function algorithms. References {@link http://tools.ietf.org/html/rfc5831} and {@link http://tools.ietf.org/html/rfc6986}</li>
+ *      <li>GostSign - implementation of GOST R 34.10 Digital Signature algorithms. References {@link http://tools.ietf.org/html/rfc5832} and {@link http://tools.ietf.org/html/rfc7091}</li>
+ *  </ul>
+ * @namespace gostEngine
+ */
+const gostEngine = {
+  /**
+     * gostEngine.execute(algorithm, method, args) Entry point to execution
+     * all low-level GOST cryptographic methods
+     *
+     *  <ul>
+     *      <li>Determine the appropriate engine for a given execution method</li>
+     *      <li>Create cipher object for determineted engine</li>
+     *      <li>Execute method of cipher with given args</li>
+     *  </ul>
+     *
+     * @memberOf gostEngine
+     * @param {AlgorithmIndentifier} algorithm Algorithm identifier
+     * @param {string} method Crypto method for execution
+     * @param {Array} args Method arguments (keys, data, additional parameters)
+     * @returns {(CryptoOperationData|Key|KeyPair|boolean)} Result of method execution
+     */
+  execute: function (algorithm, method, args) // <editor-fold defaultstate="collapsed">
+  {
+    // Define engine for GOST algorithms
+    const engine = defineEngine(method, algorithm)
+    // Create cipher
+    const cipher = this[`get${ engine}`](algorithm)
+    // Execute method
+    return cipher[method].apply(cipher, args)
+  }, // </editor-fold>
+  /**
+     * gostEngine.getGostCipher(algorithm) returns GOST 28147 / GOST R 34.12 cipher instance<br><br>
+     *
+     * GOST 28147-89 / GOST R 34.12-15 Encryption Algorithm<br><br>
+     * When keys and initialization vectors are converted to/from byte arrays,
+     * little-endian byte order is assumed.<br><br>
+     *
+     * Normalized algorithm identifier common parameters:
+     *
+     *  <ul>
+     *      <li><b>name</b> Algorithm name 'GOST 28147' or 'GOST R 34.12'</li>
+     *      <li><b>version</b> Algorithm version, number
+     *          <ul>
+     *              <li><b>1989</b> Current version of standard</li>
+     *              <li><b>2015</b> New draft version of standard</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>length</b> Block length
+     *          <ul>
+     *              <li><b>64</b> 64 bits length (default)</li>
+     *              <li><b>128</b> 128 bits length (only for version 2015)</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>mode</b> Algorithm mode, string
+     *          <ul>
+     *              <li><b>ES</b> Encryption mode (default)</li>
+     *              <li><b>MAC</b> "imitovstavka" (MAC) mode</li>
+     *              <li><b>KW</b> Key wrapping mode</li>
+     *              <li><b>MASK</b> Key mask mode</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>sBox</b> Paramset sBox for GOST 28147-89, string. Used only if version = 1989</li>
+     *  </ul>
+     *
+     * Supported algorithms, modes and parameters:
+     *
+     *  <ul>
+     *      <li>Encript/Decrypt mode (ES)
+     *          <ul>
+     *              <li><b>block</b> Block mode, string. Default ECB</li>
+     *              <li><b>keyMeshing</b> Key meshing mode, string. Default NO</li>
+     *              <li><b>padding</b> Padding mode, string. Default NO for CFB and CTR modes, or ZERO for others</li>
+     *              <li><b>iv</b> {@link CryptoOperationData} Initial vector with length of block. Default - zero block</li>
+     *          </ul>
+     *      </li>
+     *      <li>Sign/Verify mode (MAC)
+     *          <ul>
+     *              <li><b>macLength</b> Length of mac in bits (default - 32 bits)</li>
+     *              <li><b>iv</b> {@link CryptoOperationData} Initial vector with length of block. Default - zero block</li>
+     *          </ul>
+     *      </li>
+     *      <li>Wrap/Unwrap key mode (KW)
+     *          <ul>
+     *              <li><b>keyWrapping</b> Mode of keywrapping, string. Default NO - standard GOST key wrapping</li>
+     *              <li><b>ukm</b> {@link CryptoOperationData} User key material. Default - random generated value</li>
+     *          </ul>
+     *      </li>
+     *      <li>Wrap/Unwrap key mode (MASK)</li>
+     *  </ul>
+     *
+     * Supported paramters values:
+     *
+     *  <ul>
+     *      <li>Block modes (parameter 'block')
+     *          <ul>
+     *              <li><b>ECB</b> "prostaya zamena" (ECB) mode (default)</li>
+     *              <li><b>CFB</b> "gammirovanie s obratnoj svyaziyu" (64-bit CFB) mode</li>
+     *              <li><b>CTR</b> "gammirovanie" (counter) mode</li>
+     *              <li><b>CBC</b> Cipher-Block-Chaining (CBC) mode</li>
+     *          </ul>
+     *      </li>
+     *      <li>Key meshing modes (parameter 'keyMeshing')
+     *          <ul>
+     *              <li><b>NO</b> No key wrapping (default)</li>
+     *              <li><b>CP</b> CryptoPor Key key meshing</li>
+     *          </ul>
+     *      </li>
+     *      <li>Padding modes (parameter 'padding')
+     *          <ul>
+     *              <li><b>NO</b> No padding only for CFB and CTR modes</li>
+     *              <li><b>PKCS5</b> PKCS#5 padding mode</li>
+     *              <li><b>ZERO</b> Zero bits padding mode</li>
+     *              <li><b>RANDOM</b> Random bits padding mode</li>
+     *          </ul>
+     *      </li>
+     *      <li>Wrapping key modes (parameter 'keyWrapping')
+     *          <ul>
+     *              <li><b>NO</b> Ref. rfc4357 6.1 GOST 28147-89 Key wrapping</li>
+     *              <li><b>CP</b> CryptoPro Key wrapping mode</li>
+     *              <li><b>SC</b> SignalCom Key wrapping mode</li>
+     *          </ul>
+     *      </li>
+     *  </ul>
+     *
+     * @memberOf gostEngine
+     * @param {AlgorithmIndentifier} algorithm Algorithm identifier
+     * @returns {GostCipher} Instance of GostCipher
+     */
+  getGostCipher: function (algorithm) // <editor-fold defaultstate="collapsed">
+  {
+    return new (GostCipher || (GostCipher = global.GostCipher))(algorithm)
+  }, // </editor-fold>
+  /**
+     * gostEngine.getGostDigest(algorithm) returns GOST R 34.11 cipher instance<br><br>
+     *
+     * Normalized algorithm identifier common parameters:
+     *
+     *  <ul>
+     *      <li><b>name</b> Algorithm name 'GOST R 34.11'</li>
+     *      <li><b>version</b> Algorithm version
+     *          <ul>
+     *              <li><b>1994</b> old-style 256 bits digest based on GOST 28147-89</li>
+     *              <li><b>2012</b> 256 ro 512 bits digest algorithm "Streebog" GOST R 34.11-2012 (default)</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>length</b> Digest length
+     *          <ul>
+     *              <li><b>256</b> 256 bits digest</li>
+     *              <li><b>512</b> 512 bits digest, valid only for algorithm "Streebog"</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>mode</b> Algorithm mode
+     *          <ul>
+     *              <li><b>HASH</b> simple digest mode (default)</li>
+     *              <li><b>HMAC</b> HMAC algorithm based on GOST R 34.11</li>
+     *              <li><b>KDF</b> Derive bits for KEK deversification</li>
+     *              <li><b>PBKDF2</b> Password based key dirivation algorithms PBKDF2 (based on HMAC)</li>
+     *              <li><b>PFXKDF</b> PFX key dirivation algorithms PFXKDF</li>
+     *              <li><b>CPKDF</b> CryptoPro Password based key dirivation algorithms</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>sBox</b> Paramset sBox for GOST 28147-89. Used only if version = 1994</li>
+     *  </ul>
+     *
+     * Supported algorithms, modes and parameters:
+     *
+     *  <ul>
+     *      <li>Digest HASH mode (default)</li>
+     *      <li>Sign/Verify HMAC modes parameters depends on version and length
+     *          <ul>
+     *              <li><b>version: 1994</b> HMAC parameters (B = 32, L = 32)</li>
+     *              <li><b>version: 2012, length: 256</b> HMAC parameters (B = 64, L = 32)</li>
+     *              <li><b>version: 2012, length: 512</b> HMAC parameters  (B = 64, L = 64)</li>
+     *          </ul>
+     *      </li>
+     *      <li>DeriveBits/DeriveKey KDF mode
+     *          <ul>
+     *              <li><b>context</b> {@link CryptoOperationData} Context of the key derivation</li>
+     *              <li><b>label</b> {@link CryptoOperationData} Label that identifies the purpose for the derived keying material</li>
+     *          </ul>
+     *      </li>
+     *      <li>DeriveBits/DeriveKey PBKDF2 mode
+     *          <ul>
+     *              <li><b>salt</b> {@link CryptoOperationData} Random salt as input for HMAC algorithm</li>
+     *              <li><b>iterations</b> Iteration count. GOST recomended value 1000 (default) or 2000</li>
+     *          </ul>
+     *      </li>
+     *      <li>DeriveBits/DeriveKey PFXKDF mode
+     *          <ul>
+     *              <li><b>salt</b> {@link CryptoOperationData} Random salt as input for HMAC algorithm</li>
+     *              <li><b>iterations</b> Iteration count. GOST recomended value 1000 (default) or 2000</li>
+     *              <li><b>diversifier</b> Deversifier, ID=1 - key material for performing encryption or decryption,
+     *              ID=2 - IV (Initial Value) for encryption or decryption, ID=3 - integrity key for MACing</li>
+     *          </ul>
+     *      </li>
+     *      <li>DeriveBits/DeriveKey CPKDF mode
+     *          <ul>
+     *              <li><b>salt</b> {@link CryptoOperationData} Random salt as input for HMAC algorithm</li>
+     *              <li><b>iterations</b> Iteration count. GOST recomended value 1000 (default) or 2000</li>
+     *          </ul>
+     *      </li>
+     *  </ul>
+     *
+     * @memberOf gostEngine
+     * @param {AlgorithmIndentifier} algorithm Algorithm identifier
+     * @returns {GostDigest} Instance of GostDigest
+     */
+  getGostDigest: function (algorithm) // <editor-fold defaultstate="collapsed">
+  {
+    return new (GostDigest || (GostDigest = global.GostDigest))(algorithm)
+  }, // </editor-fold>
+  /**
+     * gostEngine.getGostSign(algorithm) returns GOST R 34.10 cipher instance<br><br>
+     *
+     * Normalized algorithm identifier common parameters:
+     *
+     *  <ul>
+     *      <li><b>name</b> Algorithm name 'GOST R 34.10'</li>
+     *      <li><b>version</b> Algorithm version
+     *          <ul>
+     *              <li><b>1994</b> - Old-style GOST R 34.10-94 ExpMod algorithm with GOST R 34.11-94 hash</li>
+     *              <li><b>2001</b> - GOST R 34.10-2001 Eliptic curve algorithm with old GOST R 34.11-94 hash</li>
+     *              <li><b>2012</b> - GOST R 34.10-2012 Eliptic curve algorithm with GOST R 34.11-12 hash, default mode</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>length</b> Length of hash and signature. Key length == hash length for EC algorithms and 2 * hash length for ExpMod algorithm
+     *          <ul>
+     *              <li><b>GOST R 34.10-256</b> - 256 bits digest, default mode</li>
+     *              <li><b>GOST R 34.10-512</b> - 512 bits digest only for GOST R 34.11-2012 hash</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>mode</b> Algorithm mode
+     *          <ul>
+     *              <li><b>SIGN</b> Digital signature mode (default)</li>
+     *              <li><b>DH</b> Diffie-Hellman key generation and key agreement mode</li>
+     *              <li><b>MASK</b> Key mask mode</li>
+     *          </ul>
+     *      </li>
+     *      <li><b>sBox</b> Paramset sBox for GOST 34.11-94. Used only if version = 1994 or 2001</li>
+     *  </ul>
+     *
+     * Supported algorithms, modes and parameters:
+     *
+     *  <ul>
+     *      <li>Sign/Verify mode (SIGN)</li>
+     *      <li>Wrap/Unwrap mode (MASK)</li>
+     *      <li>DeriveKey/DeriveBits mode (DH)
+     *          <ul>
+     *              <li>{@link CryptoOperationData} <b>ukm</b> User key material. Default - random generated value</li>
+     *              <li>{@link CryptoOperationData} <b>public</b> The peer's EC public key data</li>
+     *          </ul>
+     *      </li>
+     *      <li>GenerateKey mode (SIGN and DH and MASK) version = 1994
+     *          <ul>
+     *              <li><b>namedParam</b> Paramset for key generation algorithm. If specified no additianal parameters required</li>
+     *          </ul>
+     *          Additional parameters, if namedParam not specified
+     *          <ul>
+     *              <li><b>modulusLength</b> Bit length of p (512 or 1024 bits). Default = 1024</li>
+     *              <li><b>p</b> {@link CryptoOperationData} Modulus, prime number, 2^(t-1)<p<2^t</li>
+     *              <li><b>q</b> {@link CryptoOperationData} Order of cyclic group, prime number, 2^254<q<2^256, q is a factor of p-1</li>
+     *              <li><b>a</b> {@link CryptoOperationData} Generator, integer, 1<a<p-1, at that aq (mod p) = 1</li>
+     *          </ul>
+     *      </li>
+     *      <li>GenerateKey mode (SIGN and DH and MASK) version = 2001 or 2012
+     *          <ul>
+     *              <li><b>namedCurve</b> Paramset for key generation algorithm. If specified no additianal parameters required</li>
+     *          </ul>
+     *          Additional EC parameters, if namedCurve not specified
+     *          <ul>
+     *              <li><b>p</b> {@link CryptoOperationData} Prime number - elliptic curve modulus</li>
+     *              <li><b>a</b> {@link CryptoOperationData} Coefficients a of the elliptic curve E</li>
+     *              <li><b>b</b> {@link CryptoOperationData} Coefficients b of the elliptic curve E</li>
+     *              <li><b>q</b> {@link CryptoOperationData} Prime number - order of cyclic group</li>
+     *              <li><b>x</b> {@link CryptoOperationData} Base point p x-coordinate</li>
+     *              <li><b>y</b> {@link CryptoOperationData} Base point p y-coordinate</li>
+     *          </ul>
+     *      </li>
+     *  </ul>
+     *
+     * @memberOf gostEngine
+     * @param {AlgorithmIndentifier} algorithm Algorithm identifier
+     * @returns {GostSign} Instance of GostSign
+     */
+  getGostSign: function (algorithm) // <editor-fold defaultstate="collapsed">
+  {
+    return new (GostSign || (GostSign = global.GostSign))(algorithm)
+  }, // </editor-fold>
+}
+
+/*
+ * Worker method execution
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// Worker for gostCripto method execution
+// if (global.importScripts) {
+
+/**
+     * Method called when {@link SubtleCrypto} calls its own postMessage()
+     * method with data parameter: algorithm, method and arg.<br>
+     * Call method execute and postMessage() results to onmessage event handler
+     * in the main process.<br>
+     * If error occured onerror event handler executed in main process.
+     *
+     * @memberOf gostEngine
+     * @name onmessage
+     * @param {MessageEvent} event Message event with data {algorithm, method, args}
+     */
+global.onmessage = function (event) {
+  try {
+    postMessage({
+      id: event.data.id,
+      result: gostEngine.execute(event.data.algorithm,
+        event.data.method, event.data.args),
+    })
+  } catch (e) {
+    postMessage({
+      id: event.data.id,
+      error: e.message,
+    })
+  }
+}
+// }
+// </editor-fold>
+
+module.exports = gostEngine
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostKeys.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostKeys.js
new file mode 100644
index 0000000..a0291fe
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostKeys.js
@@ -0,0 +1,2404 @@
+/**
+ * @file Key and Certificate Store methods
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const gostCrypto = require('./gostCrypto')
+const GostASN1 = require('./gostASN1')
+const GostCert = require('./gostCert')
+const GostCMS = require('./gostCMS')
+
+/*
+ * Common tools and methods
+ */ // <editor-fold defaultstate="collapsed">
+
+const Promise = global.Promise
+const Object = global.Object
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
+
+const subtle = gostCrypto.subtle
+const asn1 = gostCrypto.asn1
+const coding = gostCrypto.coding
+const providers = gostCrypto.security.providers
+const cert = gostCrypto.cert
+const cms = gostCrypto.cms
+
+// Expand javascript object
+function expand() {
+  const r = {}
+  for (let i = 0, n = arguments.length; i < n; i++) {
+    const item = arguments[i]
+    if (typeof item === 'object') {
+      for (const name in item) {
+        if (item.hasOwnProperty(name)) {r[name] = item[name]}
+      }
+    }
+  }
+  return r
+}
+
+function defineProperty(object, name, descriptor, enumerable) {
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
+}
+
+function defineProperties(object, properties, enumerable) {
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
+}
+
+// Extend javascript class
+function extend(Super, Class, propertiesObject, propertiesClass) {
+  // If constructor not defined
+  if (typeof Class !== 'function') {
+    propertiesClass = propertiesObject
+    propertiesObject = Class
+    Class = function () {
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
+  Class.prototype = Object.create(Super.prototype, {
+    constructor: {
+      value: Class,
+    },
+    superclass: {
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject, true)}
+  // Inherites super class properties
+  if (Super !== Object) {
+    for (const name in Super) {Class[name] = Super[name]}
+  }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
+
+// Get random values
+function getSeed(length) {
+  const seed = new Uint8Array(length)
+  gostCrypto.getRandomValues(seed)
+  return seed.buffer
+}
+
+// Self resolver
+function call(callback) {
+  try {
+    callback()
+  } catch (e) {
+  }
+}
+
+
+// Get buffer
+function buffer(d) {
+  if (d instanceof CryptoOperationData) {return d}
+  if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
+  }
+  throw new DataError('CryptoOperationData required')
+}
+// Today date + n days with time
+function now(n) {
+  const date = new Date()
+  if (n) {date.setDate(date.getDate() + n)}
+  return date
+}
+
+// Today date + n days
+function today(n) {
+  const date = now(n)
+  date.setHours(0, 0, 0, 0)
+  return date
+}
+
+// Check the buffers to equal
+function equalBuffers(r1, r2) {
+  const s1 = new Uint8Array(r1),
+    s2 = new Uint8Array(r2)
+  if (s1.length !== s2.length) {return false}
+  for (let i = 0, n = s1.length; i < n; i++) {
+    if (s1[i] !== s2[i]) {return false}
+  }
+  return true
+}
+
+// Generate new alias
+function generateUUID() {
+  let r = new Uint8Array(getSeed(16)), s = ''
+  for (let i = 0; i < 16; i++) {s += (`00${ r[i].toString(16)}`).slice(-2)}
+  return `${s.substr(0, 8) }-${ s.substr(8, 4) }-4${ s.substr(13, 3)
+  }-9${ s.substr(17, 3) }-${ s.substr(20, 12)}`
+}
+
+// Return get32 from buffer
+function get32(buffer, offset) {
+  const r = new Uint8Array(buffer, offset, 4)
+  return (r[3] << 24) | (r[2] << 16) | (r[1] << 8) | r[0]
+}
+
+function set32(buffer, offset, int) {
+  const r = new Uint8Array(buffer, offset, 4)
+  r[3] = int >>> 24
+  r[2] = int >>> 16 & 0xff
+  r[1] = int >>> 8 & 0xff
+  r[0] = int & 0xff
+  return r
+}
+
+// Salt size
+function saltSize(algorithm) {
+  switch (algorithm.id) {
+    case 'pbeWithSHAAnd40BitRC2-CBC':
+    case 'pbeWithSHAAnd128BitRC2-CBC':
+      return 8
+    case 'pbeUnknownGost':
+      return 16
+    case 'sha1':
+      return 20
+    default:
+      return 32
+  }
+}
+
+// Password to bytes
+function passwordData(derivation, password) {
+  if (!password) {return new CryptoOperationData(0)}
+  if (derivation.name.indexOf('CPKDF') >= 0) {
+    // CryptoPro store password
+    const r = []
+    for (let i = 0; i < password.length; i++) {
+      const c = password.charCodeAt(i)
+      r.push(c & 0xff)
+      r.push(c >>> 8 & 0xff)
+      r.push(0)
+      r.push(0)
+    }
+    return new Uint8Array(r).buffer
+  } if (derivation.name.indexOf('PFXKDF') >= 0)
+  // PKCS#12 unicode password
+  {return coding.Chars.decode(`${password }\0`, 'unicode')}
+  return coding.Chars.decode(password, 'utf8')
+}
+
+// </editor-fold>
+
+/**
+ * Key and Certificate Store methods
+ *
+ * @class GostKeys
+ */
+function GostKeys() {
+}
+
+/**
+ * Key templates
+ * <ul>
+ *      <li>providerName - provider name for key encryption, default 'CP-01'</li>
+ *      <li>days - validity of the key in days, default 7305</li>
+ * </ul>
+ *
+ * @memberOf GostKeys
+ * @instance
+ */
+const options = { // <editor-fold defaultstate="collapsed">
+  providerName: 'CP-01',
+  days: 7305, // </editor-fold>
+}
+
+GostKeys.prototype.options = options
+
+/**
+ * A class for private keys in PKCS #8 format
+ *
+ * @class GostKeys.PKCS8
+ * @extends GostASN1.PrivateKeyInfo
+ * @param {(FormatedData|GostASN1.PrivateKeyInfo)} keyInfo
+ */
+function PKCS8(keyInfo) {
+  asn1.PrivateKeyInfo.call(this, keyInfo)
+}
+
+extend(asn1.PrivateKeyInfo, PKCS8, {
+  /**
+     * Get the private key
+     *
+     * @memberOf GostKeys.PKCS8
+     * @instance
+     * @returns {Promise} Promise to return the {@link Key}
+     */
+  getPrivateKey: function () // <editor-fold defaultstate="collapsed">
+  {
+    const keyUsages = (this.privateKeyAlgorithm.id === 'rsaEncryption') ? ['sign'] :
+      ['sign', 'deriveKey', 'deriveBits']
+    return subtle.importKey('pkcs8', this.encode(), this.privateKeyAlgorithm, 'true', keyUsages)
+  }, // </editor-fold>
+  /**
+     * Set the private key
+     *
+     * @memberOf GostKeys.PKCS8
+     * @instance
+     * @param {Key} privateKey The Private Key
+     * @returns {Promise} Promise to return the self object after set the key
+     */
+  setPrivateKey: function (privateKey) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return subtle.exportKey('pkcs8', privateKey).then(function (keyInfo) {
+      asn1.PrivateKeyInfo.call(self, keyInfo)
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Generate private key and return certification request
+     *
+     * @memberOf GostKeys.PKCS8
+     * @instance
+     * @param {(FormatedData|GostASN1.CertificationRequest)} req The request templates
+     * @param {(AlgorithmIdentifier|string)} keyAlgorithm The name of provider or algorithm identifier
+     * @returns {Promise} Promise to return the {@link GostCert.Request} after key generation
+     */
+  generate: function (req, keyAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
+    }).then(function (key) {
+      asn1.PrivateKeyInfo.call(self, key)
+
+      return req
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A class for private keys in PKCS #8 format
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.PKCS8
+ */
+GostKeys.prototype.PKCS8 = PKCS8
+
+/**
+ * A class for PKCS #5 and PKCS #12 password-encrypted private keys in PKCS #8 format
+ *
+ * @class GostKeys.PKCS8Encrypted
+ * @extends GostASN1.EncryptedPrivateKeyInfo
+ * @param {(FormatedData|GostASN1.EncryptedPrivateKeyInfo)} encryptedKey
+ */
+function PKCS8Encrypted(encryptedKey) {
+  asn1.EncryptedPrivateKeyInfo.call(this, encryptedKey)
+}
+
+extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
+  /**
+     * Get the private key info
+     *
+     * @memberOf GostKeys.PKCS8Encrypted
+     * @instance
+     * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for decryption
+     * @returns {Promise} Promise to return decrypted {@link GostKeys.PKCS8}
+     */
+  getKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, engine
+    return new Promise(call).then(function () {
+      engine = new cms.EncryptedDataContentInfo({
+        contentType: 'encryptedData',
+        version: 0,
+        encryptedContentInfo: {
+          contentType: 'data',
+          contentEncryptionAlgorithm: self.encryptionAlgorithm,
+          encryptedContent: self.encryptedData,
+        },
+      })
+      return engine.getEnclosed(keyPassword)
+    }).then(function (contentInfo) {
+      // Create key object
+      return PKCS8.decode(contentInfo.content)
+    })
+  }, // </editor-fold>
+  /**
+     * Get the private key
+     *
+     * @memberOf GostKeys.PKCS8Encrypted
+     * @instance
+     * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for decryption
+     * @returns {Promise} Promise to return decrypted {@link Key}
+     */
+  getPrivateKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    return this.getKey(keyPassword).then(function (keyInfo) {
+      return keyInfo.getPrivateKey()
+    })
+  }, // </editor-fold>
+  /**
+     * Sets and encrypt the private key info
+     *
+     * @memberOf GostKeys.PKCS8Encrypted
+     * @instance
+     * @param {(FormatedData|GostKeys.PKCS8)} keyInfo The private key info
+     * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for encryption
+     * @param {(AlgorithmIdentifier|string)} encryptionAlgorithm The encryption algorithm or provider name
+     * @returns {Promise} Promise to return self object after set key
+     */
+  setKey: function (keyInfo, keyPassword, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, engine
+    return new Promise(call).then(function () {
+      keyInfo = new PKCS8(keyInfo)
+      engine = new cms.EncryptedDataContentInfo()
+      return engine.encloseContent(keyInfo.encode(), keyPassword, encryptionAlgorithm || options.providerName)
+    }).then(function () {
+      self.encryptionAlgorithm = engine.encryptedContentInfo.contentEncryptionAlgorithm
+      self.encryptedData = engine.encryptedContentInfo.encryptedContent
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Set the private key
+     *
+     * @memberOf GostKeys.PKCS8Encrypted
+     * @instance
+     * @param {Key} privateKey The private key
+     * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for decryption
+     * @param {(AlgorithmIdentifier|string)} encryptionAlgorithm The encryption algorithm or provider name
+     * @returns {Promise} Promise to return self object after set key
+     */
+  setPrivateKey: function (privateKey, keyPassword, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new PKCS8().setPrivateKey(privateKey).then(function (keyInfo) {
+      return self.setKey(keyInfo, keyPassword, encryptionAlgorithm)
+    })
+  }, // </editor-fold>
+  /**
+     * Generate private key and return certification request
+     *
+     * @memberOf GostKeys.PKCS8Encrypted
+     * @instance
+     * @param {(FormatedData|GostASN1.CertificationRequest)} req The request templates
+     * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for decryption
+     * @param {(AlgorithmIdentifier|string)} keyAlgorithm The name of provider or algorithm
+     * @param {(AlgorithmIdentifier|string)} encryptionAlgorithm The encryption algorithm or provider name
+     * @returns {Promise} Promise to return {@link GostCert.Request}
+     */
+  generate: function (req, keyPassword, keyAlgorithm, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
+    }).then(function (key) {
+      return self.setKey(key, keyPassword, encryptionAlgorithm)
+    }).then(function () {
+      return req
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A class for PKCS #5 and PKCS #12 password-encrypted private keys in PKCS #8 format
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.PKCS8Encrypted
+ */
+GostKeys.prototype.PKCS8Encrypted = PKCS8Encrypted
+
+/**
+ * A class for password-encrypted private keys in SignalCom container<br><br>
+ *
+ * The container file list:
+ * <ul>
+ *      <li>mk.db3 - master key data</li>
+ *      <li>masks.db3 - encrypted or decrypted masks</li>
+ *      <li>kek.opq - wrapped key encryption key</li>
+ *      <li>rand.opq - wrapped random data</li>
+ * </ul>
+ *
+ * @class GostKeys.SignalComKeyContainer
+ * @param {SignalComKeyContainer} container
+ */
+function SignalComKeyContainer(container) // <editor-fold defaultstate="collapsed">
+{
+  if (container) {
+    const self = this;
+    ['mk.db3', 'masks.db3', 'kek.opq', 'rand.opq'].forEach(function (name) {
+      self[name] = container[name]
+    })
+  }
+} // </editor-fold>
+
+extend(Object, SignalComKeyContainer, {
+  /**
+     * Get password-based encryption key
+     *
+     * @memberOf GostKeys.SignalComKeyContainer
+     * @instance
+     * @param {string} keyPassword
+     * @returns {Promise} Promise to return {@link Key}
+     */
+  getEncryptionKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, wrapping = providers['SC-01'].wrapping,
+      encryption = providers['SC-01'].encryption,
+      derivation = providers['SC-01'].derivation,
+      masks = self['masks.db3'], mk = self['mk.db3'], kek = self['kek.opq']
+    // Decrypt key
+    return new Promise(call).then(function () {
+      if ((!masks || !mk || !kek)) {throw new Error('Not enougth key container files')}
+      // Check for encrypted key
+      if (masks.byteLength > 32) {
+        if (keyPassword) {
+          // Extract password based encryption mask
+          return subtle.importKey('raw', coding.Chars.decode(keyPassword, 'utf8'),
+            derivation, false, ['deriveKey', 'deriveBits']).then(function (integrityKey) {
+            return subtle.deriveKey(expand(derivation,
+              { salt: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) }),
+            integrityKey, encryption, false, ['decrypt'])
+          }).then(function (encryptionKey) {
+            const encrypted = new cms.EncryptedDataContentInfo(masks)
+            return encrypted.getEnclosed(encryptionKey)
+          }).then(function (digested) {
+            return digested.verify()
+          }).then(function (data) {
+            return data.content
+          })
+        } throw new Error('Key password is required')
+      } else if (keyPassword) {throw new Error('Key password is not required')}
+      return masks
+    }).then(function (decrypedMasks) {
+      // Combine masks
+      masks = decrypedMasks
+      const mkm = new Uint8Array(mk.byteLength + masks.byteLength)
+      mkm.set(new Uint8Array(mk), 0)
+      mkm.set(new Uint8Array(masks), mk.byteLength)
+      // Import master key
+      return subtle.importKey('raw', mkm.buffer, wrapping, false, ['unwrapKey'])
+    }).then(function (unwrappingKey) {
+      // Unwrap kek
+      return subtle.unwrapKey('raw', kek, unwrappingKey, wrapping, encryption,
+        false, ['wrapKey', 'unwrapKey'])
+    })
+  }, // </editor-fold>
+  /**
+     * Generate encryption key and container files
+     *
+     * @memberOf GostKeys.SignalComKeyContainer
+     * @instance
+     * @param {string} keyPassword
+     * @returns {Promise} Promise to return {@link Key}
+     */
+  generateContainer: function (keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, wrapping = providers['SC-01'].wrapping,
+      encryption = providers['SC-01'].encryption,
+      derivation = providers['SC-01'].derivation,
+      digest = providers['SC-01'].digest,
+      encryptionKey, wrappingKey
+    return new Promise(call).then(function () {
+      // Generate wrapping key
+      return subtle.generateKey(wrapping, true, ['wrapKey'])
+    }).then(function (key) {
+      wrappingKey = key
+      // Split masks
+      const len = wrappingKey.buffer.byteLength
+      self['mk.db3'] = new Uint8Array(new Uint8Array(wrappingKey.buffer, 0, len - 32)).buffer
+      const masks = new Uint8Array(new Uint8Array(wrappingKey.buffer, len - 32, 32)).buffer
+      if (keyPassword) {
+        // Encrypt masks
+        let encrypted = new cms.EncryptedDataContentInfo(),
+          digested = new cms.DigestedDataContentInfo()
+        // Digest data
+        return digested.encloseContent(masks, digest).then(function () {
+          digested = { // Double wrapping - SignalCom mistake
+            contentType: 'digestedData',
+            content: digested.encode(),
+          }
+          return subtle.importKey('raw', coding.Chars.decode(keyPassword, 'utf8'),
+            derivation, false, ['deriveKey', 'deriveBits'])
+        }).then(function (integrityKey) {
+          return subtle.deriveKey(expand(derivation,
+            { salt: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) }),
+          integrityKey, encryption, false, ['encrypt'])
+        }).then(function (encryptionKey) {
+          // Encrypt data with password
+          return encrypted.encloseContent(digested, encryptionKey, encryption)
+        }).then(function () {
+          return encrypted.encode()
+        })
+      }
+      return masks
+    }).then(function (masks) {
+      self['masks.db3'] = masks
+      // Generate encryption key
+      return subtle.generateKey(encryption, false, ['wrapKey', 'unwrapKey'])
+    }).then(function (key) {
+      encryptionKey = key
+      // Wrap encryption key
+      return subtle.wrapKey('raw', key, wrappingKey, wrapping)
+    }).then(function (data) {
+      self['kek.opq'] = data
+      // Generate random seed
+      return subtle.generateKey(encryption, false, ['wrapKey', 'unwrapKey'])
+    }).then(function (key) {
+      // Wrap random seed
+      return subtle.wrapKey('raw', key, wrappingKey, wrapping)
+    }).then(function (data) {
+      self['rand.opq'] = data
+      return encryptionKey
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A class for password-encrypted private keys in SignalCom container
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.SignalComKeyContainer
+ */
+GostKeys.prototype.SignalComKeyContainer = SignalComKeyContainer
+
+/**
+ * A class for password-encrypted SignalCom private keys
+ *
+ * @class GostKeys.SignalComPrivateKeyInfo
+ * @extends GostASN1.GostWrappedPrivateKey
+ * @extends GostKeys.SignalComKeyContainer
+ * @param {GostASN1.PrivateKeyInfo} keyInfo
+ * @param {GostKeys.SignalComKeyContainer} container
+ */
+function SignalComPrivateKeyInfo(keyInfo, container) // <editor-fold defaultstate="collapsed">
+{
+  asn1.GostWrappedPrivateKey.call(this, keyInfo)
+  SignalComKeyContainer.call(this, container)
+} // </editor-fold>
+
+extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
+  /**
+     * Get the private key info
+     *
+     * @memberOf GostKeys.SignalComPrivateKeyInfo
+     * @param {string} keyPassword The password for decryption
+     * @returns {Promise} Promise to return {@link GostKeys.PKCS8}
+     */
+  getKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    return this.getPrivateKey(keyPassword).then(function (privateKey) {
+      return new PKCS8().setPrivateKey(privateKey)
+    })
+  }, // </editor-fold>
+  /**
+     * Get the private key
+     *
+     * @memberOf GostKeys.SignalComPrivateKeyInfo
+     * @instance
+     * @param {string} keyPassword The password for decryption
+     * @returns {Promise} Promise to return the {@link Key}
+     */
+  getPrivateKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, wrapping = providers['SC-01'].wrapping,
+      publicKeyData
+    // Decrypt key
+    return new Promise(call).then(function () {
+      // Get password key
+      return self.getEncryptionKey(keyPassword, true)
+    }).then(function (encryptionKey) {
+      // Unwrap private key
+      return subtle.unwrapKey('raw', self.privateKeyWrapped, encryptionKey, wrapping,
+        self.privateKeyAlgorithm, true, ['sign', 'deriveKey', 'deriveBits'])
+    }).then(function (privateKey) {
+      publicKeyData = self.attributes && self.attributes['id-sc-gostR3410-2001-publicKey']
+      // Generate key pair
+      if (publicKeyData) {
+        return subtle.generateKey(expand(privateKey.algorithm, { ukm: privateKey.buffer }),
+          privateKey.extractable, privateKey.usages)
+      }
+      return { privateKey: privateKey }
+    }).then(function (keyPair) {
+      // Compare public key
+      if (publicKeyData && !equalBuffers(keyPair.publicKey.buffer, publicKeyData)) {throw new Error('Check public key failed')}
+      return keyPair.privateKey
+    })
+  }, // </editor-fold>
+  /**
+     * Sets and encrypt the private key info
+     *
+     * @memberOf GostKeys.SignalComPrivateKeyInfo
+     * @instance
+     * @param {(FormatedData|GostKeys.PKCS8)} keyInfo The private key info
+     * @param {string} keyPassword The password for encryption
+     * @returns {Promise} Promise to return self object after set the key
+     */
+  setKey: function (keyInfo, keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new PKCS8(keyInfo).getPrivateKey().then(function (privateKey) {
+      return self.setPrivateKey(privateKey, keyPassword)
+    })
+  }, // </editor-fold>
+  /**
+     * Set the private key
+     *
+     * @memberOf GostKeys.SignalComPrivateKeyInfo
+     * @instance
+     * @param {Key} privateKey The private key
+     * @param {string} keyPassword The secret key encryption
+     * @returns {Promise} Promise to return self object after set the key
+     */
+  setPrivateKey: function (privateKey, keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, wrapping = providers['SC-01'].wrapping, wrappedData
+    return new Promise(call).then(function () {
+      // Get or generate encryption key
+      return self.getEncryptionKey(keyPassword)['catch'](function () {
+        return self.generateContainer(keyPassword)
+      })
+    }).then(function (encryptionKey) {
+      // Encrypt key buffer
+      return subtle.wrapKey('raw', privateKey, encryptionKey, wrapping)
+    }).then(function (data) {
+      wrappedData = data
+      // Generate public key
+      return subtle.generateKey(expand(privateKey.algorithm,
+        { ukm: privateKey.buffer }), true, ['sign', 'verify'])
+    }).then(function (keyPair) {
+      self.object = {
+        version: 0,
+        privateKeyAlgorithm: privateKey.algorithm,
+        privateKeyWrapped: wrappedData,
+        attributes: {
+          'id-sc-gostR3410-2001-publicKey': keyPair.publicKey.buffer,
+        },
+      }
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Change key password
+     *
+     * @memberOf GostKeys.SignalComPrivateKeyInfo
+     * @instance
+     * @param {string} oldKeyPassword Old key password
+     * @param {string} newKeyPassword New key password
+     * @returns {Promise} Promise to return self object after change password
+     */
+  changePassword: function (oldKeyPassword, newKeyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return self.getPrivateKey(oldKeyPassword).then(function (privateKey) {
+      return self.setPrivateKey(privateKey, newKeyPassword)
+    })
+  }, // </editor-fold>
+  /**
+     * Generate private key, certificate and return certification request
+     *
+     * @memberOf GostKeys.SignalComPrivateKeyInfo
+     * @instance
+     * @param {(FormatedData|GostASN1.CertificationRequest)} req The request templates
+     * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for decryption
+     * @param {(AlgorithmIdentifier|string)} keyAlgorithm The name of provider or algorithm
+     * @returns {Promise} Promise to return {@link GostCert.Request}
+     */
+  generate: function (req, keyPassword, keyAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, keyInfo
+    return new Promise(call).then(function () {
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
+    }).then(function (key) {
+      keyInfo = key
+      return self.setKey(keyInfo, keyPassword)
+    }).then(function () {
+      return req
+    })
+  }, // </editor-fold>
+})
+defineProperties(SignalComPrivateKeyInfo.prototype, SignalComKeyContainer.prototype)
+
+/**
+ * A class for password-encrypted SignalCom private keys
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.SignalComPrivateKeyInfo
+ */
+GostKeys.prototype.SignalComPrivateKeyInfo = SignalComPrivateKeyInfo
+
+/**
+ * A class for password-encrypted private keys in CryptoPro container
+ *
+ * The container file list:
+ * <ul>
+ *      <li>header - container header @link GostASN1.GostKeyContainer</li>
+ *      <li>name - container name @link GostASN1.GostKeyContainerName</li>
+ *      <li>primary - private keys data @link GostASN1.GostPrivateKeys</li>
+ *      <li>masks - private key masks @link GostASN1.GostPrivateMasks</li>
+ *      <li>primary2 - reserve of private keys data @link GostASN1.GostPrivateKeys</li>
+ *      <li>masks2 - reserve of private key masks @link GostASN1.GostPrivateMasks</li>
+ * </ul>
+ *
+ * @class GostKeys.CryptoProKeyContainer
+ * @param {Object} container
+ */
+function CryptoProKeyContainer(container) // <editor-fold defaultstate="collapsed">
+{
+  if (container) {
+    this.header = asn1.GostKeyContainer.decode(container.header)
+    this.name = asn1.GostKeyContainerName.decode(container.name)
+    this.primary = asn1.GostPrivateKeys.decode(container.primary)
+    this.masks = asn1.GostPrivateMasks.decode(container.masks)
+    if (container.primary2 && container.masks2) {
+      this.primary2 = asn1.GostPrivateKeys.decode(container.primary2)
+      this.masks2 = asn1.GostPrivateMasks.decode(container.masks2)
+    }
+  }
+} // </editor-fold>
+
+extend(Object, CryptoProKeyContainer, (function () {
+
+  // <editor-fold defaultstate="collapsed">
+  // True if 512 bit
+  function isKeySize512(algorithm) {
+    return algorithm.name.indexOf('-512') >= 0 || algorithm.length === 512
+  }
+
+  // Test version 2012
+  function isVersion2012(algorithm) {
+    return !((algorithm.name.indexOf('-94') >= 0 || algorithm.name.indexOf('-2001') >= 0 ||
+            algorithm.version === 1994 || algorithm.version === 2001))
+  }
+
+  // Derive password key
+  function derivePasswordKey(algorithm, password, salt) {
+    const hash = isVersion2012(algorithm) ? 'GOST R 34.11-256' : `GOST R 34.11-94/${ algorithm.sBox || 'D-A'}`,
+      derivation = { name: 'CPKDF', hash: hash, salt: salt, iterations: password ? 2000 : 2 }
+
+    // Import password
+    return subtle.importKey('raw', passwordData(derivation, password),
+      derivation, false, ['deriveKey', 'deriveBits']).then(function (baseKey) {
+
+      // Derive key
+      return subtle.deriveKey(derivation, baseKey, 'GOST 28147',
+        false, ['sign', 'verify', 'encrypt', 'decrypt'])
+    })
+  }
+
+  // Compute password MAC
+  function computePasswordMAC(algorithm, password, salt) {
+    const mac = expand({ name: 'GOST 28147-MAC' }, algorithm.encParams)
+
+    // Derive password
+    return derivePasswordKey(algorithm, password, salt).then(function (macKey) {
+
+      // Mac for 16 zero bytes
+      return subtle.sign(mac, macKey,
+        new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
+    })
+  }
+
+  //        var lastBuffer;
+  // Compute container MAC
+  function computeContainerMAC(algorithm, content) {
+    const mac = expand({ name: 'GOST 28147-MAC' }, algorithm.encParams),
+      keyData = new Uint8Array([// 32 zero bytes
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
+    return subtle.importKey('raw', keyData, mac, false, ['sign']).then(function (macKey) {
+      //                var buffer = new Uint8Array(content.encode());
+      //                console.log(coding.Hex.encode(buffer));
+      //                if (lastBuffer && lastBuffer.length === buffer.length) {
+      //                    for (var i = 0; i < buffer.length; i++)
+      //                        if (lastBuffer[i] !== buffer[i])
+      //                            console.log('diff at ' + i);
+      //                } else
+      //                    console.log('diff length');
+      //                lastBuffer = buffer;
+      // Mac for content
+      return subtle.sign(mac, macKey, content.encode())
+    })
+  }
+
+  // Compute mask MAC
+  function computeMaskMAC(algorithm, mask, status) {
+    // Import mask as key for MAC
+    const mac = expand({ name: 'GOST 28147-MAC' }, algorithm.encParams),
+      keyData = mask.byteLength === 64 ?
+        new Uint8Array(new Uint8Array(mask, 32, 32)).buffer : mask
+    return subtle.importKey('raw', keyData, mac, false, ['sign']).then(function (macKey) {
+
+      // Verify MAC for maskStatus
+      return subtle.sign(mac, macKey, status)
+    })
+  }
+
+  // Generate mask
+  function generateMasks(algorithm) {
+    let wrapAlgorithm = expand(algorithm, { mode: 'MASK' }),
+      mask, status = getSeed(12)
+    wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '')
+    return subtle.generateKey(wrapAlgorithm, true, ['wrapKey', 'unwrapKey']).then(function (key) {
+      return subtle.exportKey('raw', key)
+    }).then(function (data) {
+      mask = data
+      return computeMaskMAC(algorithm, mask, status)
+    }).then(function (hmac) {
+      return new asn1.GostPrivateMasks({
+        mask: mask,
+        randomStatus: status,
+        hmacRandom: hmac,
+      })
+    })
+  }
+
+  // Compute FP
+  function computeFP(privateKey) {
+    // Generate key pair with predefined ukm for check public key
+    return subtle.generateKey(expand(privateKey.algorithm, { ukm: privateKey.buffer }), true, ['sign', 'verify']).then(function (keyPair) {
+      return new Uint8Array(new Uint8Array(keyPair.publicKey.buffer, 0, 8)).buffer
+    })
+  }
+
+  // Unwrap private key
+  function unwrapKey(algorithm, encryptionKey, key, mask, fp) {
+    let encryption = { name: 'GOST 28147-ECB', sBox: algorithm.encParams && algorithm.encParams.sBox },
+      unwrapAlgorithm = expand(algorithm, { mode: 'MASK' }), privateKey
+    unwrapAlgorithm.name = unwrapAlgorithm.name.replace('-DH', '')
+    let wrappedKey
+
+    // Encrypt ukm data for private key
+    return subtle.decrypt(encryption, encryptionKey, key).then(function (data) {
+      wrappedKey = data
+      // Import mask key
+      return subtle.importKey('raw', mask, unwrapAlgorithm, 'false', ['sign', 'unwrapKey'])
+    }).then(function (unwrappingKey) {
+
+      // Unwrap private key
+      return subtle.unwrapKey('raw', wrappedKey, unwrappingKey,
+        unwrapAlgorithm, algorithm, 'true', ['sign'])
+    }).then(function (key) {
+      privateKey = key
+      return computeFP(privateKey)
+    }).then(function (computedFP) {
+      // Check public key buffer
+      if (!equalBuffers(computedFP, fp)) {throw new Error('Incorrect fp')}
+
+      return privateKey
+    })
+
+  }
+
+  // Wrap private key
+  function wrapKey(algorithm, encryptionKey, privateKey, mask) {
+    const encryption = { name: 'GOST 28147-ECB', sBox: algorithm.encParams && algorithm.encParams.sBox },
+      wrapAlgorithm = expand(algorithm, { mode: 'MASK' })
+    wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '')
+
+    // Import mask key
+    return subtle.importKey('raw', mask, wrapAlgorithm, false,
+      ['sign', 'wrapKey']).then(function (wrappingKey) {
+      // Wrap private key
+      return subtle.wrapKey('raw', privateKey, wrappingKey, wrapAlgorithm)
+    }).then(function (wrappedKey) {
+      // Encrypt key
+      return subtle.encrypt(encryption, encryptionKey, wrappedKey)
+    })
+  }
+
+  // Decrypt private key
+  function decryptKey(content, primary, masks, keyPassword, secondary) {
+    const algorithm = content.primaryPrivateKeyParameters.privateKeyAlgorithm
+    return new Promise(call).then(function () {
+      // Check format
+      if (primary.hmacKey) {throw new Error('Old key format')}
+
+      if (masks.randomStatus.byteLength < 12) {throw new Error('Invalid random status length')}
+
+      // Import mask as key for MAC
+      return computeMaskMAC(algorithm, masks.mask, masks.randomStatus)
+    }).then(function (hmac) {
+      if (!equalBuffers(hmac, masks.hmacRandom)) {throw new Error('Imita for mask is invalid')}
+
+      // Derive key
+      return derivePasswordKey(algorithm, keyPassword, new Uint8Array(masks.randomStatus, 0, 12))
+    }).then(function (encryptionKey) {
+      // Unwrap keys
+      return secondary && primary.secondaryKey ?
+        unwrapKey(content.secondaryPrivateKeyParameters.privateKeyAlgorithm,
+          encryptionKey, primary.secondaryKey, masks.mask, content.secondaryFP) :
+        unwrapKey(algorithm, encryptionKey, primary.primaryKey, masks.mask, content.primaryFP)
+    })
+  }
+
+  // Encrypt private key
+  function encryptKey(algorithm, primary, masks, keyPassword, secondary, privateKey) {
+    // Derive key
+    return derivePasswordKey(algorithm, keyPassword, new Uint8Array(masks.randomStatus, 0, 12)).then(function (encryptionKey) {
+      // Wrap keys
+      return wrapKey(algorithm, encryptionKey, privateKey, masks.mask)
+    }).then(function (encryptedKey) {
+      if (!primary) {primary = new asn1.GostPrivateKeys()}
+      if (secondary) {
+        primary.secondaryKey = encryptedKey
+      } else {
+        primary.primaryKey = encryptedKey
+      }
+      return primary
+    })
+  }
+
+  // </editor-fold>
+
+  return {
+    /**
+         * Get the private key info
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {string} keyPassword The password for decryption
+         * @param {boolean} secondary True if required secondary key
+         * @returns {Promise} Promise to return {@link GostKeys.PKCS8}
+         */
+    getKey: function (keyPassword, secondary) // <editor-fold defaultstate="collapsed">
+    {
+      return this.getPrivateKey(keyPassword, secondary).then(function (privateKey) {
+        return new PKCS8().setPrivateKey(privateKey)
+      })
+    }, // </editor-fold>
+    /**
+         * Get the private key
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {string} keyPassword Rhe password for decryption
+         * @param {boolean} secondary True if required secondary key
+         * @returns {Promise} Promise to return the {@link Key}
+         */
+    getPrivateKey: function (keyPassword, secondary) // <editor-fold defaultstate="collapsed">
+    {
+      const self = this, content = self.header.keyContainerContent
+      // Decrypt key
+      return decryptKey(content, self.primary, self.masks, keyPassword, secondary)['catch'](function (e) {
+        if (self.primary2 && self.masks2) {return decryptKey(content, self.primary2, self.masks2, keyPassword, secondary)}
+        throw e
+      })
+    }, // </editor-fold>
+    /**
+         * Get the certificate from the key container
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {boolean} secondary True for set secondary certificate
+         * @returns {Promise} Promise to return {@link GostCert.X509}
+         */
+    getCertificate: function (secondary) // <editor-fold defaultstate="collapsed">
+    {
+      const self = this, content = self.header.keyContainerContent
+      return new Promise(call).then(function () {
+        if (secondary) {return new cert.X509(content.secondaryCertificate)}
+        return new cert.X509(content.primaryCertificate)
+      })
+    }, // </editor-fold>
+    /**
+         * Get the container name
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @returns {string} Container name
+         */
+    getContainerName: function () // <editor-fold defaultstate="collapsed">
+    {
+      return this.name.containerName
+    }, // </editor-fold>
+    /**
+         * Sets and encrypt the private key info
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {(FormatedData|GostKeys.PKCS8)} keyInfo The private key info
+         * @param {string} keyPassword The assword for encryption
+         * @param {boolean} secondary True for set secondary key
+         * @param {number} days Validity days. Default 7305 days (20 years)
+         * @returns {Promise} Promise to return self object after set key
+         */
+    setKey: function (keyInfo, keyPassword, secondary, days) // <editor-fold defaultstate="collapsed">
+    {
+      const self = this
+      return new PKCS8(keyInfo).getPrivateKey().then(function (privateKey) {
+        return self.setPrivateKey(privateKey, keyPassword, secondary, days)
+      })
+    }, // </editor-fold>
+    /**
+         * Set the private key
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {Key} privateKey The private key
+         * @param {string} keyPassword The secret key encryption
+         * @param {boolean} secondary True for set secondary key
+         * @param {number} days Validity days. Default 7305 days (20 years)
+         * @returns {Promise} Promise to return self object after set key
+         */
+    setPrivateKey: function (privateKey, keyPassword, secondary, days) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, content, algorithm
+      return new Promise(call).then(function () {
+        self.header = self.header || new asn1.GostKeyContainer({
+          keyContainerContent: {
+            containerAlgoritmIdentifier: {
+              algorithm: 'id-CryptoPro-GostPrivateKeys-V2-Full',
+            },
+            attributes: ['kccaReservePrimary', 'kccaPrimaryKeyAbsent'],
+            extensions: {
+              keyValidity: {
+                notAfter: now(days || options.days),
+              },
+            },
+          },
+        })
+        content = self.header.keyContainerContent
+        // Set private key
+        let keyParameters = secondary ? content.secondaryPrivateKeyParameters :
+          content.primaryPrivateKeyParameters
+        if (!keyParameters) {
+          algorithm = expand(privateKey.algorithm, {
+            sBox: 'D-A',
+            encParams: {
+              block: 'CFB',
+              sBox: 'E-A',
+              keyMeshing: 'CP',
+            },
+          })
+          keyParameters = {
+            attributes: ['pkaExportable', 'pkaExchange', 'pkaDhAllowed'],
+            privateKeyAlgorithm: algorithm,
+          }
+          if (secondary) {
+            if (!content.primaryPrivateKeyParameters) {throw new Error('Primary key must be defined first')}
+            content.secondaryPrivateKeyParameters = keyParameters
+          } else {
+            content.primaryPrivateKeyParameters = keyParameters
+            const absent = content.attributes.indexOf('kccaPrimaryKeyAbsent')
+            if (absent >= 0) {content.attributes.splice(absent, 1)}
+          }
+        } else {algorithm = keyParameters.privateKeyAlgorithm}
+        // Generate masks
+        const promises = [];
+        [0, 1].forEach(function (i) {
+          const name = `masks${ i > 0 ? '2' : ''}`
+          if (!self[name]) {
+            promises.push(generateMasks(algorithm).then(function (masks) {
+              self[name] = masks
+            }))
+          }
+        })
+        return Promise.all(promises)
+      }).then(function () {
+        // Encrypt key
+        const promises = [];
+        [0, 1].forEach(function (i) {
+          const name = `primary${ i > 0 ? '2' : ''}`,
+            maskname = `masks${ i > 0 ? '2' : ''}`
+          promises.push(encryptKey(algorithm, self[name], self[maskname], keyPassword, secondary, privateKey).then(function (primary) {
+            self[name] = primary
+          }))
+        })
+        return Promise.all(promises)
+      }).then(function () {
+        // Compute FP for a private key
+        return computeFP(privateKey).then(function (FP) {
+          if (secondary) {content.secondaryFP = FP} else {content.primaryFP = FP}
+        })
+      }).then(function () {
+        // Compute password MAC
+        const softPassword = content.attributes.indexOf('kccaSoftPassword')
+        if (keyPassword) {
+          if (softPassword < 0) {content.attributes.push('kccaSoftPassword')}
+          return computePasswordMAC(algorithm, keyPassword, content.primaryFP)
+        }
+        if (softPassword >= 0) {content.attributes.splice(softPassword, 1)}
+
+      }).then(function (hmac) {
+        if (hmac) {content.hmacPassword = hmac}
+        // Calculate container MAC
+        return computeContainerMAC(algorithm, content)
+      }).then(function (hmac) {
+        self.header.hmacKeyContainerContent = hmac
+        return self
+      })
+    }, // </editor-fold>
+    /**
+         * Set the certificate to the key container
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {(FormatedData|GostCert.X509)} certificate The certificate
+         * @param {boolean} secondary True for set secondary certificate
+         * @param {number} days Validity days. Default 7305 days (20 years)
+         * @returns {Promise} Promise to return self object after set certificate
+         */
+    setCertificate: function (certificate, secondary, days) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, content, algorithm
+      return new Promise(call).then(function () {
+        self.header = self.header || new asn1.GostKeyContainer({
+          keyContainerContent: {
+            containerAlgoritmIdentifier: {
+              algorithm: 'id-CryptoPro-GostPrivateKeys-V2-Full',
+            },
+            attributes: ['kccaReservePrimary', 'kccaPrimaryKeyAbsent'],
+            extensions: {
+              keyValidity: {
+                notAfter: now(days || options.days),
+              },
+            },
+          },
+        })
+        content = self.header.keyContainerContent
+        certificate = new cert.X509(certificate)
+        algorithm = (content.primaryPrivateKeyParameters &&
+                    content.primaryPrivateKeyParameters.privateKeyAlgorithm) ||
+                    expand(certificate.subjectPublicKeyInfo.algorithm, {
+                      sBox: 'D-A',
+                      encParams: {
+                        block: 'CFB',
+                        sBox: 'E-A',
+                        keyMeshing: 'CP',
+                      },
+                    })
+        return certificate.getPublicKey()
+      }).then(function (publicKey) {
+        if (secondary) {
+          if (content.secondaryFP && !equalBuffers(content.secondaryFP,
+            new Uint8Array(publicKey.buffer, 0, content.secondaryFP.byteLength))) {throw new Error('The public key of the certificate does not match the private key')}
+          content.secondaryCertificate = certificate
+        } else {
+          if (content.primaryFP && !equalBuffers(content.primaryFP,
+            new Uint8Array(publicKey.buffer, 0, content.primaryFP.byteLength))) {throw new Error('The public key of the certificate does not match the private key')}
+          content.primaryCertificate = certificate
+        }
+        // Calculate container MAC
+        return computeContainerMAC(algorithm, content)
+      }).then(function (hmac) {
+        self.header.hmacKeyContainerContent = hmac
+        return self
+      })
+    }, // </editor-fold>
+    /**
+         * Set the container name
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {string} name Container name
+         */
+    setContainerName: function (name) // <editor-fold defaultstate="collapsed">
+    {
+      this.name = new asn1.GostKeyContainerName({ containerName: name })
+    }, // </editor-fold>
+    /**
+         * Verify key container with password
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {string} keyPassword the secret key or password for decryption
+         * @returns {Promise} Promise to return self object after verify
+         */
+    verify: function (keyPassword) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, content, algorithm
+      return new Promise(call).then(function () {
+        content = self.header.keyContainerContent
+        algorithm = content.primaryPrivateKeyParameters.privateKeyAlgorithm
+        // Verify container MAC
+        return computeContainerMAC(algorithm, content)
+      }).then(function (hmac) {
+        if (!equalBuffers(hmac, self.header.hmacKeyContainerContent)) {throw new Error('Container is not valid.')}
+        // Verify key password MAC
+        const needPassword = content.attributes.indexOf('kccaSoftPassword') >= 0
+        if (!keyPassword && needPassword) {throw new Error('Password is required')}
+        if (keyPassword && !needPassword) {throw new Error('Password is not reqiured.')}
+        if (keyPassword)
+        // Derive password
+        {
+          return computePasswordMAC(algorithm, keyPassword, content.primaryFP).then(function (hmac) {
+            if (!equalBuffers(hmac, content.hmacPassword)) {throw new Error('Password is not valid.')}
+            return self
+          })
+        }
+        return self
+      })
+    }, // </editor-fold>
+    /**
+         * Change key password
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {string} oldKeyPassword Old key password
+         * @param {string} newKeyPassword New key password
+         * @returns {Promise} Promise to return self object after change password
+         */
+    changePassword: function (oldKeyPassword, newKeyPassword) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, content
+      return new Promise(call).then(function () {
+        content = self.header.keyContainerContent
+        if (!content.primaryPrivateKeyParameters) {throw new Error('Private key not yet defined')}
+        return self.getPrivateKey(oldKeyPassword).then(function (privateKey) {
+          return self.setPrivateKey(privateKey, newKeyPassword)
+        })
+      }).then(function () {
+        if (content.secondaryPrivateKeyParameters) {
+          return self.getPrivateKey(oldKeyPassword, true).then(function (privateKey) {
+            return self.setPrivateKey(privateKey, newKeyPassword, true)
+          })
+        }
+        return self
+      })
+    }, // </editor-fold>
+    /**
+         * Generate private key, certificate and return certification request
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {(FormatedData|GostASN1.CertificationRequest)} req The request templates
+         * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for decryption
+         * @param {(AlgorithmIdentifier|string)} keyAlgorithm The name of provider or algorithm
+         * @returns {Promise} Promise to return {@link GostCert.Request}
+         */
+    generate: function (req, keyPassword, keyAlgorithm) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, certificate, keyInfo
+      return new Promise(call).then(function () {
+        if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+        // Generate request
+        return req.generate(keyAlgorithm)
+      }).then(function (key) {
+        keyInfo = key
+        return self.setKey(keyInfo, keyPassword)
+      }).then(function () {
+        // Create the new certificate
+        certificate = new cert.X509(req)
+        return certificate.sign(keyInfo)
+      }).then(function () {
+        return self.setCertificate(certificate)
+      }).then(function () {
+        return req
+      })
+    }, // </editor-fold>
+    /**
+         * Encode key container
+         *
+         * @memberOf GostKeys.CryptoProKeyContainer
+         * @instance
+         * @param {string} format Encode format 'DER', 'CER', 'PEM'
+         * @returns {Object} container Object contains encoded files
+         */
+    encode: function (format) // <editor-fold defaultstate="collapsed">
+    {
+      return {
+        header: this.header.encode(format),
+        name: this.name.encode(format),
+        masks: this.masks.encode(format),
+        primary: this.primary.encode(format),
+        masks2: this.masks2.encode(format),
+        primary2: this.primary2.encode(format),
+      }
+    }, // </editor-fold>
+  }
+})())
+
+/**
+ * A class for password-encrypted private keys in CryptoPro container
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.SignalComPrivateKeyInfo
+ */
+GostKeys.prototype.CryptoProKeyContainer = CryptoProKeyContainer
+
+/**
+ * A class for password-encrypted private keys in ViPNet container entry
+ *
+ * @class GostKeys.ViPNetContainerEntry
+ * @extends GostASN1.ViPNetInfo
+ * @param {(FormatedData|GostKeys.ViPNetContainerEntry)} entry
+ */
+function ViPNetContainerEntry(entry) // <editor-fold defaultstate="collapsed">
+{
+  asn1.ViPNetInfo.call(this, entry || {
+    version: 3,
+    keyInfo: {
+      keyClass: 1,
+      keyType: 43556,
+      flags: 1,
+    },
+    defenceKeyInfo: {
+      keyClass: 1024,
+      keyType: 24622,
+      keyUID: getSeed(32),
+      flags: -2147483648,
+    },
+  })
+} // </editor-fold>
+
+extend(asn1.ViPNetInfo, ViPNetContainerEntry, (function () {
+
+  function getKeyPassword(keyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    if (keyPassword === undefined) {keyPassword = ''}
+    // Generate key data
+    let passwordData = coding.Chars.decode(keyPassword, 'win1251'), keyData
+    return subtle.digest('GOST R 34.11-94', passwordData).then(function (data) {
+      keyData = data
+      // Generate mask data
+      const secodeData = new Uint8Array(passwordData.byteLength + keyData.byteLength)
+      secodeData.set(new Uint8Array(passwordData), 0)
+      secodeData.set(new Uint8Array(keyData), passwordData.byteLength)
+      return subtle.digest('GOST R 34.11-94', secodeData)
+    }).then(function (data) {
+      // Remove mask
+      return subtle.importKey('raw', data, 'GOST 28147', false, ['unwrapKey'])
+    }).then(function (unwrappingKey) {
+      // Unwrap secret key
+      return subtle.unwrapKey('raw', keyData, unwrappingKey,
+        'GOST 28147-MASK/VN', 'GOST 28147-89',
+        'false', ['encrypt', 'decrypt', 'sign', 'verify'])
+    })
+  } // </editor-fold>
+
+  return {
+    /**
+         * Get the private key
+         *
+         * @memberOf GostKeys.ViPNetContainerEntry
+         * @instance
+         * @param {string} keyPassword The password of secrect key for decryption
+         * @returns {Promise} Promise to return the {@link Key}
+         */
+    getPrivateKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, keyPart, encryptedKey
+      // Decrypt key
+      return new Promise(call).then(function () {
+        return !keyPassword || typeof keyPassword === 'string' ?
+          getKeyPassword(keyPassword) : keyPassword
+      }).then(function (key) {
+        keyPassword = key
+        // Verify password
+        keyPart = self.keyPart
+        encryptedKey = new Uint8Array(keyPart, 0, keyPart.byteLength - 4 - 8)
+        const macKey = new Uint8Array(keyPart, encryptedKey.byteLength, 4),
+          encodedKeyInfo = self.keyInfo.encode(),
+          data = new Uint8Array(encryptedKey.byteLength + encodedKeyInfo.byteLength)
+        data.set(new Uint8Array(encryptedKey), 0)
+        data.set(new Uint8Array(encodedKeyInfo), encryptedKey.byteLength)
+        return subtle.verify({ name: 'GOST 28147-89-MAC' }, keyPassword, macKey, data)
+      }).then(function (result) {
+        if (!result) {throw new Error('Invalid key password')}
+        const iv = new Uint8Array(keyPart, keyPart.byteLength - 8, 8)
+        // Decrypt key data
+        return subtle.decrypt({ name: 'GOST 28147-89-CFB', iv: iv }, keyPassword, encryptedKey)
+      }).then(function (keyData) {
+        const l2 = keyData.byteLength / 2
+        if (self.keyInfo.keyClass & 0x3 === 0) {
+          // Secret key. Remove mask and import
+          return subtle.importKey('raw', new Int32Array(keyData, l2, l2), 'GOST 28147', false,
+            ['unwrapKey']).then(function (unwrappingKey) {
+            // Unwrap secret key
+            return subtle.unwrapKey('raw', new Int32Array(keyData, 0, l2), unwrappingKey,
+              'GOST 28147-MASK/VN', 'GOST 28147-89',
+              'false', ['encrypt', 'decrypt', 'sign', 'verify'])
+          })
+        }
+        // Private key
+        const algorithm = self.keyInfo.algorithm ||
+                        (self.certificate && self.certificate.subjectPublicKeyInfo.algorithm)
+        if (!algorithm) {throw new Error('Algorithm is not specified')}
+        const unwrapAlgorithm = expand(algorithm, { mode: 'MASK', procreator: 'VN' })
+        unwrapAlgorithm.name = unwrapAlgorithm.name.replace('-DH', '')
+        const wrapped = new Uint8Array(keyData, 0, l2),
+          mask = new Uint8Array(keyData, l2, l2)
+        // Import mask key
+        return subtle.importKey('raw', mask, unwrapAlgorithm, 'false', ['sign', 'unwrapKey']).then(function (unwrappingKey) {
+          // Unwrap private key
+          return subtle.unwrapKey('raw', wrapped, unwrappingKey, unwrapAlgorithm, algorithm, 'true', ['sign', 'deriveBits', 'deriveKey'])
+        }).then(function (privateKey) {
+          // Generate key pair
+          if (self.publicKey) {
+            return subtle.generateKey(expand(privateKey.algorithm, { ukm: privateKey.buffer }),
+              privateKey.extractable, privateKey.usages)
+          }
+          return { privateKey: privateKey }
+        }).then(function (keyPair) {
+          // Compare public key
+          if (self.publicKey && !equalBuffers(keyPair.publicKey.buffer, self.publicKey)) {throw new Error('Check public key failed')}
+          return keyPair.privateKey
+        })
+
+      })
+    }, // </editor-fold>
+    /**
+         * Set the private key
+         *
+         * @memberOf GostKeys.ViPNetContainerEntry
+         * @instance
+         * @param {Key} privateKey The private key
+         * @param {string} keyPassword The secret key encryption
+         * @param {number} days Validity days. Default 7305 days (20 years)
+         * @returns {Promise} Promise to return the self object after set the key
+         */
+    setPrivateKey: function (privateKey, keyPassword, days) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, wrapAlgorithm, wrappingKey, keyData, keyPart
+      // Decrypt key
+      return new Promise(call).then(function () {
+        return !keyPassword || typeof keyPassword === 'string' ?
+          getKeyPassword(keyPassword) : keyPassword
+      }).then(function (key) {
+        keyPassword = key
+        const algorithm = privateKey.algorithm
+        self.keyInfo.algorithm = algorithm
+        self.keyInfo.serialNumber = getSeed(16)
+        self.keyInfo.keyUID = getSeed(8)
+        self.keyInfo.validity = {
+          notBefore: today(),
+          notAfter: today(days || options.days),
+        }
+        if (privateKey.type === 'private') {
+          // Generate mask
+          wrapAlgorithm = expand(algorithm, { mode: 'MASK', procreator: 'VN' })
+          wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '')
+          self.keyInfo.keyClass = 1
+          self.keyInfo.keyType = 43556
+          // Generate public key
+          return subtle.generateKey(expand(algorithm, { ukm: privateKey.buffer }), true,
+            ['sign', 'verify']).then(function (keyPair) {
+            self.publicKey = keyPair.publicKey.buffer
+            // Check certificate
+            if (self.certificate) {
+              const spki = self.certificate.subjectPublicKeyInfo
+              return subtle.importKey('spki', spki.encode(), spki.algorithm, true, ['verify'])
+            }
+          }).then(function (publicKey) {
+            if (publicKey && !equalBuffers(publicKey.buffer, self.publicKey)) {delete self.certificate} // Remove not valid certificate
+          })
+        } if (privateKey.type === 'secret') {
+          wrapAlgorithm = 'GOST 28147/MASK/VN'
+          delete self.certificate
+          delete self.publicKey
+          self.keyInfo.keyClass = 64
+          self.keyInfo.keyType = 24622
+        } else {throw new Error('Invalid key type')}
+      }).then(function () {
+        // Generate mask
+        return subtle.generateKey(wrapAlgorithm, true, ['wrapKey', 'unwrapKey'])
+      }).then(function (key) {
+        wrappingKey = key
+        // Wrap private key with mask
+        return subtle.wrapKey('raw', privateKey, wrappingKey, wrapAlgorithm)
+      }).then(function (data) {
+        keyData = new Uint8Array(data.byteLength * 2)
+        keyData.set(new Uint8Array(data))
+        return subtle.exportKey('raw', wrappingKey)
+      }).then(function (data) {
+        keyData.set(new Uint8Array(data), data.byteLength)
+        keyPart = new Uint8Array(keyData.byteLength + 12)
+        // Encrypt key
+        const encyption = { name: 'GOST 28147-CFB', iv: getSeed(8) }
+        keyPart.set(new Uint8Array(encyption.iv), keyPart.byteLength - 8)
+        return subtle.encrypt(encyption, keyPassword, keyData)
+      }).then(function (encryptedKey) {
+        keyPart.set(new Uint8Array(encryptedKey))
+        // Calculate MAC
+        const encodedKeyInfo = self.keyInfo.encode(),
+          data = new Uint8Array(encryptedKey.byteLength + encodedKeyInfo.byteLength)
+        data.set(new Uint8Array(encryptedKey), 0)
+        data.set(new Uint8Array(encodedKeyInfo), encryptedKey.byteLength)
+        return subtle.sign({ name: 'GOST 28147-89-MAC' }, keyPassword, data)
+      }).then(function (macKey) {
+        keyPart.set(new Uint8Array(macKey), keyPart.byteLength - 12)
+        self.keyPart = keyPart.buffer
+        return self
+      })
+    }, // </editor-fold>
+    /**
+         * Encode container entry
+         *
+         * @memberOf GostKeys.ViPNetContainerEntry
+         * @instance
+         * @param {string} format The encoded data format
+         * @returns {CryptoOperationData}
+         */
+    encode: function (format) // <editor-fold defaultstate="collapsed">
+    {
+      const header = asn1.ViPNetInfo.method('encode').call(this),
+        result = new Uint8Array(8 + header.byteLength + this.keyPart.byteLength)
+      set32(result.buffer, 0, 4 + header.byteLength + this.keyPart.byteLength)
+      result.set(new Uint8Array(header), 4)
+      set32(result.buffer, 4 + header.byteLength, this.keyPart.byteLength)
+      result.set(new Uint8Array(this.keyPart), 8 + header.byteLength)
+      if (format === 'PEM') {return coding.Base64.encode(result.buffer)}
+      return result.buffer
+    }, // </editor-fold>
+  }
+})(), {
+  /**
+     * Decode container entry
+     *
+     * @memberOf GostKeys.ViPNetContainerEntry
+     * @param {FormatedData} entry
+     * @returns {GostKeys.ViPNetContainer}
+     */
+  decode: function (entry) // <editor-fold defaultstate="collapsed">
+  {
+    if (typeof entry === 'string') {entry = coding.Base64.decode(entry)}
+    entry = buffer(entry)
+    // Entry size
+    const entrySize = get32(entry, 0)
+    if (entry.byteLength !== entrySize + 4) {throw new Error('Invalid container entry size')}
+    // Decode header info
+    const source = coding.BER.decode(new Uint8Array(entry, 4, entrySize))
+    const result = asn1.ViPNetInfo.decode.call(this, source)
+    // Decode key info
+    const headerSize = source.header.byteLength + source.content.byteLength,
+      keyPartSize = get32(entry, 4 + headerSize)
+    if (entry.byteLength !== headerSize + keyPartSize + 8) {throw new Error('Invalid container key part size')}
+    result.keyPart = new Uint8Array(new Uint8Array(entry, headerSize + 8, keyPartSize)).buffer
+    // Key Info buffer - can be used in case error of format encoding
+    // var keyInfoSource = source.object[1];
+    // result.encodedKeyInfo = new Uint8Array(new Uint8Array(keyInfoSource.header.buffer,
+    //    keyInfoSource.header.byteOffset, keyInfoSource.header.byteLength + keyInfoSource.content.byteLength)).buffer;
+    return result
+  }, // </editor-fold>
+})
+
+/**
+ * A class for password-encrypted private keys in CryptoPro container
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.SignalComPrivateKeyInfo
+ */
+GostKeys.prototype.ViPNetContainerEntry = ViPNetContainerEntry
+
+/**
+ * A class for password-encrypted private keys in ViPNet container
+ *
+ * @class GostKeys.ViPNetContainer
+ * @param {(FormatedData|GostKeys.ViPNetContainer)} container
+ */
+function ViPNetContainer(container) // <editor-fold defaultstate="collapsed">
+{
+  if (container && (container instanceof CryptoOperationData ||
+        container.buffer instanceof CryptoOperationData ||
+        typeof container === 'string')) {this.decode(container)} else {
+    container = container || {}
+    this.fileType = container.fileType || 'ITCS'
+    this.fileVersion = container.fileVersion || 0x10
+    if (container.applicationHeader) {this.applicationHeader = container.applicationHeader}
+    this.entries = container.entries || []
+  }
+} // </editor-fold>
+
+
+extend(Object, ViPNetContainer, {
+  /**
+     * Get the certificate from the container
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {number} index Index of the entriy. Default 0
+     * @returns {Promise} Promise to return {@link GostCert.X509}
+     */
+  getCertificate: function (index) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      const entry = self.entries[index || 0]
+      if (!entry) {throw new Error('Entry not defined')}
+      if (entry.certificate) {return new cert.X509(entry.certificate)}
+    })
+  }, // </editor-fold>
+  /**
+     * Get the private key info
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {string} keyPassword The password for decryption
+     * @param {number} index Index of the entriy. Default 0
+     * @returns {Promise} Promise to return {@link GostKeys.PKCS8}
+     */
+  getKey: function (keyPassword, index) // <editor-fold defaultstate="collapsed">
+  {
+    return this.getPrivateKey(keyPassword, index).then(function (privateKey) {
+      return new PKCS8().setPrivateKey(privateKey)
+    })
+  }, // </editor-fold>
+  /**
+     * Get the private key
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {string} keyPassword The password of secrect key for decryption
+     * @param {number} index Index of the entriy. Default 0
+     * @returns {Promise} Promise to return the {@link Key}
+     */
+  getPrivateKey: function (keyPassword, index) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      const entry = self.entries[index || 0]
+      if (!entry) {throw new Error('Entry not defined')}
+      return entry.getPrivateKey(keyPassword)
+    })
+  }, // </editor-fold>
+  /**
+     * Set the certificate to the container
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {(FormatedData|GostCert.X509)} certificate The certificate
+     * @param {number} index Index of the entriy. Default 0
+     * @returns {Promise} Promise to return self object after set certificate
+     */
+  setCertificate: function (certificate, index) // <editor-fold defaultstate="collapsed">
+  {
+    var self = this, entry, certificate
+    return new Promise(call).then(function () {
+      entry = self.entries[index || 0] ||
+                (self.entries[index || 0] = new ViPNetContainerEntry())
+      certificate = new cert.X509(certificate)
+      if (entry.publicKey) {return certificate.getPublicKey()}
+    }).then(function (publicKey) {
+      if (publicKey && !equalBuffers(entry.publicKey, publicKey.buffer)) {throw new Error('Invalid certificate for private key')}
+      entry.certificate = certificate
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Set the key to the container
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {(FormatedData|GostKeys.PKCS8)} keyInfo The key
+     * @param {string} keyPassword The password for decryption
+     * @param {number} index Index of the entriy. Default 0
+     * @param {number} days Validity days. Default 7305 days (20 years)
+     * @returns {Promise} Promise to return self object after set the key
+     */
+  setKey: function (keyInfo, keyPassword, index, days) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new PKCS8(keyInfo).getPrivateKey().then(function (privateKey) {
+      return self.setPrivateKey(privateKey, keyPassword, index, days)
+    })
+  }, // </editor-fold>
+  /**
+     * Set the private key
+     *
+     * @memberOf GostKeys.ViPNetContainerEntry
+     * @instance
+     * @param {Key} privateKey The private key
+     * @param {string} keyPassword The secret key encryption
+     * @param {number} index Index of the entriy. Default 0
+     * @param {number} days Validity days. Default 7305 days (20 years)
+     * @returns {Promise} Promise to return the self object after set the key
+     */
+  setPrivateKey: function (privateKey, keyPassword, index, days) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      const entry = self.entries[index || 0] ||
+                (self.entries[index || 0] = new ViPNetContainerEntry())
+      return entry.setPrivateKey(privateKey, keyPassword, days)
+    }).then(function () {
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Change key password
+     *
+     * @memberOf GostKeys.ViPNetContainerEntry
+     * @instance
+     * @param {string} oldKeyPassword Old key password
+     * @param {string} newKeyPassword New key password
+     * @returns {Promise} Promise to return self object after change password
+     */
+  changePassword: function (oldKeyPassword, newKeyPassword) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      return self.getPrivateKey(oldKeyPassword).then(function (privateKey) {
+        return self.setPrivateKey(privateKey, newKeyPassword)
+      })
+    })
+  }, // </editor-fold>
+  /**
+     * Generate private key, certificate and return certification request
+     *
+     * @memberOf GostKeys.ViPNetContainerEntry
+     * @instance
+     * @param {(FormatedData|GostASN1.CertificationRequest)} req The request templates
+     * @param {(Key|CryptoOperationData|string)} keyPassword The secret key or password for decryption
+     * @param {(AlgorithmIdentifier|string)} keyAlgorithm The name of provider or algorithm
+     * @returns {Promise} Promise to return {@link GostCert.Request}
+     */
+  generate: function (req, keyPassword, keyAlgorithm) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, certificate, keyInfo
+    return new Promise(call).then(function () {
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
+    }).then(function (key) {
+      keyInfo = key
+      return self.setKey(keyInfo, keyPassword)
+    }).then(function () {
+      // Create the new certificate
+      certificate = new cert.X509(req)
+      return certificate.sign(keyInfo)
+    }).then(function () {
+      return self.setCertificate(certificate)
+    }).then(function () {
+      return req
+    })
+  }, // </editor-fold>
+  /**
+     * Encode objet to container
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {string} format The encoded data format
+     * @returns {CryptoOperationData}
+     */
+  encode: function (format) // <editor-fold defaultstate="collapsed">
+  {
+    // Encode entries
+    let entries = [], entriesSize = 0
+    this.entries.forEach(function (entry) {
+      const encoded = entry.encode()
+      entriesSize += encoded.byteLength
+      entries.push(encoded)
+    })
+    const headerSize = this.applicationHeader ? this.applicationHeader.byteLength : 0,
+      result = new Uint8Array(12 + headerSize + entriesSize)
+    result.set(new Uint8Array(coding.Chars.decode(this.fileType, 'ascii')))
+    set32(result.buffer, 4, this.fileVersion)
+    set32(result.buffer, 8, headerSize)
+    if (headerSize > 0) {result.set(new Uint8Array(this.applicationHeader), 12)}
+    let offset = 12 + headerSize
+    entries.forEach(function (entry) {
+      result.set(new Uint8Array(entry), offset)
+      offset += entry.byteLength
+    })
+    if (format === 'PEM') {return coding.Base64.encode(result.buffer)}
+    return result.buffer
+  }, // </editor-fold>
+  /**
+     * Decode container to the object
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {FormatedData} container
+     * @returns {GostKeys.ViPNetContainer}
+     */
+  decode: function (container) // <editor-fold defaultstate="collapsed">
+  {
+    container = this.constructor.decode(container)
+    this.fileType = container.fileType
+    this.fileVersion = container.fileVersion
+    if (container.applicationHeader) {this.applicationHeader = container.applicationHeader}
+    this.entries = container.entries
+  }, // </editor-fold>
+}, {
+  /**
+     * Encode object
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {GostKeys.ViPNetContainer} object
+     * @param {string} format The encoded data format
+     * @returns {CryptoOperationData}
+     */
+  encode: function (object, format) // <editor-fold defaultstate="collapsed">
+  {
+    return new this(object).encode(format)
+  }, // </editor-fold>
+  /**
+     * Decode container
+     *
+     * @memberOf GostKeys.ViPNetContainer
+     * @instance
+     * @param {FormatedData} container
+     * @returns {GostKeys.ViPNetContainer}
+     */
+  decode: function (container) // <editor-fold defaultstate="collapsed">
+  {
+    if (typeof container === 'string') {container = coding.Base64.decode(container)}
+    container = buffer(container)
+    // File type
+    const fileType = coding.Chars.encode(new Uint8Array(container, 0, 4), 'ascii')
+    if (fileType !== 'ITCS' && fileType !== 'PKEY' && fileType !== '_CCK' && fileType !== '_LCK') {throw new Error('Unsupported ViPNet container type')}
+    // File version
+    const fileVersion = get32(container, 4),
+      i = fileVersion >>> 16, j = fileVersion & 0xffff
+    if ((i !== 0 && i !== 1) || j > 0xff) {throw new Error('Unsupported ViPNet container version')}
+    // File header
+    let headerSize = get32(container, 8), applicationHeader
+    if (headerSize > 0) {applicationHeader = buffer(new Uint8Array(container, 12, headerSize))}
+    // Read entries
+    let offset = 12 + headerSize, entries = []
+    while (offset < container.byteLength) {
+      // Entry size
+      const entrySize = get32(container, offset)
+      // Decode entry
+      entries.push(ViPNetContainerEntry.decode(
+        new Uint8Array(container, offset, entrySize + 4)))
+      offset = offset + entrySize + 4
+    }
+    return new ViPNetContainer({
+      fileType: fileType,
+      fileVersion: fileVersion,
+      applicationHeader: applicationHeader,
+      entries: entries,
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * A class for password-encrypted private keys in CryptoPro container
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.SignalComPrivateKeyInfo
+ */
+GostKeys.prototype.ViPNetContainer = ViPNetContainer
+
+/**
+ * An implementation of PKCS #12 password encryption/integrity modes. Both input and output are implemented.<br><br>
+ *
+ * A PFX object may contain multiple authenticated safes (represented as GostASN1.SafeContents objects).
+ * Each authenticated safe may have its own encryption method, and contains a number of bags
+ * (represented as instances of GostASN1.SafeBag). <br>
+ * Note: the methods and constructors that input a PFX object do not automatically check the validity of the MAC.
+ * You need to explicitly call verify() to make this check.
+ *
+ * @class GostKeys.PKCS12
+ * @extends GostASN1.PFX
+ * @param {(FormatedData|GostASN1.PFX)} store
+ */
+function PKCS12(store) // <editor-fold defaultstate="collapsed">
+{
+  asn1.PFX.call(this, store || {
+    version: 3,
+    authSafe: {
+      contentType: 'data',
+    },
+  })
+} // </editor-fold>
+
+extend(asn1.PFX, PKCS12, (function () {
+
+  // <editor-fold defaultstate="collapsed">
+  function calcHMAC(derivation, password, content) {
+    const hmac = { name: 'HMAC', hash: derivation.hash }
+    // Import password for key generation
+    return subtle.importKey('raw', passwordData(derivation, password),
+      derivation, false, ['deriveKey']).then(function (passwordKey) {
+      // Generate key from password.
+      return subtle.deriveKey(derivation, passwordKey, hmac, false, ['sign'])
+    }).then(function (integrityKey) {
+      // Sign MAC
+      return subtle.sign(hmac, integrityKey, content)
+    })
+  }
+
+  function verifyHMAC(derivation, password, digest, content) {
+    return calcHMAC(derivation, password, content).then(function (test) {
+      if (!equalBuffers(digest, test)) {throw new Error('Invalid password, MAC is not verified')}
+    })
+  }
+  // </editor-fold>
+  return {
+    /**
+         * Sign the enclosed content with given digest algorithm
+         *
+         * @memberOf GostKeys.PKCS12
+         * @instance
+         * @param {string} password The password
+         * @param {(AlgorithmIdentifier|string)} digestAlgorithm Digest algorithm or provider name
+         * @returns {Promise} Promise to return self object after enclose content
+         */
+    sign: function (password, digestAlgorithm) // <editor-fold defaultstate="collapsed">
+    {
+      const self = this
+      return new Promise(call).then(function () {
+        // Calculate mac for password integrity
+        if (password) {
+          // Define digeset algorithm
+          let hash, derivation, digestProvider
+          if (digestAlgorithm) {digestProvider = providers[digestAlgorithm]} else {digestAlgorithm = providers[options.providerName].digest}
+          if (digestProvider) {
+            hash = digestProvider.digest
+            derivation = digestProvider.derivation
+          } else {
+            hash = digestAlgorithm
+            derivation = { name: 'PFXKDF', hash: hash, iterations: 2000 }
+          }
+          // Add salt
+          derivation = expand(derivation, { salt: getSeed(saltSize(hash)), diversifier: 3 })
+          // Sign HMAC
+          const content = self.authSafe.content
+          return calcHMAC(derivation, password, content).then(function (digest) {
+            self.macData = {
+              mac: {
+                digestAlgorithm: hash,
+                digest: digest,
+              },
+              macSalt: derivation.salt,
+              iterations: derivation.iterations,
+            }
+            return self
+          })
+        } return self
+      })
+    }, // </editor-fold>
+    /**
+         * Verifies the MAC.
+         *
+         * @memberOf GostKeys.PKCS12
+         * @instance
+         * @param password The password for mac verification
+         * @returns {Promise} Promise to return self object after verification
+         */
+    verify: function (password) // <editor-fold defaultstate="collapsed">
+    {
+      let self = this, authSafe = self.authSafe, derivation
+      return new Promise(call).then(function () {
+        // Indirectly verification
+        if (authSafe.contentType === 'data') {
+          // Check MAC
+          if (self.macData) {
+            if (!password) {throw new Error('Password must be defined for the MAC verification')}
+            derivation = {
+              name: 'PFXKDF',
+              hash: self.macData.mac.digestAlgorithm,
+              salt: self.macData.macSalt,
+              iterations: self.macData.iterations,
+              diversifier: 3,
+            }
+            const content = self.authSafe.content, digest = self.macData.mac.digest
+            // Verify HMAC with PFXKDF (PKCS#12)
+            return verifyHMAC(derivation, password, digest, content)['catch'](function () {
+              // Verify HMAC with PBKDF2 (TC 26, PKCS#5)
+              derivation.name = 'PBKDF2'
+              return verifyHMAC(derivation, password, digest, content)
+            })
+          } // No check with MAC
+        } else {throw new Error('Unsupported format')}
+      }).then(function () {
+        return self
+      })
+    }, // </editor-fold>
+  }
+})())
+
+/**
+ * An implementation of PKCS #12 password encryption/integrity modes.
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.PKCS12
+ */
+GostKeys.prototype.PKCS12 = PKCS12
+
+/**
+ * This type of entry holds a cryptographic PrivateKey, which is optionally stored
+ * in a protected format to prevent unauthorized access. It is also accompanied by
+ * a certificate chain for the corresponding public key.
+ *
+ * @class GostKeys.KeyEntry
+ * @property {(GostKeys.PKCS8|GostKeys.PKCS8Encrypted)} key The Private Key
+ * @property {GostCert.X509[]} certs The X.509 Certificates chain
+ * @property {GostCert.CRL[]} crls The X.509 CRLs for certificate chain
+ */
+
+/**
+ * This class represents a storage facility for cryptographic keys and certificates.
+ *
+ * @class GostKeys.KeyStore
+ * @param {Object} entries Object contains aliased {@link KeyEntry} objects
+ */
+function KeyStore(entries) // <editor-fold defaultstate="collapsed">
+{
+  this.entries = {}
+  if (entries) {
+    for (const name in entries) {this.setEntry(name, entries[name])}
+  }
+} // </editor-fold>
+
+extend(Object, KeyStore, {
+  /**
+     * Lists all the alias names of this keystore.
+     *
+     * @memberOf GostKeys.KeyStore
+     * @instance
+     * @returns {string[]}
+     */
+  aliases: function () // <editor-fold defaultstate="collapsed">
+  {
+    const result = []
+    for (const name in this.entries) {result.push(name)}
+    return result
+  }, // </editor-fold>
+  /**
+     * Checks if the given alias exists in this keystore.
+     *
+     * @memberOf GostKeys.KeyStore
+     * @instance
+     * @param {string} alias The alias name
+     * @returns {boolean} True if the alias exists, false otherwise
+     */
+  containsAlias: function (alias) // <editor-fold defaultstate="collapsed">
+  {
+    return !!this.entries[alias]
+  }, // </editor-fold>
+  /**
+     * Deletes the entry identified by the given alias from this keystore.
+     *
+     * @memberOf GostKeys.KeyStore
+     * @instance
+     * @param {string} alias The alias name
+     */
+  deleteEntry: function (alias) // <editor-fold defaultstate="collapsed">
+  {
+    delete this.entries[alias]
+  }, // </editor-fold>
+  /**
+     * Saves a keystore Entry under the specified alias.
+     *
+     * @memberOf GostKeys.KeyStore
+     * @instance
+     * @param {string} alias The alias name
+     * @param {GostKeys.KeyEntry} entry The entry
+     */
+  setEntry: function (alias, entry) // <editor-fold defaultstate="collapsed">
+  {
+    const r = {}
+    // Keys
+    if (entry.key) {
+      try {
+        r.key = new PKCS8(entry.key, true) // Private key
+      } catch (e) {
+        try {
+          r.key = new PKCS8Encrypted(entry.key, true) // Encrypted private key
+        } catch (e1) {
+          if (entry.key instanceof CryptoOperationData) {r.key = entry.key} // Secret key
+          else {throw new Error('Unknown Key format')}
+        }
+      }
+    }
+    // Certs
+    if (entry.certs) {
+      const certs = entry.certs instanceof Array ? entry.certs : [entry.certs]
+      for (var i = 0; i < certs.length; i++) {
+        try {
+          certs[i] = new cert.X509(certs[i])
+        } catch (e) {
+        }
+      }
+      r.certs = certs
+    }
+    // CRLs
+    if (entry.crls) {
+      const crls = entry.crls instanceof Array ? entry.crls : [entry.crls]
+      for (var i = 0; i < crls.length; i++) {
+        try {
+          crls[i] = new cert.CRL(crls[i])
+        } catch (e) {
+        }
+      }
+      r.crls = crls
+    }
+    this.entries[alias] = r
+  }, // </editor-fold>
+  /**
+     * Gets a keystore Entry for the specified alias
+     *
+     * @memberOf GostKeys.KeyStore
+     * @instance
+     * @param {string} alias The alias name
+     * @returns {GostKeys.KeyEntry} The entry
+     */
+  getEntry: function (alias) // <editor-fold defaultstate="collapsed">
+  {
+    return this.entries[alias]
+  }, // </editor-fold>
+  /**
+     * Loads this KeyStore from the given input stream.<br><br>
+     * A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device),
+     * or to check the integrity of the keystore data. If a password is not given for integrity checking,
+     * then integrity checking is not performed.
+     *
+     * @memberOf GostKeys.KeyStore
+     * @instance
+     * @param {(FormatedData|GostKeys.PKSC12)} store The input stream from which the keystore is loaded
+     * @param {string} password The password used to check the integrity of the keystore, the password used to unlock the keystore
+     * @returns {Promise} Promise to return self object after store loaded
+     */
+  load: function (store, password) // <editor-fold defaultstate="collapsed">
+  {
+    const self = this
+    return new Promise(call).then(function () {
+      // Verify store file
+      store = new PKCS12(store)
+      return store.verify(password)
+    }).then(function () {
+      if (store.authSafe.contentType !== 'data') {throw new Error('Unsupported PFX format')}
+      const authSafe = asn1.AuthenticatedSafe.decode(store.authSafe.content).object,
+        promises = []
+      // Decrypt encrypted content
+      authSafe.forEach(function (info) {
+        if (info.contentType === 'data') {promises.push(new cms.DataContentInfo(info))} else if (info.contentType === 'encryptedData') {promises.push(new cms.EncryptedDataContentInfo(info).getEnclosed(password))} else {throw new Error('Unsupported PFX format')}
+      })
+      return Promise.all(promises)
+    }).then(function (contents) {
+      // Read bags
+      const entries = {}
+      contents.forEach(function (info) {
+        const bags = asn1.SafeContents.decode(info.content).object
+        bags.forEach(function (bag) {
+          const keyId = coding.Hex.encode((bag.bagAttributes && bag.bagAttributes.localKeyId)
+                        || getSeed(4), true), entry = entries[keyId] || (entries[keyId] = {})
+          switch (bag.bagId) {
+            case 'keyBag':
+              entry.key = new PKCS8(bag.bagValue)
+              break
+            case 'pkcs8ShroudedKeyBag':
+              entry.key = new PKCS8Encrypted(bag.bagValue)
+              break
+            case 'secretBag':
+              if (bag.bagValue.secretTypeId === 'secret') {entry.key = bag.bagValue.secretValue}
+              break
+            case 'certBag':
+              var certs = entry.certs || (entry.certs = [])
+              if (bag.bagValue.certId === 'x509Certificate') {certs.push(new cert.X509(bag.bagValue.certValue))}
+              break
+            case 'crlBag':
+              var crls = entry.crls || (entry.crls = [])
+              if (bag.bagValue.crlId === 'x509CRL') {crls.push(new cert.CRL(bag.bagValue.crlValue))}
+              break
+          }
+          if (bag.bagAttributes && bag.bagAttributes.friendlyName) {entry.friendlyName = bag.bagAttributes.friendlyName}
+        })
+      })
+      // Decrypt keys
+      const promises = []
+      for (const name in entries) {
+        promises.push((function (entry) {
+        // Try to decrypt private key
+          if (entry.key instanceof PKCS8Encrypted) {
+            return entry.key.getKey(password).then(function (key) {
+            // Return entry with decrypted key
+              entry.key = key
+              return entry
+            })['catch'](function () {
+            // Return entry with encrypted key
+              return entry
+            })
+          }
+          return entry
+        })(entries[name]))
+      }
+      return Promise.all(promises)
+    }).then(function (entries) {
+      // Set alias names
+      entries.forEach(function (entry) {
+        const friendlyName = entry.friendlyName
+        if (friendlyName) {
+          delete entry.friendlyName
+          self.entries[friendlyName] = entry
+        } else {self.entries[generateUUID()] = entry}
+      })
+      return self
+    })
+  }, // </editor-fold>
+  /**
+     * Stores this keystore to the given output stream, and protects its integrity with the given password.
+     *
+     * @memberOf GostKeys.KeyStore
+     * @instance
+     * @param {string} password The password to generate the keystore integrity check
+     * @param {string} digestAlgortihm The digest algorithm or provider name for integrity check
+     * @param {string} encryptionAlgortihm The encryption algorithm or provider name for encrypt certificates
+     * @returns {Promise} Promise to return {@link GostKeyst.PKCS12}
+     */
+  store: function (password, digestAlgortihm, encryptionAlgortihm) // <editor-fold defaultstate="collapsed">
+  {
+    let self = this, keys = [], contents = [], authSafe = []
+    return new Promise(call).then(function () {
+      // Define encryption algorithm
+      if (encryptionAlgortihm) {
+        encryptionAlgortihm = providers[encryptionAlgortihm] ?
+          providers[encryptionAlgortihm].pbes : encryptionAlgortihm
+      } else if (digestAlgortihm) {
+        encryptionAlgortihm = providers[digestAlgortihm] ?
+          providers[digestAlgortihm].pbes : providers[options.providerName].pbes
+      } else {encryptionAlgortihm = providers[options.providerName].pbes}
+      // Prepare keys and certs
+      const index = 1
+      for (const name in self.entries) {
+        var keyId = new Uint32Array([index]), entry = self.entries[name]
+        if (entry.key) {
+          (function (key, attributes) {
+            if (key instanceof CryptoOperationData) {
+              contents.push({
+                bagId: 'secretBag',
+                bagValue: {
+                  secretTypeId: 'secret',
+                  secretValue: key,
+                  bagAttributes: attributes,
+                },
+              })
+            } else if (key instanceof PKCS8) {
+              if (encryptionAlgortihm && password) {
+                keys.push(new PKCS8Encrypted().setKey(key, password, encryptionAlgortihm).then(function (encryptedKey) {
+                  return {
+                    bagId: 'pkcs8ShroudedKeyBag',
+                    bagValue: encryptedKey,
+                    bagAttributes: attributes,
+                  }
+                }))
+              } else {
+                keys.push({
+                  bagId: 'keyBag',
+                  bagValue: key,
+                  bagAttributes: attributes,
+                })
+              }
+            } else if (key instanceof PKCS8Encrypted) {
+              keys.push({
+                bagId: 'pkcs8ShroudedKeyBag',
+                bagValue: key,
+                bagAttributes: attributes,
+              })
+            }
+          })(entry.key, {
+            localKeyId: keyId,
+            friendlyName: name,
+          })
+        }
+        if (entry.certs) {
+          entry.certs.forEach(function (certificate) {
+            const attributes = { localKeyId: keyId }
+            if (certificate instanceof cert.X509) {
+              contents.push({
+                bagId: 'certBag',
+                bagValue: {
+                  certId: 'x509Certificate',
+                  certValue: certificate,
+                },
+                bagAttributes: attributes,
+              })
+            }
+          })
+        }
+        if (entry.crls) {
+          entry.crls.forEach(function (crl) {
+            const attributes = { localKeyId: keyId }
+            if (crl instanceof cert.CRL) {
+              contents.push({
+                bagId: 'crlBag',
+                bagValue: {
+                  crlId: 'x509CRL',
+                  crlValue: crl,
+                },
+                bagAttributes: attributes,
+              })
+            }
+          })
+        }
+      }
+      // Encrypt keys
+      if (keys.length > 0) {return Promise.all(keys)}
+    }).then(function (bags) {
+      if (bags) {
+        const keyContents = asn1.SafeContents.encode(bags)
+        authSafe.push(new cms.DataContentInfo({
+          contentType: 'data',
+          content: keyContents,
+        }))
+      }
+
+      // Encrypt certificates and crls
+      if (contents.length > 0) {
+        contents = asn1.SafeContents.encode(contents)
+        if (encryptionAlgortihm && password) {
+          return new cms.EncryptedDataContentInfo().encloseContent(
+            contents, password, encryptionAlgortihm)
+        }
+        return new cms.DataContentInfo().encloseContent(contents)
+      }
+    }).then(function (contents) {
+      authSafe.push(contents)
+      // Set enclosed data
+      authSafe = new asn1.AuthenticatedSafe(authSafe)
+      const store = new PKCS12()
+      store.authSafe = {
+        contentType: 'data',
+        content: authSafe.encode(),
+      }
+      // Return new PKCS12 with enclosed authenificated content
+      return store.sign(password, digestAlgortihm)
+    })
+  }, // </editor-fold>
+})
+
+/**
+ * This class represents a storage facility for cryptographic keys and certificates.
+ *
+ * @memberOf GostKeys
+ * @type GostKeys.KeyStore
+ */
+GostKeys.prototype.KeyStore = KeyStore
+
+/**
+ * Implements the Key and Certificate Store methods
+ *
+ * @memberOf gostCrypto
+ * @type GostKeys
+ */
+gostCrypto.keys = new GostKeys()
+
+module.exports = GostKeys
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostRandom.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostRandom.js
new file mode 100644
index 0000000..74f7b74
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostRandom.js
@@ -0,0 +1,117 @@
+/**
+ * @file Implementation Web Crypto random generatore for GOST algorithms
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+/**
+ * The gostCrypto provide general purpose cryptographic functionality for
+ * GOST standards including a cryptographically strong pseudo-random number
+ * generator seeded with truly random values.
+ *
+ * @Class GostRandom
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const rootcrypto = global.crypto || global.msCrypto
+
+const TypeMismatchError = global.TypeMismatchError || Error
+const QuotaExceededError = global.QuotaExceededError || Error
+
+// Initialize mouse and time counters for random generator
+const randomRing = {
+  seed: new Uint8Array(1024),
+  getIndex: 0,
+  setIndex: 0,
+  set: function (x) {
+    if (this.setIndex >= 1024) {this.setIndex = 0}
+    this.seed[this.setIndex++] = x
+  },
+  get: function () {
+    if (this.getIndex >= 1024) {this.getIndex = 0}
+    return this.seed[this.getIndex++]
+  },
+}
+
+if (typeof document !== 'undefiend') {
+  try {
+    // Mouse move event to fill random array
+    document.addEventListener('mousemove', function (e) {
+      randomRing.set((new Date().getTime() & 255) ^
+                ((e.clientX || e.pageX) & 255) ^
+                ((e.clientY || e.pageY) & 255))
+    }, false)
+  } catch (e) {
+  }
+
+  try {
+    // Keypress event to fill random array
+    document.addEventListener('keydown', function (e) {
+      randomRing.set((new Date().getTime() & 255) ^
+                (e.keyCode & 255))
+    }, false)
+  } catch (e) {
+  }
+} // </editor-fold>
+
+function GostRandom() {
+}
+
+/**
+ * The getRandomValues method generates cryptographically random values. <br><br>
+ *
+ * Random generator based on JavaScript Web Crypto random genereator
+ * (if it is possible) or  Math.random mixed with time and parameters of
+ * mouse and keyboard events
+ *
+ * @memberOf GostRandom
+ * @param {(ArrayBuffer|ArrayBufferView)} array Destination buffer for random data
+ */
+GostRandom.prototype.getRandomValues = function (array) // <editor-fold defaultstate="collapsed">
+{
+
+  if (!array.byteLength) {throw new TypeMismatchError('Array is not of an integer type (Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array)')}
+
+  if (array.byteLength > 65536) {throw new QuotaExceededError('Byte length of array can\'t be greate then 65536')}
+
+  const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength)
+  if (rootcrypto && rootcrypto.getRandomValues) {
+    // Native window cryptographic interface
+    rootcrypto.getRandomValues(u8)
+  } else {
+    // Standard Javascript method
+    for (var i = 0, n = u8.length; i < n; i++) {u8[i] = Math.floor(256 * Math.random()) & 255}
+  }
+
+  // Mix bio randomizator
+  for (var i = 0, n = u8.length; i < n; i++) {u8[i] = u8[i] ^ randomRing.get()}
+  return array
+} // </editor-fold>
+
+module.exports = GostRandom
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostSecurity.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostSecurity.js
new file mode 100644
index 0000000..ad49faf
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostSecurity.js
@@ -0,0 +1,1105 @@
+/**
+ * @file GOST and common ASN.1 Object and Algorithm Identifiers
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const gostCrypto = require('./gostCrypto')
+
+// <editor-fold defaultstate="collapsed">
+
+// Expand javascript object
+function expand() {
+  const r = {}
+  for (let i = 0, n = arguments.length; i < n; i++) {
+    const item = arguments[i]
+    if (typeof item === 'object') {
+      for (const name in item) {r[name] = item[name]}
+    }
+  }
+  return r
+}
+// </editor-fold>
+
+/**
+ * Freandly names for ASN.1 Object Identifiers
+ *
+ * @field names
+ * @memberOf GostSecurity
+ */ // <editor-fold defaultstate="collapsed">
+const names = {
+  // CryptoPro algoritms
+  '1.2.643.2.2': 'CryptoPro',
+  '1.2.643.2.2.3': 'id-GostR3411-94-with-GostR3410-2001',
+  '1.2.643.2.2.4': 'id-GostR3411-94-with-GostR3410-94',
+  '1.2.643.2.2.9': 'id-GostR3411-94',
+  '1.2.643.2.2.10': 'id-HMACGostR3411-94',
+  '1.2.643.2.2.13.0': 'id-Gost28147-89-None-KeyWrap',
+  '1.2.643.2.2.13.1': 'id-Gost28147-89-CryptoPro-KeyWrap',
+  '1.2.643.2.2.14.0': 'id-Gost28147-89-None-KeyMeshing',
+  '1.2.643.2.2.14.1': 'id-Gost28147-89-CryptoPro-KeyMeshing',
+  '1.2.643.2.2.19': 'id-GostR3410-2001',
+  '1.2.643.2.2.20': 'id-GostR3410-94',
+  '1.2.643.2.2.20.1': 'id-GostR3410-94-a',
+  '1.2.643.2.2.20.2': 'id-GostR3410-94-aBis',
+  '1.2.643.2.2.20.3': 'id-GostR3410-94-b',
+  '1.2.643.2.2.20.4': 'id-GostR3410-94-bBis',
+  '1.2.643.2.2.21': 'id-Gost28147-89',
+  '1.2.643.2.2.22': 'id-Gost28147-89-MAC',
+  '1.2.643.2.2.30.0': 'id-GostR3411-94-TestParamSet',
+  '1.2.643.2.2.30.1': 'id-GostR3411-94-CryptoProParamSet',
+  '1.2.643.2.2.30.2': 'id-GostR3411-94-CryptoPro-B-ParamSet',
+  '1.2.643.2.2.30.3': 'id-GostR3411-94-CryptoPro-C-ParamSet',
+  '1.2.643.2.2.30.4': 'id-GostR3411-94-CryptoPro-D-ParamSet',
+  '1.2.643.2.2.31.0': 'id-Gost28147-89-TestParamSet',
+  '1.2.643.2.2.31.1': 'id-Gost28147-89-CryptoPro-A-ParamSet',
+  '1.2.643.2.2.31.2': 'id-Gost28147-89-CryptoPro-B-ParamSet',
+  '1.2.643.2.2.31.3': 'id-Gost28147-89-CryptoPro-C-ParamSet',
+  '1.2.643.2.2.31.4': 'id-Gost28147-89-CryptoPro-D-ParamSet',
+  '1.2.643.2.2.31.5': 'id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet',
+  '1.2.643.2.2.31.6': 'id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet',
+  '1.2.643.2.2.31.7': 'id-Gost28147-89-CryptoPro-RIC-1-ParamSet ',
+  '1.2.643.2.2.31.12': 'id-Gost28147-89-CryptoPro-tc26-1',
+  '1.2.643.2.2.31.13': 'id-Gost28147-89-CryptoPro-tc26-2',
+  '1.2.643.2.2.31.14': 'id-Gost28147-89-CryptoPro-tc26-3',
+  '1.2.643.2.2.31.15': 'id-Gost28147-89-CryptoPro-tc26-4',
+  '1.2.643.2.2.31.16': 'id-Gost28147-89-CryptoPro-tc26-5',
+  '1.2.643.2.2.31.17': 'id-Gost28147-89-CryptoPro-tc26-6',
+  '1.2.643.2.2.32.0': 'id-GostR3410-94-TestParamSet',
+  '1.2.643.2.2.32.2': 'id-GostR3410-94-CryptoPro-A-ParamSet',
+  '1.2.643.2.2.32.3': 'id-GostR3410-94-CryptoPro-B-ParamSet',
+  '1.2.643.2.2.32.4': 'id-GostR3410-94-CryptoPro-C-ParamSet',
+  '1.2.643.2.2.32.5': 'id-GostR3410-94-CryptoPro-D-ParamSet',
+  '1.2.643.2.2.33.1': 'id-GostR3410-94-CryptoPro-XchA-ParamSet',
+  '1.2.643.2.2.33.2': 'id-GostR3410-94-CryptoPro-XchB-ParamSet',
+  '1.2.643.2.2.33.3': 'id-GostR3410-94-CryptoPro-XchC-ParamSet',
+  // Certificate center attributes
+  '1.2.643.2.2.34.2': 'temporaryAccessToRC',
+  '1.2.643.2.2.34.3': 'internetContentSignature',
+  '1.2.643.2.2.34.4': 'adminRC',
+  '1.2.643.2.2.34.5': 'operatorRC',
+  '1.2.643.2.2.34.6': 'userRC',
+  '1.2.643.2.2.34.7': 'clientRC',
+  '1.2.643.2.2.34.8': 'serverRC',
+  '1.2.643.2.2.34.9': 'sysAdminRC',
+  '1.2.643.2.2.34.10': 'arcAdminRC',
+  '1.2.643.2.2.34.11': 'authorityPersonRC',
+  '1.2.643.2.2.34.12': 'clientCC',
+  '1.2.643.2.2.34.13': 'sysAdminCC',
+  '1.2.643.2.2.34.14': 'arcAdminCC',
+  '1.2.643.2.2.34.15': 'accessIPSecCA',
+  '1.2.643.2.2.34.16': 'auditAdminHSM',
+  '1.2.643.2.2.34.21': 'adminHSM',
+  '1.2.643.2.2.34.22': 'serverAdminHSH',
+  '1.2.643.2.2.34.24': 'winlogonCA',
+  '1.2.643.2.2.34.25': 'timestampServiceUser',
+  '1.2.643.2.2.34.26': 'statusServiceUser',
+  '1.2.643.2.2.34.27': 'arcAdminHSM',
+  '1.2.643.2.2.34.28': 'auditorHSM',
+  // CryptoPro algoritms
+  '1.2.643.2.2.35.0': 'id-GostR3410-2001-CryptoPro-TestParamSet',
+  '1.2.643.2.2.35.1': 'id-GostR3410-2001-CryptoPro-A-ParamSet',
+  '1.2.643.2.2.35.2': 'id-GostR3410-2001-CryptoPro-B-ParamSet',
+  '1.2.643.2.2.35.3': 'id-GostR3410-2001-CryptoPro-C-ParamSet',
+  '1.2.643.2.2.36.0': 'id-GostR3410-2001-CryptoPro-XchA-ParamSet',
+  '1.2.643.2.2.36.1': 'id-GostR3410-2001-CryptoPro-XchB-ParamSet',
+  '1.2.643.2.2.37.1': 'id-CryptoPro-GostPrivateKeys-V1',
+  '1.2.643.2.2.37.2': 'id-CryptoPro-GostPrivateKeys-V2',
+  '1.2.643.2.2.37.2.1': 'id-CryptoPro-GostPrivateKeys-V2-Full',
+  '1.2.643.2.2.37.2.2': 'id-CryptoPro-GostPrivateKeys-V2-PartOf',
+  '1.2.643.2.2.37.3.1': 'intermediateCertificates',
+  '1.2.643.2.2.37.3.2': 'trustedCertificatesSignature',
+  '1.2.643.2.2.37.3.3': 'trustedCertificatesExchange',
+  '1.2.643.2.2.37.3.10': 'keyValidity',
+  '1.2.643.2.2.38.1': 'personalBaseProlicy',
+  '1.2.643.2.2.38.2': 'networkBasePolicy',
+  '1.2.643.2.2.47.1': 'id-CryptoPro-ocsp-treats-exp-key-or-exp-cert-rev',
+  '1.2.643.2.2.47.2': 'id-CryptoPro-ocsp-crl-locator',
+  '1.2.643.2.2.47.3': 'id-CryptoPro-ocsp-instant-revocation-indicator',
+  '1.2.643.2.2.47.4': 'id-CryptoPro-ocsp-revocation-announcement-reference',
+  '1.2.643.2.2.47.5': 'id-CryptoPro-ocsp-historical-request',
+  '1.2.643.2.2.49.2': 'limitedLicense',
+  '1.2.643.2.2.96': 'id-GostR3410-2001-CryptoPro-ESDH',
+  '1.2.643.2.2.97': 'id-GostR3410-94-CryptoPro-ESDH',
+  '1.2.643.2.2.98': 'id-GostR3410-2001DH',
+  '1.2.643.2.2.99': 'id-GostR3410-94DH',
+  // signature attributes
+  '1.2.643.2.45.1.1.1': 'signatureComment',
+  '1.2.643.2.45.1.1.2': 'resourceName',
+  '1.2.643.2.45.1.1.3': 'signatureUsage',
+  // params
+  '1.2.643.3.131.1.1': 'INN',
+  '1.2.643.3.141.1.1': 'RNS FSS',
+  '1.2.643.3.141.1.2': 'KP FSS',
+  // tc26
+  '1.2.643.7.1': 'tc26',
+  '1.2.643.7.1.1.1.1': 'id-tc26-gost3410-12-256',
+  '1.2.643.7.1.1.1.2': 'id-tc26-gost3410-12-512',
+  '1.2.643.7.1.1.2.1': 'id-tc26-gost3411-94',
+  '1.2.643.7.1.1.2.2': 'id-tc26-gost3411-12-256',
+  '1.2.643.7.1.1.2.3': 'id-tc26-gost3411-12-512',
+  '1.2.643.7.1.1.3.1': 'id-tc26-signwithdigest-gost3410-12-94',
+  '1.2.643.7.1.1.3.2': 'id-tc26-signwithdigest-gost3410-12-256',
+  '1.2.643.7.1.1.3.3': 'id-tc26-signwithdigest-gost3410-12-512',
+  '1.2.643.7.1.1.4.1': 'id-tc26-hmac-gost-3411-12-256',
+  '1.2.643.7.1.1.4.2': 'id-tc26-hmac-gost-3411-12-512',
+  '1.2.643.7.1.1.6.1': 'id-tc26-agreement-gost-3410-12-256',
+  '1.2.643.7.1.1.6.2': 'id-tc26-agreement-gost-3410-12-512',
+  '1.2.643.7.1.2.1.1.0': 'id-tc26-gost-3410-12-256-paramSetTest',
+  '1.2.643.7.1.2.1.1.1': 'id-tc26-gost-3410-12-256-paramSetA',
+  '1.2.643.7.1.2.1.1.2': 'id-tc26-gost-3410-12-256-paramSetB',
+  '1.2.643.7.1.2.1.2.0': 'id-tc26-gost-3410-12-512-paramSetTest',
+  '1.2.643.7.1.2.1.2.1': 'id-tc26-gost-3410-12-512-paramSetA',
+  '1.2.643.7.1.2.1.2.2': 'id-tc26-gost-3410-12-512-paramSetB',
+  '1.2.643.7.1.2.1.2.3': 'id-tc26-gost-3410-12-512-paramSetC',
+  '1.2.643.7.1.2.1.2.4': 'id-tc26-gost-3410-12-512-paramSetD',
+  '1.2.643.7.1.2.5.1.1': 'id-tc26-gost-28147-param-Z',
+  // GOST Parameters
+  '1.2.643.100.1': 'OGRN',
+  '1.2.643.100.2.1': 'SMEV-person',
+  '1.2.643.100.2.2': 'SMEV-government',
+  '1.2.643.100.3': 'SNILS',
+  '1.2.643.100.4': 'KPP',
+  '1.2.643.100.5': 'OGRNIP',
+  '1.2.643.100.6': 'internal-government',
+  '1.2.643.100.111': 'subjectSignTool',
+  '1.2.643.100.112': 'issuerSignTool',
+  '1.2.643.100.113.1': 'signToolClassKC1',
+  '1.2.643.100.113.2': 'signToolClassKC2',
+  '1.2.643.100.113.3': 'signToolClassKC3',
+  '1.2.643.100.113.4': 'signToolClassKB1',
+  '1.2.643.100.113.5': 'signToolClassKB2',
+  '1.2.643.100.113.6': 'signToolClassKA1',
+  '1.2.643.100.114.1': 'issuerToolClassKC1',
+  '1.2.643.100.114.2': 'issuerToolClassKC2',
+  '1.2.643.100.114.3': 'issuerToolClassKC3',
+  '1.2.643.100.114.4': 'issuerToolClassKB2',
+  '1.2.643.100.114.5': 'issuerToolClassKB1',
+  '1.2.643.100.114.6': 'issuerToolClassKA1',
+  // Common algorithms
+  '1.2.840.10040.4': 'x9cm',
+  '1.2.840.10040.4.1': 'dsa',
+  '1.2.840.10040.4.3': 'dsa-with-SHA1',
+  '1.2.840.10045': 'ansi-x962',
+  '1.2.840.10045.1': 'id-fieldType',
+  '1.2.840.10045.1.1': 'id-prime-Field',
+  '1.2.840.10045.1.2': 'id-characteristic-two-field',
+  '1.2.840.10045.2.1': 'ecPublicKey',
+  '1.2.840.10045.3.0': 'characteristicTwo',
+  '1.2.840.10045.3.1.1': 'secp192r1',
+  '1.2.840.10045.3.1.2': 'prime192v2',
+  '1.2.840.10045.3.1.3': 'prime192v3',
+  '1.2.840.10045.3.1.4': 'prime239v1',
+  '1.2.840.10045.3.1.5': 'prime239v2',
+  '1.2.840.10045.3.1.6': 'prime239v3',
+  '1.2.840.10045.3.1.7': 'secp256r1',
+  '1.2.840.10045.4': 'ecdsa',
+  '1.2.840.10045.4.1': 'ecdsa-with-SHA1',
+  '1.2.840.10045.4.2': 'ecdsa-with-Recommended',
+  '1.2.840.10045.4.4': 'ecdsa-with-SHA2',
+  '1.2.840.10045.4.4.1': 'ecdsa-with-SHA224',
+  '1.2.840.10045.4.4.2': 'ecdsa-with-SHA256',
+  '1.2.840.10045.4.4.3': 'ecdsa-with-SHA384',
+  '1.2.840.10045.4.4.4': 'ecdsa-with-SHA512',
+  '1.2.840.113533.7.66.13': 'PasswordBasedMac',
+  '1.3.6.1.4.1.22554.1.1.2.1.2': 'pbeWithSHAAndAES128-CBC',
+  '1.3.6.1.4.1.22554.1.1.2.1.22': 'pbeWithSHAAndAES192-CBC',
+  '1.3.6.1.4.1.22554.1.1.2.1.42': 'pbeWithSHAAndAES256-CBC',
+  '1.3.6.1.4.1.22554.1.2.1.2.1.2': 'pbeWithSHA256AndAES128-CBC',
+  '1.3.6.1.4.1.22554.1.2.1.2.1.22': 'pbeWithSHA256AndAES192-CBC',
+  '1.3.6.1.4.1.22554.1.2.1.2.1.42': 'pbeWithSHA256AndAES256-CBC',
+  //  Diffie-Hellman Key Exchange Keys
+  '1.2.840.113549': 'rsa',
+  '1.2.840.113549.1.1.1': 'rsaEncryption',
+  '1.2.840.113549.1.1.2': 'md2withRSAEncryption',
+  '1.2.840.113549.1.1.3': 'md4withRSAEncryption',
+  '1.2.840.113549.1.1.4': 'md5withRSAEncryption',
+  '1.2.840.113549.1.1.5': 'sha1withRSAEncryption',
+  '1.2.840.113549.1.1.7': 'rsaes-oaep',
+  '1.2.840.113549.1.1.8': 'mgf1',
+  '1.2.840.113549.1.1.9': 'pSpecified',
+  '1.2.840.113549.1.1.10': 'rsassa-pss',
+  '1.2.840.113549.1.1.11': 'sha256withRSAEncryption',
+  '1.2.840.113549.1.1.12': 'sha384withRSAEncryption',
+  '1.2.840.113549.1.1.13': 'sha512withRSAEncryption',
+  '1.2.840.113549.1.2.7': 'hmacWithSHA1',
+  '1.2.840.113549.1.2.8': 'hmacWithSHA224',
+  '1.2.840.113549.1.2.9': 'hmacWithSHA256',
+  '1.2.840.113549.1.2.10': 'hmacWithSHA384',
+  '1.2.840.113549.1.2.11': 'hmacWithSHA512',
+  '1.2.840.113549.1.3.1': 'dhKeyAgreement',
+  // pkcs#7 content types
+  '1.2.840.113549.1.5.12': 'PBKDF2',
+  '1.2.840.113549.1.5.13': 'PBES2',
+  '1.2.840.113549.1.5.14': 'PBMAC1',
+  '1.2.840.113549.1.7.1': 'data',
+  '1.2.840.113549.1.7.2': 'signedData',
+  '1.2.840.113549.1.7.3': 'envelopedData',
+  '1.2.840.113549.1.7.4': 'signedAndEnvelopedData',
+  '1.2.840.113549.1.7.5': 'digestedData',
+  '1.2.840.113549.1.7.6': 'encryptedData',
+  '1.2.840.113549.1.9.1': 'emailAddress',
+  '1.2.840.113549.1.9.2': 'unstructuredName',
+  '1.2.840.113549.1.9.3': 'contentType',
+  '1.2.840.113549.1.9.4': 'messageDigest',
+  '1.2.840.113549.1.9.5': 'signingTime',
+  '1.2.840.113549.1.9.6': 'countersignature',
+  '1.2.840.113549.1.9.7': 'challengePassword',
+  '1.2.840.113549.1.9.8': 'unstructuredAddress',
+  '1.2.840.113549.1.9.9': 'extendedCertificateAttributes',
+  '1.2.840.113549.1.9.10': 'issuerAndSerialNumber',
+  '1.2.840.113549.1.9.11': 'passwordCheck',
+  '1.2.840.113549.1.9.12': 'publicKey',
+  '1.2.840.113549.1.9.13': 'signingDescription',
+  '1.2.840.113549.1.9.14': 'extensionRequest',
+  '1.2.840.113549.1.9.15': 'sMimeCapabilities',
+  '1.2.840.113549.1.9.16': 'sMimeObjectIdentifierRegistry',
+  '1.2.840.113549.1.9.16.1.2': 'authData',
+  '1.2.840.113549.1.9.16.1.4 ': 'timestampToken',
+  '1.2.840.113549.1.9.16.1.17 ': 'firmwareLoadReceipt',
+  '1.2.840.113549.1.9.16.1.21': 'encKeyWithID',
+  '1.2.840.113549.1.9.16.1.23': 'authEnvelopedData',
+  '1.2.840.113549.1.9.16.2': 'sMimeAttributes',
+  '1.2.840.113549.1.9.16.2.1': 'receiptRequest',
+  '1.2.840.113549.1.9.16.2.12': 'signingCertificate',
+  '1.2.840.113549.1.9.16.2.14': 'timeStampToken',
+  '1.2.840.113549.1.9.16.2.2': 'securityLabel',
+  '1.2.840.113549.1.9.16.2.3': 'mlExpansionHistory',
+  '1.2.840.113549.1.9.16.2.34': 'unsignedData',
+  '1.2.840.113549.1.9.16.2.47': 'signingCertificateV2',
+  '1.2.840.113549.1.9.16.3.5': 'ESDH',
+  // pkcs#9 oids
+  '1.2.840.113549.1.9.20': 'friendlyName',
+  '1.2.840.113549.1.9.21': 'localKeyId',
+  '1.2.840.113549.1.9.22': 'certTypes',
+  '1.2.840.113549.1.9.22.1': 'x509Certificate',
+  '1.2.840.113549.1.9.22.2': 'sdsiCertificate',
+  '1.2.840.113549.1.9.23': 'crlTypes',
+  '1.2.840.113549.1.9.23.1': 'x509CRL',
+  '1.2.840.113549.1.9.24': 'secretTypes',
+  '1.2.840.113549.1.9.24.1': 'secret',
+  '1.2.840.113549.1.9.25.1': 'pkcs15Token',
+  '1.2.840.113549.1.9.25.2': 'encryptedPrivateKeyInfo',
+  '1.2.840.113549.1.9.25.3': 'randomNonce',
+  '1.2.840.113549.1.9.25.4': 'sequenceNumber',
+  '1.2.840.113549.1.9.25.5': 'pkcs7PDU',
+  '1.2.840.113549.1.9.26.1': 'pkcs9String',
+  '1.2.840.113549.1.9.26.2': 'signingTimeString',
+  '1.2.840.113549.1.9.27.1': 'caseIgnoreMatch',
+  '1.2.840.113549.1.9.27.2': 'signingTimeMatch',
+  // password-based-encryption for pkcs#12
+  '1.2.840.113549.1.12.0.1': 'pkcs-12',
+  '1.2.840.113549.1.12.1': 'pbe',
+  '1.2.840.113549.1.12.1.1': 'pbeWithSHAAnd128BitRC4',
+  '1.2.840.113549.1.12.1.2': 'pbeWithSHAAnd40BitRC4',
+  '1.2.840.113549.1.12.1.3': 'pbeWithSHAAnd3-KeyTripleDES-CBC',
+  '1.2.840.113549.1.12.1.4': 'pbeWithSHAAnd2-KeyTripleDES-CBC',
+  '1.2.840.113549.1.12.1.5': 'pbeWithSHAAnd128BitRC2-CBC',
+  '1.2.840.113549.1.12.1.6': 'pbeWithSHAAnd40BitRC2-CBC',
+  '1.2.840.113549.1.12.1.80': 'pbeUnknownGost',
+  '1.2.840.113549.1.12.2.1': 'pkcs8-key-shrouding',
+  '1.2.840.113549.1.12.3.1': 'keyBagId',
+  '1.2.840.113549.1.12.3.2': 'certAndCRLBagId',
+  '1.2.840.113549.1.12.3.3': 'secretBagId',
+  '1.2.840.113549.1.12.3.4': 'safeContentsId',
+  '1.2.840.113549.1.12.3.5': 'pkcs-8ShroudedKeyBagId',
+  '1.2.840.113549.1.12.4.1': 'x509CertCRLBagId',
+  '1.2.840.113549.1.12.4.2': 'pkcs-12-SDSICertBag',
+  // pkcs#12 safe bags
+  '1.2.840.113549.1.12.10.1.1': 'keyBag',
+  '1.2.840.113549.1.12.10.1.2': 'pkcs8ShroudedKeyBag',
+  '1.2.840.113549.1.12.10.1.3': 'certBag',
+  '1.2.840.113549.1.12.10.1.4': 'crlBag',
+  '1.2.840.113549.1.12.10.1.5': 'secretBag',
+  '1.2.840.113549.1.12.10.1.6': 'safeContentsBag',
+  // hash algorithm
+  '1.2.840.113549.2.5': 'md-5',
+  // symmetric key algorithm oids
+  '1.2.840.113549.3.7': 'des-EDE3-CBC',
+  // additional algorithms
+  '1.3.132.0.34': 'secp384r1',
+  '1.3.132.0.35': 'secp521r1',
+  '1.3.132.112': 'ecDH',
+  '1.3.14.3.2.26': 'sha1',
+  '1.3.6.1.4.1.311.2.1.14': 'msCertExtensions',
+  '1.3.6.1.4.1.311.17.1': 'keyProviderNameAttr',
+  '1.3.6.1.4.1.311.17.2': 'localMachineKeyset',
+  '1.3.6.1.4.1.311.17.3.20': 'certKeyIdentifierPropId',
+  // SignalCom algorithms
+  '1.3.6.1.4.1.5849': 'SignalCom',
+  '1.3.6.1.4.1.5849.1.1.1': 'id-sc-gost28147-ecb',
+  '1.3.6.1.4.1.5849.1.1.2': 'id-sc-gost28147-gamma',
+  '1.3.6.1.4.1.5849.1.1.3': 'id-sc-gost28147-gfb',
+  '1.3.6.1.4.1.5849.1.1.4': 'id-sc-gost28147-mac',
+  '1.3.6.1.4.1.5849.1.1.5': 'id-sc-gostR3410-94',
+  '1.3.6.1.4.1.5849.1.1.6.1.1.1': 'id-sc-gostR3410-94-default',
+  '1.3.6.1.4.1.5849.1.1.6.1.1.2': 'id-sc-gostR3410-94-test',
+  '1.3.6.1.4.1.5849.1.2.1': 'id-sc-gostR3411-94',
+  '1.3.6.1.4.1.5849.1.3.1': 'id-sc-gostR3411-94-with-gostR3410-94',
+  '1.3.6.1.4.1.5849.1.3.2': 'id-sc-gostR3411-94-with-gostR3410-2001',
+  '1.3.6.1.4.1.5849.1.4.1': 'id-sc-cmsGostWrap',
+  '1.3.6.1.4.1.5849.1.4.2': 'id-sc-cmsGost28147Wrap',
+  '1.3.6.1.4.1.5849.1.5.1': 'id-sc-pbeWithGost3411AndGost28147',
+  '1.3.6.1.4.1.5849.1.5.2': 'id-sc-pbeWithGost3411AndGost28147CFB',
+  '1.3.6.1.4.1.5849.1.6.2': 'id-sc-gostR3410-2001',
+  '1.3.6.1.4.1.5849.1.7.2': 'id-sc-hmacWithGostR3411',
+  '1.3.6.1.4.1.5849.1.8.1': 'id-sc-r3410-ESDH-r3411kdf',
+  '1.3.6.1.4.1.5849.1.8.3': 'id-sc-ecdh-singlePass-cofactor-r3411kdf',
+  '1.3.6.1.4.1.5849.2.2.1': 'id-sc-gostR3410-2001-publicKey',
+  // additinal data
+  '1.3.6.1.5.5.7.0.12': 'attribute-cert',
+  '1.3.6.1.5.5.7.1.1': 'authorityInfoAccess',
+  '1.3.6.1.5.5.7.1.4': 'auditIdentity',
+  '1.3.6.1.5.5.7.1.6': 'aaControls',
+  '1.3.6.1.5.5.7.1.10': 'ac-proxying',
+  '1.3.6.1.5.5.7.1.11': 'subjectInfoAccess',
+  '1.3.6.1.5.5.7.3.1': 'serverAuth',
+  '1.3.6.1.5.5.7.3.2': 'clientAuth',
+  '1.3.6.1.5.5.7.3.3': 'codeSigning',
+  '1.3.6.1.5.5.7.3.4': 'emailProtection',
+  '1.3.6.1.5.5.7.3.5': 'ipsecEndSystem',
+  '1.3.6.1.5.5.7.3.6': 'ipsecTunnel',
+  '1.3.6.1.5.5.7.3.7': 'ipsecUser',
+  '1.3.6.1.5.5.7.3.8': 'timeStamping',
+  '1.3.6.1.5.5.7.3.9': 'OCSPSigning',
+  '1.3.6.1.5.5.7.5.1': 'regCtrl',
+  '1.3.6.1.5.5.7.5.1.1': 'regToken',
+  '1.3.6.1.5.5.7.5.1.2': 'authenticator',
+  '1.3.6.1.5.5.7.5.1.3': 'pkiPublicationInfo',
+  '1.3.6.1.5.5.7.5.1.4': 'pkiArchiveOptions',
+  '1.3.6.1.5.5.7.5.1.5': 'oldCertID',
+  '1.3.6.1.5.5.7.5.1.6': 'protocolEncrKey',
+  '1.3.6.1.5.5.7.5.2': 'regInfoAttr',
+  '1.3.6.1.5.5.7.5.2.1': 'UTF8Pairs',
+  '1.3.6.1.5.5.7.5.2.2': 'certReq',
+  '1.3.6.1.5.5.7.6.2': 'noSignature',
+  '1.3.6.1.5.5.7.7.1': 'statusInfo',
+  '1.3.6.1.5.5.7.7.2': 'identification',
+  '1.3.6.1.5.5.7.7.3': 'identityProof',
+  '1.3.6.1.5.5.7.7.4': 'dataReturn',
+  '1.3.6.1.5.5.7.7.5': 'transactionId',
+  '1.3.6.1.5.5.7.7.6': 'senderNonce',
+  '1.3.6.1.5.5.7.7.7': 'recipientNonce',
+  '1.3.6.1.5.5.7.7.8': 'addExtensions',
+  '1.3.6.1.5.5.7.7.9': 'encryptedPOP',
+  '1.3.6.1.5.5.7.7.10': 'decryptedPOP',
+  '1.3.6.1.5.5.7.7.11': 'lraPOPWitness',
+  '1.3.6.1.5.5.7.7.15': 'getCert',
+  '1.3.6.1.5.5.7.7.16': 'getCRL',
+  '1.3.6.1.5.5.7.7.17': 'revokeRequest',
+  '1.3.6.1.5.5.7.7.18': 'regInfo',
+  '1.3.6.1.5.5.7.7.19': 'responseInfo',
+  '1.3.6.1.5.5.7.7.21': 'queryPending',
+  '1.3.6.1.5.5.7.7.22': 'popLinkRandom',
+  '1.3.6.1.5.5.7.7.23': 'popLinkWitness',
+  '1.3.6.1.5.5.7.7.24': 'confirmCertAcceptance',
+  '1.3.6.1.5.5.7.7.25': 'statusInfoV2',
+  '1.3.6.1.5.5.7.7.26': 'trustedAnchors',
+  '1.3.6.1.5.5.7.7.27': 'authPublish',
+  '1.3.6.1.5.5.7.7.28': 'batchRequests',
+  '1.3.6.1.5.5.7.7.29': 'batchResponses',
+  '1.3.6.1.5.5.7.7.30': 'publishCert',
+  '1.3.6.1.5.5.7.7.31': 'modCertTemplate',
+  '1.3.6.1.5.5.7.7.32': 'controlProcessed',
+  '1.3.6.1.5.5.7.7.33': 'popLinkWitnessV2',
+  '1.3.6.1.5.5.7.7.34': 'identityProofV2',
+  '1.3.6.1.5.5.7.9.1': 'dateOfBirth',
+  '1.3.6.1.5.5.7.9.2': 'placeOfBirth',
+  '1.3.6.1.5.5.7.9.3': 'gender',
+  '1.3.6.1.5.5.7.9.4': 'countryOfCitizenship',
+  '1.3.6.1.5.5.7.9.5': 'countryOfResidence',
+  '1.3.6.1.5.5.7.10.1': 'authenticationInfo',
+  '1.3.6.1.5.5.7.10.2': 'accessIdentity',
+  '1.3.6.1.5.5.7.10.3': 'chargingIdentity',
+  '1.3.6.1.5.5.7.10.4': 'group',
+  '1.3.6.1.5.5.7.10.6': 'encAttrs',
+  '1.3.6.1.5.5.7.12.2': 'PKIData',
+  '1.3.6.1.5.5.7.12.3': 'PKIResponse',
+  '1.3.6.1.5.5.7.48.1.1': 'ocsp-basic',
+  '1.3.6.1.5.5.7.48.1.2': 'ocsp-nonce',
+  '1.3.6.1.5.5.7.48.1.3': 'ocsp-crl',
+  '1.3.6.1.5.5.7.48.1.4': 'ocsp-response',
+  '1.3.6.1.5.5.7.48.1.5': 'ocsp-nocheck',
+  '1.3.6.1.5.5.7.48.1.6': 'ocsp-archive-cutoff',
+  '1.3.6.1.5.5.7.48.1.7': 'ocsp-service-locator',
+  // Key packages
+  '2.16.840.1.101.2.1.2.78.2': 'encryptedKeyPkg',
+  '2.16.840.1.101.2.1.2.78.3': 'keyPackageReceipt',
+  '2.16.840.1.101.2.1.2.78.5': 'aKeyPackage',
+  '2.16.840.1.101.2.1.2.78.6': 'keyPackageError',
+  // symmetric key algorithm oids
+  '2.16.840.1.101.3.4': 'nistAlgorithms',
+  '2.16.840.1.101.3.4.1': 'aes',
+  '2.16.840.1.101.3.4.1.1': 'aes128-ECB',
+  '2.16.840.1.101.3.4.1.2': 'aes128-CBC',
+  '2.16.840.1.101.3.4.1.3': 'aes128-OFB',
+  '2.16.840.1.101.3.4.1.4': 'aes128-CFB',
+  '2.16.840.1.101.3.4.1.5': 'aes128-wrap',
+  '2.16.840.1.101.3.4.1.6': 'aes128-GCM',
+  '2.16.840.1.101.3.4.1.7': 'aes128-CCM',
+  '2.16.840.1.101.3.4.1.8': 'aes128-wrap-pad',
+  '2.16.840.1.101.3.4.1.21': 'aes192-ECB',
+  '2.16.840.1.101.3.4.1.22': 'aes192-CBC',
+  '2.16.840.1.101.3.4.1.23': 'aes192-OFB',
+  '2.16.840.1.101.3.4.1.24': 'aes192-CFB',
+  '2.16.840.1.101.3.4.1.25': 'aes192-wrap',
+  '2.16.840.1.101.3.4.1.26': 'aes192-GCM',
+  '2.16.840.1.101.3.4.1.27': 'aes192-CCM',
+  '2.16.840.1.101.3.4.1.28': 'aes192-wrap-pad',
+  '2.16.840.1.101.3.4.1.41': 'aes256-ECB',
+  '2.16.840.1.101.3.4.1.42': 'aes256-CBC',
+  '2.16.840.1.101.3.4.1.43': 'aes256-OFB',
+  '2.16.840.1.101.3.4.1.44': 'aes256-CFB',
+  '2.16.840.1.101.3.4.1.45': 'aes256-wrap',
+  '2.16.840.1.101.3.4.1.46': 'aes256-GCM',
+  '2.16.840.1.101.3.4.1.47': 'aes256-CCM',
+  '2.16.840.1.101.3.4.1.48': 'aes256-wrap-pad',
+  // hash algorihtms
+  '2.16.840.1.101.3.4.2.1': 'sha256',
+  '2.16.840.1.101.3.4.2.2': 'sha384',
+  '2.16.840.1.101.3.4.2.3': 'sha512',
+  // pkcs12
+  '2.16.840.1.113730.3.1.216': 'userPKCS12',
+  // certificate issuer/subject OIDsets
+  '2.5.1.5.55': 'clearance',
+  '2.5.4.0': 'objectClass',
+  '2.5.4.1': 'aliasedEntryName',
+  '2.5.4.2': 'knowldgeinformation',
+  '2.5.4.3': 'commonName',
+  '2.5.4.5': 'serialName',
+  '2.5.4.6': 'countryName',
+  '2.5.4.7': 'localityName',
+  '2.5.4.8': 'stateOrProvinceName',
+  '2.5.4.9': 'streetAddress',
+  '2.5.4.10': 'organizationName',
+  '2.5.4.11': 'organizationalUnitName',
+  '2.5.4.12': 'title',
+  '2.5.4.13': 'description',
+  '2.5.4.14': 'searchGuide',
+  '2.5.4.15': 'businessCategory',
+  '2.5.4.16': 'postalAddress',
+  '2.5.4.17': 'postalCode',
+  '2.5.4.18': 'postOfficeBox',
+  '2.5.4.19': 'physicalDeliveryOfficeName',
+  '2.5.4.20': 'telephoneNumber',
+  '2.5.4.21': 'telexNumber',
+  '2.5.4.22': 'teletexTerminalIdentifier',
+  '2.5.4.23': 'facsimileTelephoneNumber',
+  '2.5.4.24': 'x121Address',
+  '2.5.4.25': 'internationalISDNNumber',
+  '2.5.4.26': 'registeredAddress',
+  '2.5.4.27': 'destinationIndicator',
+  '2.5.4.28': 'preferredDeliveryMethod',
+  '2.5.4.29': 'presentationAddress',
+  '2.5.4.30': 'supportedApplicationContext',
+  '2.5.4.31': 'member',
+  '2.5.4.32': 'owner',
+  '2.5.4.33': 'roleOccupant',
+  '2.5.4.34': 'seeAlso',
+  '2.5.4.35': 'userPassword',
+  '2.5.4.36': 'userCertificate',
+  '2.5.4.37': 'cACertificate',
+  '2.5.4.38': 'authorityRevocationList',
+  '2.5.4.39': 'certificateRevocationList',
+  '2.5.4.40': 'crossCertificatePair',
+  '2.5.4.41': 'name',
+  '2.5.4.42': 'givenName',
+  '2.5.4.43': 'initials',
+  '2.5.4.44': 'generationQualifier',
+  '2.5.4.45': 'uniqueIdentifier',
+  '2.5.4.46': 'dnQualifier',
+  '2.5.4.47': 'enhancedSearchGuide',
+  '2.5.4.48': 'protocolInformation',
+  '2.5.4.49': 'distinguishedName',
+  '2.5.4.50': 'uniqueMember',
+  '2.5.4.51': 'houseIdentifier',
+  '2.5.4.52': 'supportedAlgorithms',
+  '2.5.4.53': 'deltaRevocationList',
+  '2.5.4.58': 'attributeCertificate',
+  '2.5.4.65': 'pseudonym',
+  '2.5.4.72': 'role',
+  // X.509 extension OIDsets
+  '2.5.29.1': 'authorityKeyIdentifierX',
+  '2.5.29.2': 'keyAttributesX',
+  '2.5.29.3': 'certificatePoliciesX',
+  '2.5.29.4': 'keyUsageRestriction',
+  '2.5.29.5': 'policyMapping',
+  '2.5.29.6': 'subtreesConstraint',
+  '2.5.29.7': 'subjectAltNameX',
+  '2.5.29.8': 'issuerAltNameX',
+  '2.5.29.9': 'subjectDirectoryAttributes',
+  '2.5.29.10': 'basicConstraintsX',
+  '2.5.29.11': 'nameConstraintsX',
+  '2.5.29.12': 'policyConstraintsX',
+  '2.5.29.13': 'basicConstraintsY',
+  '2.5.29.14': 'subjectKeyIdentifier',
+  '2.5.29.15': 'keyUsage',
+  '2.5.29.16': 'privateKeyUsagePeriod',
+  '2.5.29.17': 'subjectAltName',
+  '2.5.29.18': 'issuerAltName',
+  '2.5.29.19': 'basicConstraints',
+  '2.5.29.20': 'cRLNumber',
+  '2.5.29.21': 'cRLReason',
+  '2.5.29.22': 'expirationDate',
+  '2.5.29.23': 'instructionCode',
+  '2.5.29.24': 'invalidityDate',
+  '2.5.29.25': 'cRLDistributionPointsX',
+  '2.5.29.26': 'issuingDistributionPointX',
+  '2.5.29.27': 'deltaCRLIndicator',
+  '2.5.29.28': 'issuingDistributionPoint',
+  '2.5.29.29': 'certificateIssuer',
+  '2.5.29.30': 'nameConstraints',
+  '2.5.29.31': 'cRLDistributionPoints',
+  '2.5.29.32': 'certificatePolicies',
+  '2.5.29.33': 'policyMappings',
+  '2.5.29.34': 'policyConstraintsY',
+  '2.5.29.35': 'authorityKeyIdentifier',
+  '2.5.29.36': 'policyConstraints',
+  '2.5.29.37': 'extKeyUsage',
+  '2.5.29.46': 'freshestCRL',
+  '2.5.29.54': 'inhibitAnyPolicy',
+  '2.5.29.55': 'targetInformation',
+  '2.5.29.56': 'noRevAvail',
+}
+
+/**
+ * ASN.1 Object Identifiers for friandly names
+ * Generated automaticly
+ * @field identifiers
+ * @memberOf GostSecurity
+ */
+const identifiers = {}
+for (var id in names) {identifiers[names[id]] = id}
+
+// </editor-fold>
+
+/**
+ * Algorithm identifiers {@link gostCrypto.AlgorithmIdentifier} for Object Identifiers
+ *
+ * @field algorithms
+ * @memberOf GostSecurity
+ */ // <editor-fold defaultstate="collapsed">
+const algorithms = {
+  // CryptoPro algoritms
+  'id-GostR3411-94-with-GostR3410-2001': 'GOST R 34.10-2001/GOST R 34.11-94',
+  'id-GostR3411-94-with-GostR3410-94': 'GOST R 34.10-94/GOST R 34.11-94',
+  'id-GostR3411-94': 'GOST R 34.11-94',
+  'id-HMACGostR3411-94': { name: 'HMAC', hash: { name: 'GOST R 34.11-94' } },
+  'id-Gost28147-89-None-KeyWrap': 'GOST 28147-89-KW',
+  'id-Gost28147-89-CryptoPro-KeyWrap': 'GOST 28147-89-CPKW',
+  'id-GostR3410-2001': 'GOST R 34.10-2001',
+  'id-GostR3410-94': 'GOST R 34.10-94',
+  'id-GostR3410-94-a': 'GOST R 34.10-94',
+  'id-GostR3410-94-aBis': 'GOST R 34.10-94',
+  'id-GostR3410-94-b': 'GOST R 34.10-94',
+  'id-GostR3410-94-bBis': 'GOST R 34.10-94',
+  'id-Gost28147-89': 'GOST 28147-89',
+  'id-Gost28147-89-MAC': 'GOST 28147-89-MAC',
+  'id-GostR3410-2001-CryptoPro-ESDH': 'GOST R 34.10-2001-DH/GOST R 34.11-94',
+  'id-GostR3410-94-CryptoPro-ESDH': 'GOST R 34.10-94-DH/GOST R 34.11-94',
+  'id-GostR3410-2001DH': 'GOST R 34.10-2001-DH',
+  'id-GostR3410-94DH': 'GOST R 34.10-94-DH',
+  // TK-26 attributes
+  'id-tc26-gost3410-12-256': 'GOST R 34.10-256',
+  'id-tc26-gost3410-12-512': 'GOST R 34.10-512',
+  'id-tc26-gost3411-94': 'GOST R 34.11-94',
+  'id-tc26-gost3411-12-256': 'GOST R 34.11-256',
+  'id-tc26-gost3411-12-512': 'GOST R 34.11-512',
+  'id-tc26-signwithdigest-gost3410-12-94': 'GOST R 34.10-256/GOST R 34.11-94',
+  'id-tc26-signwithdigest-gost3410-12-256': 'GOST R 34.10-256/GOST R 34.11-256',
+  'id-tc26-signwithdigest-gost3410-12-512': 'GOST R 34.10-512/GOST R 34.11-512',
+  'id-tc26-hmac-gost-3411-12-256': { name: 'HMAC', hash: { name: 'GOST R 34.11-256' } },
+  'id-tc26-hmac-gost-3411-12-512': { name: 'HMAC', hash: { name: 'GOST R 34.11-512' } },
+  'id-tc26-agreement-gost-3410-12-256': 'GOST R 34.10-256-DH/GOST R 34.11-256',
+  'id-tc26-agreement-gost-3410-12-512': 'GOST R 34.10-512-DH/GOST R 34.11-256',
+  // SignalCom algorithms
+  'id-sc-gost28147-ecb': 'GOST 28147-89-ECB/SC',
+  'id-sc-gost28147-gamma': 'GOST 28147-89-CTR/SC',
+  'id-sc-gost28147-gfb': 'GOST 28147-89-CFB/SC',
+  'id-sc-gost28147-mac': 'GOST 28147-89-MAC/SC',
+  'id-sc-gostR3410-94': 'GOST R 34.10-94/SC',
+  'id-sc-gostR3410-94-default': 'GOST R 34.10-94/SC',
+  'id-sc-gostR3410-94-test': 'GOST R 34.10-94/SC/S-TEST',
+  'id-sc-gostR3411-94': 'GOST R 34.11-94/SC',
+  'id-sc-gostR3411-94-with-gostR3410-94': 'GOST R 34.10-94/GOST R 34.11-94/SC',
+  'id-sc-gostR3411-94-with-gostR3410-2001': 'GOST R 34.10-2001/GOST R 34.11-94/SC',
+  'id-sc-cmsGostWrap': 'GOST 28147-89-SCKW/SC',
+  'id-sc-cmsGost28147Wrap': 'GOST 28147-89-KW/SC',
+  'id-sc-pbeWithGost3411AndGost28147': { derivation: { name: 'GOST R 34.11-94-PBKDF2/SC' }, encryption: { name: 'GOST 28147-ECB/SC' } },
+  'id-sc-pbeWithGost3411AndGost28147CFB': { derivation: { name: 'GOST R 34.11-94-PBKDF2/SC' }, encryption: { name: 'GOST 28147-CFB/SC' } },
+  'id-sc-gostR3410-2001': 'GOST R 34.10-2001/SC',
+  'id-sc-hmacWithGostR3411': { name: 'HMAC', hash: { name: 'GOST R 34.11-94/SC' } },
+  'id-sc-r3410-ESDH-r3411kdf': 'GOST R 34.10-2001-DH/GOST R 34.11-94/SC',
+  // RSA algorithms
+  noSignature: 'NONE',
+  rsaEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-256' } },
+  sha1withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-1' } },
+  sha256withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-256' } },
+  sha384withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-384' } },
+  sha512withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-512' } },
+  'rsaes-oaep': 'RSA-OAEP',
+  'rsassa-pss': 'RSA-PSS',
+  // ECDSA
+  'ecdsa': 'ECDSA',
+  'ecdsa-with-SHA1': { name: 'ECDSA', hash: { name: 'SHA-1' } },
+  'ecdsa-with-SHA256': { name: 'ECDSA', hash: { name: 'SHA-256' } },
+  'ecdsa-with-SHA384': { name: 'ECDSA', hash: { name: 'SHA-384' } },
+  'ecdsa-with-SHA512': { name: 'ECDSA', hash: { name: 'SHA-512' } },
+  // Legion of the Bouncy Castle pbe
+  'pbeWithSHAAndAES128-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-1' } }, encryption: { name: 'AES-CBC', length: 128 } },
+  'pbeWithSHAAndAES192-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-1' } }, encryption: { name: 'AES-CBC', length: 192 } },
+  'pbeWithSHAAndAES256-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-1' } }, encryption: { name: 'AES-CBC', length: 256 } },
+  'pbeWithSHA256AndAES128-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-256' } }, encryption: { name: 'AES-CBC', length: 128 } },
+  'pbeWithSHA256AndAES192-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-256' } }, encryption: { name: 'AES-CBC', length: 192 } },
+  'pbeWithSHA256AndAES256-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-256' } }, encryption: { name: 'AES-CBC', length: 256 } },
+  // PKCS12 PBE
+  'pbeWithSHAAnd3-KeyTripleDES-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: '3DES', block: 'CBC' } },
+  'pbeWithSHAAnd2-KeyTripleDES-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: '2DES', block: 'CBC' } },
+  'pbeWithSHAAnd128BitRC2-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: 'RC2', block: 'CBC', length: 128 } },
+  'pbeWithSHAAnd40BitRC2-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: 'RC2', block: 'CBC', length: 40 } },
+  'pbeUnknownGost': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'GOST R 34.11-94' }, encryption: { name: 'GOST 28147-89-CFB' } },
+  //  Diffie-Hellman Key Exchange Keys
+  ecDH: 'ECDH',
+  dhKeyAgreement: 'DH',
+  // symmetric key algorithm oids
+  'aes128-CBC': { name: 'AES-CBC', length: 128 },
+  'aes128-CFB': { name: 'AES-CFB-8', length: 128 },
+  'aes128-GCM': { name: 'AES-GCM', length: 128 },
+  'aes128-wrap': { name: 'AES-KW', length: 128 },
+  'aes192-CBC': { name: 'AES-CBC', length: 192 },
+  'aes192-CFB': { name: 'AES-CFB-8', length: 192 },
+  'aes192-GCM': { name: 'AES-GCM', length: 192 },
+  'aes192-wrap': { name: 'AES-KW', length: 192 },
+  'aes256-CBC': { name: 'AES-CBC', length: 256 },
+  'aes256-CFB': { name: 'AES-CFB-8', length: 256 },
+  'aes256-GCM': { name: 'AES-GCM', length: 256 },
+  'aes256-wrap': { name: 'AES-KW', length: 256 },
+  // hash algorihtms
+  sha1: 'SHA-1',
+  sha256: 'SHA-256',
+  sha384: 'SHA-384',
+  sha512: 'SHA-512',
+  // PBE
+  PBKDF2: 'PBKDF2',
+  PBES2: { derivation: { name: 'PBKDF2' }, encryption: {} },
+  PBMAC1: { derivation: { name: 'PBKDF2' }, hmac: {} },
+  // HMAC
+  hmacWithSHA1: 'SHA-1-HMAC',
+  hmacWithSHA256: { name: 'HMAC', hash: { name: 'SHA-256' } },
+  hmacWithSHA384: { name: 'HMAC', hash: { name: 'SHA-384' } },
+  hmacWithSHA512: { name: 'HMAC', hash: { name: 'SHA-512' } },
+}
+
+// Each algorithm must has id for convertions
+for (var id in algorithms) {
+  let algorithm = algorithms[id]
+  if (typeof algorithm === 'string') {
+    algorithm = { name: algorithm }
+  }
+  algorithm.id = id
+  algorithms[id] = algorithm
+} // </editor-fold>
+
+/**
+ * Algorithm parameters
+ *
+ * @field parameters
+ * @memberOf GostSecurity
+ */ // <editor-fold defaultstate="collapsed">
+const parameters = {
+  'id-GostR3410-94-TestParamSet': { namedParam: 'S-TEST' },
+  'id-GostR3410-94-CryptoPro-A-ParamSet': { namedParam: 'S-A' },
+  'id-GostR3410-94-CryptoPro-B-ParamSet': { namedParam: 'S-B' },
+  'id-GostR3410-94-CryptoPro-C-ParamSet': { namedParam: 'S-C' },
+  'id-GostR3410-94-CryptoPro-D-ParamSet': { namedParam: 'S-D' },
+  'id-GostR3410-94-CryptoPro-XchA-ParamSet': { namedParam: 'X-A' },
+  'id-GostR3410-94-CryptoPro-XchB-ParamSet': { namedParam: 'X-B' },
+  'id-GostR3410-94-CryptoPro-XchC-ParamSet': { namedParam: 'X-C' },
+  // CryptoPro named curves
+  'id-GostR3410-2001-CryptoPro-TestParamSet': { namedCurve: 'S-256-TEST' },
+  'id-GostR3410-2001-CryptoPro-A-ParamSet': { namedCurve: 'S-256-A' },
+  'id-GostR3410-2001-CryptoPro-B-ParamSet': { namedCurve: 'S-256-B' },
+  'id-GostR3410-2001-CryptoPro-C-ParamSet': { namedCurve: 'S-256-C' },
+  'id-GostR3410-2001-CryptoPro-XchA-ParamSet': { namedCurve: 'X-256-A' },
+  'id-GostR3410-2001-CryptoPro-XchB-ParamSet': { namedCurve: 'X-256-B' },
+  // TC-26 named curves
+  'id-tc26-gost-3410-12-256-paramSetTest': { namedCurve: 'T-256-TEST' },
+  'id-tc26-gost-3410-12-256-paramSetA': { namedCurve: 'T-256-A' },
+  'id-tc26-gost-3410-12-256-paramSetB': { namedCurve: 'T-256-B' },
+  'id-tc26-gost-3410-12-512-paramSetTest': { namedCurve: 'T-512-TEST' },
+  'id-tc26-gost-3410-12-512-paramSetA': { namedCurve: 'T-512-A' },
+  'id-tc26-gost-3410-12-512-paramSetB': { namedCurve: 'T-512-B' },
+  'id-tc26-gost-3410-12-512-paramSetC': { namedCurve: 'T-512-C' },
+  'id-tc26-gost-3410-12-512-paramSetD': { namedCurve: 'T-512-D' },
+  // Curve attributes additional algorithms
+  secp256r1: { namedCurve: 'P-256' },
+  secp384r: { namedCurve: 'P-384' },
+  secp521r: { namedCurve: 'P-521' },
+  // CryptoPro encryption parameters
+  'id-GostR3411-94-TestParamSet': { sBox: 'D-TEST' },
+  'id-GostR3411-94-CryptoProParamSet': { sBox: 'D-A' },
+  'id-GostR3411-94-CryptoPro-A-ParamSet': { sBox: 'D-B' },
+  'id-GostR3411-94-CryptoPro-B-ParamSet': { sBox: 'D-C' },
+  'id-GostR3411-94-CryptoPro-C-ParamSet': { sBox: 'D-D' },
+  'id-Gost28147-89-TestParamSet': { block: 'CTR', sBox: 'E-TEST' },
+  'id-Gost28147-89-CryptoPro-A-ParamSet': { block: 'CFB', sBox: 'E-A', keyMeshing: 'CP' },
+  'id-Gost28147-89-CryptoPro-B-ParamSet': { block: 'CFB', sBox: 'E-B', keyMeshing: 'CP' },
+  'id-Gost28147-89-CryptoPro-C-ParamSet': { block: 'CFB', sBox: 'E-C', keyMeshing: 'CP' },
+  'id-Gost28147-89-CryptoPro-D-ParamSet': { block: 'CFB', sBox: 'E-D', keyMeshing: 'CP' },
+  'id-Gost28147-89-None-KeyMeshing': { keyMeshing: 'NO' },
+  'id-Gost28147-89-CryptoPro-KeyMeshing': { keyMeshing: 'CP' },
+  // TC-26 encryption parameters
+  'id-tc26-gost-28147-param-Z': { block: 'CFB', sBox: 'E-Z' },
+} // </editor-fold>
+
+/**
+ * Named attributes for Algorithm identifiers {@link AlgorithmIdentifier}<br><br>
+ *
+ * Recognized attributes:
+ *  <ul>
+ *      <li>sBox - Paramsets for GOST 28147. Supported values:
+ *          <ul>
+ *              <li>D-TEST - id-GostR3411-94-TestParamSet</li>
+ *              <li>D-A - id-GostR3411-94-CryptoProParamSet</li>
+ *              <li>D-B - id-GostR3411-94-CryptoPro-A-ParamSet</li>
+ *              <li>D-C - id-GostR3411-94-CryptoPro-B-ParamSet</li>
+ *              <li>D-D - id-GostR3411-94-CryptoPro-C-ParamSet</li>
+ *              <li>E-TEST - id-Gost28147-89-TestParamSet</li>
+ *              <li>E-A - id-Gost28147-89-CryptoPro-A-ParamSet</li>
+ *              <li>E-B - id-Gost28147-89-CryptoPro-B-ParamSet</li>
+ *              <li>E-C - id-Gost28147-89-CryptoPro-C-ParamSet</li>
+ *              <li>E-D - id-Gost28147-89-CryptoPro-D-ParamSet</li>
+ *              <li>E-Z - id-tc26-gost-28147-param-Z</li>
+ *              <li>D-256 - id-tc26-gost3411-12-256</li>
+ *              <li>D-512 - id-tc26-gost3411-12-512</li>
+ *          </ul>
+ *      </li>
+ *      <li>namedParam - Paramset for GOST R 34.10-94
+ *          <ul>
+ *              <li>S-TEST - id-GostR3410-94-TestParamSet</li>
+ *              <li>S-A - id-GostR3410-94-CryptoPro-A-ParamSet</li>
+ *              <li>S-B - id-GostR3410-94-CryptoPro-B-ParamSet</li>
+ *              <li>S-C - id-GostR3410-94-CryptoPro-C-ParamSet</li>
+ *              <li>S-D - id-GostR3410-94-CryptoPro-D-ParamSet</li>
+ *              <li>X-A - id-GostR3410-94-CryptoPro-XchA-ParamSet</li>
+ *              <li>X-B - id-GostR3410-94-CryptoPro-XchB-ParamSet</li>
+ *              <li>X-C - id-GostR3410-94-CryptoPro-XchC-ParamSet</li>
+ *          </ul>
+ *      </li>
+ *      <li>namedCurve - Paramset for GOST R 34.10-01 and GOST R 34.10-12
+ *          <ul>
+ *              <li>S-256-TEST - id-GostR3410-2001-CryptoPro-TestParamSet</li>
+ *              <li>S-256-A - id-GostR3410-2001-CryptoPro-A-ParamSet</li>
+ *              <li>S-256-B - id-GostR3410-2001-CryptoPro-B-ParamSet</li>
+ *              <li>S-256-C - id-GostR3410-2001-CryptoPro-C-ParamSet</li>
+ *              <li>X-256-A - id-GostR3410-2001-CryptoPro-XchA-ParamSet</li>
+ *              <li>X-256-B - id-GostR3410-2001-CryptoPro-XchB-ParamSet</li>
+ *              <li>P-256 - secp256r1</li>
+ *              <li>T-256-TEST - id-tc26-gost-3410-12-256-paramSetTest</li>
+ *              <li>T-256-A - id-tc26-gost-3410-12-256-paramSetA</li>
+ *              <li>T-256-B - id-tc26-gost-3410-12-256-paramSetB</li>
+ *              <li>T-512-TEST - id-tc26-gost-3410-12-512-paramSetTest</li>
+ *              <li>T-512-A - id-tc26-gost-3410-12-512-paramSetA</li>
+ *              <li>T-512-B - id-tc26-gost-3410-12-512-paramSetB</li>
+ *          </ul>
+ *      </li>
+ *  </ul>
+ * @field attributes
+ * @memberOf GostSecurity
+ */ // <editor-fold defaultstate="collapsed">
+const attributes = {
+  sBox: {
+    'D-TEST': 'id-GostR3411-94-TestParamSet',
+    'D-A': 'id-GostR3411-94-CryptoProParamSet',
+    'D-B': 'id-GostR3411-94-CryptoPro-A-ParamSet',
+    'D-C': 'id-GostR3411-94-CryptoPro-B-ParamSet',
+    'D-D': 'id-GostR3411-94-CryptoPro-C-ParamSet',
+    'E-TEST': 'id-Gost28147-89-TestParamSet',
+    'E-A': 'id-Gost28147-89-CryptoPro-A-ParamSet',
+    'E-B': 'id-Gost28147-89-CryptoPro-B-ParamSet',
+    'E-C': 'id-Gost28147-89-CryptoPro-C-ParamSet',
+    'E-D': 'id-Gost28147-89-CryptoPro-D-ParamSet',
+    'E-Z': 'id-tc26-gost-28147-param-Z',
+    'D-256': 'id-tc26-gost3411-12-256',
+    'D-512': 'id-tc26-gost3411-12-512',
+  },
+  namedParam: {
+    'S-TEST': 'id-GostR3410-94-TestParamSet',
+    'S-A': 'id-GostR3410-94-CryptoPro-A-ParamSet',
+    'S-B': 'id-GostR3410-94-CryptoPro-B-ParamSet',
+    'S-C': 'id-GostR3410-94-CryptoPro-C-ParamSet',
+    'S-D': 'id-GostR3410-94-CryptoPro-D-ParamSet',
+    'X-A': 'id-GostR3410-94-CryptoPro-XchA-ParamSet',
+    'X-B': 'id-GostR3410-94-CryptoPro-XchB-ParamSet',
+    'X-C': 'id-GostR3410-94-CryptoPro-XchC-ParamSet',
+  },
+  namedCurve: {
+    'S-256-TEST': 'id-GostR3410-2001-CryptoPro-TestParamSet',
+    'S-256-A': 'id-GostR3410-2001-CryptoPro-A-ParamSet',
+    'S-256-B': 'id-GostR3410-2001-CryptoPro-B-ParamSet',
+    'S-256-C': 'id-GostR3410-2001-CryptoPro-C-ParamSet',
+    'X-256-A': 'id-GostR3410-2001-CryptoPro-XchA-ParamSet',
+    'X-256-B': 'id-GostR3410-2001-CryptoPro-XchB-ParamSet',
+    'P-256': 'secp256r1',
+    'T-256-TEST': 'id-tc26-gost-3410-12-256-paramSetTest',
+    'T-256-A': 'id-tc26-gost-3410-12-256-paramSetA',
+    'T-256-B': 'id-tc26-gost-3410-12-256-paramSetB',
+    'T-512-TEST': 'id-tc26-gost-3410-12-512-paramSetTest',
+    'T-512-A': 'id-tc26-gost-3410-12-512-paramSetA',
+    'T-512-B': 'id-tc26-gost-3410-12-512-paramSetB',
+  },
+} // </editor-fold>
+
+/**
+ * Set of algorithms for different providers<br><br>
+ * Supported providers:
+ *  <ul>
+ *      <li><b>CP-94</b> - CryptoPro GOST R 34.10-94 algorithm set</li>
+ *      <li><b>CP-01</b> - CryptoPro GOST R 34.10-2001 algorithm set</li>
+ *      <li><b>TC-256</b> - Technical Commitee GOST R 34.10-256 algorithm set</li>
+ *      <li><b>TC-512</b> - Technical Commitee GOST R 34.10-512 algorithm set</li>
+ *      <li><b>SC-94</b> - SignalCom GOST R 34.10-94 algorithm set</li>
+ *      <li><b>SC-01</b> - SignalCom GOST R 34.10-2001 algorithm set</li>
+ *  </ul>
+ *
+ *  Follow set can be used if it's supported your browser native WebCrypto API:
+ *  <ul>
+ *      <li><b>RSA-2048</b> - RSA Encryption 2048 bits with SHA-256 algorithm set</li>
+ *      <li><b>ECDSA-256</b> - ECDSA-256 with SHA-256 algorithm set</li>
+ *  </ul>
+ *
+ *  Each provider records has follow standart algorithm identifiers:
+ *  <ul>
+ *      <li><b>signature</b> - Signature algorithm</li>
+ *      <li><b>generation</b> - Asymmetric key generation algorithm</li>
+ *      <li><b>digest</b> - Digest algorithm</li>
+ *      <li><b>wrapping</b> - Key wrapping algorithm</li>
+ *      <li><b>hmac</b> - Hash-based message authentication code algorithm</li>
+ *      <li><b>agreement</b> - Key agreement algorithm (except RSA schema)</li>
+ *      <li><b>encryption</b> - Content encription algorithm</li>
+ *      <li><b>derivation</b> - Password-based derivation algorithm</li>
+ *      <li><b>pbes</b> - Password-based encryption algorithm</li>
+ *      <li><b>pbmac</b> - Password-based message authentication code algorithm</li>
+ *  </ul>
+ *
+ * @field providers
+ * @memberOf GostSecurity
+ */ // <editor-fold defaultstate="collapsed">
+const providers = {
+  'CP-94': {
+    title: 'Crypto-Pro GOST R 34.10-94 Cryptographic Service Provider',
+    signature: algorithms['id-GostR3411-94-with-GostR3410-94'],
+    publicKey: { id: 'id-GostR3410-94', name: 'GOST R 34.10-94', namedParam: 'X-A' },
+    privateKey: { id: 'id-GostR3410-94DH', name: 'GOST R 34.10-94-DH', namedParam: 'X-A' },
+    digest: algorithms['id-GostR3411-94'],
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
+    hmac: algorithms['id-HMACGostR3411-94'],
+    agreement: algorithms['id-GostR3410-94-CryptoPro-ESDH'],
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89', block: 'CFB', sBox: 'E-A', keyMeshing: 'CP' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2', iterations: 2000 },
+  },
+  'CP-01': {
+    title: 'Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider',
+    signature: algorithms['id-GostR3411-94-with-GostR3410-2001'],
+    publicKey: { id: 'id-GostR3410-2001', name: 'GOST R 34.10-2001', namedCurve: 'X-256-A' },
+    privateKey: { id: 'id-GostR3410-2001DH', name: 'GOST R 34.10-2001-DH', namedCurve: 'X-256-A' },
+    digest: { id: 'id-GostR3411-94', name: 'GOST R 34.11-94', sBox: 'D-A' },
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
+    hmac: algorithms['id-HMACGostR3411-94'],
+    agreement: algorithms['id-GostR3410-2001-CryptoPro-ESDH'],
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89-CFB-CPKM', sBox: 'E-A' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2', iterations: 2000 },
+  },
+  'TC-256': {
+    title: 'Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider',
+    signature: algorithms['id-tc26-signwithdigest-gost3410-12-256'],
+    publicKey: { id: 'id-tc26-gost3410-12-256', name: 'GOST R 34.10-256', namedCurve: 'X-256-A' },
+    privateKey: { id: 'id-tc26-agreement-gost-3410-12-256', name: 'GOST R 34.10-256-DH/GOST R 34.11-256', namedCurve: 'X-256-A' },
+    digest: algorithms['id-tc26-gost3411-12-256'],
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
+    hmac: algorithms['id-tc26-hmac-gost-3411-12-256'],
+    agreement: algorithms['id-tc26-agreement-gost-3410-12-256'],
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89-CFB-CPKM', sBox: 'E-A' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-256-12-PBKDF2', iterations: 2000 },
+  },
+  'TC-512': {
+    title: 'Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider',
+    signature: algorithms['id-tc26-signwithdigest-gost3410-12-512'],
+    publicKey: { id: 'id-tc26-gost3410-12-512', name: 'GOST R 34.10-512', namedCurve: 'T-512-A' },
+    privateKey: { id: 'id-tc26-agreement-gost-3410-12-512', name: 'GOST R 34.10-512-DH/GOST R 34.11-256', namedCurve: 'T-512-A' },
+    digest: algorithms['id-tc26-gost3411-12-512'],
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
+    hmac: algorithms['id-tc26-hmac-gost-3411-12-512'],
+    agreement: algorithms['id-tc26-agreement-gost-3410-12-512'],
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89-CFB-CPKM', sBox: 'E-A' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-256-PBKDF2', iterations: 2000 },
+  },
+  'SC-94': {
+    title: 'Signal-COM GOST Cryptographic Provider',
+    signature: algorithms['id-sc-gostR3411-94-with-gostR3410-94'],
+    publicKey: { id: 'id-sc-gostR3410-94', name: 'GOST R 34.10-94/SC', namedParam: 'S-A' },
+    privateKey: {
+      id: 'id-sc-gostR3410-94', name: 'GOST R 34.10-94/SC', modulusLength: 1024, param: {
+        p: '0xB4E25EFB018E3C8B87505E2A67553C5EDC56C2914B7E4F89D23F03F03377E70A2903489DD60E78418D3D851EDB5317C4871E40B04228C3B7902963C4B7D85D52B9AA88F2AFDBEB28DA8869D6DF846A1D98924E925561BD69300B9DDD05D247B5922D967CBB02671881C57D10E5EF72D3E6DAD4223DC82AA1F7D0294651A480DF',
+        q: '0x972432A437178B30BD96195B773789AB2FFF15594B176DD175B63256EE5AF2CF',
+        a: '0x8FD36731237654BBE41F5F1F8453E71CA414FFC22C25D915309E5D2E62A2A26C7111F3FC79568DAFA028042FE1A52A0489805C0DE9A1A469C844C7CABBEE625C3078888C1D85EEA883F1AD5BC4E6776E8E1A0750912DF64F79956499F1E182475B0B60E2632ADCD8CF94E9C54FD1F3B109D81F00BF2AB8CB862ADF7D40B9369A',
+      },
+    },
+    digest: algorithms['id-sc-gostR3411-94'],
+    encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-89-CFB/SC' },
+    hmac: algorithms['id-sc-hmacWithGostR3411'],
+    wrapping: ['id-sc-cmsGostWrap'],
+    agreement: algorithms['id-sc-r3410-ESDH-r3411kdf'],
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
+    pbes: {
+      id: 'id-sc-pbeWithGost3411AndGost28147CFB',
+      derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
+      encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-CFB/SC', iv: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) },
+    },
+  },
+  'SC-01': {
+    title: 'Signal-COM ECGOST Cryptographic Provider',
+    signature: algorithms['id-sc-gostR3411-94-with-gostR3410-2001'],
+    publicKey: { id: 'id-sc-gostR3410-2001', name: 'GOST R 34.10-2001/SC', namedCurve: 'P-256' },
+    privateKey: {
+      id: 'id-sc-gostR3410-2001', name: 'GOST R 34.10-2001/SC', curve: {
+        p: '0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF',
+        a: '0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC',
+        b: '0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B',
+        x: '0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296',
+        y: '0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5',
+        q: '0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551',
+      },
+    },
+    digest: algorithms['id-sc-gostR3411-94'],
+    encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-89-CFB/SC' },
+    hmac: algorithms['id-sc-hmacWithGostR3411'],
+    wrapping: algorithms['id-sc-cmsGostWrap'],
+    agreement: algorithms['id-sc-r3410-ESDH-r3411kdf'],
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
+    pbes: {
+      id: 'id-sc-pbeWithGost3411AndGost28147CFB',
+      derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
+      encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-CFB/SC', iv: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) },
+    },
+  },
+  'RSA-2048': {
+    title: 'Microsoft Strong Cryptographic Provider',
+    signature: algorithms['sha256withRSAEncryption'],
+    publicKey: {
+      id: 'rsaEncryption', name: 'RSASSA-PKCS1-v1_5', modulusLength: 2048,
+      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: algorithms['sha256'],
+    },
+    privateKey: {
+      id: 'rsaEncryption', name: 'RSASSA-PKCS1-v1_5', modulusLength: 2048,
+      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: algorithms['sha256'],
+    },
+    digest: algorithms['sha256'],
+    encryption: algorithms['aes256-CFB'],
+    hmac: algorithms['hmacWithSHA256'],
+  },
+  'ECDSA-256': {
+    title: 'Microsoft Base DSS and Diffie-Hellman Cryptographic Provider',
+    signature: algorithms['ecdsa-with-SHA256'],
+    publicKey: { id: 'ecdsa', name: 'ECDSA', namedCurve: 'P-256' },
+    privateKey: { id: 'ecdsa', name: 'ECDSA', namedCurve: 'P-256' },
+    digest: algorithms['sha256'],
+    encryption: algorithms['aes256-CFB'],
+    hmac: algorithms['hmacWithSHA256'],
+    agreement: algorithms['ecDH'],
+  },
+};
+// Russian providers extension
+['CP-94', 'CP-01', 'TC-256', 'TC-512', 'SC-94', 'SC-01'].forEach(function (name) {
+  const provider = providers[name]
+  provider.hmac = expand(provider.hmac, { hash: provider.digest })
+  provider.derivation = expand(provider.derivation, { hash: provider.digest, hmac: provider.hmac })
+  provider.pbes = provider.pbes || {
+    id: 'PBES2', derivation: provider.derivation,
+    encryption: provider.encryption,
+  }
+  provider.pbmac = provider.pbmac || {
+    id: 'PBMAC1', derivation: provider.derivation,
+    hmac: provider.hmac,
+  }
+  provider.agreement = expand(provider.agreement, { wrapping: provider.wrapping })
+});
+// RSA & ECDA providers extension
+['RSA-2048', 'ECDSA-256'].forEach(function (name) {
+  const provider = providers[name]
+  provider.derivation = provider.derivation || {
+    id: 'PBKDF2', name: 'PBKDF2',
+    iterations: 2048, hash: provider.digest,
+  }
+  provider.pbes = provider.pbes || {
+    id: 'PBES2',
+    derivation: provider.derivation,
+    encryption: provider.encryption,
+  }
+  provider.pbmac = provider.pbmac || {
+    id: 'PBMAC1',
+    derivation: provider.derivation,
+    hmac: provider.hmac,
+  }
+})
+// Workaround for Chrome error for RSA algorithm when hash for keys is not defined
+// if (global.crypto && global.crypto.subtle)
+//    setTimeout(function () {
+//        global.crypto.subtle.generateKey(providers['RSA-2048'].generation, false, ["sign"])['catch'](function () {
+//            providers['RSA-2048'].generation.hash = providers['RSA-2048'].digest;
+//            algorithms['rsaEncryption'].hash = providers['RSA-2048'].digest;
+//        });
+//    });
+// </editor-fold>
+
+/**
+ * GOST and common ASN.1 Object and Algorithm Identifiers
+ * @class GostSecurity
+ */
+function GostSecurity() {
+}
+
+GostSecurity.prototype = {
+  names: names,
+  identifiers: identifiers,
+  algorithms: algorithms,
+  parameters: parameters,
+  attributes: attributes,
+  providers: providers,
+}
+
+/**
+ * GOST and common ASN.1 Object and Algorithm Identifiers
+ *
+ * @memberOf gostCrypto
+ * @type GostSecurity
+ */
+gostCrypto.security = new GostSecurity()
+
+module.exports = GostSecurity()
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/gostSign.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostSign.js
new file mode 100644
index 0000000..6b52a63
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/gostSign.js
@@ -0,0 +1,1827 @@
+/**
+ * @file GOST 34.10-2012 signature function with 1024/512 bits digest
+ * @version 1.76
+ * @copyright 2014-2016, Rudolf Nickolaev. All rights reserved.
+ */
+
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * Used library JSBN http://www-cs-students.stanford.edu/~tjw/jsbn/
+ * Copyright (c) 2003-2005  Tom Wu (tjw@cs.Stanford.EDU)
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ */
+
+const GostRandom = require('./gostRandom')
+const GostDigest = require('./gostDigest')
+
+
+/*
+ * Predefined curves and params collection
+ *
+ * http://tools.ietf.org/html/rfc5832
+ * http://tools.ietf.org/html/rfc7091
+ * http://tools.ietf.org/html/rfc4357
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+const rootcrypto = global.crypto || global.msCrypto
+const CryptoOperationData = global.ArrayBuffer
+
+const OperationError = global.OperationError || global.Error,
+  DataError = global.DataError || global.Error,
+  NotSupportedError = global.NotSupportedError || global.Error
+
+// Predefined named curve collection
+const ECGostParams = {
+  'S-256-TEST': {
+    a: 7,
+    b: '0x5FBFF498AA938CE739B8E022FBAFEF40563F6E6A3472FC2A514C0CE9DAE23B7E',
+    p: '0x8000000000000000000000000000000000000000000000000000000000000431',
+    q: '0x8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3',
+    x: 2,
+    y: '0x8E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8',
+  },
+  'S-256-A': {
+    a: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD94',
+    b: 166,
+    p: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97',
+    q: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C611070995AD10045841B09B761B893',
+    x: 1,
+    y: '0x8D91E471E0989CDA27DF505A453F2B7635294F2DDF23E3B122ACC99C9E9F1E14',
+  },
+  'S-256-B': {
+    a: '0x8000000000000000000000000000000000000000000000000000000000000C96',
+    b: '0x3E1AF419A269A5F866A7D3C25C3DF80AE979259373FF2B182F49D4CE7E1BBC8B',
+    p: '0x8000000000000000000000000000000000000000000000000000000000000C99',
+    q: '0x800000000000000000000000000000015F700CFFF1A624E5E497161BCC8A198F',
+    x: 1,
+    y: '0x3FA8124359F96680B83D1C3EB2C070E5C545C9858D03ECFB744BF8D717717EFC',
+  },
+  'S-256-C': {
+    a: '0x9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D7598',
+    b: 32858,
+    p: '0x9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D759B',
+    q: '0x9B9F605F5A858107AB1EC85E6B41C8AA582CA3511EDDFB74F02F3A6598980BB9',
+    x: 0,
+    y: '0x41ECE55743711A8C3CBF3783CD08C0EE4D4DC440D4641A8F366E550DFDB3BB67',
+  },
+  'P-256': {
+    p: '0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF',
+    a: '0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC',
+    b: '0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B',
+    x: '0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296',
+    y: '0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5',
+    q: '0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551',
+  },
+  'T-512-TEST': {
+    a: 7,
+    b: '0x1CFF0806A31116DA29D8CFA54E57EB748BC5F377E49400FDD788B649ECA1AC4361834013B2AD7322480A89CA58E0CF74BC9E540C2ADD6897FAD0A3084F302ADC',
+    p: '0x4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DF1D852741AF4704A0458047E80E4546D35B8336FAC224DD81664BBF528BE6373',
+    q: '0x4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DA82F2D7ECB1DBAC719905C5EECC423F1D86E25EDBE23C595D644AAF187E6E6DF',
+    x: '0x24D19CC64572EE30F396BF6EBBFD7A6C5213B3B3D7057CC825F91093A68CD762FD60611262CD838DC6B60AA7EEE804E28BC849977FAC33B4B530F1B120248A9A',
+    y: '0x2BB312A43BD2CE6E0D020613C857ACDDCFBF061E91E5F2C3F32447C259F39B2C83AB156D77F1496BF7EB3351E1EE4E43DC1A18B91B24640B6DBB92CB1ADD371E',
+  },
+  'T-512-A': {
+    p: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7',
+    a: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC4',
+    b: '0xE8C2505DEDFC86DDC1BD0B2B6667F1DA34B82574761CB0E879BD081CFD0B6265EE3CB090F30D27614CB4574010DA90DD862EF9D4EBEE4761503190785A71C760',
+    q: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27E69532F48D89116FF22B8D4E0560609B4B38ABFAD2B85DCACDB1411F10B275',
+    x: 3,
+    y: '0x7503CFE87A836AE3A61B8816E25450E6CE5E1C93ACF1ABC1778064FDCBEFA921DF1626BE4FD036E93D75E6A50E3A41E98028FE5FC235F5B889A589CB5215F2A4',
+  },
+  'T-512-B': {
+    p: '0x8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F',
+    a: '0x8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006C',
+    b: '0x687D1B459DC841457E3E06CF6F5E2517B97C7D614AF138BCBF85DC806C4B289F3E965D2DB1416D217F8B276FAD1AB69C50F78BEE1FA3106EFB8CCBC7C5140116',
+    q: '0x800000000000000000000000000000000000000000000000000000000000000149A1EC142565A545ACFDB77BD9D40CFA8B996712101BEA0EC6346C54374F25BD',
+    x: 2,
+    y: '0x1A8F7EDA389B094C2C071E3647A8940F3C123B697578C213BE6DD9E6C8EC7335DCB228FD1EDF4A39152CBCAAF8C0398828041055F94CEEEC7E21340780FE41BD',
+  },
+}
+ECGostParams['X-256-A'] = ECGostParams['S-256-A']
+ECGostParams['X-256-B'] = ECGostParams['S-256-C']
+ECGostParams['T-256-TEST'] = ECGostParams['S-256-TEST']
+ECGostParams['T-256-A'] = ECGostParams['S-256-A']
+ECGostParams['T-256-B'] = ECGostParams['S-256-B']
+ECGostParams['T-256-C'] = ECGostParams['S-256-C']
+
+
+const GostParams = {
+  'S-TEST': {
+    modulusLength: 512, // bit length of p (512 or 1024 bits)
+    p: '0xEE8172AE8996608FB69359B89EB82A69854510E2977A4D63BC97322CE5DC3386EA0A12B343E9190F23177539845839786BB0C345D165976EF2195EC9B1C379E3',
+    q: '0x98915E7EC8265EDFCDA31E88F24809DDB064BDC7285DD50D7289F0AC6F49DD2D',
+    a: '0x9e96031500c8774a869582d4afde2127afad2538b4b6270a6f7c8837b50d50f206755984a49e509304d648be2ab5aab18ebe2cd46ac3d8495b142aa6ce23e21c',
+  },
+  'S-A': {
+    modulusLength: 1024,
+    p: '0xB4E25EFB018E3C8B87505E2A67553C5EDC56C2914B7E4F89D23F03F03377E70A2903489DD60E78418D3D851EDB5317C4871E40B04228C3B7902963C4B7D85D52B9AA88F2AFDBEB28DA8869D6DF846A1D98924E925561BD69300B9DDD05D247B5922D967CBB02671881C57D10E5EF72D3E6DAD4223DC82AA1F7D0294651A480DF',
+    q: '0x972432A437178B30BD96195B773789AB2FFF15594B176DD175B63256EE5AF2CF',
+    a: '0x8FD36731237654BBE41F5F1F8453E71CA414FFC22C25D915309E5D2E62A2A26C7111F3FC79568DAFA028042FE1A52A0489805C0DE9A1A469C844C7CABBEE625C3078888C1D85EEA883F1AD5BC4E6776E8E1A0750912DF64F79956499F1E182475B0B60E2632ADCD8CF94E9C54FD1F3B109D81F00BF2AB8CB862ADF7D40B9369A',
+  },
+  'S-B': {
+    modulusLength: 1024,
+    p: '0xC6971FC57524B30C9018C5E621DE15499736854F56A6F8AEE65A7A404632B1BCF0349FFCAFCB0A103177971FC1612ADCDB8C8CC938C70225C8FD12AFF01B1D064E0AD6FDE6AB9159166CB9F2FC171D92F0CC7B6A6B2CD7FA342ACBE2C9315A42D576B1ECCE77A963157F3D0BD96A8EB0B0F3502AD238101B05116334F1E5B7AB',
+    q: '0xB09D634C10899CD7D4C3A7657403E05810B07C61A688BAB2C37F475E308B0607',
+    a: '0x3D26B467D94A3FFC9D71BF8DB8934084137264F3C2E9EB16DCA214B8BC7C872485336744934FD2EF5943F9ED0B745B90AA3EC8D70CDC91682478B664A2E1F8FB56CEF2972FEE7EDB084AF746419B854FAD02CC3E3646FF2E1A18DD4BEB3C44F7F2745588029649674546CC9187C207FB8F2CECE8E2293F68395C4704AF04BAB5',
+  },
+  'S-C': {
+    modulusLength: 1024,
+    p: '0x9D88E6D7FE3313BD2E745C7CDD2AB9EE4AF3C8899E847DE74A33783EA68BC30588BA1F738C6AAF8AB350531F1854C3837CC3C860FFD7E2E106C3F63B3D8A4C034CE73942A6C3D585B599CF695ED7A3C4A93B2B947B7157BB1A1C043AB41EC8566C6145E938A611906DE0D32E562494569D7E999A0DDA5C879BDD91FE124DF1E9',
+    q: '0xFADD197ABD19A1B4653EECF7ECA4D6A22B1F7F893B641F901641FBB555354FAF',
+    a: '0x7447ED7156310599070B12609947A5C8C8A8625CF1CF252B407B331F93D639DDD1BA392656DECA992DD035354329A1E95A6E32D6F47882D960B8F10ACAFF796D13CD9611F853DAB6D2623483E46788708493937A1A29442598AEC2E0742022563440FE9C18740ECE6765AC05FAF024A64B026E7E408840819E962E7E5F401AE3',
+  },
+  'S-D': {
+    modulusLength: 1024,
+    p: '0x80F102D32B0FD167D069C27A307ADAD2C466091904DBAA55D5B8CC7026F2F7A1919B890CB652C40E054E1E9306735B43D7B279EDDF9102001CD9E1A831FE8A163EED89AB07CF2ABE8242AC9DEDDDBF98D62CDDD1EA4F5F15D3A42A6677BDD293B24260C0F27C0F1D15948614D567B66FA902BAA11A69AE3BCEADBB83E399C9B5',
+    q: '0xF0F544C418AAC234F683F033511B65C21651A6078BDA2D69BB9F732867502149',
+    a: '0x6BCC0B4FADB3889C1E06ADD23CC09B8AB6ECDEDF73F04632595EE4250005D6AF5F5ADE44CB1E26E6263C672347CFA26F9E9393681E6B759733784CDE5DBD9A14A39369DFD99FA85CC0D10241C4010343F34A91393A706CF12677CBFA1F578D6B6CFBE8A1242CFCC94B3B653A476E145E3862C18CC3FED8257CFEF74CDB205BF1',
+  },
+  'X-A': {
+    modulusLength: 1024,
+    p: '0xCA3B3F2EEE9FD46317D49595A9E7518E6C63D8F4EB4D22D10D28AF0B8839F079F8289E603B03530784B9BB5A1E76859E4850C670C7B71C0DF84CA3E0D6C177FE9F78A9D8433230A883CD82A2B2B5C7A3306980278570CDB79BF01074A69C9623348824B0C53791D53C6A78CAB69E1CFB28368611A397F50F541E16DB348DBE5F',
+    q: '0xCAE4D85F80C147704B0CA48E85FB00A9057AA4ACC44668E17F1996D7152690D9',
+    a: '0xBE27D652F2F1E339DA734211B85B06AE4DE236AA8FBEEB3F1ADCC52CD43853777E834A6A518138678A8ADBD3A55C70A7EAB1BA7A0719548677AAF4E609FFB47F6B9D7E45B0D06D83D7ADC53310ABD85783E7317F7EC73268B6A9C08D260B85D8485696CA39C17B17F044D1E050489036ABD381C5E6BF82BA352A1AFF136601AF',
+  },
+  'X-B': {
+    modulusLength: 1024,
+    p: '0x9286DBDA91ECCFC3060AA5598318E2A639F5BA90A4CA656157B2673FB191CD0589EE05F4CEF1BD13508408271458C30851CE7A4EF534742BFB11F4743C8F787B11193BA304C0E6BCA25701BF88AF1CB9B8FD4711D89F88E32B37D95316541BF1E5DBB4989B3DF13659B88C0F97A3C1087B9F2D5317D557DCD4AFC6D0A754E279',
+    q: '0xC966E9B3B8B7CDD82FF0F83AF87036C38F42238EC50A876CD390E43D67B6013F',
+    a: '0x7E9C3096676F51E3B2F9884CF0AC2156779496F410E049CED7E53D8B7B5B366B1A6008E5196605A55E89C3190DABF80B9F1163C979FCD18328DAE5E9048811B370107BB7715F82091BB9DE0E33EE2FED6255474F8769FCE5EAFAEEF1CB5A32E0D5C6C2F0FC0B3447072947F5B4C387666993A333FC06568E534AD56D2338D729',
+  },
+  'X-C': {
+    modulusLength: 1024,
+    p: '0xB194036ACE14139D36D64295AE6C50FC4B7D65D8B340711366CA93F383653908EE637BE428051D86612670AD7B402C09B820FA77D9DA29C8111A8496DA6C261A53ED252E4D8A69A20376E6ADDB3BDCD331749A491A184B8FDA6D84C31CF05F9119B5ED35246EA4562D85928BA1136A8D0E5A7E5C764BA8902029A1336C631A1D',
+    q: '0x96120477DF0F3896628E6F4A88D83C93204C210FF262BCCB7DAE450355125259',
+    a: '0x3F1817052BAA7598FE3E4F4FC5C5F616E122CFF9EBD89EF81DC7CE8BF56CC64B43586C80F1C4F56DD5718FDD76300BE336784259CA25AADE5A483F64C02A20CF4A10F9C189C433DEFE31D263E6C9764660A731ECCAECB74C8279303731E8CF69205BC73E5A70BDF93E5BB681DAB4EEB9C733CAAB2F673C475E0ECA921D29782E',
+  },
+} // </editor-fold>
+
+/*
+ * BigInteger arithmetic tools
+ * optimized release of http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn.js
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// Bits per one element
+const DB = 28, DM = (1 << DB) - 1, DV = 1 << DB,
+  FV = Math.pow(2, 52), F1 = 52 - DB, F2 = 2 * DB - 52
+
+function am(y, i, x, w, j, c, n) {
+  const xl = x & 0x3fff, xh = x >> 14
+  while (--n >= 0) {
+    let l = y[i] & 0x3fff
+    const h = y[i++] >> 14
+    const m = xh * l + h * xl
+    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
+    c = (l >> 28) + (m >> 14) + xh * h
+    w[j++] = l & 0xfffffff
+  }
+  return c
+}
+
+function nbi(words) {
+  const r = new Array(Math.ceil(words))
+  r.s = 0
+  r.t = 0
+  return r
+}
+
+function copyTo(x, r) {
+  for (let i = x.t - 1; i >= 0; --i) {r[i] = x[i]}
+  r.t = x.t
+  r.s = x.s
+  return r
+}
+
+function copy(x) {
+  return copyTo(x, nbi(x.t))
+}
+
+function setInt(x, i) {
+  x.t = 1
+  x.s = (i < 0) ? -1 : 0
+  if (i > 0) {x[0] = i} else if (i < -1) {x[0] = i + DV} else {x.t = 0}
+  return x
+}
+
+function nbv(i) {
+  const r = nbi(1)
+  setInt(r, i)
+  return r
+}
+
+const ZERO = nbv(0), ONE = nbv(1), THREE = nbv(3)
+
+function clamp(x) {
+  const c = x.s & DM
+  while (x.t > 0 && x[x.t - 1] === c) {--x.t}
+  return x
+}
+
+function subTo(x, a, r) {
+  let i = 0, c = 0, m = Math.min(a.t, x.t)
+  while (i < m) {
+    c += x[i] - a[i]
+    r[i++] = c & DM
+    c >>= DB
+  }
+  if (a.t < x.t) {
+    c -= a.s
+    while (i < x.t) {
+      c += x[i]
+      r[i++] = c & DM
+      c >>= DB
+    }
+    c += x.s
+  } else {
+    c += x.s
+    while (i < a.t) {
+      c -= a[i]
+      r[i++] = c & DM
+      c >>= DB
+    }
+    c -= a.s
+  }
+  r.s = (c < 0) ? -1 : 0
+  if (c < -1) {r[i++] = DV + c} else if (c > 0) {r[i++] = c}
+  r.t = i
+  return clamp(r)
+}
+
+function sub(x, y) {
+  return subTo(x, y, nbi(x.t))
+}
+
+function addTo(x, a, r) {
+  let i = 0, c = 0, m = Math.min(a.t, x.t)
+  while (i < m) {
+    c += x[i] + a[i]
+    r[i++] = c & DM
+    c >>= DB
+  }
+  if (a.t < x.t) {
+    c += a.s
+    while (i < x.t) {
+      c += x[i]
+      r[i++] = c & DM
+      c >>= DB
+    }
+    c += x.s
+  } else {
+    c += x.s
+    while (i < a.t) {
+      c += a[i]
+      r[i++] = c & DM
+      c = c >> DB
+    }
+    c += a.s
+  }
+  r.s = (c < 0) ? -1 : 0
+  if (c > 0) {r[i++] = c} else if (c < -1) {r[i++] = DV + c}
+  r.t = i
+  return clamp(r)
+}
+
+function add(x, y) {
+  return addTo(x, y, nbi(x.t))
+}
+
+function negTo(x, r) {
+  return subTo(ZERO, x, r)
+}
+
+function neg(x) {
+  return negTo(x, nbi(x.t))
+}
+
+function absTo(x, r) {
+  return (x.s < 0) ? negTo(r) : copyTo(r)
+}
+
+function abs(x) {
+  return (x.s < 0) ? neg(x) : x
+}
+
+function compare(x, a) {
+  let r = x.s - a.s
+  if (r !== 0) {return r}
+  let i = x.t
+  r = i - a.t
+  if (r !== 0) {return (x.s < 0) ? -r : r}
+  while (--i >= 0) {
+    if ((r = x[i] - a[i]) !== 0) {return r}
+  }
+  return 0
+}
+
+function equals(x, y) {
+  return (compare(x, y) === 0)
+}
+
+function min(x, y) {
+  return (compare(x, y) < 0) ? x : y
+}
+
+function max(x, y) {
+  return (compare(x, y) > 0) ? x : y
+}
+
+function nbits(x) {
+  let r = 1, t
+  if ((t = x >>> 16) !== 0) {
+    x = t
+    r += 16
+  }
+  if ((t = x >> 8) !== 0) {
+    x = t
+    r += 8
+  }
+  if ((t = x >> 4) !== 0) {
+    x = t
+    r += 4
+  }
+  if ((t = x >> 2) !== 0) {
+    x = t
+    r += 2
+  }
+  if ((t = x >> 1) !== 0) {
+    x = t
+    r += 1
+  }
+  return r
+}
+
+function dshlTo(x, n, r) {
+  let i
+  for (i = x.t - 1; i >= 0; --i) {r[i + n] = x[i]}
+  for (i = n - 1; i >= 0; --i) {r[i] = 0}
+  r.t = x.t + n
+  r.s = x.s
+  return r
+}
+function dshrTo(x, n, r) {
+  for (let i = n; i < x.t; ++i) {r[i - n] = x[i]}
+  r.t = Math.max(x.t - n, 0)
+  r.s = x.s
+  return r
+}
+
+function shlTo(x, n, r) {
+  const bs = n % DB
+  const cbs = DB - bs
+  const bm = (1 << cbs) - 1
+  let ds = Math.floor(n / DB), c = (x.s << bs) & DM, i
+  for (i = x.t - 1; i >= 0; --i) {
+    r[i + ds + 1] = (x[i] >> cbs) | c
+    c = (x[i] & bm) << bs
+  }
+  for (i = ds - 1; i >= 0; --i) {r[i] = 0}
+  r[ds] = c
+  r.t = x.t + ds + 1
+  r.s = x.s
+  return clamp(r)
+}
+
+function shrTo(x, n, r) {
+  r.s = x.s
+  const ds = Math.floor(n / DB)
+  if (ds >= x.t) {
+    r.t = 0
+    return
+  }
+  const bs = n % DB
+  const cbs = DB - bs
+  const bm = (1 << bs) - 1
+  r[0] = x[ds] >> bs
+  for (let i = ds + 1; i < x.t; ++i) {
+    r[i - ds - 1] |= (x[i] & bm) << cbs
+    r[i - ds] = x[i] >> bs
+  }
+  if (bs > 0) {r[x.t - ds - 1] |= (x.s & bm) << cbs}
+  r.t = x.t - ds
+  return clamp(r)
+}
+
+function shl(x, n) {
+  const r = nbi(x.t)
+  if (n < 0) {shrTo(x, -n, r)} else {shlTo(x, n, r)}
+  return r
+}
+
+function shr(x, n) {
+  const r = nbi(x.t)
+  if (n < 0) {shlTo(x, -n, r)} else {shrTo(x, n, r)}
+  return r
+}
+
+function bitLength(x) {
+  if (x.t <= 0) {return 0}
+  return DB * (x.t - 1) + nbits(x[x.t - 1] ^ (x.s & DM))
+}
+
+function mulTo(b, a, r) {
+  const x = abs(b), y = abs(a)
+  let i = x.t
+  r.t = i + y.t
+  while (--i >= 0) {r[i] = 0}
+  for (i = 0; i < y.t; ++i) {r[i + x.t] = am(x, 0, y[i], r, i, 0, x.t)}
+  r.s = 0
+  if (b.s !== a.s) {subTo(ZERO, r, r)}
+  return clamp(r)
+}
+
+function mul(x, y) {
+  return mulTo(x, y, nbi(x.t + y.t))
+}
+
+function sqrTo(a, r) {
+  const x = abs(a)
+  let i = r.t = 2 * x.t
+  while (--i >= 0) {r[i] = 0}
+  for (i = 0; i < x.t - 1; ++i) {
+    const c = am(x, i, x[i], r, 2 * i, 0, 1)
+    if ((r[i + x.t] += am(x, i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
+      r[i + x.t] -= x.DV
+      r[i + x.t + 1] = 1
+    }
+  }
+  if (r.t > 0) {r[r.t - 1] += am(x, i, x[i], r, 2 * i, 0, 1)}
+  r.s = 0
+  return clamp(r)
+}
+
+function sqr(a) {
+  return sqrTo(a, nbi(a.t * 2))
+}
+
+function divRemTo(n, m, q, r) {
+  const pm = abs(m)
+  if (pm.t <= 0) {throw new OperationError('Division by zero')}
+  const pt = abs(n)
+  if (pt.t < pm.t) {
+    if (q) {setInt(q, 0)}
+    if (r) {copyTo(n, r)}
+    return q
+  }
+  if (!r) {r = nbi(m.t)}
+  const y = nbi(m.t), ts = n.s, ms = m.s
+  const nsh = DB - nbits(pm[pm.t - 1])
+  if (nsh > 0) {
+    shlTo(pm, nsh, y)
+    shlTo(pt, nsh, r)
+  } else {
+    copyTo(pm, y)
+    copyTo(pt, r)
+  }
+  const ys = y.t
+  const y0 = y[ys - 1]
+  if (y0 === 0) {return q}
+  const yt = y0 * (1 << F1) + ((ys > 1) ? y[ys - 2] >> F2 : 0)
+  const d1 = FV / yt, d2 = (1 << F1) / yt, e = 1 << F2
+  let i = r.t, j = i - ys, t = !q ? nbi(Math.max(n.t - m.t, 1)) : q
+  dshlTo(y, j, t)
+  if (compare(r, t) >= 0) {
+    r[r.t++] = 1
+    subTo(r, t, r)
+  }
+  dshlTo(ONE, ys, t)
+  subTo(t, y, y)
+  while (y.t < ys) {y[y.t++] = 0}
+  while (--j >= 0) {
+    let qd = (r[--i] === y0) ? DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
+    if ((r[i] += am(y, 0, qd, r, j, 0, ys)) < qd) {
+      dshlTo(y, j, t)
+      subTo(r, t, r)
+      while (r[i] < --qd) {subTo(r, t, r)}
+    }
+  }
+  if (q) {
+    dshrTo(r, ys, q)
+    if (ts !== ms) {subTo(ZERO, q, q)}
+  }
+  r.t = ys
+  clamp(r)
+  if (nsh > 0) {shrTo(r, nsh, r)}
+  if (ts < 0) {subTo(ZERO, r, r)}
+  return q
+}
+
+function modTo(b, a, r) {
+  divRemTo(abs(b), a, null, r)
+  if (b.s < 0 && compare(r, ZERO) > 0) {subTo(a, r, r)}
+  return r
+}
+
+function mod(b, a) {
+  return modTo(b, a, nbi(a.t))
+}
+
+function div(b, a) {
+  return divRemTo(b, a, nbi(Math.max(b.t - a.t, 1)), null)
+}
+
+function isEven(x) {
+
+  return ((x.t > 0) ? (x[0] & 1) : x.s) === 0
+}
+
+function isZero(x) {
+  return equals(x, ZERO)
+}
+
+function sig(x) {
+  if (x.s < 0) {return -1}
+  if (x.t <= 0 || (x.t === 1 && x[0] <= 0)) {return 0}
+  return 1
+}
+
+function invMod(x, m) {
+  const ac = isEven(m)
+  if ((isEven(x) && ac) || sig(m) === 0) {return ZERO}
+  const u = copy(m), v = copy(x)
+  const a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1)
+  while (sig(u) !== 0) {
+    while (isEven(u)) {
+      shrTo(u, 1, u)
+      if (ac) {
+        if (!isEven(a) || !isEven(b)) {
+          addTo(a, x, a)
+          subTo(b, m, b)
+        }
+        shrTo(a, 1, a)
+      } else if (!isEven(b)) {subTo(b, m, b)}
+      shrTo(b, 1, b)
+    }
+    while (isEven(v)) {
+      shrTo(v, 1, v)
+      if (ac) {
+        if (!isEven(c) || !isEven(d)) {
+          addTo(c, x, c)
+          subTo(d, m, d)
+        }
+        shrTo(c, 1, c)
+      } else if (!isEven(d)) {subTo(d, m, d)}
+      shrTo(d, 1, d)
+    }
+    if (compare(u, v) >= 0) {
+      subTo(u, v, u)
+      if (ac) {subTo(a, c, a)}
+      subTo(b, d, b)
+    } else {
+      subTo(v, u, v)
+      if (ac) {subTo(c, a, c)}
+      subTo(d, b, d)
+    }
+  }
+  if (compare(v, ONE) !== 0) {return ZERO}
+  if (compare(d, m) >= 0) {return subtract(d, m)}
+  if (sig(d) < 0) {addTo(d, m, d)} else {return d}
+  if (sig(d) < 0) {return add(d, m)}
+  return d
+}
+
+function testBit(x, n) {
+  const j = Math.floor(n / DB)
+  if (j >= x.t) {return (x.s !== 0)}
+  return ((x[j] & (1 << (n % DB))) !== 0)
+}
+
+function nothing(x) {
+  return x
+}
+
+function extend(c, o) {
+  for (const i in o) {c.prototype[i] = o[i]}
+} // </editor-fold>
+
+/*
+ * Classic, Barret, Mongomery reductions, optimized ExpMod algorithms
+ * optimized release of http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn2.js
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// Classic reduction
+const Classic = function (m) {
+  this.m = m
+}
+
+extend(Classic, {
+  convert: function (x) {
+    if (x.s < 0 || compare(x, this.m) >= 0) {return mod(x, this.m)}
+    return x
+  },
+  revert: nothing,
+  reduce: function (x) {
+    modTo(x, this.m, x)
+  },
+  sqrTo: function (x, r) {
+    sqrTo(x, r)
+    this.reduce(r)
+  },
+  mulTo: function (x, y, r) {
+    mulTo(x, y, r)
+    this.reduce(r)
+  },
+})
+
+function invDig(a) {
+  if (a.t < 1) {return 0}
+  const x = a[0]
+  if ((x & 1) === 0) {return 0}
+  let y = x & 3
+  y = (y * (2 - (x & 0xf) * y)) & 0xf
+  y = (y * (2 - (x & 0xff) * y)) & 0xff
+  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff
+  y = (y * (2 - x * y % DV)) % DV
+  return (y > 0) ? DV - y : -y
+}
+
+// Montgomery reduction
+const Montgomery = function (m) {
+  this.m = m
+  this.mp = invDig(m)
+  this.mpl = this.mp & 0x7fff
+  this.mph = this.mp >> 15
+  this.um = (1 << (DB - 15)) - 1
+  this.mt2 = 2 * m.t
+}
+
+extend(Montgomery, {
+  // xR mod m
+  convert: function (x) {
+    const r = nbi(x.t)
+    dshlTo(abs(x), this.m.t, r)
+    divRemTo(r, this.m, null, r)
+    if (x.s < 0 && compare(r, ZERO) > 0) {subTo(this.m, r, r)}
+    return r
+  },
+  // x/R mod m
+  revert: function (x) {
+    const r = nbi(x.t)
+    copyTo(x, r)
+    this.reduce(r)
+    return r
+  },
+  // x = x/R mod m (HAC 14.32)
+  reduce: function (x) {
+    while (x.t <= this.mt2) {x[x.t++] = 0}
+    for (let i = 0; i < this.m.t; ++i) {
+      let j = x[i] & 0x7fff
+      const u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & DM
+      j = i + this.m.t
+      x[j] += am(this.m, 0, u0, x, i, 0, this.m.t)
+      while (x[j] >= DV) {
+        x[j] -= DV
+        x[++j]++
+      }
+    }
+    clamp(x)
+    dshrTo(x, this.m.t, x)
+    if (compare(x, this.m) >= 0) {subTo(x, this.m, x)}
+  },
+  // r = "x^2/R mod m"; x != r
+  sqrTo: function (x, r) {
+    sqrTo(x, r)
+    this.reduce(r)
+  },
+  // r = "xy/R mod m"; x,y != r
+  mulTo: function (x, y, r) {
+    mulTo(x, y, r)
+    this.reduce(r)
+  },
+})
+
+function dAddOffset(x, n, w) {
+  if (n === 0) {return}
+  while (x.t <= w) {x[x.t++] = 0}
+  x[w] += n
+  while (x[w] >= DV) {
+    x[w] -= DV
+    if (++w >= x.t) {x[x.t++] = 0}
+    ++x[w]
+  }
+}
+
+function mulLowerTo(x, a, n, r) {
+  let i = Math.min(x.t + a.t, n)
+  r.s = 0 // assumes a,x >= 0
+  r.t = i
+  while (i > 0) {r[--i] = 0}
+  let j
+  for (j = r.t - x.t; i < j; ++i) {r[i + x.t] = am(x, 0, a[i], r, i, 0, x.t)}
+  for (j = Math.min(a.t, n); i < j; ++i) {am(x, 0, a[i], r, i, 0, n - i)}
+  return clamp(r)
+}
+
+function mulUpperTo(x, a, n, r) {
+  --n
+  let i = r.t = x.t + a.t - n
+  r.s = 0 // assumes a,x >= 0
+  while (--i >= 0) {r[i] = 0}
+  for (i = Math.max(n - x.t, 0); i < a.t; ++i) {r[x.t + i - n] = am(x, n - i, a[i], r, 0, 0, x.t + i - n)}
+  clamp(r)
+  return dshrTo(r, 1, r)
+}
+
+// Barrett modular reduction
+function Barrett(m) {
+  // setup Barrett
+  this.r2 = nbi(2 * m.t)
+  this.q3 = nbi(2 * m.t)
+  dshlTo(ONE, 2 * m.t, this.r2)
+  this.mu = div(this.r2, m)
+  this.m = m
+}
+
+extend(Barrett, {
+  convert: function (x) {
+    if (x.s < 0 || x.t > 2 * this.m.t) {return mod(x, this.m)}
+    if (compare(x, this.m) < 0) {return x}
+
+    const r = nbi(x.t)
+    copyTo(x, r)
+    this.reduce(r)
+    return r
+
+  },
+  revert: function (x) {
+    return x
+  },
+  // x = x mod m (HAC 14.42)
+  reduce: function (x) {
+    dshrTo(x, this.m.t - 1, this.r2)
+    if (x.t > this.m.t + 1) {
+      x.t = this.m.t + 1
+      clamp(x)
+    }
+    mulUpperTo(this.mu, this.r2, this.m.t + 1, this.q3)
+    mulLowerTo(this.m, this.q3, this.m.t + 1, this.r2)
+    while (compare(x, this.r2) < 0) {dAddOffset(x, 1, this.m.t + 1)}
+    subTo(x, this.r2, x)
+    while (compare(x, this.m) >= 0) {subTo(x, this.m, x)}
+  },
+  // r = x^2 mod m; x != r
+  sqrTo: function (x, r) {
+    sqrTo(x, r)
+    this.reduce(r)
+  },
+  // r = x*y mod m; x,y != r
+  mulTo: function (x, y, r) {
+    mulTo(x, y, r)
+    this.reduce(r)
+  },
+
+})
+
+// x^e % m (HAC 14.85)
+function expMod(x, e, m) {
+  let i = bitLength(e), k, r = nbv(1), z
+  if (i <= 0) {return r}
+  if (i < 18) {k = 1} else if (i < 48) {k = 3} else if (i < 144) {k = 4} else if (i < 768) {k = 5} else {k = 6}
+  if (i < 8) {z = new Classic(m)} else if (isEven(m)) {z = new Barrett(m)} else {z = new Montgomery(m)}
+
+  // precomputation
+  let g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1
+  g[1] = z.convert(x)
+  if (k > 1) {
+    const g2 = nbi(m.t * 2)
+    z.sqrTo(g[1], g2)
+    while (n <= km) {
+      g[n] = nbi(m.t * 2)
+      z.mulTo(g2, g[n - 2], g[n])
+      n += 2
+    }
+  }
+
+  let j = e.t - 1, w, is1 = true, r2 = nbi(m.t * 2), t
+  i = nbits(e[j]) - 1
+  while (j >= 0) {
+    if (i >= k1) {w = (e[j] >> (i - k1)) & km} else {
+      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
+      if (j > 0) {w |= e[j - 1] >> (DB + i - k1)}
+    }
+
+    n = k
+    while ((w & 1) == 0) {
+      w >>= 1
+      --n
+    }
+    if ((i -= n) < 0) {
+      i += DB
+      --j
+    }
+    if (is1) {	// ret == 1, don't bother squaring or multiplying it
+      copyTo(g[w], r)
+      is1 = false
+    } else {
+      while (n > 1) {
+        z.sqrTo(r, r2)
+        z.sqrTo(r2, r)
+        n -= 2
+      }
+      if (n > 0) {z.sqrTo(r, r2)} else {
+        t = r
+        r = r2
+        r2 = t
+      }
+      z.mulTo(r2, g[w], r)
+    }
+    while (j >= 0 && (e[j] & (1 << i)) == 0) {
+      z.sqrTo(r, r2)
+      t = r
+      r = r2
+      r2 = t
+      if (--i < 0) {
+        i = DB - 1
+        --j
+      }
+    }
+  }
+  return z.revert(r)
+} // </editor-fold>
+
+/*
+ * EC Field Elements, Points, Curves
+ * optimized release of http://www-cs-students.stanford.edu/~tjw/jsbn/ec.js
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+// EC Field Elemets
+function newFE(a, x) {
+  a.r.reduce(x)
+  x.q = a.q
+  x.r = a.r
+  return x
+}
+
+function copyFE(a, x) {
+  x.q = a.q
+  x.r = a.r
+  return x
+}
+
+function negFE(a) {
+  return copyFE(a, sub(a.q, a))
+}
+
+function addFE(a, b) {
+  const r = add(a, b)
+  if (compare(r, a.q) > 0) {subTo(r, a.q, r)}
+  return copyFE(a, r)
+}
+
+function subFE(a, b) {
+  const r = sub(a, b)
+  if (r.s < 0) {addTo(a.q, r, r)}
+  return copyFE(a, r)
+}
+
+function mulFE(a, b) {
+  return newFE(a, mul(a, b))
+}
+
+function sqrFE(a) {
+  return newFE(a, sqr(a))
+}
+
+function shlFE(a, i) {
+  return newFE(a, shl(a, i))
+}
+
+function invFE(a) {
+  return copyFE(a, invMod(a, a.q))
+}
+
+// EC Points
+function newEC(curve, x, y, z) {
+  return {
+    curve: curve,
+    x: x,
+    y: y,
+    z: z || newFE(curve, ONE),
+  }
+}
+
+function getX(point) {
+  if (!point.zinv) {point.zinv = invFE(point.z)}
+  return mulFE(point.x, point.zinv)
+}
+
+function getY(point) {
+  if (!point.zinv) {point.zinv = invFE(point.z)}
+  return mulFE(point.y, point.zinv)
+}
+
+function isInfinity(a) {
+  if ((!a.x) && (!a.y)) {return true}
+  return isZero(a.z) && !isZero(a.y)
+}
+
+function getInfinity(a) {
+  return a.curve.infinity
+}
+
+function equalsEC(a, b) {
+  if (a === b) {return true}
+  if (isInfinity(a)) {return isInfinity(b)}
+  if (isInfinity(b)) {return isInfinity(a)}
+  let u, v
+  // u = Y2 * Z1 - Y1 * Z2
+  u = subFE(mulFE(b.y, a.z), mulFE(a.y, b.z))
+  if (!isZero(u)) {return false}
+  // v = X2 * Z1 - X1 * Z2
+  v = subFE(mulFE(b.x, a.z), mulFE(a.x, b.z))
+  return isZero(v)
+}
+
+function negEC(a) {
+  return newEC(a.curve, a.x, negFE(a.y), a.z)
+}
+
+function addEC(a, b) {
+  if (isInfinity(a)) {return b}
+  if (isInfinity(b)) {return a}
+
+  // u = Y2 * Z1 - Y1 * Z2
+  const u = subFE(mulFE(b.y, a.z), mulFE(a.y, b.z))
+  // v = X2 * Z1 - X1 * Z2
+  const v = subFE(mulFE(b.x, a.z), mulFE(a.x, b.z))
+
+  if (isZero(v)) {
+    if (isZero(u)) {
+      return twiceEC(a) // a == b, so double
+    }
+    return getInfinity(a) // a = -b, so infinity
+  }
+
+  const x1 = a.x
+  const y1 = a.y
+
+  const v2 = sqrFE(v)
+  const v3 = mulFE(v2, v)
+  const x1v2 = mulFE(x1, v2)
+  const zu2 = mulFE(sqrFE(u), a.z)
+
+  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
+  const x3 = mulFE(subFE(mulFE(subFE(zu2, shlFE(x1v2, 1)), b.z), v3), v)
+  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
+  const y3 = addFE(mulFE(subFE(subFE(mulFE(mulFE(x1v2, THREE), u), mulFE(y1, v3)), mulFE(zu2, u)), b.z), mulFE(u, v3))
+  // z3 = v^3 * z1 * z2
+  const z3 = mulFE(mulFE(v3, a.z), b.z)
+
+  return newEC(a.curve, x3, y3, z3)
+}
+
+function twiceEC(b) {
+  if (isInfinity(b)) {return b}
+  if (sig(b.y) === 0) {return getInfinity(b)}
+
+  const x1 = b.x
+  const y1 = b.y
+
+  const y1z1 = mulFE(y1, b.z)
+  const y1sqz1 = mulFE(y1z1, y1)
+  const a = b.curve.a
+
+  // w = 3 * x1^2 + a * z1^2
+  let w = mulFE(sqrFE(x1), THREE)
+  if (!isZero(a)) {
+    w = addFE(w, mulFE(sqrFE(b.z), a))
+  }
+
+  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
+  const x3 = mulFE(shlFE(subFE(sqrFE(w), mulFE(shlFE(x1, 3), y1sqz1)), 1), y1z1)
+  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
+  const y3 = subFE(mulFE(shlFE(subFE(mulFE(mulFE(w, THREE), x1), shlFE(y1sqz1, 1)), 2), y1sqz1), mulFE(sqrFE(w), w))
+  // z3 = 8 * (y1 * z1)^3
+  const z3 = shlFE(mulFE(sqrFE(y1z1), y1z1), 3)
+
+  return newEC(b.curve, x3, y3, z3)
+}
+
+// Simple NAF (Non-Adjacent Form) multiplication algorithm
+function mulEC(a, k) {
+  if (isInfinity(a)) {return a}
+  if (sig(k) === 0) {return getInfinity(a)}
+
+  const e = k
+  const h = mul(e, THREE)
+
+  const neg = negEC(a)
+  let R = a
+
+  let i
+  for (i = bitLength(h) - 2; i > 0; --i) {
+    R = twiceEC(R)
+
+    const hBit = testBit(h, i)
+    const eBit = testBit(e, i)
+
+    if (hBit !== eBit) {
+      R = addEC(R, hBit ? a : neg)
+    }
+  }
+
+  return R
+}
+
+function mul2AndAddEC(a, k) {
+  const nbits = bitLength(k)
+  let R = a,
+    Q = getInfinity(a)
+
+  for (let i = 0; i < nbits - 1; i++) {
+    if (testBit(k, i) === 1) {Q = addEC(Q, R)}
+
+    R = twiceEC(R)
+  }
+
+  if (testBit(k, nbits - 1) === 1) {Q = addEC(Q, R)}
+
+  return Q
+}
+
+// Compute a*j + x*k (simultaneous multiplication)
+function mulTwoEC(a, j, x, k) {
+  let i
+  if (bitLength(j) > bitLength(k)) {i = bitLength(j) - 1} else {i = bitLength(k) - 1}
+
+  let R = getInfinity(a)
+  const both = addEC(a, x)
+  while (i >= 0) {
+    R = twiceEC(R)
+    if (testBit(j, i)) {
+      if (testBit(k, i)) {
+        R = addEC(R, both)
+      } else {
+        R = addEC(R, a)
+      }
+    } else {
+      if (testBit(k, i)) {
+        R = addEC(R, x)
+      }
+    }
+    --i
+  }
+
+  return R
+}
+
+// EC Curve
+function newCurve(q, a, b) {
+  const curve = {}
+  curve.q = q
+  curve.r = new Barrett(q)
+  curve.a = newFE(curve, a)
+  curve.b = newFE(curve, b)
+  curve.infinity = newEC(curve)
+  return curve
+} // </editor-fold>
+
+/*
+ * Converion tools (hex, binary)
+ *
+ */ // <editor-fold defaultstate="collapsed">
+
+function atobi(d) {
+  const k = 8
+  const a = new Uint8Array(d)
+  const r = nbi(a.length * 8 / DB)
+  r.t = 0
+  r.s = 0
+  let sh = 0
+  for (let i = 0, n = a.length; i < n; i++) {
+    const x = a[i]
+    if (sh === 0) {r[r.t++] = x} else if (sh + k > DB) {
+      r[r.t - 1] |= (x & ((1 << (DB - sh)) - 1)) << sh
+      r[r.t++] = (x >> (DB - sh))
+    } else {r[r.t - 1] |= x << sh}
+    sh += k
+    if (sh >= DB) {sh -= DB}
+  }
+  return clamp(r)
+}
+
+function bitoa(s, bitLength) {
+  const k = 8
+  let km = (1 << k) - 1, d, m = false, r = [], i = s.t
+  let p = DB - (i * DB) % k
+  if (i-- > 0) {
+    if (p < DB && (d = s[i] >> p) > 0) {
+      m = true
+      r.push(d)
+    }
+    while (i >= 0) {
+      if (p < k) {
+        d = (s[i] & ((1 << p) - 1)) << (k - p)
+        d |= s[--i] >> (p += DB - k)
+      } else {
+        d = (s[i] >> (p -= k)) & km
+        if (p <= 0) {
+          p += DB
+          --i
+        }
+      }
+      if (d > 0) {m = true}
+      if (m) {r.push(d)}
+    }
+  }
+  const r8 = new Uint8Array(bitLength ? bitLength / 8 : r.length)
+  if (m) {r8.set(r.reverse())}
+  return r8.buffer
+}
+
+
+function htobi(s) {
+  if (typeof s === 'number' || s instanceof Number) {return nbv(s)}
+  s = s.replace(/[^\-A-Fa-f0-9]/g, '')
+  if (!s) {s = '0'}
+  const k = 4
+  const r = nbi(s.length / 7)
+  let i = s.length, mi = false, sh = 0
+  while (--i >= 0) {
+    const c = s.charAt(i)
+    if (c === '-') {
+      mi = true
+      continue
+    }
+    const x = parseInt(s.charAt(i), 16)
+    mi = false
+    if (sh === 0) {r[r.t++] = x} else if (sh + k > DB) {
+      r[r.t - 1] |= (x & ((1 << (DB - sh)) - 1)) << sh
+      r[r.t++] = (x >> (DB - sh))
+    } else {r[r.t - 1] |= x << sh}
+    sh += k
+    if (sh >= DB) {sh -= DB}
+  }
+  if (mi) {subTo(ZERO, r, r)}
+  return clamp(r)
+}
+
+function bitoh(x) {
+  if (x.s < 0) {return `-${ bitoh(negTo(x, nbi(x.t)))}`}
+  const k = 4
+  let km = (1 << k) - 1, d, m = false, r = '', i = x.t
+  let p = DB - (i * DB) % k
+  if (i-- > 0) {
+    if (p < DB && (d = x[i] >> p) > 0) {
+      m = true
+      r = d.toString(16)
+    }
+    while (i >= 0) {
+      if (p < k) {
+        d = (x[i] & ((1 << p) - 1)) << (k - p)
+        d |= x[--i] >> (p += DB - k)
+      } else {
+        d = (x[i] >> (p -= k)) & km
+        if (p <= 0) {
+          p += DB
+          --i
+        }
+      }
+      if (d > 0) {m = true}
+      if (m) {r += d.toString(16)}
+    }
+  }
+  return `0x${ m ? r : '0'}`
+}
+
+// biginteger to big-endian integer bytearray
+function bitoi(s) {
+  let i = s.t, r = []
+  r[0] = s.s
+  let p = DB - (i * DB) % 8, d, k = 0
+  if (i-- > 0) {
+    if (p < DB && (d = s[i] >> p) !== (s.s & DM) >> p) {r[k++] = d | (s.s << (DB - p))}
+    while (i >= 0) {
+      if (p < 8) {
+        d = (s[i] & ((1 << p) - 1)) << (8 - p)
+        d |= s[--i] >> (p += DB - 8)
+      } else {
+        d = (s[i] >> (p -= 8)) & 0xff
+        if (p <= 0) {
+          p += DB
+          --i
+        }
+      }
+      if ((d & 0x80) !== 0) {d |= -256}
+      if (k === 0 && (s.s & 0x80) !== (d & 0x80)) {++k}
+      if (k > 0 || d !== s.s) {r[k++] = d}
+    }
+  }
+  return new Uint8Array(r).buffer
+}
+
+// big-endian integer bytearray to biginteger
+function itobi(d) {
+  const k = 8, s = new Uint8Array(d),
+    r = nbi(s.length / 7)
+  r.t = 0
+  r.s = 0
+  let i = s.length, sh = 0
+  while (--i >= 0) {
+    const x = s[i] & 0xff
+    if (sh === 0) {r[r.t++] = x} else if (sh + k > DB) {
+      r[r.t - 1] |= (x & ((1 << (DB - sh)) - 1)) << sh
+      r[r.t++] = (x >> (DB - sh))
+    } else {r[r.t - 1] |= x << sh}
+    sh += k
+    if (sh >= DB) {sh -= DB}
+  }
+  if ((s[0] & 0x80) !== 0) {
+    r.s = -1
+    if (sh > 0) {r[r.t - 1] |= ((1 << (DB - sh)) - 1) << sh}
+  }
+  return clamp(r)
+}
+
+
+// Swap bytes in buffer
+function swap(s) {
+  const src = new Uint8Array(s),
+    dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
+}
+
+// Calculate hash of data
+function hash(d) {
+  if (this.hash) {d = this.hash.digest(d)}
+  // Swap hash for SignalCom
+  if (this.procreator === 'SC' ||
+        (this.procreator === 'VN' && this.hash.version === 2012)) {d = swap(d)}
+  return d
+}
+
+// Check buffer
+function buffer(d) {
+  if (d instanceof CryptoOperationData) {return d}
+  if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
+  }
+  throw new DataError('CryptoOperationData or CryptoOperationDataView required')
+}
+
+// Check double buffer
+function to2(d) {
+  const b = buffer(d)
+  if (b.byteLength % 2 > 0) {throw new DataError('Buffer length must be even')}
+  const n = b.byteLength / 2
+  return [atobi(new Uint8Array(b, 0, n)), atobi(new Uint8Array(b, n, n))]
+}
+
+function from2(x, y, bitLength) {
+  const a = bitoa(x, bitLength),
+    b = bitoa(y, bitLength),
+    d = new Uint8Array(a.byteLength + b.byteLength)
+  d.set(new Uint8Array(a))
+  d.set(new Uint8Array(b), a.byteLength)
+  return d.buffer
+}
+
+function getSeed(length) {
+
+  const randomSource = GostRandom ? new (GostRandom || global.GostRandom) : rootcrypto
+  if (randomSource.getRandomValues) {
+    const d = new Uint8Array(Math.ceil(length / 8))
+    randomSource.getRandomValues(d)
+    return d
+  } throw new NotSupportedError('Random generator not found')
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * The sign method returns sign data generated with the supplied privateKey.<br>
+ *
+ * @memberOf GostSign
+ * @method sign
+ * @instance
+ * @param {(CryptoOperationData|TypedArray)} privateKey Private key
+ * @param {(CryptoOperationData|TypedArray)} data Data
+ * @returns {CryptoOperationData} Signature
+ */
+function sign(privateKey, data) // <editor-fold defaultstate="collapsed">
+{
+
+  // Stage 1
+  const b = buffer(data)
+  const alpha = atobi(hash.call(this, b))
+
+  const q = this.q
+  const x = mod(atobi(buffer(privateKey)), q)
+
+  // Stage 2
+  let e = mod(alpha, q)
+  if (isZero(e)) {e = ONE}
+
+  let s = ZERO
+  while (isZero(s)) {
+    var r = ZERO
+    while (isZero(r)) {
+
+      // Stage 3
+      var k = mod(atobi(this.ukm ||
+                getSeed(this.bitLength)), q) // pseudo random 0 < k < q
+      // Stage 4
+      if (this.curve) {
+        // Gost R 34.10-2001 || Gost R 34.10-2012
+        const P = this.P
+        const C = mulEC(P, k)
+        r = mod(getX(C), q)
+      } else {
+        // Gost R 34.10-94
+        const p = this.p, a = this.a
+        r = mod(expMod(a, k, p), q)
+      }
+    }
+    // Stage 5
+    s = mod(add(mul(r, x), mul(k, e)), q)
+  }
+  // Stage 6
+  // console.log('s', bitoh(s));
+  // console.log('r', bitoh(r));
+  let zetta
+  // Integer structure for SignalCom algorithm
+  if (this.procreator === 'SC') {
+    zetta = {
+      r: bitoh(r),
+      s: bitoh(s),
+    }
+  } else {
+    zetta = from2(r, s, this.bitLength)
+    // Swap bytes for CryptoPro algorithm
+    if (this.procreator === 'CP' || this.procreator === 'VN') {zetta = swap(zetta)}
+  }
+  return zetta
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * The verify method returns signature verification for the supplied publicKey.<br>
+ *
+ * @memberOf GostSign
+ * @method sign
+ * @instance
+ * @param {(CryptoOperationData|TypedArray)} publicKey Public key
+ * @param {(CryptoOperationData|TypedArray)} signature Signature
+ * @param {(CryptoOperationData|TypedArray)} data Data
+ * @returns {boolean} Signature verified = true
+ */
+function verify(publicKey, signature, data) // <editor-fold defaultstate="collapsed">
+{
+
+  // Stage 1
+  const q = this.q
+  let r, s
+  // Ready int for SignalCom algorithm
+  if (this.procreator === 'SC') {
+    r = htobi(signature.r)
+    s = htobi(signature.s)
+  } else {
+    if (this.procreator === 'CP' || this.procreator === 'VN') {signature = swap(signature)}
+    const zetta = to2(signature)
+    // Swap bytes for CryptoPro algorithm
+    s = zetta[1] //  first 32 octets contain the big-endian representation of s
+    r = zetta[0] //  and second 32 octets contain the big-endian representation of r
+  }
+  if (compare(r, q) >= 0 || compare(s, q) >= 0) {return false}
+  // Stage 2
+  const b = buffer(data)
+  const alpha = atobi(hash.call(this, b))
+  // Stage 3
+  let e = mod(alpha, q)
+  if (isZero(e) === 0) {e = ONE}
+  // Stage 4
+  const v = invMod(e, q)
+  // Stage 5
+  const z1 = mod(mul(s, v), q)
+  const z2 = sub(q, mod(mul(r, v), q))
+  // Stage 6
+  if (this.curve) {
+    // Gost R 34.10-2001 || Gost R 34.10-2012
+    var k2 = to2(publicKey),
+      curve = this.curve,
+      P = this.P,
+      x = newFE(curve, k2[0]), // first 32 octets contain the little-endian representation of x
+      y = newFE(curve, k2[1]), // and second 32 octets contain the little-endian representation of y.
+      Q = new newEC(curve, x, y) // This corresponds to the binary representation of (<y>256||<x>256)
+    const C = mulTwoEC(P, z1, Q, z2)
+    var R = mod(getX(C), q)
+  } else {
+    // Gost R 34.10-94
+    const p = this.p, a = this.a
+    var y = atobi(publicKey)
+    var R = mod(mod(mul(expMod(a, z1, p), expMod(y, z2, p)), p), q)
+  }
+  // Stage 7
+  return (compare(R, r) === 0)
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * The generateKey method returns a new generated key pair using the specified
+ * AlgorithmIdentifier.
+ *
+ * @memberOf GostSign
+ * @method generateKey
+ * @instance
+ * @returns {Object} Object with two CryptoOperationData members: privateKey and publicKey
+ */
+function generateKey() // <editor-fold defaultstate="collapsed">
+{
+  const curve = this.curve
+  if (curve) {
+
+    let Q = curve.infinity
+    while (isInfinity(Q)) {
+
+      // Generate random private key
+      var d = ZERO
+      if (this.ukm) {
+        d = atobi(this.ukm)
+      } else {
+        while (isZero(d)) {d = mod(atobi(getSeed(this.bitLength)), this.q)} // 0 < d < q
+      }
+
+      // Calculate public key
+      Q = mulEC(this.P, d)
+      var x = getX(Q), y = getY(Q)
+      // console.log('d', bitoh(d));
+      // console.log('x', bitoh(x));
+      // console.log('y', bitoh(y));
+    }
+
+    // Return result
+    return {
+      privateKey: bitoa(d, this.bitLength),
+      publicKey: from2(x, y, this.bitLength), // This corresponds to the binary representation of (<y>256||<x>256)
+    }
+
+  } throw new NotSupportedError('Key generation for GOST R 34.10-94 not supported')
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10 mode MASK<br><br>
+ *
+ * The generateMaskKey method returns a new generated key mask using for wrapping.
+ *
+ * @memberOf GostSign
+ * @method generateMaskKey
+ * @instance
+ * @returns {Object} Object with two CryptoOperationData members: privateKey and publicKey
+ */
+function generateMaskKey() // <editor-fold defaultstate="collapsed">
+{
+  const curve = this.curve
+  if (curve) {
+    // Generate random private key
+    let d = ZERO
+    while (isZero(d)) {d = mod(atobi(getSeed(this.bitLength)), this.q)} // 0 < d < q
+
+    // Return result
+    return bitoa(d, this.bitLength)
+  } throw new NotSupportedError('Key generation for GOST R 34.10-94 not supported')
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * Unwrap private key from private key and ukm (mask)
+ *
+ * @memberOf GostSign
+ * @method unwrap
+ * @instance
+ * @param {(CryptoOperationData|TypedArray)} baseKey Unwrapping key
+ * @param {(CryptoOperationData|TypedArray)} data Wrapped key
+ * @returns {Object} CryptoOperationData unwrapped privateKey
+ */
+function unwrapKey(baseKey, data) // <editor-fold defaultstate="collapsed">
+{
+  const curve = this.curve
+  if (curve) {
+    const q = this.q
+    const x = mod(atobi(buffer(data)), q)
+    const y = mod(atobi(buffer(baseKey)), q)
+    const z = this.procreator === 'VN' ? mod(mul(x, y), q) : mod(mul(x, invMod(y, q)), q)
+    return bitoa(z)
+  } throw new NotSupportedError('Key wrapping GOST R 34.10-94 not supported')
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * Wrap private key with private key and ukm (mask)
+ *
+ * @memberOf GostSign
+ * @method unwrap
+ * @instance
+ * @param {(CryptoOperationData|TypedArray)} baseKey Wrapping key
+ * @param {(CryptoOperationData|TypedArray)} data Key
+ * @returns {Object} CryptoOperationData unwrapped privateKey
+ */
+function wrapKey(baseKey, data) // <editor-fold defaultstate="collapsed">
+{
+  const curve = this.curve
+  if (curve) {
+    const q = this.q
+    const x = mod(atobi(buffer(data)), q)
+    const y = mod(atobi(buffer(baseKey)), q)
+    const z = this.procreator === 'VN' ? mod(mul(x, invMod(y, q)), q) : mod(mul(x, y), q)
+    return bitoa(z)
+  } throw new NotSupportedError('Key wrapping GOST R 34.10-94 not supported')
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * @memberOf GostSign
+ * @method derive
+ * @instance
+ * @private
+ * @param {CryptoOperationData} baseKey Key for deriviation
+ * @returns {CryptoOperationData}
+ */
+function derive(baseKey) // <editor-fold defaultstate="collapsed">
+{
+
+  let k, ukm = atobi(this.ukm)
+  const q = this.q
+  const x = mod(atobi(buffer(baseKey)), q)
+
+  if (this.curve) {
+    // 1) Let K(x,y,UKM) = ((UKM*x)(mod q)) . (y.P) (512 bit), where
+    // x - sender’s private key (256 bit)
+    // x.P - sender’s public key (512 bit)
+    // y - recipient’s private key (256 bit)
+    // y.P - recipient’s public key (512 bit)
+    // UKM - non-zero integer, produced as in step 2 p. 6.1 [GOSTR341001]
+    // P - base point on the elliptic curve (two 256-bit coordinates)
+    // UKM*x - x multiplied by UKM as integers
+    // x.P - a multiple point
+    const K = mulEC(this.peer_Q, mod(mul(ukm, x), q))
+    k = from2(getX(K), getY(K), // This corresponds to the binary representation of (<y>256||<x>256)
+      this.bitLength)
+  } else {
+    // 1) Let K(x,y) = a^(x*y) (mod p), where
+    // x - sender’s private key, a^x - sender’s public key
+    // y - recipient’s private key, a^y - recipient’s public key
+    // a, p - parameters
+    const p = this.p, a = this.a
+    k = bitoa(expMod(this.peer_y, x, p))
+  }
+  // 2) Calculate a 256-bit hash of K(x,y,UKM):
+  // KEK(x,y,UKM) = gostSign (K(x,y,UKM)
+  return hash.call(this, k)
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * The deriveBits method returns length bits on baseKey.
+ *
+ * @memberOf GostSign
+ * @method deriveBits
+ * @instance
+ * @param {(CryptoOperationData|TypedArray)} baseKey Key for deriviation
+ * @param {number} length output bit-length
+ * @returns {CryptoOperationData} result
+ */
+function deriveBits(baseKey, length) // <editor-fold defaultstate="collapsed">
+{
+  if (length < 8 || length > this.bitLength || length % 8 > 0) {throw new DataError(`Length must be no more than ${ this.bitLength } bits and multiple of 8`)}
+  const n = length / 8,
+    b = derive.call(this, baseKey),
+    r = new Uint8Array(n)
+
+  r.set(new Uint8Array(b, 0, n))
+  return r.buffer
+} // </editor-fold>
+
+/**
+ * Algorithm name GOST R 34.10<br><br>
+ *
+ * The deriveKey method returns 256 bit Key encryption key on baseKey.
+ *
+ * This algorithm creates a key encryption key (KEK) using 64 bit UKM,
+ * the sender’s private key, and the recipient’s public key (or the
+ * reverse of the latter pair
+ *
+ * @memberOf GostSign
+ * @method deriveKey
+ * @instance
+ * @param {(CryptoOperationData|TypedArray)} baseKey Key for deriviation
+ * @returns {CryptoOperationData} result
+ */
+function deriveKey(baseKey) // <editor-fold defaultstate="collapsed">
+{
+  const b = derive.call(this, baseKey),
+    r = new Uint8Array(32)
+
+  r.set(new Uint8Array(b, 0, 32))
+  return r.buffer
+} // </editor-fold>
+
+
+/**
+ * Gost R 34.10 universal object<br><br>
+ *
+ * References: {@link http://tools.ietf.org/html/rfc6986} and {@link http://tools.ietf.org/html/rfc5831}<br><br>
+ *
+ * Normalized algorithm identifier common parameters:
+ *
+ *  <ul>
+ *      <li><b>name</b> Algorithm name 'GOST R 34.10'</li>
+ *      <li><b>version</b> Algorithm version
+ *          <ul>
+ *              <li><b>1994</b> - Old-style GOST R 34.10-94 ExpMod algorithm with GOST R 34.11-94 hash</li>
+ *              <li><b>2001</b> - GOST R 34.10-2001 Eliptic curve algorithm with old GOST R 34.11-94 hash</li>
+ *              <li><b>2012</b> - GOST R 34.10-2012 Eliptic curve algorithm with GOST R 34.11-12 hash, default mode</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>length</b> Length of hash and signature. Key length == hash length for EC algorithms and 2 * hash length for ExpMod algorithm
+ *          <ul>
+ *              <li><b>GOST R 34.10-256</b> - 256 bits digest, default mode</li>
+ *              <li><b>GOST R 34.10-512</b> - 512 bits digest only for GOST R 34.11-2012 hash</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>mode</b> Algorithm mode
+ *          <ul>
+ *              <li><b>SIGN</b> Digital signature mode (default)</li>
+ *              <li><b>DH</b> Diffie-Hellman key generation and key agreement mode</li>
+ *          </ul>
+ *      </li>
+ *      <li><b>sBox</b> Paramset sBox for GOST 34.11-94. Used only if version = 1994 or 2001</li>
+ *  </ul>
+ *
+ * Supported algorithms, modes and parameters:
+ *
+ *  <ul>
+ *      <li>Sign/Verify mode (SIGN)</li>
+ *      <li>DeriveKey/DeriveBits mode (DH)
+ *          <ul>
+ *              <li>{@link CryptoOperationData} <b>ukm</b> User key material. Default - random generated value</li>
+ *              <li>{@link CryptoOperationData} <b>public</b> The peer's EC public key data</li>
+ *          </ul>
+ *      </li>
+ *      <li>GenerateKey mode (SIGN and DH) version = 1994
+ *          <ul>
+ *              <li><b>namedParam</b> Paramset for key generation algorithm. If specified no additianal parameters required</li>
+ *          </ul>
+ *          Additional parameters, if namedParam not specified
+ *          <ul>
+ *              <li><b>modulusLength</b> Bit length of p (512 or 1024 bits). Default = 1024</li>
+ *              <li><b>p</b> {@link CryptoOperationData} Modulus, prime number, 2^(t-1)<p<2^t</li>
+ *              <li><b>q</b> {@link CryptoOperationData} Order of cyclic group, prime number, 2^254<q<2^256, q is a factor of p-1</li>
+ *              <li><b>a</b> {@link CryptoOperationData} Generator, integer, 1<a<p-1, at that aq (mod p) = 1</li>
+ *          </ul>
+ *      </li>
+ *      <li>GenerateKey mode (SIGN and DH) version = 2001 or 2012
+ *          <ul>
+ *              <li><b>namedCurve</b> Paramset for key generation algorithm. If specified no additianal parameters required</li>
+ *          </ul>
+ *          Additional EC parameters, if namedCurve not specified
+ *          <ul>
+ *              <li><b>p</b> {@link CryptoOperationData} Prime number - elliptic curve modulus</li>
+ *              <li><b>a</b> {@link CryptoOperationData} Coefficients a of the elliptic curve E</li>
+ *              <li><b>b</b> {@link CryptoOperationData} Coefficients b of the elliptic curve E</li>
+ *              <li><b>q</b> {@link CryptoOperationData} Prime number - order of cyclic group</li>
+ *              <li><b>x</b> {@link CryptoOperationData} Base point p x-coordinate</li>
+ *              <li><b>y</b> {@link CryptoOperationData} Base point p y-coordinate</li>
+ *          </ul>
+ *      </li>
+ *  </ul>
+ *
+ * @class GostSign
+ * @param {AlgorithmIndentifier} algorithm
+ */
+function GostSign(algorithm) // <editor-fold defaultstate="collapsed">
+{
+  algorithm = algorithm || {}
+  this.name = `${algorithm.name || 'GOST R 34.10' }-${
+    (algorithm.version || 2012) % 100 }-${ algorithm.length || 256
+  }${((algorithm.mode || 'SIGN') !== 'SIGN') ? `-${ algorithm.mode}` : ''
+  }${typeof algorithm.namedParam === 'string' ? `/${ algorithm.namedParam}` : ''
+  }${typeof algorithm.namedCurve === 'string' ? `/${ algorithm.namedCurve}` : ''
+  }${typeof algorithm.sBox === 'string' ? `/${ algorithm.sBox}` : ''}`
+
+  const version = algorithm.version || 2012
+
+  // Functions
+  switch (algorithm.mode || 'SIGN') {
+    case 'SIGN':
+      this.sign = sign
+      this.verify = verify
+      this.generateKey = generateKey
+      break
+    case 'DH':
+      this.deriveBits = deriveBits
+      this.deriveKey = deriveKey
+      this.generateKey = generateKey
+      break
+    case 'MASK':
+      this.wrapKey = wrapKey
+      this.unwrapKey = unwrapKey
+      this.generateKey = generateMaskKey
+      break
+  }
+
+  // Define parameters
+  if (version === 1994) {
+    // Named or parameters algorithm
+    var param = algorithm.param
+    if (!param) {param = GostParams[this.namedParam = (algorithm.namedParam || 'S-A').toUpperCase()]}
+    this.modulusLength = algorithm.modulusLength || param.modulusLength || 1024
+    this.p = htobi(param.p)
+    this.q = htobi(param.q)
+    this.a = htobi(param.a)
+    // Public key for derive
+    if (algorithm['public']) {this.peer_y = atobi(algorithm['public'])}
+  } else {
+    // Named or parameters algorithm
+    var param = algorithm.curve
+    if (!param) {param = ECGostParams[this.namedCurve = (algorithm.namedCurve || 'S-256-A').toUpperCase()]}
+    const curve = this.curve = newCurve(htobi(param.p), htobi(param.a), htobi(param.b))
+    this.P = newEC(curve,
+      newFE(curve, htobi(param.x)),
+      newFE(curve, htobi(param.y)))
+    this.q = htobi(param.q)
+    // Public key for derive
+    if (algorithm['public']) {
+      const k2 = to2(algorithm['public'])
+      this.peer_Q = new newEC(this.curve, // This corresponds to the binary representation of (<y>256||<x>256)
+        newFE(this.curve, k2[0]), // first 32 octets contain the little-endian representation of x
+        newFE(this.curve, k2[1])) // and second 32 octets contain the little-endian representation of y.
+    }
+  }
+
+  // Check bit length
+  let hashLen, keyLen
+  if (this.curve) {
+    keyLen = algorithm.length || bitLength(this.q)
+    if (keyLen > 508 && keyLen <= 512) {keyLen = 512} else if (keyLen > 254 && keyLen <= 256) {keyLen = 256} else {throw new NotSupportedError('Support keys only 256 or 512 bits length')}
+    hashLen = keyLen
+  } else {
+    keyLen = algorithm.modulusLength || bitLength(this.p)
+    if (keyLen > 1016 && keyLen <= 1024) {keyLen = 1024} else if (keyLen > 508 && keyLen <= 512) {keyLen = 512} else {throw new NotSupportedError('Support keys only 512 or 1024 bits length')}
+    hashLen = 256
+  }
+  this.bitLength = hashLen
+  this.keyLength = keyLen
+
+  // Algorithm proceator for result conversion
+  this.procreator = algorithm.procreator
+
+  // Hash function definition
+  let hash = algorithm.hash
+  if (hash) {
+    if (typeof hash === 'string' || hash instanceof String) {hash = { name: hash }}
+    if (algorithm.version === 1994 || algorithm.version === 2001) {
+      hash.version = 1994
+      hash.length = 256
+      hash.sBox = algorithm.sBox || hash.sBox
+    } else {
+      hash.version = 2012
+      hash.length = hashLen
+    }
+    hash.procreator = hash.procreator || algorithm.procreator
+
+    if (!GostDigest) {GostDigest = global.GostDigest}
+    if (!GostDigest) {throw new NotSupportedError('Object GostDigest not found')}
+
+    this.hash = new GostDigest(hash)
+  }
+
+  // Pregenerated seed for key exchange algorithms
+  if (algorithm.ukm) // Now don't check size
+  {this.ukm = algorithm.ukm}
+
+} // </editor-fold>
+
+module.exports = GostSign
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/index.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/index.js
new file mode 100644
index 0000000..ba186b1
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/index.js
@@ -0,0 +1,13 @@
+const gostCrypto = require('./gostCrypto.js')
+require('./gostSecurity')
+require('./gostCoding')
+require('./gostASN1')
+require('./gostCMS')
+require('./gostCert')
+require('./gostCipher')
+require('./gostDigest')
+require('./gostKeys')
+require('./gostRandom')
+require('./gostSign')
+
+module.exports = gostCrypto
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/src/skrebokk.js b/node_modules/gost-crypto/lib/gost-crypto-master/src/skrebokk.js
new file mode 100644
index 0000000..f152001
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/src/skrebokk.js
@@ -0,0 +1,15 @@
+import gost from './index'
+import ab2str from 'arraybuffer-to-string'
+import str2ab from 'string-to-arraybuffer'
+
+const skrebokk = str => gost
+  .subtle
+  .digest('GOST R 34.11', str2ab(str))
+  .then(r =>ab2str(r, 'hex'))
+
+export {
+  ab2str,
+  str2ab,
+  skrebokk,
+  skrebokk as default,
+}
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gost-crypto-master/yarn.lock b/node_modules/gost-crypto/lib/gost-crypto-master/yarn.lock
new file mode 100644
index 0000000..19f2aa9
--- /dev/null
+++ b/node_modules/gost-crypto/lib/gost-crypto-master/yarn.lock
@@ -0,0 +1,6197 @@
+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
+# yarn lockfile v1
+
+
+"@babel/cli@^7.7.5":
+  version "7.7.5"
+  resolved "https://registry.yarnpkg.com/@babel/cli/-/cli-7.7.5.tgz#25702cc65418efc06989af3727897b9f4c8690b6"
+  integrity sha512-y2YrMGXM3NUyu1Myg0pxg+Lx6g8XhEyvLHYNRwTBV6fDek3H7Io6b7N/LXscLs4HWn4HxMdy7f2rM1rTMp2mFg==
+  dependencies:
+    commander "^4.0.1"
+    convert-source-map "^1.1.0"
+    fs-readdir-recursive "^1.1.0"
+    glob "^7.0.0"
+    lodash "^4.17.13"
+    make-dir "^2.1.0"
+    slash "^2.0.0"
+    source-map "^0.5.0"
+  optionalDependencies:
+    chokidar "^2.1.8"
+
+"@babel/code-frame@^7.0.0", "@babel/code-frame@^7.5.5":
+  version "7.5.5"
+  resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.5.5.tgz#bc0782f6d69f7b7d49531219699b988f669a8f9d"
+  integrity sha512-27d4lZoomVyo51VegxI20xZPuSHusqbQag/ztrBC7wegWoQ1nLREPVSKSW8byhTlzTKyNE4ifaTA6lCp7JjpFw==
+  dependencies:
+    "@babel/highlight" "^7.0.0"
+
+"@babel/core@^7.4.4", "@babel/core@^7.7.5":
+  version "7.7.5"
+  resolved "https://registry.yarnpkg.com/@babel/core/-/core-7.7.5.tgz#ae1323cd035b5160293307f50647e83f8ba62f7e"
+  integrity sha512-M42+ScN4+1S9iB6f+TL7QBpoQETxbclx+KNoKJABghnKYE+fMzSGqst0BZJc8CpI625bwPwYgUyRvxZ+0mZzpw==
+  dependencies:
+    "@babel/code-frame" "^7.5.5"
+    "@babel/generator" "^7.7.4"
+    "@babel/helpers" "^7.7.4"
+    "@babel/parser" "^7.7.5"
+    "@babel/template" "^7.7.4"
+    "@babel/traverse" "^7.7.4"
+    "@babel/types" "^7.7.4"
+    convert-source-map "^1.7.0"
+    debug "^4.1.0"
+    json5 "^2.1.0"
+    lodash "^4.17.13"
+    resolve "^1.3.2"
+    semver "^5.4.1"
+    source-map "^0.5.0"
+
+"@babel/generator@^7.4.4", "@babel/generator@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.7.4.tgz#db651e2840ca9aa66f327dcec1dc5f5fa9611369"
+  integrity sha512-m5qo2WgdOJeyYngKImbkyQrnUN1mPceaG5BV+G0E3gWsa4l/jCSryWJdM2x8OuGAOyh+3d5pVYfZWCiNFtynxg==
+  dependencies:
+    "@babel/types" "^7.7.4"
+    jsesc "^2.5.1"
+    lodash "^4.17.13"
+    source-map "^0.5.0"
+
+"@babel/helper-annotate-as-pure@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.7.4.tgz#bb3faf1e74b74bd547e867e48f551fa6b098b6ce"
+  integrity sha512-2BQmQgECKzYKFPpiycoF9tlb5HA4lrVyAmLLVK177EcQAqjVLciUb2/R+n1boQ9y5ENV3uz2ZqiNw7QMBBw1Og==
+  dependencies:
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-builder-binary-assignment-operator-visitor@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-builder-binary-assignment-operator-visitor/-/helper-builder-binary-assignment-operator-visitor-7.7.4.tgz#5f73f2b28580e224b5b9bd03146a4015d6217f5f"
+  integrity sha512-Biq/d/WtvfftWZ9Uf39hbPBYDUo986m5Bb4zhkeYDGUllF43D+nUe5M6Vuo6/8JDK/0YX/uBdeoQpyaNhNugZQ==
+  dependencies:
+    "@babel/helper-explode-assignable-expression" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-builder-react-jsx@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-builder-react-jsx/-/helper-builder-react-jsx-7.7.4.tgz#da188d247508b65375b2c30cf59de187be6b0c66"
+  integrity sha512-kvbfHJNN9dg4rkEM4xn1s8d1/h6TYNvajy9L1wx4qLn9HFg0IkTsQi4rfBe92nxrPUFcMsHoMV+8rU7MJb3fCA==
+  dependencies:
+    "@babel/types" "^7.7.4"
+    esutils "^2.0.0"
+
+"@babel/helper-call-delegate@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-call-delegate/-/helper-call-delegate-7.7.4.tgz#621b83e596722b50c0066f9dc37d3232e461b801"
+  integrity sha512-8JH9/B7J7tCYJ2PpWVpw9JhPuEVHztagNVuQAFBVFYluRMlpG7F1CgKEgGeL6KFqcsIa92ZYVj6DSc0XwmN1ZA==
+  dependencies:
+    "@babel/helper-hoist-variables" "^7.7.4"
+    "@babel/traverse" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-create-regexp-features-plugin@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.7.4.tgz#6d5762359fd34f4da1500e4cff9955b5299aaf59"
+  integrity sha512-Mt+jBKaxL0zfOIWrfQpnfYCN7/rS6GKx6CCCfuoqVVd+17R8zNDlzVYmIi9qyb2wOk002NsmSTDymkIygDUH7A==
+  dependencies:
+    "@babel/helper-regex" "^7.4.4"
+    regexpu-core "^4.6.0"
+
+"@babel/helper-define-map@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-define-map/-/helper-define-map-7.7.4.tgz#2841bf92eb8bd9c906851546fe6b9d45e162f176"
+  integrity sha512-v5LorqOa0nVQUvAUTUF3KPastvUt/HzByXNamKQ6RdJRTV7j8rLL+WB5C/MzzWAwOomxDhYFb1wLLxHqox86lg==
+  dependencies:
+    "@babel/helper-function-name" "^7.7.4"
+    "@babel/types" "^7.7.4"
+    lodash "^4.17.13"
+
+"@babel/helper-explode-assignable-expression@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-explode-assignable-expression/-/helper-explode-assignable-expression-7.7.4.tgz#fa700878e008d85dc51ba43e9fb835cddfe05c84"
+  integrity sha512-2/SicuFrNSXsZNBxe5UGdLr+HZg+raWBLE9vC98bdYOKX/U6PY0mdGlYUJdtTDPSU0Lw0PNbKKDpwYHJLn2jLg==
+  dependencies:
+    "@babel/traverse" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-function-name@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-function-name/-/helper-function-name-7.7.4.tgz#ab6e041e7135d436d8f0a3eca15de5b67a341a2e"
+  integrity sha512-AnkGIdiBhEuiwdoMnKm7jfPfqItZhgRaZfMg1XX3bS25INOnLPjPG1Ppnajh8eqgt5kPJnfqrRHqFqmjKDZLzQ==
+  dependencies:
+    "@babel/helper-get-function-arity" "^7.7.4"
+    "@babel/template" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-get-function-arity@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-get-function-arity/-/helper-get-function-arity-7.7.4.tgz#cb46348d2f8808e632f0ab048172130e636005f0"
+  integrity sha512-QTGKEdCkjgzgfJ3bAyRwF4yyT3pg+vDgan8DSivq1eS0gwi+KGKE5x8kRcbeFTb/673mkO5SN1IZfmCfA5o+EA==
+  dependencies:
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-hoist-variables@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-hoist-variables/-/helper-hoist-variables-7.7.4.tgz#612384e3d823fdfaaf9fce31550fe5d4db0f3d12"
+  integrity sha512-wQC4xyvc1Jo/FnLirL6CEgPgPCa8M74tOdjWpRhQYapz5JC7u3NYU1zCVoVAGCE3EaIP9T1A3iW0WLJ+reZlpQ==
+  dependencies:
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-member-expression-to-functions@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.7.4.tgz#356438e2569df7321a8326644d4b790d2122cb74"
+  integrity sha512-9KcA1X2E3OjXl/ykfMMInBK+uVdfIVakVe7W7Lg3wfXUNyS3Q1HWLFRwZIjhqiCGbslummPDnmb7vIekS0C1vw==
+  dependencies:
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-module-imports@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-module-imports/-/helper-module-imports-7.7.4.tgz#e5a92529f8888bf319a6376abfbd1cebc491ad91"
+  integrity sha512-dGcrX6K9l8258WFjyDLJwuVKxR4XZfU0/vTUgOQYWEnRD8mgr+p4d6fCUMq/ys0h4CCt/S5JhbvtyErjWouAUQ==
+  dependencies:
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-module-transforms@^7.7.4", "@babel/helper-module-transforms@^7.7.5":
+  version "7.7.5"
+  resolved "https://registry.yarnpkg.com/@babel/helper-module-transforms/-/helper-module-transforms-7.7.5.tgz#d044da7ffd91ec967db25cd6748f704b6b244835"
+  integrity sha512-A7pSxyJf1gN5qXVcidwLWydjftUN878VkalhXX5iQDuGyiGK3sOrrKKHF4/A4fwHtnsotv/NipwAeLzY4KQPvw==
+  dependencies:
+    "@babel/helper-module-imports" "^7.7.4"
+    "@babel/helper-simple-access" "^7.7.4"
+    "@babel/helper-split-export-declaration" "^7.7.4"
+    "@babel/template" "^7.7.4"
+    "@babel/types" "^7.7.4"
+    lodash "^4.17.13"
+
+"@babel/helper-optimise-call-expression@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.7.4.tgz#034af31370d2995242aa4df402c3b7794b2dcdf2"
+  integrity sha512-VB7gWZ2fDkSuqW6b1AKXkJWO5NyNI3bFL/kK79/30moK57blr6NbH8xcl2XcKCwOmJosftWunZqfO84IGq3ZZg==
+  dependencies:
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-plugin-utils@^7.0.0":
+  version "7.0.0"
+  resolved "https://registry.yarnpkg.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.0.0.tgz#bbb3fbee98661c569034237cc03967ba99b4f250"
+  integrity sha512-CYAOUCARwExnEixLdB6sDm2dIJ/YgEAKDM1MOeMeZu9Ld/bDgVo8aiWrXwcY7OBh+1Ea2uUcVRcxKk0GJvW7QA==
+
+"@babel/helper-regex@^7.0.0", "@babel/helper-regex@^7.4.4":
+  version "7.5.5"
+  resolved "https://registry.yarnpkg.com/@babel/helper-regex/-/helper-regex-7.5.5.tgz#0aa6824f7100a2e0e89c1527c23936c152cab351"
+  integrity sha512-CkCYQLkfkiugbRDO8eZn6lRuR8kzZoGXCg3149iTk5se7g6qykSpy3+hELSwquhu+TgHn8nkLiBwHvNX8Hofcw==
+  dependencies:
+    lodash "^4.17.13"
+
+"@babel/helper-remap-async-to-generator@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.7.4.tgz#c68c2407350d9af0e061ed6726afb4fff16d0234"
+  integrity sha512-Sk4xmtVdM9sA/jCI80f+KS+Md+ZHIpjuqmYPk1M7F/upHou5e4ReYmExAiu6PVe65BhJPZA2CY9x9k4BqE5klw==
+  dependencies:
+    "@babel/helper-annotate-as-pure" "^7.7.4"
+    "@babel/helper-wrap-function" "^7.7.4"
+    "@babel/template" "^7.7.4"
+    "@babel/traverse" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-replace-supers@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-replace-supers/-/helper-replace-supers-7.7.4.tgz#3c881a6a6a7571275a72d82e6107126ec9e2cdd2"
+  integrity sha512-pP0tfgg9hsZWo5ZboYGuBn/bbYT/hdLPVSS4NMmiRJdwWhP0IznPwN9AE1JwyGsjSPLC364I0Qh5p+EPkGPNpg==
+  dependencies:
+    "@babel/helper-member-expression-to-functions" "^7.7.4"
+    "@babel/helper-optimise-call-expression" "^7.7.4"
+    "@babel/traverse" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-simple-access@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-simple-access/-/helper-simple-access-7.7.4.tgz#a169a0adb1b5f418cfc19f22586b2ebf58a9a294"
+  integrity sha512-zK7THeEXfan7UlWsG2A6CI/L9jVnI5+xxKZOdej39Y0YtDYKx9raHk5F2EtK9K8DHRTihYwg20ADt9S36GR78A==
+  dependencies:
+    "@babel/template" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-split-export-declaration@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.7.4.tgz#57292af60443c4a3622cf74040ddc28e68336fd8"
+  integrity sha512-guAg1SXFcVr04Guk9eq0S4/rWS++sbmyqosJzVs8+1fH5NI+ZcmkaSkc7dmtAFbHFva6yRJnjW3yAcGxjueDug==
+  dependencies:
+    "@babel/types" "^7.7.4"
+
+"@babel/helper-wrap-function@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helper-wrap-function/-/helper-wrap-function-7.7.4.tgz#37ab7fed5150e22d9d7266e830072c0cdd8baace"
+  integrity sha512-VsfzZt6wmsocOaVU0OokwrIytHND55yvyT4BPB9AIIgwr8+x7617hetdJTsuGwygN5RC6mxA9EJztTjuwm2ofg==
+  dependencies:
+    "@babel/helper-function-name" "^7.7.4"
+    "@babel/template" "^7.7.4"
+    "@babel/traverse" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/helpers@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/helpers/-/helpers-7.7.4.tgz#62c215b9e6c712dadc15a9a0dcab76c92a940302"
+  integrity sha512-ak5NGZGJ6LV85Q1Zc9gn2n+ayXOizryhjSUBTdu5ih1tlVCJeuQENzc4ItyCVhINVXvIT/ZQ4mheGIsfBkpskg==
+  dependencies:
+    "@babel/template" "^7.7.4"
+    "@babel/traverse" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/highlight@^7.0.0":
+  version "7.5.0"
+  resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.5.0.tgz#56d11312bd9248fa619591d02472be6e8cb32540"
+  integrity sha512-7dV4eu9gBxoM0dAnj/BCFDW9LFU0zvTrkq0ugM7pnHEgguOEeOz1so2ZghEdzviYzQEED0r4EAgpsBChKy1TRQ==
+  dependencies:
+    chalk "^2.0.0"
+    esutils "^2.0.2"
+    js-tokens "^4.0.0"
+
+"@babel/parser@^7.0.0", "@babel/parser@^7.4.4", "@babel/parser@^7.7.4", "@babel/parser@^7.7.5":
+  version "7.7.5"
+  resolved "https://registry.yarnpkg.com/@babel/parser/-/parser-7.7.5.tgz#cbf45321619ac12d83363fcf9c94bb67fa646d71"
+  integrity sha512-KNlOe9+/nk4i29g0VXgl8PEXIRms5xKLJeuZ6UptN0fHv+jDiriG+y94X6qAgWTR0h3KaoM1wK5G5h7MHFRSig==
+
+"@babel/plugin-proposal-async-generator-functions@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-async-generator-functions/-/plugin-proposal-async-generator-functions-7.7.4.tgz#0351c5ac0a9e927845fffd5b82af476947b7ce6d"
+  integrity sha512-1ypyZvGRXriY/QP668+s8sFr2mqinhkRDMPSQLNghCQE+GAkFtp+wkHVvg2+Hdki8gwP+NFzJBJ/N1BfzCCDEw==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/helper-remap-async-to-generator" "^7.7.4"
+    "@babel/plugin-syntax-async-generators" "^7.7.4"
+
+"@babel/plugin-proposal-dynamic-import@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-dynamic-import/-/plugin-proposal-dynamic-import-7.7.4.tgz#dde64a7f127691758cbfed6cf70de0fa5879d52d"
+  integrity sha512-StH+nGAdO6qDB1l8sZ5UBV8AC3F2VW2I8Vfld73TMKyptMU9DY5YsJAS8U81+vEtxcH3Y/La0wG0btDrhpnhjQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/plugin-syntax-dynamic-import" "^7.7.4"
+
+"@babel/plugin-proposal-json-strings@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-json-strings/-/plugin-proposal-json-strings-7.7.4.tgz#7700a6bfda771d8dc81973249eac416c6b4c697d"
+  integrity sha512-wQvt3akcBTfLU/wYoqm/ws7YOAQKu8EVJEvHip/mzkNtjaclQoCCIqKXFP5/eyfnfbQCDV3OLRIK3mIVyXuZlw==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/plugin-syntax-json-strings" "^7.7.4"
+
+"@babel/plugin-proposal-object-rest-spread@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-object-rest-spread/-/plugin-proposal-object-rest-spread-7.7.4.tgz#cc57849894a5c774214178c8ab64f6334ec8af71"
+  integrity sha512-rnpnZR3/iWKmiQyJ3LKJpSwLDcX/nSXhdLk4Aq/tXOApIvyu7qoabrige0ylsAJffaUC51WiBu209Q0U+86OWQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/plugin-syntax-object-rest-spread" "^7.7.4"
+
+"@babel/plugin-proposal-optional-catch-binding@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-optional-catch-binding/-/plugin-proposal-optional-catch-binding-7.7.4.tgz#ec21e8aeb09ec6711bc0a39ca49520abee1de379"
+  integrity sha512-DyM7U2bnsQerCQ+sejcTNZh8KQEUuC3ufzdnVnSiUv/qoGJp2Z3hanKL18KDhsBT5Wj6a7CMT5mdyCNJsEaA9w==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/plugin-syntax-optional-catch-binding" "^7.7.4"
+
+"@babel/plugin-proposal-unicode-property-regex@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-proposal-unicode-property-regex/-/plugin-proposal-unicode-property-regex-7.7.4.tgz#7c239ccaf09470dbe1d453d50057460e84517ebb"
+  integrity sha512-cHgqHgYvffluZk85dJ02vloErm3Y6xtH+2noOBOJ2kXOJH3aVCDnj5eR/lVNlTnYu4hndAPJD3rTFjW3qee0PA==
+  dependencies:
+    "@babel/helper-create-regexp-features-plugin" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-async-generators@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.7.4.tgz#331aaf310a10c80c44a66b238b6e49132bd3c889"
+  integrity sha512-Li4+EjSpBgxcsmeEF8IFcfV/+yJGxHXDirDkEoyFjumuwbmfCVHUt0HuowD/iGM7OhIRyXJH9YXxqiH6N815+g==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-dynamic-import@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-dynamic-import/-/plugin-syntax-dynamic-import-7.7.4.tgz#29ca3b4415abfe4a5ec381e903862ad1a54c3aec"
+  integrity sha512-jHQW0vbRGvwQNgyVxwDh4yuXu4bH1f5/EICJLAhl1SblLs2CDhrsmCk+v5XLdE9wxtAFRyxx+P//Iw+a5L/tTg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-flow@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-flow/-/plugin-syntax-flow-7.7.4.tgz#6d91b59e1a0e4c17f36af2e10dd64ef220919d7b"
+  integrity sha512-2AMAWl5PsmM5KPkB22cvOkUyWk6MjUaqhHNU5nSPUl/ns3j5qLfw2SuYP5RbVZ0tfLvePr4zUScbICtDP2CUNw==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-json-strings@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.7.4.tgz#86e63f7d2e22f9e27129ac4e83ea989a382e86cc"
+  integrity sha512-QpGupahTQW1mHRXddMG5srgpHWqRLwJnJZKXTigB9RPFCCGbDGCgBeM/iC82ICXp414WeYx/tD54w7M2qRqTMg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-jsx@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.7.4.tgz#dab2b56a36fb6c3c222a1fbc71f7bf97f327a9ec"
+  integrity sha512-wuy6fiMe9y7HeZBWXYCGt2RGxZOj0BImZ9EyXJVnVGBKO/Br592rbR3rtIQn0eQhAk9vqaKP5n8tVqEFBQMfLg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-object-rest-spread@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.7.4.tgz#47cf220d19d6d0d7b154304701f468fc1cc6ff46"
+  integrity sha512-mObR+r+KZq0XhRVS2BrBKBpr5jqrqzlPvS9C9vuOf5ilSwzloAl7RPWLrgKdWS6IreaVrjHxTjtyqFiOisaCwg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-optional-catch-binding@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.7.4.tgz#a3e38f59f4b6233867b4a92dcb0ee05b2c334aa6"
+  integrity sha512-4ZSuzWgFxqHRE31Glu+fEr/MirNZOMYmD/0BhBWyLyOOQz/gTAl7QmWm2hX1QxEIXsr2vkdlwxIzTyiYRC4xcQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-syntax-top-level-await@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.7.4.tgz#bd7d8fa7b9fee793a36e4027fd6dd1aa32f946da"
+  integrity sha512-wdsOw0MvkL1UIgiQ/IFr3ETcfv1xb8RMM0H9wbiDyLaJFyiDg5oZvDLCXosIXmFeIlweML5iOBXAkqddkYNizg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-arrow-functions@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.7.4.tgz#76309bd578addd8aee3b379d809c802305a98a12"
+  integrity sha512-zUXy3e8jBNPiffmqkHRNDdZM2r8DWhCB7HhcoyZjiK1TxYEluLHAvQuYnTT+ARqRpabWqy/NHkO6e3MsYB5YfA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-async-to-generator@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.7.4.tgz#694cbeae6d613a34ef0292713fa42fb45c4470ba"
+  integrity sha512-zpUTZphp5nHokuy8yLlyafxCJ0rSlFoSHypTUWgpdwoDXWQcseaect7cJ8Ppk6nunOM6+5rPMkod4OYKPR5MUg==
+  dependencies:
+    "@babel/helper-module-imports" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/helper-remap-async-to-generator" "^7.7.4"
+
+"@babel/plugin-transform-block-scoped-functions@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.7.4.tgz#d0d9d5c269c78eaea76227ace214b8d01e4d837b"
+  integrity sha512-kqtQzwtKcpPclHYjLK//3lH8OFsCDuDJBaFhVwf8kqdnF6MN4l618UDlcA7TfRs3FayrHj+svYnSX8MC9zmUyQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-block-scoping@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.7.4.tgz#200aad0dcd6bb80372f94d9e628ea062c58bf224"
+  integrity sha512-2VBe9u0G+fDt9B5OV5DQH4KBf5DoiNkwFKOz0TCvBWvdAN2rOykCTkrL+jTLxfCAm76l9Qo5OqL7HBOx2dWggg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    lodash "^4.17.13"
+
+"@babel/plugin-transform-classes@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-classes/-/plugin-transform-classes-7.7.4.tgz#c92c14be0a1399e15df72667067a8f510c9400ec"
+  integrity sha512-sK1mjWat7K+buWRuImEzjNf68qrKcrddtpQo3swi9j7dUcG6y6R6+Di039QN2bD1dykeswlagupEmpOatFHHUg==
+  dependencies:
+    "@babel/helper-annotate-as-pure" "^7.7.4"
+    "@babel/helper-define-map" "^7.7.4"
+    "@babel/helper-function-name" "^7.7.4"
+    "@babel/helper-optimise-call-expression" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/helper-replace-supers" "^7.7.4"
+    "@babel/helper-split-export-declaration" "^7.7.4"
+    globals "^11.1.0"
+
+"@babel/plugin-transform-computed-properties@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.7.4.tgz#e856c1628d3238ffe12d668eb42559f79a81910d"
+  integrity sha512-bSNsOsZnlpLLyQew35rl4Fma3yKWqK3ImWMSC/Nc+6nGjC9s5NFWAer1YQ899/6s9HxO2zQC1WoFNfkOqRkqRQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-destructuring@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.7.4.tgz#2b713729e5054a1135097b6a67da1b6fe8789267"
+  integrity sha512-4jFMXI1Cu2aXbcXXl8Lr6YubCn6Oc7k9lLsu8v61TZh+1jny2BWmdtvY9zSUlLdGUvcy9DMAWyZEOqjsbeg/wA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-dotall-regex@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.7.4.tgz#f7ccda61118c5b7a2599a72d5e3210884a021e96"
+  integrity sha512-mk0cH1zyMa/XHeb6LOTXTbG7uIJ8Rrjlzu91pUx/KS3JpcgaTDwMS8kM+ar8SLOvlL2Lofi4CGBAjCo3a2x+lw==
+  dependencies:
+    "@babel/helper-create-regexp-features-plugin" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-duplicate-keys@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.7.4.tgz#3d21731a42e3f598a73835299dd0169c3b90ac91"
+  integrity sha512-g1y4/G6xGWMD85Tlft5XedGaZBCIVN+/P0bs6eabmcPP9egFleMAo65OOjlhcz1njpwagyY3t0nsQC9oTFegJA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-exponentiation-operator@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.7.4.tgz#dd30c0191e3a1ba19bcc7e389bdfddc0729d5db9"
+  integrity sha512-MCqiLfCKm6KEA1dglf6Uqq1ElDIZwFuzz1WH5mTf8k2uQSxEJMbOIEh7IZv7uichr7PMfi5YVSrr1vz+ipp7AQ==
+  dependencies:
+    "@babel/helper-builder-binary-assignment-operator-visitor" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-flow-strip-types@^7.4.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-flow-strip-types/-/plugin-transform-flow-strip-types-7.7.4.tgz#cc73f85944782df1d77d80977bc097920a8bf31a"
+  integrity sha512-w9dRNlHY5ElNimyMYy0oQowvQpwt/PRHI0QS98ZJCTZU2bvSnKXo5zEiD5u76FBPigTm8TkqzmnUTg16T7qbkA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/plugin-syntax-flow" "^7.7.4"
+
+"@babel/plugin-transform-for-of@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.7.4.tgz#248800e3a5e507b1f103d8b4ca998e77c63932bc"
+  integrity sha512-zZ1fD1B8keYtEcKF+M1TROfeHTKnijcVQm0yO/Yu1f7qoDoxEIc/+GX6Go430Bg84eM/xwPFp0+h4EbZg7epAA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-function-name@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.7.4.tgz#75a6d3303d50db638ff8b5385d12451c865025b1"
+  integrity sha512-E/x09TvjHNhsULs2IusN+aJNRV5zKwxu1cpirZyRPw+FyyIKEHPXTsadj48bVpc1R5Qq1B5ZkzumuFLytnbT6g==
+  dependencies:
+    "@babel/helper-function-name" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-literals@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-literals/-/plugin-transform-literals-7.7.4.tgz#27fe87d2b5017a2a5a34d1c41a6b9f6a6262643e"
+  integrity sha512-X2MSV7LfJFm4aZfxd0yLVFrEXAgPqYoDG53Br/tCKiKYfX0MjVjQeWPIhPHHsCqzwQANq+FLN786fF5rgLS+gw==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-member-expression-literals@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.7.4.tgz#aee127f2f3339fc34ce5e3055d7ffbf7aa26f19a"
+  integrity sha512-9VMwMO7i69LHTesL0RdGy93JU6a+qOPuvB4F4d0kR0zyVjJRVJRaoaGjhtki6SzQUu8yen/vxPKN6CWnCUw6bA==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-modules-amd@^7.7.5":
+  version "7.7.5"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.7.5.tgz#39e0fb717224b59475b306402bb8eedab01e729c"
+  integrity sha512-CT57FG4A2ZUNU1v+HdvDSDrjNWBrtCmSH6YbbgN3Lrf0Di/q/lWRxZrE72p3+HCCz9UjfZOEBdphgC0nzOS6DQ==
+  dependencies:
+    "@babel/helper-module-transforms" "^7.7.5"
+    "@babel/helper-plugin-utils" "^7.0.0"
+    babel-plugin-dynamic-import-node "^2.3.0"
+
+"@babel/plugin-transform-modules-commonjs@^7.4.4", "@babel/plugin-transform-modules-commonjs@^7.7.5":
+  version "7.7.5"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.7.5.tgz#1d27f5eb0bcf7543e774950e5b2fa782e637b345"
+  integrity sha512-9Cq4zTFExwFhQI6MT1aFxgqhIsMWQWDVwOgLzl7PTWJHsNaqFvklAU+Oz6AQLAS0dJKTwZSOCo20INwktxpi3Q==
+  dependencies:
+    "@babel/helper-module-transforms" "^7.7.5"
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/helper-simple-access" "^7.7.4"
+    babel-plugin-dynamic-import-node "^2.3.0"
+
+"@babel/plugin-transform-modules-systemjs@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.7.4.tgz#cd98152339d3e763dfe838b7d4273edaf520bb30"
+  integrity sha512-y2c96hmcsUi6LrMqvmNDPBBiGCiQu0aYqpHatVVu6kD4mFEXKjyNxd/drc18XXAf9dv7UXjrZwBVmTTGaGP8iw==
+  dependencies:
+    "@babel/helper-hoist-variables" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+    babel-plugin-dynamic-import-node "^2.3.0"
+
+"@babel/plugin-transform-modules-umd@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.7.4.tgz#1027c355a118de0aae9fee00ad7813c584d9061f"
+  integrity sha512-u2B8TIi0qZI4j8q4C51ktfO7E3cQ0qnaXFI1/OXITordD40tt17g/sXqgNNCcMTcBFKrUPcGDx+TBJuZxLx7tw==
+  dependencies:
+    "@babel/helper-module-transforms" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-named-capturing-groups-regex@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.7.4.tgz#fb3bcc4ee4198e7385805007373d6b6f42c98220"
+  integrity sha512-jBUkiqLKvUWpv9GLSuHUFYdmHg0ujC1JEYoZUfeOOfNydZXp1sXObgyPatpcwjWgsdBGsagWW0cdJpX/DO2jMw==
+  dependencies:
+    "@babel/helper-create-regexp-features-plugin" "^7.7.4"
+
+"@babel/plugin-transform-new-target@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.7.4.tgz#4a0753d2d60639437be07b592a9e58ee00720167"
+  integrity sha512-CnPRiNtOG1vRodnsyGX37bHQleHE14B9dnnlgSeEs3ek3fHN1A1SScglTCg1sfbe7sRQ2BUcpgpTpWSfMKz3gg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-object-super@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.7.4.tgz#48488937a2d586c0148451bf51af9d7dda567262"
+  integrity sha512-ho+dAEhC2aRnff2JCA0SAK7V2R62zJd/7dmtoe7MHcso4C2mS+vZjn1Pb1pCVZvJs1mgsvv5+7sT+m3Bysb6eg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/helper-replace-supers" "^7.7.4"
+
+"@babel/plugin-transform-parameters@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.7.4.tgz#da4555c97f39b51ac089d31c7380f03bca4075ce"
+  integrity sha512-VJwhVePWPa0DqE9vcfptaJSzNDKrWU/4FbYCjZERtmqEs05g3UMXnYMZoXja7JAJ7Y7sPZipwm/pGApZt7wHlw==
+  dependencies:
+    "@babel/helper-call-delegate" "^7.7.4"
+    "@babel/helper-get-function-arity" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-property-literals@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.7.4.tgz#2388d6505ef89b266103f450f9167e6bd73f98c2"
+  integrity sha512-MatJhlC4iHsIskWYyawl53KuHrt+kALSADLQQ/HkhTjX954fkxIEh4q5slL4oRAnsm/eDoZ4q0CIZpcqBuxhJQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-react-jsx@^7.0.0":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.7.4.tgz#d91205717fae4e2f84d020cd3057ec02a10f11da"
+  integrity sha512-LixU4BS95ZTEAZdPaIuyg/k8FiiqN9laQ0dMHB4MlpydHY53uQdWCUrwjLr5o6ilS6fAgZey4Q14XBjl5tL6xw==
+  dependencies:
+    "@babel/helper-builder-react-jsx" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/plugin-syntax-jsx" "^7.7.4"
+
+"@babel/plugin-transform-regenerator@^7.7.5":
+  version "7.7.5"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.7.5.tgz#3a8757ee1a2780f390e89f246065ecf59c26fce9"
+  integrity sha512-/8I8tPvX2FkuEyWbjRCt4qTAgZK0DVy8QRguhA524UH48RfGJy94On2ri+dCuwOpcerPRl9O4ebQkRcVzIaGBw==
+  dependencies:
+    regenerator-transform "^0.14.0"
+
+"@babel/plugin-transform-reserved-words@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.7.4.tgz#6a7cf123ad175bb5c69aec8f6f0770387ed3f1eb"
+  integrity sha512-OrPiUB5s5XvkCO1lS7D8ZtHcswIC57j62acAnJZKqGGnHP+TIc/ljQSrgdX/QyOTdEK5COAhuc820Hi1q2UgLQ==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-shorthand-properties@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.7.4.tgz#74a0a9b2f6d67a684c6fbfd5f0458eb7ba99891e"
+  integrity sha512-q+suddWRfIcnyG5YiDP58sT65AJDZSUhXQDZE3r04AuqD6d/XLaQPPXSBzP2zGerkgBivqtQm9XKGLuHqBID6Q==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-spread@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-spread/-/plugin-transform-spread-7.7.4.tgz#aa673b356fe6b7e70d69b6e33a17fef641008578"
+  integrity sha512-8OSs0FLe5/80cndziPlg4R0K6HcWSM0zyNhHhLsmw/Nc5MaA49cAsnoJ/t/YZf8qkG7fD+UjTRaApVDB526d7Q==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-sticky-regex@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.7.4.tgz#ffb68c05090c30732076b1285dc1401b404a123c"
+  integrity sha512-Ls2NASyL6qtVe1H1hXts9yuEeONV2TJZmplLONkMPUG158CtmnrzW5Q5teibM5UVOFjG0D3IC5mzXR6pPpUY7A==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/helper-regex" "^7.0.0"
+
+"@babel/plugin-transform-template-literals@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.7.4.tgz#1eb6411736dd3fe87dbd20cc6668e5121c17d604"
+  integrity sha512-sA+KxLwF3QwGj5abMHkHgshp9+rRz+oY9uoRil4CyLtgEuE/88dpkeWgNk5qKVsJE9iSfly3nvHapdRiIS2wnQ==
+  dependencies:
+    "@babel/helper-annotate-as-pure" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-typeof-symbol@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.7.4.tgz#3174626214f2d6de322882e498a38e8371b2140e"
+  integrity sha512-KQPUQ/7mqe2m0B8VecdyaW5XcQYaePyl9R7IsKd+irzj6jvbhoGnRE+M0aNkyAzI07VfUQ9266L5xMARitV3wg==
+  dependencies:
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/plugin-transform-unicode-regex@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.7.4.tgz#a3c0f65b117c4c81c5b6484f2a5e7b95346b83ae"
+  integrity sha512-N77UUIV+WCvE+5yHw+oks3m18/umd7y392Zv7mYTpFqHtkpcc+QUz+gLJNTWVlWROIWeLqY0f3OjZxV5TcXnRw==
+  dependencies:
+    "@babel/helper-create-regexp-features-plugin" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+
+"@babel/preset-env@^7.4.4":
+  version "7.7.6"
+  resolved "https://registry.yarnpkg.com/@babel/preset-env/-/preset-env-7.7.6.tgz#39ac600427bbb94eec6b27953f1dfa1d64d457b2"
+  integrity sha512-k5hO17iF/Q7tR9Jv8PdNBZWYW6RofxhnxKjBMc0nG4JTaWvOTiPoO/RLFwAKcA4FpmuBFm6jkoqaRJLGi0zdaQ==
+  dependencies:
+    "@babel/helper-module-imports" "^7.7.4"
+    "@babel/helper-plugin-utils" "^7.0.0"
+    "@babel/plugin-proposal-async-generator-functions" "^7.7.4"
+    "@babel/plugin-proposal-dynamic-import" "^7.7.4"
+    "@babel/plugin-proposal-json-strings" "^7.7.4"
+    "@babel/plugin-proposal-object-rest-spread" "^7.7.4"
+    "@babel/plugin-proposal-optional-catch-binding" "^7.7.4"
+    "@babel/plugin-proposal-unicode-property-regex" "^7.7.4"
+    "@babel/plugin-syntax-async-generators" "^7.7.4"
+    "@babel/plugin-syntax-dynamic-import" "^7.7.4"
+    "@babel/plugin-syntax-json-strings" "^7.7.4"
+    "@babel/plugin-syntax-object-rest-spread" "^7.7.4"
+    "@babel/plugin-syntax-optional-catch-binding" "^7.7.4"
+    "@babel/plugin-syntax-top-level-await" "^7.7.4"
+    "@babel/plugin-transform-arrow-functions" "^7.7.4"
+    "@babel/plugin-transform-async-to-generator" "^7.7.4"
+    "@babel/plugin-transform-block-scoped-functions" "^7.7.4"
+    "@babel/plugin-transform-block-scoping" "^7.7.4"
+    "@babel/plugin-transform-classes" "^7.7.4"
+    "@babel/plugin-transform-computed-properties" "^7.7.4"
+    "@babel/plugin-transform-destructuring" "^7.7.4"
+    "@babel/plugin-transform-dotall-regex" "^7.7.4"
+    "@babel/plugin-transform-duplicate-keys" "^7.7.4"
+    "@babel/plugin-transform-exponentiation-operator" "^7.7.4"
+    "@babel/plugin-transform-for-of" "^7.7.4"
+    "@babel/plugin-transform-function-name" "^7.7.4"
+    "@babel/plugin-transform-literals" "^7.7.4"
+    "@babel/plugin-transform-member-expression-literals" "^7.7.4"
+    "@babel/plugin-transform-modules-amd" "^7.7.5"
+    "@babel/plugin-transform-modules-commonjs" "^7.7.5"
+    "@babel/plugin-transform-modules-systemjs" "^7.7.4"
+    "@babel/plugin-transform-modules-umd" "^7.7.4"
+    "@babel/plugin-transform-named-capturing-groups-regex" "^7.7.4"
+    "@babel/plugin-transform-new-target" "^7.7.4"
+    "@babel/plugin-transform-object-super" "^7.7.4"
+    "@babel/plugin-transform-parameters" "^7.7.4"
+    "@babel/plugin-transform-property-literals" "^7.7.4"
+    "@babel/plugin-transform-regenerator" "^7.7.5"
+    "@babel/plugin-transform-reserved-words" "^7.7.4"
+    "@babel/plugin-transform-shorthand-properties" "^7.7.4"
+    "@babel/plugin-transform-spread" "^7.7.4"
+    "@babel/plugin-transform-sticky-regex" "^7.7.4"
+    "@babel/plugin-transform-template-literals" "^7.7.4"
+    "@babel/plugin-transform-typeof-symbol" "^7.7.4"
+    "@babel/plugin-transform-unicode-regex" "^7.7.4"
+    "@babel/types" "^7.7.4"
+    browserslist "^4.6.0"
+    core-js-compat "^3.4.7"
+    invariant "^2.2.2"
+    js-levenshtein "^1.1.3"
+    semver "^5.5.0"
+
+"@babel/runtime@^7.4.4":
+  version "7.7.6"
+  resolved "https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.7.6.tgz#d18c511121aff1b4f2cd1d452f1bac9601dd830f"
+  integrity sha512-BWAJxpNVa0QlE5gZdWjSxXtemZyZ9RmrmVozxt3NUXeZhVIJ5ANyqmMc0JDrivBZyxUuQvFxlvH4OWWOogGfUw==
+  dependencies:
+    regenerator-runtime "^0.13.2"
+
+"@babel/template@^7.4.4", "@babel/template@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/template/-/template-7.7.4.tgz#428a7d9eecffe27deac0a98e23bf8e3675d2a77b"
+  integrity sha512-qUzihgVPguAzXCK7WXw8pqs6cEwi54s3E+HrejlkuWO6ivMKx9hZl3Y2fSXp9i5HgyWmj7RKP+ulaYnKM4yYxw==
+  dependencies:
+    "@babel/code-frame" "^7.0.0"
+    "@babel/parser" "^7.7.4"
+    "@babel/types" "^7.7.4"
+
+"@babel/traverse@^7.0.0", "@babel/traverse@^7.4.4", "@babel/traverse@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.7.4.tgz#9c1e7c60fb679fe4fcfaa42500833333c2058558"
+  integrity sha512-P1L58hQyupn8+ezVA2z5KBm4/Zr4lCC8dwKCMYzsa5jFMDMQAzaBNy9W5VjB+KAmBjb40U7a/H6ao+Xo+9saIw==
+  dependencies:
+    "@babel/code-frame" "^7.5.5"
+    "@babel/generator" "^7.7.4"
+    "@babel/helper-function-name" "^7.7.4"
+    "@babel/helper-split-export-declaration" "^7.7.4"
+    "@babel/parser" "^7.7.4"
+    "@babel/types" "^7.7.4"
+    debug "^4.1.0"
+    globals "^11.1.0"
+    lodash "^4.17.13"
+
+"@babel/types@^7.0.0", "@babel/types@^7.4.4", "@babel/types@^7.7.4":
+  version "7.7.4"
+  resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.7.4.tgz#516570d539e44ddf308c07569c258ff94fde9193"
+  integrity sha512-cz5Ji23KCi4T+YIE/BolWosrJuSmoZeN1EFnRtBwF+KKLi8GG/Z2c2hOJJeCXPk4mwk4QFvTmwIodJowXgttRA==
+  dependencies:
+    esutils "^2.0.2"
+    lodash "^4.17.13"
+    to-fast-properties "^2.0.0"
+
+"@iarna/toml@^2.2.0":
+  version "2.2.3"
+  resolved "https://registry.yarnpkg.com/@iarna/toml/-/toml-2.2.3.tgz#f060bf6eaafae4d56a7dac618980838b0696e2ab"
+  integrity sha512-FmuxfCuolpLl0AnQ2NHSzoUKWEJDFl63qXjzdoWBVyFCXzMGm1spBzk7LeHNoVCiWCF7mRVms9e6jEV9+MoPbg==
+
+"@mrmlnc/readdir-enhanced@^2.2.1":
+  version "2.2.1"
+  resolved "https://registry.yarnpkg.com/@mrmlnc/readdir-enhanced/-/readdir-enhanced-2.2.1.tgz#524af240d1a360527b730475ecfa1344aa540dde"
+  integrity sha512-bPHp6Ji8b41szTOcaP63VlnbbO5Ny6dwAATtY6JTjh5N2OLrb5Qk/Th5cRkRQhkWCt+EJsYrNB0MiL+Gpn6e3g==
+  dependencies:
+    call-me-maybe "^1.0.1"
+    glob-to-regexp "^0.3.0"
+
+"@nodelib/fs.stat@^1.1.2":
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-1.1.3.tgz#2b5a3ab3f918cca48a8c754c08168e3f03eba61b"
+  integrity sha512-shAmDyaQC4H92APFoIaVDHCx5bStIocgvbwQyxPRrbUY20V1EYTbSDchWbuwlMG3V17cprZhA6+78JfB+3DTPw==
+
+"@parcel/fs@^1.11.0":
+  version "1.11.0"
+  resolved "https://registry.yarnpkg.com/@parcel/fs/-/fs-1.11.0.tgz#fb8a2be038c454ad46a50dc0554c1805f13535cd"
+  integrity sha512-86RyEqULbbVoeo8OLcv+LQ1Vq2PKBAvWTU9fCgALxuCTbbs5Ppcvll4Vr+Ko1AnmMzja/k++SzNAwJfeQXVlpA==
+  dependencies:
+    "@parcel/utils" "^1.11.0"
+    mkdirp "^0.5.1"
+    rimraf "^2.6.2"
+
+"@parcel/logger@^1.11.1":
+  version "1.11.1"
+  resolved "https://registry.yarnpkg.com/@parcel/logger/-/logger-1.11.1.tgz#c55b0744bcbe84ebc291155627f0ec406a23e2e6"
+  integrity sha512-9NF3M6UVeP2udOBDILuoEHd8VrF4vQqoWHEafymO1pfSoOMfxrSJZw1MfyAAIUN/IFp9qjcpDCUbDZB+ioVevA==
+  dependencies:
+    "@parcel/workers" "^1.11.0"
+    chalk "^2.1.0"
+    grapheme-breaker "^0.3.2"
+    ora "^2.1.0"
+    strip-ansi "^4.0.0"
+
+"@parcel/utils@^1.11.0":
+  version "1.11.0"
+  resolved "https://registry.yarnpkg.com/@parcel/utils/-/utils-1.11.0.tgz#539e08fff8af3b26eca11302be80b522674b51ea"
+  integrity sha512-cA3p4jTlaMeOtAKR/6AadanOPvKeg8VwgnHhOyfi0yClD0TZS/hi9xu12w4EzA/8NtHu0g6o4RDfcNjqN8l1AQ==
+
+"@parcel/watcher@^1.12.1":
+  version "1.12.1"
+  resolved "https://registry.yarnpkg.com/@parcel/watcher/-/watcher-1.12.1.tgz#b98b3df309fcab93451b5583fc38e40826696dad"
+  integrity sha512-od+uCtCxC/KoNQAIE1vWx1YTyKYY+7CTrxBJPRh3cDWw/C0tCtlBMVlrbplscGoEpt6B27KhJDCv82PBxOERNA==
+  dependencies:
+    "@parcel/utils" "^1.11.0"
+    chokidar "^2.1.5"
+
+"@parcel/workers@^1.11.0":
+  version "1.11.0"
+  resolved "https://registry.yarnpkg.com/@parcel/workers/-/workers-1.11.0.tgz#7b8dcf992806f4ad2b6cecf629839c41c2336c59"
+  integrity sha512-USSjRAAQYsZFlv43FUPdD+jEGML5/8oLF0rUzPQTtK4q9kvaXr49F5ZplyLz5lox78cLZ0TxN2bIDQ1xhOkulQ==
+  dependencies:
+    "@parcel/utils" "^1.11.0"
+    physical-cpu-count "^2.0.0"
+
+"@types/estree@*":
+  version "0.0.40"
+  resolved "https://registry.yarnpkg.com/@types/estree/-/estree-0.0.40.tgz#0e6cb9b9bbd098031fa19e4b4e8131bc70e5de13"
+  integrity sha512-p3KZgMto/JyxosKGmnLDJ/dG5wf+qTRMUjHJcspC2oQKa4jP7mz+tv0ND56lLBu3ojHlhzY33Ol+khLyNmilkA==
+
+"@types/estree@0.0.39":
+  version "0.0.39"
+  resolved "https://registry.yarnpkg.com/@types/estree/-/estree-0.0.39.tgz#e177e699ee1b8c22d23174caaa7422644389509f"
+  integrity sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw==
+
+"@types/node@*":
+  version "12.12.20"
+  resolved "https://registry.yarnpkg.com/@types/node/-/node-12.12.20.tgz#7b693038ce661fe57a7ffa4679440b5e7c5e8b99"
+  integrity sha512-VAe+DiwpnC/g448uN+/3gRl4th0BTdrR9gSLIOHA+SUQskaYZQDOHG7xmjiE7JUhjbXnbXytf6Ih+/pA6CtMFQ==
+
+"@types/q@^1.5.1":
+  version "1.5.2"
+  resolved "https://registry.yarnpkg.com/@types/q/-/q-1.5.2.tgz#690a1475b84f2a884fd07cd797c00f5f31356ea8"
+  integrity sha512-ce5d3q03Ex0sy4R14722Rmt6MT07Ua+k4FwDfdcToYJcMKNtRVQvJ6JCAPdAmAnbRb6CsX6aYb9m96NGod9uTw==
+
+"@types/resolve@0.0.8":
+  version "0.0.8"
+  resolved "https://registry.yarnpkg.com/@types/resolve/-/resolve-0.0.8.tgz#f26074d238e02659e323ce1a13d041eee280e194"
+  integrity sha512-auApPaJf3NPfe18hSoJkp8EbZzer2ISk7o8mCC3M9he/a04+gbMF97NkpD2S8riMGvm4BMRI59/SZQSaLTKpsQ==
+  dependencies:
+    "@types/node" "*"
+
+JSONStream@^1.0.3:
+  version "1.3.5"
+  resolved "https://registry.yarnpkg.com/JSONStream/-/JSONStream-1.3.5.tgz#3208c1f08d3a4d99261ab64f92302bc15e111ca0"
+  integrity sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==
+  dependencies:
+    jsonparse "^1.2.0"
+    through ">=2.2.7 <3"
+
+abab@^2.0.0:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/abab/-/abab-2.0.3.tgz#623e2075e02eb2d3f2475e49f99c91846467907a"
+  integrity sha512-tsFzPpcttalNjFBCFMqsKYQcWxxen1pgJR56by//QwvJc4/OUS3kPOOttx2tSIfjsylB0pYu7f5D3K1RCxUnUg==
+
+acorn-globals@^4.3.0:
+  version "4.3.4"
+  resolved "https://registry.yarnpkg.com/acorn-globals/-/acorn-globals-4.3.4.tgz#9fa1926addc11c97308c4e66d7add0d40c3272e7"
+  integrity sha512-clfQEh21R+D0leSbUdWf3OcfqyaCSAQ8Ryq00bofSekfr9W8u1jyYZo6ir0xu9Gtcf7BjcHJpnbZH7JOCpP60A==
+  dependencies:
+    acorn "^6.0.1"
+    acorn-walk "^6.0.1"
+
+acorn-jsx@^5.1.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.1.0.tgz#294adb71b57398b0680015f0a38c563ee1db5384"
+  integrity sha512-tMUqwBWfLFbJbizRmEcWSLw6HnFzfdJs2sOJEOwwtVPMoH/0Ay+E703oZz78VSXZiiDcZrQ5XKjPIUQixhmgVw==
+
+acorn-node@^1.2.0, acorn-node@^1.3.0, acorn-node@^1.5.2, acorn-node@^1.6.1:
+  version "1.8.2"
+  resolved "https://registry.yarnpkg.com/acorn-node/-/acorn-node-1.8.2.tgz#114c95d64539e53dede23de8b9d96df7c7ae2af8"
+  integrity sha512-8mt+fslDufLYntIoPAaIMUe/lrbrehIiwmR3t2k9LljIzoigEPF27eLk2hy8zSGzmR/ogr7zbRKINMo1u0yh5A==
+  dependencies:
+    acorn "^7.0.0"
+    acorn-walk "^7.0.0"
+    xtend "^4.0.2"
+
+acorn-walk@^6.0.1:
+  version "6.2.0"
+  resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-6.2.0.tgz#123cb8f3b84c2171f1f7fb252615b1c78a6b1a8c"
+  integrity sha512-7evsyfH1cLOCdAzZAd43Cic04yKydNx0cF+7tiA19p1XnLLPU4dpCQOqpjqwokFe//vS0QqfqqjCS2JkiIs0cA==
+
+acorn-walk@^7.0.0:
+  version "7.0.0"
+  resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-7.0.0.tgz#c8ba6f0f1aac4b0a9e32d1f0af12be769528f36b"
+  integrity sha512-7Bv1We7ZGuU79zZbb6rRqcpxo3OY+zrdtloZWoyD8fmGX+FeXRjE+iuGkZjSXLVovLzrsvMGMy0EkwA0E0umxg==
+
+acorn@^5.0.0:
+  version "5.7.3"
+  resolved "https://registry.yarnpkg.com/acorn/-/acorn-5.7.3.tgz#67aa231bf8812974b85235a96771eb6bd07ea279"
+  integrity sha512-T/zvzYRfbVojPWahDsE5evJdHb3oJoQfFbsrKM7w5Zcs++Tr257tia3BmMP8XYVjp1S9RZXQMh7gao96BlqZOw==
+
+acorn@^6.0.1, acorn@^6.0.4:
+  version "6.4.0"
+  resolved "https://registry.yarnpkg.com/acorn/-/acorn-6.4.0.tgz#b659d2ffbafa24baf5db1cdbb2c94a983ecd2784"
+  integrity sha512-gac8OEcQ2Li1dxIEWGZzsp2BitJxwkwcOm0zHAJLcPJaVvm58FRnk6RkuLRpU1EujipU2ZFODv2P9DLMfnV8mw==
+
+acorn@^7.0.0, acorn@^7.1.0:
+  version "7.1.0"
+  resolved "https://registry.yarnpkg.com/acorn/-/acorn-7.1.0.tgz#949d36f2c292535da602283586c2477c57eb2d6c"
+  integrity sha512-kL5CuoXA/dgxlBbVrflsflzQ3PAas7RYZB52NOm/6839iVYJgKMJ3cQJD+t2i5+qFa8h3MDpEOJiS64E8JLnSQ==
+
+ajv@^6.10.0, ajv@^6.10.2, ajv@^6.5.5:
+  version "6.10.2"
+  resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.10.2.tgz#d3cea04d6b017b2894ad69040fec8b623eb4bd52"
+  integrity sha512-TXtUUEYHuaTEbLZWIKUr5pmBuhDLy+8KYtPYdcV8qC+pOZL+NKqYwvWSRrVXHn+ZmRRAu8vJTAznH7Oag6RVRw==
+  dependencies:
+    fast-deep-equal "^2.0.1"
+    fast-json-stable-stringify "^2.0.0"
+    json-schema-traverse "^0.4.1"
+    uri-js "^4.2.2"
+
+alphanum-sort@^1.0.0:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/alphanum-sort/-/alphanum-sort-1.0.2.tgz#97a1119649b211ad33691d9f9f486a8ec9fbe0a3"
+  integrity sha1-l6ERlkmyEa0zaR2fn0hqjsn74KM=
+
+ansi-escapes@^4.2.1:
+  version "4.3.0"
+  resolved "https://registry.yarnpkg.com/ansi-escapes/-/ansi-escapes-4.3.0.tgz#a4ce2b33d6b214b7950d8595c212f12ac9cc569d"
+  integrity sha512-EiYhwo0v255HUL6eDyuLrXEkTi7WwVCLAw+SeOQ7M7qdun1z1pum4DEm/nuqIVbPvi9RPPc9k9LbyBv6H0DwVg==
+  dependencies:
+    type-fest "^0.8.1"
+
+ansi-regex@^2.0.0:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-2.1.1.tgz#c3b33ab5ee360d86e0e628f0468ae7ef27d654df"
+  integrity sha1-w7M6te42DYbg5ijwRorn7yfWVN8=
+
+ansi-regex@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-3.0.0.tgz#ed0317c322064f79466c02966bddb605ab37d998"
+  integrity sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=
+
+ansi-regex@^4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-4.1.0.tgz#8b9f8f08cf1acb843756a839ca8c7e3168c51997"
+  integrity sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg==
+
+ansi-regex@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.0.tgz#388539f55179bf39339c81af30a654d69f87cb75"
+  integrity sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==
+
+ansi-styles@^2.2.1:
+  version "2.2.1"
+  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-2.2.1.tgz#b432dd3358b634cf75e1e4664368240533c1ddbe"
+  integrity sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=
+
+ansi-styles@^3.2.0, ansi-styles@^3.2.1:
+  version "3.2.1"
+  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d"
+  integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==
+  dependencies:
+    color-convert "^1.9.0"
+
+ansi-to-html@^0.6.4:
+  version "0.6.13"
+  resolved "https://registry.yarnpkg.com/ansi-to-html/-/ansi-to-html-0.6.13.tgz#c72eae8b63e5ca0643aab11bfc6e6f2217425833"
+  integrity sha512-Ys2/umuaTlQvP9DLkaa7UzRKF2FLrfod/hNHXS9QhXCrw7seObG6ksOGmNz3UoK+adwM8L9vQfG7mvaxfJ3Jvw==
+  dependencies:
+    entities "^1.1.2"
+
+anymatch@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-2.0.0.tgz#bcb24b4f37934d9aa7ac17b4adaf89e7c76ef2eb"
+  integrity sha512-5teOsQWABXHHBFP9y3skS5P3d/WfWXpv3FUpy+LorMrNYaT9pI4oLMQX7jzQ2KklNpGpWHzdCXTDT2Y3XGlZBw==
+  dependencies:
+    micromatch "^3.1.4"
+    normalize-path "^2.1.1"
+
+argparse@^1.0.7:
+  version "1.0.10"
+  resolved "https://registry.yarnpkg.com/argparse/-/argparse-1.0.10.tgz#bcd6791ea5ae09725e17e5ad988134cd40b3d911"
+  integrity sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==
+  dependencies:
+    sprintf-js "~1.0.2"
+
+arr-diff@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/arr-diff/-/arr-diff-4.0.0.tgz#d6461074febfec71e7e15235761a329a5dc7c520"
+  integrity sha1-1kYQdP6/7HHn4VI1dhoyml3HxSA=
+
+arr-flatten@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/arr-flatten/-/arr-flatten-1.1.0.tgz#36048bbff4e7b47e136644316c99669ea5ae91f1"
+  integrity sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==
+
+arr-union@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/arr-union/-/arr-union-3.1.0.tgz#e39b09aea9def866a8f206e288af63919bae39c4"
+  integrity sha1-45sJrqne+Gao8gbiiK9jkZuuOcQ=
+
+array-equal@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/array-equal/-/array-equal-1.0.0.tgz#8c2a5ef2472fd9ea742b04c77a75093ba2757c93"
+  integrity sha1-jCpe8kcv2ep0KwTHenUJO6J1fJM=
+
+array-unique@^0.3.2:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/array-unique/-/array-unique-0.3.2.tgz#a894b75d4bc4f6cd679ef3244a9fd8f46ae2d428"
+  integrity sha1-qJS3XUvE9s1nnvMkSp/Y9Gri1Cg=
+
+arraybuffer-to-string@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/arraybuffer-to-string/-/arraybuffer-to-string-1.0.2.tgz#c373aa7bb0e6844d9a2bc9654c8889a9570a26e2"
+  integrity sha512-WbIYlLVmvIAyUBdQRRuyGOJRriOQy9OAsWcyURmsRQp9+g647hdMSS2VFKXbJLVw0daUu06hqwLXm9etVrXI9A==
+
+asn1.js@^4.0.0:
+  version "4.10.1"
+  resolved "https://registry.yarnpkg.com/asn1.js/-/asn1.js-4.10.1.tgz#b9c2bf5805f1e64aadeed6df3a2bfafb5a73f5a0"
+  integrity sha512-p32cOF5q0Zqs9uBiONKYLm6BClCoBCM5O9JfeUSlnQLBTxYdTK+pW+nXflm8UkKd2UYlEbYz5qEi0JuZR9ckSw==
+  dependencies:
+    bn.js "^4.0.0"
+    inherits "^2.0.1"
+    minimalistic-assert "^1.0.0"
+
+asn1@~0.2.3:
+  version "0.2.4"
+  resolved "https://registry.yarnpkg.com/asn1/-/asn1-0.2.4.tgz#8d2475dfab553bb33e77b54e59e880bb8ce23136"
+  integrity sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==
+  dependencies:
+    safer-buffer "~2.1.0"
+
+assert-plus@1.0.0, assert-plus@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/assert-plus/-/assert-plus-1.0.0.tgz#f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525"
+  integrity sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=
+
+assert@^1.1.1, assert@^1.4.0:
+  version "1.5.0"
+  resolved "https://registry.yarnpkg.com/assert/-/assert-1.5.0.tgz#55c109aaf6e0aefdb3dc4b71240c70bf574b18eb"
+  integrity sha512-EDsgawzwoun2CZkCgtxJbv392v4nbk9XDD06zI+kQYoBM/3RBWLlEyJARDOmhAAosBjWACEkKL6S+lIZtcAubA==
+  dependencies:
+    object-assign "^4.1.1"
+    util "0.10.3"
+
+assign-symbols@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/assign-symbols/-/assign-symbols-1.0.0.tgz#59667f41fadd4f20ccbc2bb96b8d4f7f78ec0367"
+  integrity sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c=
+
+astral-regex@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/astral-regex/-/astral-regex-1.0.0.tgz#6c8c3fb827dd43ee3918f27b82782ab7658a6fd9"
+  integrity sha512-+Ryf6g3BKoRc7jfp7ad8tM4TtMiaWvbF/1/sQcZPkkS7ag3D5nMBCe2UfOTONtAkaG0tO0ij3C5Lwmf1EiyjHg==
+
+async-each@^1.0.1:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/async-each/-/async-each-1.0.3.tgz#b727dbf87d7651602f06f4d4ac387f47d91b0cbf"
+  integrity sha512-z/WhQ5FPySLdvREByI2vZiTWwCnF0moMJ1hK9YQwDTHKh6I7/uSckMetoRGb5UBZPC1z0jlw+n/XCgjeH7y1AQ==
+
+async-limiter@~1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/async-limiter/-/async-limiter-1.0.1.tgz#dd379e94f0db8310b08291f9d64c3209766617fd"
+  integrity sha512-csOlWGAcRFJaI6m+F2WKdnMKr4HhdhFVBk0H/QbJFMCr+uO2kwohwXQPxw/9OCxp05r5ghVBFSyioixx3gfkNQ==
+
+asynckit@^0.4.0:
+  version "0.4.0"
+  resolved "https://registry.yarnpkg.com/asynckit/-/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"
+  integrity sha1-x57Zf380y48robyXkLzDZkdLS3k=
+
+atob-lite@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/atob-lite/-/atob-lite-2.0.0.tgz#0fef5ad46f1bd7a8502c65727f0367d5ee43d696"
+  integrity sha1-D+9a1G8b16hQLGVyfwNn1e5D1pY=
+
+atob@^2.1.1:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/atob/-/atob-2.1.2.tgz#6d9517eb9e030d2436666651e86bd9f6f13533c9"
+  integrity sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==
+
+aws-sign2@~0.7.0:
+  version "0.7.0"
+  resolved "https://registry.yarnpkg.com/aws-sign2/-/aws-sign2-0.7.0.tgz#b46e890934a9591f2d2f6f86d7e6a9f1b3fe76a8"
+  integrity sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=
+
+aws4@^1.8.0:
+  version "1.9.0"
+  resolved "https://registry.yarnpkg.com/aws4/-/aws4-1.9.0.tgz#24390e6ad61386b0a747265754d2a17219de862c"
+  integrity sha512-Uvq6hVe90D0B2WEnUqtdgY1bATGz3mw33nH9Y+dmA+w5DHvUmBgkr5rM/KCHpCsiFNRUfokW/szpPPgMK2hm4A==
+
+babel-eslint@^10.0.3:
+  version "10.0.3"
+  resolved "https://registry.yarnpkg.com/babel-eslint/-/babel-eslint-10.0.3.tgz#81a2c669be0f205e19462fed2482d33e4687a88a"
+  integrity sha512-z3U7eMY6r/3f3/JB9mTsLjyxrv0Yb1zb8PCWCLpguxfCzBIZUwy23R1t/XKewP+8mEN2Ck8Dtr4q20z6ce6SoA==
+  dependencies:
+    "@babel/code-frame" "^7.0.0"
+    "@babel/parser" "^7.0.0"
+    "@babel/traverse" "^7.0.0"
+    "@babel/types" "^7.0.0"
+    eslint-visitor-keys "^1.0.0"
+    resolve "^1.12.0"
+
+babel-plugin-dynamic-import-node@^2.3.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/babel-plugin-dynamic-import-node/-/babel-plugin-dynamic-import-node-2.3.0.tgz#f00f507bdaa3c3e3ff6e7e5e98d90a7acab96f7f"
+  integrity sha512-o6qFkpeQEBxcqt0XYlWzAVxNCSCZdUgcR8IRlhD/8DylxjjO4foPcvTW0GGKa/cVt3rvxZ7o5ippJ+/0nvLhlQ==
+  dependencies:
+    object.assign "^4.1.0"
+
+babel-runtime@^6.11.6, babel-runtime@^6.26.0:
+  version "6.26.0"
+  resolved "https://registry.yarnpkg.com/babel-runtime/-/babel-runtime-6.26.0.tgz#965c7058668e82b55d7bfe04ff2337bc8b5647fe"
+  integrity sha1-llxwWGaOgrVde/4E/yM3vItWR/4=
+  dependencies:
+    core-js "^2.4.0"
+    regenerator-runtime "^0.11.0"
+
+babel-types@^6.15.0:
+  version "6.26.0"
+  resolved "https://registry.yarnpkg.com/babel-types/-/babel-types-6.26.0.tgz#a3b073f94ab49eb6fa55cd65227a334380632497"
+  integrity sha1-o7Bz+Uq0nrb6Vc1lInozQ4BjJJc=
+  dependencies:
+    babel-runtime "^6.26.0"
+    esutils "^2.0.2"
+    lodash "^4.17.4"
+    to-fast-properties "^1.0.3"
+
+babylon-walk@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/babylon-walk/-/babylon-walk-1.0.2.tgz#3b15a5ddbb482a78b4ce9c01c8ba181702d9d6ce"
+  integrity sha1-OxWl3btIKni0zpwByLoYFwLZ1s4=
+  dependencies:
+    babel-runtime "^6.11.6"
+    babel-types "^6.15.0"
+    lodash.clone "^4.5.0"
+
+balanced-match@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767"
+  integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=
+
+base64-js@^1.0.2:
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.3.1.tgz#58ece8cb75dd07e71ed08c736abc5fac4dbf8df1"
+  integrity sha512-mLQ4i2QO1ytvGWFWmcngKO//JXAQueZvwEKtjgQFM4jIK0kU+ytMfplL8j+n5mspOfjHwoAg+9yhb7BwAHm36g==
+
+base@^0.11.1:
+  version "0.11.2"
+  resolved "https://registry.yarnpkg.com/base/-/base-0.11.2.tgz#7bde5ced145b6d551a90db87f83c558b4eb48a8f"
+  integrity sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==
+  dependencies:
+    cache-base "^1.0.1"
+    class-utils "^0.3.5"
+    component-emitter "^1.2.1"
+    define-property "^1.0.0"
+    isobject "^3.0.1"
+    mixin-deep "^1.2.0"
+    pascalcase "^0.1.1"
+
+bcrypt-pbkdf@^1.0.0:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz#a4301d389b6a43f9b67ff3ca11a3f6637e360e9e"
+  integrity sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=
+  dependencies:
+    tweetnacl "^0.14.3"
+
+binary-extensions@^1.0.0:
+  version "1.13.1"
+  resolved "https://registry.yarnpkg.com/binary-extensions/-/binary-extensions-1.13.1.tgz#598afe54755b2868a5330d2aff9d4ebb53209b65"
+  integrity sha512-Un7MIEDdUC5gNpcGDV97op1Ywk748MpHcFTHoYs6qnj1Z3j7I53VG3nwZhKzoBZmbdRNnb6WRdFlwl7tSDuZGw==
+
+bindings@^1.5.0:
+  version "1.5.0"
+  resolved "https://registry.yarnpkg.com/bindings/-/bindings-1.5.0.tgz#10353c9e945334bc0511a6d90b38fbc7c9c504df"
+  integrity sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==
+  dependencies:
+    file-uri-to-path "1.0.0"
+
+bn.js@^4.0.0, bn.js@^4.1.0, bn.js@^4.1.1, bn.js@^4.4.0:
+  version "4.11.8"
+  resolved "https://registry.yarnpkg.com/bn.js/-/bn.js-4.11.8.tgz#2cde09eb5ee341f484746bb0309b3253b1b1442f"
+  integrity sha512-ItfYfPLkWHUjckQCk8xC+LwxgK8NYcXywGigJgSwOP8Y2iyWT4f2vsZnoOXTTbo+o5yXmIUJ4gn5538SO5S3gA==
+
+boolbase@^1.0.0, boolbase@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/boolbase/-/boolbase-1.0.0.tgz#68dff5fbe60c51eb37725ea9e3ed310dcc1e776e"
+  integrity sha1-aN/1++YMUes3cl6p4+0xDcwed24=
+
+brace-expansion@^1.1.7:
+  version "1.1.11"
+  resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd"
+  integrity sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==
+  dependencies:
+    balanced-match "^1.0.0"
+    concat-map "0.0.1"
+
+braces@^2.3.1, braces@^2.3.2:
+  version "2.3.2"
+  resolved "https://registry.yarnpkg.com/braces/-/braces-2.3.2.tgz#5979fd3f14cd531565e5fa2df1abfff1dfaee729"
+  integrity sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==
+  dependencies:
+    arr-flatten "^1.1.0"
+    array-unique "^0.3.2"
+    extend-shallow "^2.0.1"
+    fill-range "^4.0.0"
+    isobject "^3.0.1"
+    repeat-element "^1.1.2"
+    snapdragon "^0.8.1"
+    snapdragon-node "^2.0.1"
+    split-string "^3.0.2"
+    to-regex "^3.0.1"
+
+brfs@^1.2.0:
+  version "1.6.1"
+  resolved "https://registry.yarnpkg.com/brfs/-/brfs-1.6.1.tgz#b78ce2336d818e25eea04a0947cba6d4fb8849c3"
+  integrity sha512-OfZpABRQQf+Xsmju8XE9bDjs+uU4vLREGolP7bDgcpsI17QREyZ4Bl+2KLxxx1kCgA0fAIhKQBaBYh+PEcCqYQ==
+  dependencies:
+    quote-stream "^1.0.1"
+    resolve "^1.1.5"
+    static-module "^2.2.0"
+    through2 "^2.0.0"
+
+brorand@^1.0.1:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/brorand/-/brorand-1.1.0.tgz#12c25efe40a45e3c323eb8675a0a0ce57b22371f"
+  integrity sha1-EsJe/kCkXjwyPrhnWgoM5XsiNx8=
+
+browser-pack@^6.0.1:
+  version "6.1.0"
+  resolved "https://registry.yarnpkg.com/browser-pack/-/browser-pack-6.1.0.tgz#c34ba10d0b9ce162b5af227c7131c92c2ecd5774"
+  integrity sha512-erYug8XoqzU3IfcU8fUgyHqyOXqIE4tUTTQ+7mqUjQlvnXkOO6OlT9c/ZoJVHYoAaqGxr09CN53G7XIsO4KtWA==
+  dependencies:
+    JSONStream "^1.0.3"
+    combine-source-map "~0.8.0"
+    defined "^1.0.0"
+    safe-buffer "^5.1.1"
+    through2 "^2.0.0"
+    umd "^3.0.0"
+
+browser-process-hrtime@^0.1.2:
+  version "0.1.3"
+  resolved "https://registry.yarnpkg.com/browser-process-hrtime/-/browser-process-hrtime-0.1.3.tgz#616f00faef1df7ec1b5bf9cfe2bdc3170f26c7b4"
+  integrity sha512-bRFnI4NnjO6cnyLmOV/7PVoDEMJChlcfN0z4s1YMBY989/SvlfMI1lgCnkFUs53e9gQF+w7qu7XdllSTiSl8Aw==
+
+browser-resolve@^1.11.0, browser-resolve@^1.7.0:
+  version "1.11.3"
+  resolved "https://registry.yarnpkg.com/browser-resolve/-/browser-resolve-1.11.3.tgz#9b7cbb3d0f510e4cb86bdbd796124d28b5890af6"
+  integrity sha512-exDi1BYWB/6raKHmDTCicQfTkqwN5fioMFV4j8BsfMU4R2DK/QfZfK7kOVkmWCNANf0snkBzqGqAJBao9gZMdQ==
+  dependencies:
+    resolve "1.1.7"
+
+browserify-aes@^1.0.0, browserify-aes@^1.0.4:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/browserify-aes/-/browserify-aes-1.2.0.tgz#326734642f403dabc3003209853bb70ad428ef48"
+  integrity sha512-+7CHXqGuspUn/Sl5aO7Ea0xWGAtETPXNSAjHo48JfLdPWcMng33Xe4znFvQweqc/uzk5zSOI3H52CYnjCfb5hA==
+  dependencies:
+    buffer-xor "^1.0.3"
+    cipher-base "^1.0.0"
+    create-hash "^1.1.0"
+    evp_bytestokey "^1.0.3"
+    inherits "^2.0.1"
+    safe-buffer "^5.0.1"
+
+browserify-cipher@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/browserify-cipher/-/browserify-cipher-1.0.1.tgz#8d6474c1b870bfdabcd3bcfcc1934a10e94f15f0"
+  integrity sha512-sPhkz0ARKbf4rRQt2hTpAHqn47X3llLkUGn+xEJzLjwY8LRs2p0v7ljvI5EyoRO/mexrNunNECisZs+gw2zz1w==
+  dependencies:
+    browserify-aes "^1.0.4"
+    browserify-des "^1.0.0"
+    evp_bytestokey "^1.0.0"
+
+browserify-des@^1.0.0:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/browserify-des/-/browserify-des-1.0.2.tgz#3af4f1f59839403572f1c66204375f7a7f703e9c"
+  integrity sha512-BioO1xf3hFwz4kc6iBhI3ieDFompMhrMlnDFC4/0/vd5MokpuAc3R+LYbwTA9A5Yc9pq9UYPqffKpW2ObuwX5A==
+  dependencies:
+    cipher-base "^1.0.1"
+    des.js "^1.0.0"
+    inherits "^2.0.1"
+    safe-buffer "^5.1.2"
+
+browserify-rsa@^4.0.0:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/browserify-rsa/-/browserify-rsa-4.0.1.tgz#21e0abfaf6f2029cf2fafb133567a701d4135524"
+  integrity sha1-IeCr+vbyApzy+vsTNWenAdQTVSQ=
+  dependencies:
+    bn.js "^4.1.0"
+    randombytes "^2.0.1"
+
+browserify-sign@^4.0.0:
+  version "4.0.4"
+  resolved "https://registry.yarnpkg.com/browserify-sign/-/browserify-sign-4.0.4.tgz#aa4eb68e5d7b658baa6bf6a57e630cbd7a93d298"
+  integrity sha1-qk62jl17ZYuqa/alfmMMvXqT0pg=
+  dependencies:
+    bn.js "^4.1.1"
+    browserify-rsa "^4.0.0"
+    create-hash "^1.1.0"
+    create-hmac "^1.1.2"
+    elliptic "^6.0.0"
+    inherits "^2.0.1"
+    parse-asn1 "^5.0.0"
+
+browserify-zlib@^0.2.0, browserify-zlib@~0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/browserify-zlib/-/browserify-zlib-0.2.0.tgz#2869459d9aa3be245fe8fe2ca1f46e2e7f54d73f"
+  integrity sha512-Z942RysHXmJrhqk88FmKBVq/v5tqmSkDz7p54G/MGyjMnCFFnC79XWNbg+Vta8W6Wb2qtSZTSxIGkJrRpCFEiA==
+  dependencies:
+    pako "~1.0.5"
+
+browserify@^16.5.0:
+  version "16.5.0"
+  resolved "https://registry.yarnpkg.com/browserify/-/browserify-16.5.0.tgz#a1c2bc0431bec11fd29151941582e3f645ede881"
+  integrity sha512-6bfI3cl76YLAnCZ75AGu/XPOsqUhRyc0F/olGIJeCxtfxF2HvPKEcmjU9M8oAPxl4uBY1U7Nry33Q6koV3f2iw==
+  dependencies:
+    JSONStream "^1.0.3"
+    assert "^1.4.0"
+    browser-pack "^6.0.1"
+    browser-resolve "^1.11.0"
+    browserify-zlib "~0.2.0"
+    buffer "^5.0.2"
+    cached-path-relative "^1.0.0"
+    concat-stream "^1.6.0"
+    console-browserify "^1.1.0"
+    constants-browserify "~1.0.0"
+    crypto-browserify "^3.0.0"
+    defined "^1.0.0"
+    deps-sort "^2.0.0"
+    domain-browser "^1.2.0"
+    duplexer2 "~0.1.2"
+    events "^2.0.0"
+    glob "^7.1.0"
+    has "^1.0.0"
+    htmlescape "^1.1.0"
+    https-browserify "^1.0.0"
+    inherits "~2.0.1"
+    insert-module-globals "^7.0.0"
+    labeled-stream-splicer "^2.0.0"
+    mkdirp "^0.5.0"
+    module-deps "^6.0.0"
+    os-browserify "~0.3.0"
+    parents "^1.0.1"
+    path-browserify "~0.0.0"
+    process "~0.11.0"
+    punycode "^1.3.2"
+    querystring-es3 "~0.2.0"
+    read-only-stream "^2.0.0"
+    readable-stream "^2.0.2"
+    resolve "^1.1.4"
+    shasum "^1.0.0"
+    shell-quote "^1.6.1"
+    stream-browserify "^2.0.0"
+    stream-http "^3.0.0"
+    string_decoder "^1.1.1"
+    subarg "^1.0.0"
+    syntax-error "^1.1.1"
+    through2 "^2.0.0"
+    timers-browserify "^1.0.1"
+    tty-browserify "0.0.1"
+    url "~0.11.0"
+    util "~0.10.1"
+    vm-browserify "^1.0.0"
+    xtend "^4.0.0"
+
+browserslist@^4.0.0, browserslist@^4.1.0, browserslist@^4.6.0, browserslist@^4.8.2:
+  version "4.8.2"
+  resolved "https://registry.yarnpkg.com/browserslist/-/browserslist-4.8.2.tgz#b45720ad5fbc8713b7253c20766f701c9a694289"
+  integrity sha512-+M4oeaTplPm/f1pXDw84YohEv7B1i/2Aisei8s4s6k3QsoSHa7i5sz8u/cGQkkatCPxMASKxPualR4wwYgVboA==
+  dependencies:
+    caniuse-lite "^1.0.30001015"
+    electron-to-chromium "^1.3.322"
+    node-releases "^1.1.42"
+
+buffer-equal@0.0.1:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/buffer-equal/-/buffer-equal-0.0.1.tgz#91bc74b11ea405bc916bc6aa908faafa5b4aac4b"
+  integrity sha1-kbx0sR6kBbyRa8aqkI+q+ltKrEs=
+
+buffer-from@^1.0.0:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/buffer-from/-/buffer-from-1.1.1.tgz#32713bc028f75c02fdb710d7c7bcec1f2c6070ef"
+  integrity sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A==
+
+buffer-xor@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/buffer-xor/-/buffer-xor-1.0.3.tgz#26e61ed1422fb70dd42e6e36729ed51d855fe8d9"
+  integrity sha1-JuYe0UIvtw3ULm42cp7VHYVf6Nk=
+
+buffer@^4.3.0:
+  version "4.9.2"
+  resolved "https://registry.yarnpkg.com/buffer/-/buffer-4.9.2.tgz#230ead344002988644841ab0244af8c44bbe3ef8"
+  integrity sha512-xq+q3SRMOxGivLhBNaUdC64hDTQwejJ+H0T/NB1XMtTVEwNTrfFF3gAxiyW0Bu/xWEGhjVKgUcMhCrUy2+uCWg==
+  dependencies:
+    base64-js "^1.0.2"
+    ieee754 "^1.1.4"
+    isarray "^1.0.0"
+
+buffer@^5.0.2:
+  version "5.4.3"
+  resolved "https://registry.yarnpkg.com/buffer/-/buffer-5.4.3.tgz#3fbc9c69eb713d323e3fc1a895eee0710c072115"
+  integrity sha512-zvj65TkFeIt3i6aj5bIvJDzjjQQGs4o/sNoezg1F1kYap9Nu2jcUdpwzRSJTHMMzG0H7bZkn4rNQpImhuxWX2A==
+  dependencies:
+    base64-js "^1.0.2"
+    ieee754 "^1.1.4"
+
+builtin-modules@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/builtin-modules/-/builtin-modules-3.1.0.tgz#aad97c15131eb76b65b50ef208e7584cd76a7484"
+  integrity sha512-k0KL0aWZuBt2lrxrcASWDfwOLMnodeQjodT/1SxEQAXsHANgo6ZC/VEaSEHCXt7aSTZ4/4H5LKa+tBXmW7Vtvw==
+
+builtin-status-codes@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/builtin-status-codes/-/builtin-status-codes-3.0.0.tgz#85982878e21b98e1c66425e03d0174788f569ee8"
+  integrity sha1-hZgoeOIbmOHGZCXgPQF0eI9Wnug=
+
+cache-base@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/cache-base/-/cache-base-1.0.1.tgz#0a7f46416831c8b662ee36fe4e7c59d76f666ab2"
+  integrity sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==
+  dependencies:
+    collection-visit "^1.0.0"
+    component-emitter "^1.2.1"
+    get-value "^2.0.6"
+    has-value "^1.0.0"
+    isobject "^3.0.1"
+    set-value "^2.0.0"
+    to-object-path "^0.3.0"
+    union-value "^1.0.0"
+    unset-value "^1.0.0"
+
+cached-path-relative@^1.0.0, cached-path-relative@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/cached-path-relative/-/cached-path-relative-1.0.2.tgz#a13df4196d26776220cc3356eb147a52dba2c6db"
+  integrity sha512-5r2GqsoEb4qMTTN9J+WzXfjov+hjxT+j3u5K+kIVNIwAd99DLCJE9pBIMP1qVeybV6JiijL385Oz0DcYxfbOIg==
+
+call-me-maybe@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/call-me-maybe/-/call-me-maybe-1.0.1.tgz#26d208ea89e37b5cbde60250a15f031c16a4d66b"
+  integrity sha1-JtII6onje1y95gJQoV8DHBak1ms=
+
+caller-callsite@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/caller-callsite/-/caller-callsite-2.0.0.tgz#847e0fce0a223750a9a027c54b33731ad3154134"
+  integrity sha1-hH4PzgoiN1CpoCfFSzNzGtMVQTQ=
+  dependencies:
+    callsites "^2.0.0"
+
+caller-path@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/caller-path/-/caller-path-2.0.0.tgz#468f83044e369ab2010fac5f06ceee15bb2cb1f4"
+  integrity sha1-Ro+DBE42mrIBD6xfBs7uFbsssfQ=
+  dependencies:
+    caller-callsite "^2.0.0"
+
+callsites@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/callsites/-/callsites-2.0.0.tgz#06eb84f00eea413da86affefacbffb36093b3c50"
+  integrity sha1-BuuE8A7qQT2oav/vrL/7Ngk7PFA=
+
+callsites@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73"
+  integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==
+
+camelcase@^5.0.0:
+  version "5.3.1"
+  resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-5.3.1.tgz#e3c9b31569e106811df242f715725a1f4c494320"
+  integrity sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==
+
+caniuse-api@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/caniuse-api/-/caniuse-api-3.0.0.tgz#5e4d90e2274961d46291997df599e3ed008ee4c0"
+  integrity sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==
+  dependencies:
+    browserslist "^4.0.0"
+    caniuse-lite "^1.0.0"
+    lodash.memoize "^4.1.2"
+    lodash.uniq "^4.5.0"
+
+caniuse-lite@^1.0.0, caniuse-lite@^1.0.30001015:
+  version "1.0.30001016"
+  resolved "https://registry.yarnpkg.com/caniuse-lite/-/caniuse-lite-1.0.30001016.tgz#16ea48d7d6e8caf3cad3295c2d746fe38c4e7f66"
+  integrity sha512-yYQ2QfotceRiH4U+h1Us86WJXtVHDmy3nEKIdYPsZCYnOV5/tMgGbmoIlrMzmh2VXlproqYtVaKeGDBkMZifFA==
+
+caseless@~0.12.0:
+  version "0.12.0"
+  resolved "https://registry.yarnpkg.com/caseless/-/caseless-0.12.0.tgz#1b681c21ff84033c826543090689420d187151dc"
+  integrity sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=
+
+chalk@^1.1.3:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/chalk/-/chalk-1.1.3.tgz#a8115c55e4a702fe4d150abd3872822a7e09fc98"
+  integrity sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=
+  dependencies:
+    ansi-styles "^2.2.1"
+    escape-string-regexp "^1.0.2"
+    has-ansi "^2.0.0"
+    strip-ansi "^3.0.0"
+    supports-color "^2.0.0"
+
+chalk@^2.0.0, chalk@^2.0.1, chalk@^2.1.0, chalk@^2.3.1, chalk@^2.4.1, chalk@^2.4.2:
+  version "2.4.2"
+  resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz#cd42541677a54333cf541a49108c1432b44c9424"
+  integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==
+  dependencies:
+    ansi-styles "^3.2.1"
+    escape-string-regexp "^1.0.5"
+    supports-color "^5.3.0"
+
+chardet@^0.7.0:
+  version "0.7.0"
+  resolved "https://registry.yarnpkg.com/chardet/-/chardet-0.7.0.tgz#90094849f0937f2eedc2425d0d28a9e5f0cbad9e"
+  integrity sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==
+
+chokidar@^2.1.5, chokidar@^2.1.8:
+  version "2.1.8"
+  resolved "https://registry.yarnpkg.com/chokidar/-/chokidar-2.1.8.tgz#804b3a7b6a99358c3c5c61e71d8728f041cff917"
+  integrity sha512-ZmZUazfOzf0Nve7duiCKD23PFSCs4JPoYyccjUFF3aQkQadqBhfzhjkwBH2mNOG9cTBwhamM37EIsIkZw3nRgg==
+  dependencies:
+    anymatch "^2.0.0"
+    async-each "^1.0.1"
+    braces "^2.3.2"
+    glob-parent "^3.1.0"
+    inherits "^2.0.3"
+    is-binary-path "^1.0.0"
+    is-glob "^4.0.0"
+    normalize-path "^3.0.0"
+    path-is-absolute "^1.0.0"
+    readdirp "^2.2.1"
+    upath "^1.1.1"
+  optionalDependencies:
+    fsevents "^1.2.7"
+
+cipher-base@^1.0.0, cipher-base@^1.0.1, cipher-base@^1.0.3:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/cipher-base/-/cipher-base-1.0.4.tgz#8760e4ecc272f4c363532f926d874aae2c1397de"
+  integrity sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f3cAypH+qe7YOrM1U2Q==
+  dependencies:
+    inherits "^2.0.1"
+    safe-buffer "^5.0.1"
+
+class-utils@^0.3.5:
+  version "0.3.6"
+  resolved "https://registry.yarnpkg.com/class-utils/-/class-utils-0.3.6.tgz#f93369ae8b9a7ce02fd41faad0ca83033190c463"
+  integrity sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==
+  dependencies:
+    arr-union "^3.1.0"
+    define-property "^0.2.5"
+    isobject "^3.0.0"
+    static-extend "^0.1.1"
+
+cli-cursor@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/cli-cursor/-/cli-cursor-2.1.0.tgz#b35dac376479facc3e94747d41d0d0f5238ffcb5"
+  integrity sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU=
+  dependencies:
+    restore-cursor "^2.0.0"
+
+cli-cursor@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/cli-cursor/-/cli-cursor-3.1.0.tgz#264305a7ae490d1d03bf0c9ba7c925d1753af307"
+  integrity sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==
+  dependencies:
+    restore-cursor "^3.1.0"
+
+cli-spinners@^1.1.0:
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/cli-spinners/-/cli-spinners-1.3.1.tgz#002c1990912d0d59580c93bd36c056de99e4259a"
+  integrity sha512-1QL4544moEsDVH9T/l6Cemov/37iv1RtoKf7NJ04A60+4MREXNfx/QvavbH6QoGdsD4N4Mwy49cmaINR/o2mdg==
+
+cli-width@^2.0.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/cli-width/-/cli-width-2.2.0.tgz#ff19ede8a9a5e579324147b0c11f0fbcbabed639"
+  integrity sha1-/xnt6Kml5XkyQUewwR8PvLq+1jk=
+
+cliui@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/cliui/-/cliui-5.0.0.tgz#deefcfdb2e800784aa34f46fa08e06851c7bbbc5"
+  integrity sha512-PYeGSEmmHM6zvoef2w8TPzlrnNpXIjTipYK780YswmIP9vjxmd6Y2a3CB2Ks6/AU8NHjZugXvo8w3oWM2qnwXA==
+  dependencies:
+    string-width "^3.1.0"
+    strip-ansi "^5.2.0"
+    wrap-ansi "^5.1.0"
+
+clone@^1.0.2:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/clone/-/clone-1.0.4.tgz#da309cc263df15994c688ca902179ca3c7cd7c7e"
+  integrity sha1-2jCcwmPfFZlMaIypAheco8fNfH4=
+
+clone@^2.1.1:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/clone/-/clone-2.1.2.tgz#1b7f4b9f591f1e8f83670401600345a02887435f"
+  integrity sha1-G39Ln1kfHo+DZwQBYANFoCiHQ18=
+
+coa@^2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/coa/-/coa-2.0.2.tgz#43f6c21151b4ef2bf57187db0d73de229e3e7ec3"
+  integrity sha512-q5/jG+YQnSy4nRTV4F7lPepBJZ8qBNJJDBuJdoejDyLXgmL7IEo+Le2JDZudFTFt7mrCqIRaSjws4ygRCTCAXA==
+  dependencies:
+    "@types/q" "^1.5.1"
+    chalk "^2.4.1"
+    q "^1.1.2"
+
+collection-visit@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/collection-visit/-/collection-visit-1.0.0.tgz#4bc0373c164bc3291b4d368c829cf1a80a59dca0"
+  integrity sha1-S8A3PBZLwykbTTaMgpzxqApZ3KA=
+  dependencies:
+    map-visit "^1.0.0"
+    object-visit "^1.0.0"
+
+color-convert@^1.9.0, color-convert@^1.9.1:
+  version "1.9.3"
+  resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.3.tgz#bb71850690e1f136567de629d2d5471deda4c1e8"
+  integrity sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==
+  dependencies:
+    color-name "1.1.3"
+
+color-name@1.1.3:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25"
+  integrity sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=
+
+color-name@^1.0.0:
+  version "1.1.4"
+  resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
+  integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
+
+color-string@^1.5.2:
+  version "1.5.3"
+  resolved "https://registry.yarnpkg.com/color-string/-/color-string-1.5.3.tgz#c9bbc5f01b58b5492f3d6857459cb6590ce204cc"
+  integrity sha512-dC2C5qeWoYkxki5UAXapdjqO672AM4vZuPGRQfO8b5HKuKGBbKWpITyDYN7TOFKvRW7kOgAn3746clDBMDJyQw==
+  dependencies:
+    color-name "^1.0.0"
+    simple-swizzle "^0.2.2"
+
+color@^3.0.0:
+  version "3.1.2"
+  resolved "https://registry.yarnpkg.com/color/-/color-3.1.2.tgz#68148e7f85d41ad7649c5fa8c8106f098d229e10"
+  integrity sha512-vXTJhHebByxZn3lDvDJYw4lR5+uB3vuoHsuYA5AKuxRVn5wzzIfQKGLBmgdVRHKTJYeK5rvJcHnrd0Li49CFpg==
+  dependencies:
+    color-convert "^1.9.1"
+    color-string "^1.5.2"
+
+combine-source-map@^0.8.0, combine-source-map@~0.8.0:
+  version "0.8.0"
+  resolved "https://registry.yarnpkg.com/combine-source-map/-/combine-source-map-0.8.0.tgz#a58d0df042c186fcf822a8e8015f5450d2d79a8b"
+  integrity sha1-pY0N8ELBhvz4IqjoAV9UUNLXmos=
+  dependencies:
+    convert-source-map "~1.1.0"
+    inline-source-map "~0.6.0"
+    lodash.memoize "~3.0.3"
+    source-map "~0.5.3"
+
+combined-stream@^1.0.6, combined-stream@~1.0.6:
+  version "1.0.8"
+  resolved "https://registry.yarnpkg.com/combined-stream/-/combined-stream-1.0.8.tgz#c3d45a8b34fd730631a110a8a2520682b31d5a7f"
+  integrity sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==
+  dependencies:
+    delayed-stream "~1.0.0"
+
+command-exists@^1.2.6:
+  version "1.2.8"
+  resolved "https://registry.yarnpkg.com/command-exists/-/command-exists-1.2.8.tgz#715acefdd1223b9c9b37110a149c6392c2852291"
+  integrity sha512-PM54PkseWbiiD/mMsbvW351/u+dafwTJ0ye2qB60G1aGQP9j3xK2gmMDc+R34L3nDtx4qMCitXT75mkbkGJDLw==
+
+commander@^2.11.0, commander@^2.19.0, commander@^2.20.0:
+  version "2.20.3"
+  resolved "https://registry.yarnpkg.com/commander/-/commander-2.20.3.tgz#fd485e84c03eb4881c20722ba48035e8531aeb33"
+  integrity sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==
+
+commander@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/commander/-/commander-4.0.1.tgz#b67622721785993182e807f4883633e6401ba53c"
+  integrity sha512-IPF4ouhCP+qdlcmCedhxX4xiGBPyigb8v5NeUp+0LyhwLgxMqyp3S0vl7TAPfS/hiP7FC3caI/PB9lTmP8r1NA==
+
+component-emitter@^1.2.1:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/component-emitter/-/component-emitter-1.3.0.tgz#16e4070fba8ae29b679f2215853ee181ab2eabc0"
+  integrity sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==
+
+concat-map@0.0.1:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
+  integrity sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=
+
+concat-stream@^1.6.0, concat-stream@^1.6.1, concat-stream@~1.6.0:
+  version "1.6.2"
+  resolved "https://registry.yarnpkg.com/concat-stream/-/concat-stream-1.6.2.tgz#904bdf194cd3122fc675c77fc4ac3d4ff0fd1a34"
+  integrity sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==
+  dependencies:
+    buffer-from "^1.0.0"
+    inherits "^2.0.3"
+    readable-stream "^2.2.2"
+    typedarray "^0.0.6"
+
+console-browserify@^1.1.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/console-browserify/-/console-browserify-1.2.0.tgz#67063cef57ceb6cf4993a2ab3a55840ae8c49336"
+  integrity sha512-ZMkYO/LkF17QvCPqM0gxw8yUzigAOZOSWSHg91FH6orS7vcEj5dVZTidN2fQ14yBSdg97RqhSNwLUXInd52OTA==
+
+constants-browserify@^1.0.0, constants-browserify@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/constants-browserify/-/constants-browserify-1.0.0.tgz#c20b96d8c617748aaf1c16021760cd27fcb8cb75"
+  integrity sha1-wguW2MYXdIqvHBYCF2DNJ/y4y3U=
+
+convert-source-map@^1.1.0, convert-source-map@^1.5.1, convert-source-map@^1.7.0:
+  version "1.7.0"
+  resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-1.7.0.tgz#17a2cb882d7f77d3490585e2ce6c524424a3a442"
+  integrity sha512-4FJkXzKXEDB1snCFZlLP4gpC3JILicCpGbzG9f9G7tGqGCzETQ2hWPrcinA9oU4wtf2biUaEH5065UnMeR33oA==
+  dependencies:
+    safe-buffer "~5.1.1"
+
+convert-source-map@~1.1.0:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/convert-source-map/-/convert-source-map-1.1.3.tgz#4829c877e9fe49b3161f3bf3673888e204699860"
+  integrity sha1-SCnId+n+SbMWHzvzZziI4gRpmGA=
+
+copy-descriptor@^0.1.0:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/copy-descriptor/-/copy-descriptor-0.1.1.tgz#676f6eb3c39997c2ee1ac3a924fd6124748f578d"
+  integrity sha1-Z29us8OZl8LuGsOpJP1hJHSPV40=
+
+core-js-compat@^3.4.7:
+  version "3.5.0"
+  resolved "https://registry.yarnpkg.com/core-js-compat/-/core-js-compat-3.5.0.tgz#5a11a619a9e9dd2dcf1c742b2060bc4a2143e5b6"
+  integrity sha512-E7iJB72svRjJTnm9HDvujzNVMCm3ZcDYEedkJ/sDTNsy/0yooCd9Cg7GSzE7b4e0LfIkjijdB1tqg0pGwxWeWg==
+  dependencies:
+    browserslist "^4.8.2"
+    semver "^6.3.0"
+
+core-js@^2.4.0, core-js@^2.6.5:
+  version "2.6.11"
+  resolved "https://registry.yarnpkg.com/core-js/-/core-js-2.6.11.tgz#38831469f9922bded8ee21c9dc46985e0399308c"
+  integrity sha512-5wjnpaT/3dV+XB4borEsnAYQchn00XSgTAWKDkEqv+K8KevjbzmofK6hfJ9TZIlpj2N0xQpazy7PiRQiWHqzWg==
+
+core-util-is@1.0.2, core-util-is@~1.0.0:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7"
+  integrity sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=
+
+cosmiconfig@^5.0.0:
+  version "5.2.1"
+  resolved "https://registry.yarnpkg.com/cosmiconfig/-/cosmiconfig-5.2.1.tgz#040f726809c591e77a17c0a3626ca45b4f168b1a"
+  integrity sha512-H65gsXo1SKjf8zmrJ67eJk8aIRKV5ff2D4uKZIBZShbhGSpEmsQOPW/SKMKYhSTrqR7ufy6RP69rPogdaPh/kA==
+  dependencies:
+    import-fresh "^2.0.0"
+    is-directory "^0.3.1"
+    js-yaml "^3.13.1"
+    parse-json "^4.0.0"
+
+create-ecdh@^4.0.0:
+  version "4.0.3"
+  resolved "https://registry.yarnpkg.com/create-ecdh/-/create-ecdh-4.0.3.tgz#c9111b6f33045c4697f144787f9254cdc77c45ff"
+  integrity sha512-GbEHQPMOswGpKXM9kCWVrremUcBmjteUaQ01T9rkKCPDXfUHX0IoP9LpHYo2NPFampa4e+/pFDc3jQdxrxQLaw==
+  dependencies:
+    bn.js "^4.1.0"
+    elliptic "^6.0.0"
+
+create-hash@^1.1.0, create-hash@^1.1.2:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/create-hash/-/create-hash-1.2.0.tgz#889078af11a63756bcfb59bd221996be3a9ef196"
+  integrity sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==
+  dependencies:
+    cipher-base "^1.0.1"
+    inherits "^2.0.1"
+    md5.js "^1.3.4"
+    ripemd160 "^2.0.1"
+    sha.js "^2.4.0"
+
+create-hmac@^1.1.0, create-hmac@^1.1.2, create-hmac@^1.1.4:
+  version "1.1.7"
+  resolved "https://registry.yarnpkg.com/create-hmac/-/create-hmac-1.1.7.tgz#69170c78b3ab957147b2b8b04572e47ead2243ff"
+  integrity sha512-MJG9liiZ+ogc4TzUwuvbER1JRdgvUFSB5+VR/g5h82fGaIRWMWddtKBHi7/sVhfjQZ6SehlyhvQYrcYkaUIpLg==
+  dependencies:
+    cipher-base "^1.0.3"
+    create-hash "^1.1.0"
+    inherits "^2.0.1"
+    ripemd160 "^2.0.0"
+    safe-buffer "^5.0.1"
+    sha.js "^2.4.8"
+
+cross-spawn@^6.0.4, cross-spawn@^6.0.5:
+  version "6.0.5"
+  resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-6.0.5.tgz#4a5ec7c64dfae22c3a14124dbacdee846d80cbc4"
+  integrity sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==
+  dependencies:
+    nice-try "^1.0.4"
+    path-key "^2.0.1"
+    semver "^5.5.0"
+    shebang-command "^1.2.0"
+    which "^1.2.9"
+
+crypto-browserify@^3.0.0, crypto-browserify@^3.11.0:
+  version "3.12.0"
+  resolved "https://registry.yarnpkg.com/crypto-browserify/-/crypto-browserify-3.12.0.tgz#396cf9f3137f03e4b8e532c58f698254e00f80ec"
+  integrity sha512-fz4spIh+znjO2VjL+IdhEpRJ3YN6sMzITSBijk6FK2UvTqruSQW+/cCZTSNsMiZNvUeq0CqurF+dAbyiGOY6Wg==
+  dependencies:
+    browserify-cipher "^1.0.0"
+    browserify-sign "^4.0.0"
+    create-ecdh "^4.0.0"
+    create-hash "^1.1.0"
+    create-hmac "^1.1.0"
+    diffie-hellman "^5.0.0"
+    inherits "^2.0.1"
+    pbkdf2 "^3.0.3"
+    public-encrypt "^4.0.0"
+    randombytes "^2.0.0"
+    randomfill "^1.0.3"
+
+css-color-names@0.0.4, css-color-names@^0.0.4:
+  version "0.0.4"
+  resolved "https://registry.yarnpkg.com/css-color-names/-/css-color-names-0.0.4.tgz#808adc2e79cf84738069b646cb20ec27beb629e0"
+  integrity sha1-gIrcLnnPhHOAabZGyyDsJ762KeA=
+
+css-declaration-sorter@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/css-declaration-sorter/-/css-declaration-sorter-4.0.1.tgz#c198940f63a76d7e36c1e71018b001721054cb22"
+  integrity sha512-BcxQSKTSEEQUftYpBVnsH4SF05NTuBokb19/sBt6asXGKZ/6VP7PLG1CBCkFDYOnhXhPh0jMhO6xZ71oYHXHBA==
+  dependencies:
+    postcss "^7.0.1"
+    timsort "^0.3.0"
+
+css-modules-loader-core@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/css-modules-loader-core/-/css-modules-loader-core-1.1.0.tgz#5908668294a1becd261ae0a4ce21b0b551f21d16"
+  integrity sha1-WQhmgpShvs0mGuCkziGwtVHyHRY=
+  dependencies:
+    icss-replace-symbols "1.1.0"
+    postcss "6.0.1"
+    postcss-modules-extract-imports "1.1.0"
+    postcss-modules-local-by-default "1.2.0"
+    postcss-modules-scope "1.1.0"
+    postcss-modules-values "1.3.0"
+
+css-select-base-adapter@^0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/css-select-base-adapter/-/css-select-base-adapter-0.1.1.tgz#3b2ff4972cc362ab88561507a95408a1432135d7"
+  integrity sha512-jQVeeRG70QI08vSTwf1jHxp74JoZsr2XSgETae8/xC8ovSnL2WF87GTLO86Sbwdt2lK4Umg4HnnwMO4YF3Ce7w==
+
+css-select@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/css-select/-/css-select-2.1.0.tgz#6a34653356635934a81baca68d0255432105dbef"
+  integrity sha512-Dqk7LQKpwLoH3VovzZnkzegqNSuAziQyNZUcrdDM401iY+R5NkGBXGmtO05/yaXQziALuPogeG0b7UAgjnTJTQ==
+  dependencies:
+    boolbase "^1.0.0"
+    css-what "^3.2.1"
+    domutils "^1.7.0"
+    nth-check "^1.0.2"
+
+css-selector-tokenizer@^0.7.0:
+  version "0.7.1"
+  resolved "https://registry.yarnpkg.com/css-selector-tokenizer/-/css-selector-tokenizer-0.7.1.tgz#a177271a8bca5019172f4f891fc6eed9cbf68d5d"
+  integrity sha512-xYL0AMZJ4gFzJQsHUKa5jiWWi2vH77WVNg7JYRyewwj6oPh4yb/y6Y9ZCw9dsj/9UauMhtuxR+ogQd//EdEVNA==
+  dependencies:
+    cssesc "^0.1.0"
+    fastparse "^1.1.1"
+    regexpu-core "^1.0.0"
+
+css-tree@1.0.0-alpha.37:
+  version "1.0.0-alpha.37"
+  resolved "https://registry.yarnpkg.com/css-tree/-/css-tree-1.0.0-alpha.37.tgz#98bebd62c4c1d9f960ec340cf9f7522e30709a22"
+  integrity sha512-DMxWJg0rnz7UgxKT0Q1HU/L9BeJI0M6ksor0OgqOnF+aRCDWg/N2641HmVyU9KVIu0OVVWOb2IpC9A+BJRnejg==
+  dependencies:
+    mdn-data "2.0.4"
+    source-map "^0.6.1"
+
+css-unit-converter@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/css-unit-converter/-/css-unit-converter-1.1.1.tgz#d9b9281adcfd8ced935bdbaba83786897f64e996"
+  integrity sha1-2bkoGtz9jO2TW9urqDeGiX9k6ZY=
+
+css-what@^3.2.1:
+  version "3.2.1"
+  resolved "https://registry.yarnpkg.com/css-what/-/css-what-3.2.1.tgz#f4a8f12421064621b456755e34a03a2c22df5da1"
+  integrity sha512-WwOrosiQTvyms+Ti5ZC5vGEK0Vod3FTt1ca+payZqvKuGJF+dq7bG63DstxtN0dpm6FxY27a/zS3Wten+gEtGw==
+
+cssesc@^0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/cssesc/-/cssesc-0.1.0.tgz#c814903e45623371a0477b40109aaafbeeaddbb4"
+  integrity sha1-yBSQPkViM3GgR3tAEJqq++6t27Q=
+
+cssesc@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/cssesc/-/cssesc-2.0.0.tgz#3b13bd1bb1cb36e1bcb5a4dcd27f54c5dcb35703"
+  integrity sha512-MsCAG1z9lPdoO/IUMLSBWBSVxVtJ1395VGIQ+Fc2gNdkQ1hNDnQdw3YhA71WJCBW1vdwA0cAnk/DnW6bqoEUYg==
+
+cssesc@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/cssesc/-/cssesc-3.0.0.tgz#37741919903b868565e1c09ea747445cd18983ee"
+  integrity sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==
+
+cssnano-preset-default@^4.0.7:
+  version "4.0.7"
+  resolved "https://registry.yarnpkg.com/cssnano-preset-default/-/cssnano-preset-default-4.0.7.tgz#51ec662ccfca0f88b396dcd9679cdb931be17f76"
+  integrity sha512-x0YHHx2h6p0fCl1zY9L9roD7rnlltugGu7zXSKQx6k2rYw0Hi3IqxcoAGF7u9Q5w1nt7vK0ulxV8Lo+EvllGsA==
+  dependencies:
+    css-declaration-sorter "^4.0.1"
+    cssnano-util-raw-cache "^4.0.1"
+    postcss "^7.0.0"
+    postcss-calc "^7.0.1"
+    postcss-colormin "^4.0.3"
+    postcss-convert-values "^4.0.1"
+    postcss-discard-comments "^4.0.2"
+    postcss-discard-duplicates "^4.0.2"
+    postcss-discard-empty "^4.0.1"
+    postcss-discard-overridden "^4.0.1"
+    postcss-merge-longhand "^4.0.11"
+    postcss-merge-rules "^4.0.3"
+    postcss-minify-font-values "^4.0.2"
+    postcss-minify-gradients "^4.0.2"
+    postcss-minify-params "^4.0.2"
+    postcss-minify-selectors "^4.0.2"
+    postcss-normalize-charset "^4.0.1"
+    postcss-normalize-display-values "^4.0.2"
+    postcss-normalize-positions "^4.0.2"
+    postcss-normalize-repeat-style "^4.0.2"
+    postcss-normalize-string "^4.0.2"
+    postcss-normalize-timing-functions "^4.0.2"
+    postcss-normalize-unicode "^4.0.1"
+    postcss-normalize-url "^4.0.1"
+    postcss-normalize-whitespace "^4.0.2"
+    postcss-ordered-values "^4.1.2"
+    postcss-reduce-initial "^4.0.3"
+    postcss-reduce-transforms "^4.0.2"
+    postcss-svgo "^4.0.2"
+    postcss-unique-selectors "^4.0.1"
+
+cssnano-util-get-arguments@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/cssnano-util-get-arguments/-/cssnano-util-get-arguments-4.0.0.tgz#ed3a08299f21d75741b20f3b81f194ed49cc150f"
+  integrity sha1-7ToIKZ8h11dBsg87gfGU7UnMFQ8=
+
+cssnano-util-get-match@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/cssnano-util-get-match/-/cssnano-util-get-match-4.0.0.tgz#c0e4ca07f5386bb17ec5e52250b4f5961365156d"
+  integrity sha1-wOTKB/U4a7F+xeUiULT1lhNlFW0=
+
+cssnano-util-raw-cache@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/cssnano-util-raw-cache/-/cssnano-util-raw-cache-4.0.1.tgz#b26d5fd5f72a11dfe7a7846fb4c67260f96bf282"
+  integrity sha512-qLuYtWK2b2Dy55I8ZX3ky1Z16WYsx544Q0UWViebptpwn/xDBmog2TLg4f+DBMg1rJ6JDWtn96WHbOKDWt1WQA==
+  dependencies:
+    postcss "^7.0.0"
+
+cssnano-util-same-parent@^4.0.0:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/cssnano-util-same-parent/-/cssnano-util-same-parent-4.0.1.tgz#574082fb2859d2db433855835d9a8456ea18bbf3"
+  integrity sha512-WcKx5OY+KoSIAxBW6UBBRay1U6vkYheCdjyVNDm85zt5K9mHoGOfsOsqIszfAqrQQFIIKgjh2+FDgIj/zsl21Q==
+
+cssnano@^4.0.0, cssnano@^4.1.10:
+  version "4.1.10"
+  resolved "https://registry.yarnpkg.com/cssnano/-/cssnano-4.1.10.tgz#0ac41f0b13d13d465487e111b778d42da631b8b2"
+  integrity sha512-5wny+F6H4/8RgNlaqab4ktc3e0/blKutmq8yNlBFXA//nSFFAqAngjNVRzUvCgYROULmZZUoosL/KSoZo5aUaQ==
+  dependencies:
+    cosmiconfig "^5.0.0"
+    cssnano-preset-default "^4.0.7"
+    is-resolvable "^1.0.0"
+    postcss "^7.0.0"
+
+csso@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/csso/-/csso-4.0.2.tgz#e5f81ab3a56b8eefb7f0092ce7279329f454de3d"
+  integrity sha512-kS7/oeNVXkHWxby5tHVxlhjizRCSv8QdU7hB2FpdAibDU8FjTAolhNjKNTiLzXtUrKT6HwClE81yXwEk1309wg==
+  dependencies:
+    css-tree "1.0.0-alpha.37"
+
+cssom@0.3.x, cssom@^0.3.4:
+  version "0.3.8"
+  resolved "https://registry.yarnpkg.com/cssom/-/cssom-0.3.8.tgz#9f1276f5b2b463f2114d3f2c75250af8c1a36f4a"
+  integrity sha512-b0tGHbfegbhPJpxpiBPU2sCkigAqtM9O121le6bbOlgyV+NyGyCmVfJ6QW9eRjz8CpNfWEOYBIMIGRYkLwsIYg==
+
+cssstyle@^1.1.1:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/cssstyle/-/cssstyle-1.4.0.tgz#9d31328229d3c565c61e586b02041a28fccdccf1"
+  integrity sha512-GBrLZYZ4X4x6/QEoBnIrqb8B/f5l4+8me2dkom/j1Gtbxy0kBv6OGzKuAsGM75bkGwGAFkt56Iwg28S3XTZgSA==
+  dependencies:
+    cssom "0.3.x"
+
+dash-ast@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/dash-ast/-/dash-ast-1.0.0.tgz#12029ba5fb2f8aa6f0a861795b23c1b4b6c27d37"
+  integrity sha512-Vy4dx7gquTeMcQR/hDkYLGUnwVil6vk4FOOct+djUnHOUWt+zJPJAaRIXaAFkPXtJjvlY7o3rfRu0/3hpnwoUA==
+
+dashdash@^1.12.0:
+  version "1.14.1"
+  resolved "https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0"
+  integrity sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=
+  dependencies:
+    assert-plus "^1.0.0"
+
+data-urls@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/data-urls/-/data-urls-1.1.0.tgz#15ee0582baa5e22bb59c77140da8f9c76963bbfe"
+  integrity sha512-YTWYI9se1P55u58gL5GkQHW4P6VJBJ5iBT+B5a7i2Tjadhv52paJG0qHX4A0OR6/t52odI64KP2YvFpkDOi3eQ==
+  dependencies:
+    abab "^2.0.0"
+    whatwg-mimetype "^2.2.0"
+    whatwg-url "^7.0.0"
+
+deasync@^0.1.14:
+  version "0.1.16"
+  resolved "https://registry.yarnpkg.com/deasync/-/deasync-0.1.16.tgz#44195eb4330fc9fc487f31ec614cbbdd57633897"
+  integrity sha512-FNCjDwxGbhK+Ye8fmE3p2ahIjERhkbuwX+WVGZPtSbAh9LfE1Saa2p0l+f0t11sIlk9D8W+Bym+cDp6r5yghAQ==
+  dependencies:
+    bindings "^1.5.0"
+    node-addon-api "^1.7.1"
+
+debug@2.6.9, debug@^2.2.0, debug@^2.3.3:
+  version "2.6.9"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f"
+  integrity sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==
+  dependencies:
+    ms "2.0.0"
+
+debug@^4.0.1, debug@^4.1.0:
+  version "4.1.1"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-4.1.1.tgz#3b72260255109c6b589cee050f1d516139664791"
+  integrity sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==
+  dependencies:
+    ms "^2.1.1"
+
+decamelize@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290"
+  integrity sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=
+
+decode-uri-component@^0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/decode-uri-component/-/decode-uri-component-0.2.0.tgz#eb3913333458775cb84cd1a1fae062106bb87545"
+  integrity sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU=
+
+deep-is@~0.1.3:
+  version "0.1.3"
+  resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.3.tgz#b369d6fb5dbc13eecf524f91b070feedc357cf34"
+  integrity sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=
+
+defaults@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/defaults/-/defaults-1.0.3.tgz#c656051e9817d9ff08ed881477f3fe4019f3ef7d"
+  integrity sha1-xlYFHpgX2f8I7YgUd/P+QBnz730=
+  dependencies:
+    clone "^1.0.2"
+
+define-properties@^1.1.2, define-properties@^1.1.3:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/define-properties/-/define-properties-1.1.3.tgz#cf88da6cbee26fe6db7094f61d870cbd84cee9f1"
+  integrity sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==
+  dependencies:
+    object-keys "^1.0.12"
+
+define-property@^0.2.5:
+  version "0.2.5"
+  resolved "https://registry.yarnpkg.com/define-property/-/define-property-0.2.5.tgz#c35b1ef918ec3c990f9a5bc57be04aacec5c8116"
+  integrity sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=
+  dependencies:
+    is-descriptor "^0.1.0"
+
+define-property@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/define-property/-/define-property-1.0.0.tgz#769ebaaf3f4a63aad3af9e8d304c9bbe79bfb0e6"
+  integrity sha1-dp66rz9KY6rTr56NMEybvnm/sOY=
+  dependencies:
+    is-descriptor "^1.0.0"
+
+define-property@^2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/define-property/-/define-property-2.0.2.tgz#d459689e8d654ba77e02a817f8710d702cb16e9d"
+  integrity sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==
+  dependencies:
+    is-descriptor "^1.0.2"
+    isobject "^3.0.1"
+
+defined@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/defined/-/defined-1.0.0.tgz#c98d9bcef75674188e110969151199e39b1fa693"
+  integrity sha1-yY2bzvdWdBiOEQlpFRGZ45sfppM=
+
+delayed-stream@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/delayed-stream/-/delayed-stream-1.0.0.tgz#df3ae199acadfb7d440aaae0b29e2272b24ec619"
+  integrity sha1-3zrhmayt+31ECqrgsp4icrJOxhk=
+
+depd@~1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/depd/-/depd-1.1.2.tgz#9bcd52e14c097763e749b274c4346ed2e560b5a9"
+  integrity sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=
+
+deps-sort@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/deps-sort/-/deps-sort-2.0.1.tgz#9dfdc876d2bcec3386b6829ac52162cda9fa208d"
+  integrity sha512-1orqXQr5po+3KI6kQb9A4jnXT1PBwggGl2d7Sq2xsnOeI9GPcE/tGcF9UiSZtZBM7MukY4cAh7MemS6tZYipfw==
+  dependencies:
+    JSONStream "^1.0.3"
+    shasum-object "^1.0.0"
+    subarg "^1.0.0"
+    through2 "^2.0.0"
+
+des.js@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/des.js/-/des.js-1.0.1.tgz#5382142e1bdc53f85d86d53e5f4aa7deb91e0843"
+  integrity sha512-Q0I4pfFrv2VPd34/vfLrFOoRmlYj3OV50i7fskps1jZWK1kApMWWT9G6RRUeYedLcBDIhnSDaUvJMb3AhUlaEA==
+  dependencies:
+    inherits "^2.0.1"
+    minimalistic-assert "^1.0.0"
+
+destroy@~1.0.4:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/destroy/-/destroy-1.0.4.tgz#978857442c44749e4206613e37946205826abd80"
+  integrity sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=
+
+detective@^5.2.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/detective/-/detective-5.2.0.tgz#feb2a77e85b904ecdea459ad897cc90a99bd2a7b"
+  integrity sha512-6SsIx+nUUbuK0EthKjv0zrdnajCCXVYGmbYYiYjFVpzcjwEs/JMDZ8tPRG29J/HhN56t3GJp2cGSWDRjjot8Pg==
+  dependencies:
+    acorn-node "^1.6.1"
+    defined "^1.0.0"
+    minimist "^1.1.1"
+
+diffie-hellman@^5.0.0:
+  version "5.0.3"
+  resolved "https://registry.yarnpkg.com/diffie-hellman/-/diffie-hellman-5.0.3.tgz#40e8ee98f55a2149607146921c63e1ae5f3d2875"
+  integrity sha512-kqag/Nl+f3GwyK25fhUMYj81BUOrZ9IuJsjIcDE5icNM9FJHAVm3VcUDxdLPoQtTuUylWm6ZIknYJwwaPxsUzg==
+  dependencies:
+    bn.js "^4.1.0"
+    miller-rabin "^4.0.0"
+    randombytes "^2.0.0"
+
+doctrine@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-3.0.0.tgz#addebead72a6574db783639dc87a121773973961"
+  integrity sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==
+  dependencies:
+    esutils "^2.0.2"
+
+dom-serializer@0:
+  version "0.2.2"
+  resolved "https://registry.yarnpkg.com/dom-serializer/-/dom-serializer-0.2.2.tgz#1afb81f533717175d478655debc5e332d9f9bb51"
+  integrity sha512-2/xPb3ORsQ42nHYiSunXkDjPLBaEj/xTwUO4B7XCZQTRk7EBtTOPaygh10YAAh2OI1Qrp6NWfpAhzswj0ydt9g==
+  dependencies:
+    domelementtype "^2.0.1"
+    entities "^2.0.0"
+
+domain-browser@^1.1.1, domain-browser@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/domain-browser/-/domain-browser-1.2.0.tgz#3d31f50191a6749dd1375a7f522e823d42e54eda"
+  integrity sha512-jnjyiM6eRyZl2H+W8Q/zLMA481hzi0eszAaBUzIVnmYVDBbnLxVNnfu1HgEBvCbL+71FrxMl3E6lpKH7Ge3OXA==
+
+domelementtype@1, domelementtype@^1.3.1:
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/domelementtype/-/domelementtype-1.3.1.tgz#d048c44b37b0d10a7f2a3d5fee3f4333d790481f"
+  integrity sha512-BSKB+TSpMpFI/HOxCNr1O8aMOTZ8hT3pM3GQ0w/mWRmkhEDSFJkkyzz4XQsBV44BChwGkrDfMyjVD0eA2aFV3w==
+
+domelementtype@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/domelementtype/-/domelementtype-2.0.1.tgz#1f8bdfe91f5a78063274e803b4bdcedf6e94f94d"
+  integrity sha512-5HOHUDsYZWV8FGWN0Njbr/Rn7f/eWSQi1v7+HsUVwXgn8nWWlL64zKDkS0n8ZmQ3mlWOMuXOnR+7Nx/5tMO5AQ==
+
+domexception@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/domexception/-/domexception-1.0.1.tgz#937442644ca6a31261ef36e3ec677fe805582c90"
+  integrity sha512-raigMkn7CJNNo6Ihro1fzG7wr3fHuYVytzquZKX5n0yizGsTcYgzdIUwj1X9pK0VvjeihV+XiclP+DjwbsSKug==
+  dependencies:
+    webidl-conversions "^4.0.2"
+
+domhandler@^2.3.0:
+  version "2.4.2"
+  resolved "https://registry.yarnpkg.com/domhandler/-/domhandler-2.4.2.tgz#8805097e933d65e85546f726d60f5eb88b44f803"
+  integrity sha512-JiK04h0Ht5u/80fdLMCEmV4zkNh2BcoMFBmZ/91WtYZ8qVXSKjiw7fXMgFPnHcSZgOo3XdinHvmnDUeMf5R4wA==
+  dependencies:
+    domelementtype "1"
+
+domutils@^1.5.1, domutils@^1.7.0:
+  version "1.7.0"
+  resolved "https://registry.yarnpkg.com/domutils/-/domutils-1.7.0.tgz#56ea341e834e06e6748af7a1cb25da67ea9f8c2a"
+  integrity sha512-Lgd2XcJ/NjEw+7tFvfKxOzCYKZsdct5lczQ2ZaQY8Djz7pfAD3Gbp8ySJWtreII/vDlMVmxwa6pHmdxIYgttDg==
+  dependencies:
+    dom-serializer "0"
+    domelementtype "1"
+
+dot-prop@^4.1.1:
+  version "4.2.0"
+  resolved "https://registry.yarnpkg.com/dot-prop/-/dot-prop-4.2.0.tgz#1f19e0c2e1aa0e32797c49799f2837ac6af69c57"
+  integrity sha512-tUMXrxlExSW6U2EXiiKGSBVdYgtV8qlHL+C10TsW4PURY/ic+eaysnSkwB4kA/mBlCyy/IKDJ+Lc3wbWeaXtuQ==
+  dependencies:
+    is-obj "^1.0.0"
+
+dotenv-expand@^5.1.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/dotenv-expand/-/dotenv-expand-5.1.0.tgz#3fbaf020bfd794884072ea26b1e9791d45a629f0"
+  integrity sha512-YXQl1DSa4/PQyRfgrv6aoNjhasp/p4qs9FjJ4q4cQk+8m4r6k4ZSiEyytKG8f8W9gi8WsQtIObNmKd+tMzNTmA==
+
+dotenv@^5.0.0:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/dotenv/-/dotenv-5.0.1.tgz#a5317459bd3d79ab88cff6e44057a6a3fbb1fcef"
+  integrity sha512-4As8uPrjfwb7VXC+WnLCbXK7y+Ueb2B3zgNCePYfhxS1PYeaO1YTeplffTEcbfLhvFNGLAz90VvJs9yomG7bow==
+
+duplexer2@^0.1.2, duplexer2@~0.1.0, duplexer2@~0.1.2, duplexer2@~0.1.4:
+  version "0.1.4"
+  resolved "https://registry.yarnpkg.com/duplexer2/-/duplexer2-0.1.4.tgz#8b12dab878c0d69e3e7891051662a32fc6bddcc1"
+  integrity sha1-ixLauHjA1p4+eJEFFmKjL8a93ME=
+  dependencies:
+    readable-stream "^2.0.2"
+
+ecc-jsbn@~0.1.1:
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz#3a83a904e54353287874c564b7549386849a98c9"
+  integrity sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=
+  dependencies:
+    jsbn "~0.1.0"
+    safer-buffer "^2.1.0"
+
+ee-first@1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/ee-first/-/ee-first-1.1.1.tgz#590c61156b0ae2f4f0255732a158b266bc56b21d"
+  integrity sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=
+
+electron-to-chromium@^1.3.322:
+  version "1.3.322"
+  resolved "https://registry.yarnpkg.com/electron-to-chromium/-/electron-to-chromium-1.3.322.tgz#a6f7e1c79025c2b05838e8e344f6e89eb83213a8"
+  integrity sha512-Tc8JQEfGQ1MzfSzI/bTlSr7btJv/FFO7Yh6tanqVmIWOuNCu6/D1MilIEgLtmWqIrsv+o4IjpLAhgMBr/ncNAA==
+
+elliptic@^6.0.0:
+  version "6.5.2"
+  resolved "https://registry.yarnpkg.com/elliptic/-/elliptic-6.5.2.tgz#05c5678d7173c049d8ca433552224a495d0e3762"
+  integrity sha512-f4x70okzZbIQl/NSRLkI/+tteV/9WqL98zx+SQ69KbXxmVrmjwsNUPn/gYJJ0sHvEak24cZgHIPegRePAtA/xw==
+  dependencies:
+    bn.js "^4.4.0"
+    brorand "^1.0.1"
+    hash.js "^1.0.0"
+    hmac-drbg "^1.0.0"
+    inherits "^2.0.1"
+    minimalistic-assert "^1.0.0"
+    minimalistic-crypto-utils "^1.0.0"
+
+emoji-regex@^7.0.1:
+  version "7.0.3"
+  resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-7.0.3.tgz#933a04052860c85e83c122479c4748a8e4c72156"
+  integrity sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA==
+
+emoji-regex@^8.0.0:
+  version "8.0.0"
+  resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
+  integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
+
+encodeurl@~1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/encodeurl/-/encodeurl-1.0.2.tgz#ad3ff4c86ec2d029322f5a02c3a9a606c95b3f59"
+  integrity sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=
+
+entities@^1.1.1, entities@^1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/entities/-/entities-1.1.2.tgz#bdfa735299664dfafd34529ed4f8522a275fea56"
+  integrity sha512-f2LZMYl1Fzu7YSBKg+RoROelpOaNrcGmE9AZubeDfrCEia483oW4MI4VyFd5VNHIgQ/7qm1I0wUHK1eJnn2y2w==
+
+entities@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/entities/-/entities-2.0.0.tgz#68d6084cab1b079767540d80e56a39b423e4abf4"
+  integrity sha512-D9f7V0JSRwIxlRI2mjMqufDrRDnx8p+eEOz7aUM9SuvF8gsBzra0/6tbjl1m8eQHrZlYj6PxqE00hZ1SAIKPLw==
+
+envinfo@^7.3.1:
+  version "7.5.0"
+  resolved "https://registry.yarnpkg.com/envinfo/-/envinfo-7.5.0.tgz#91410bb6db262fb4f1409bd506e9ff57e91023f4"
+  integrity sha512-jDgnJaF/Btomk+m3PZDTTCb5XIIIX3zYItnCRfF73zVgvinLoRomuhi75Y4su0PtQxWz4v66XnLLckyvyJTOIQ==
+
+error-ex@^1.3.1:
+  version "1.3.2"
+  resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.2.tgz#b4ac40648107fdcdcfae242f428bea8a14d4f1bf"
+  integrity sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==
+  dependencies:
+    is-arrayish "^0.2.1"
+
+es-abstract@^1.17.0-next.1:
+  version "1.17.0-next.1"
+  resolved "https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.17.0-next.1.tgz#94acc93e20b05a6e96dacb5ab2f1cb3a81fc2172"
+  integrity sha512-7MmGr03N7Rnuid6+wyhD9sHNE2n4tFSwExnU2lQl3lIo2ShXWGePY80zYaoMOmILWv57H0amMjZGHNzzGG70Rw==
+  dependencies:
+    es-to-primitive "^1.2.1"
+    function-bind "^1.1.1"
+    has "^1.0.3"
+    has-symbols "^1.0.1"
+    is-callable "^1.1.4"
+    is-regex "^1.0.4"
+    object-inspect "^1.7.0"
+    object-keys "^1.1.1"
+    object.assign "^4.1.0"
+    string.prototype.trimleft "^2.1.0"
+    string.prototype.trimright "^2.1.0"
+
+es-to-primitive@^1.2.1:
+  version "1.2.1"
+  resolved "https://registry.yarnpkg.com/es-to-primitive/-/es-to-primitive-1.2.1.tgz#e55cd4c9cdc188bcefb03b366c736323fc5c898a"
+  integrity sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==
+  dependencies:
+    is-callable "^1.1.4"
+    is-date-object "^1.0.1"
+    is-symbol "^1.0.2"
+
+escape-html@~1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/escape-html/-/escape-html-1.0.3.tgz#0258eae4d3d0c0974de1c169188ef0051d1d1988"
+  integrity sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=
+
+escape-string-regexp@^1.0.2, escape-string-regexp@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"
+  integrity sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=
+
+escodegen@^1.11.0, escodegen@^1.11.1:
+  version "1.12.0"
+  resolved "https://registry.yarnpkg.com/escodegen/-/escodegen-1.12.0.tgz#f763daf840af172bb3a2b6dd7219c0e17f7ff541"
+  integrity sha512-TuA+EhsanGcme5T3R0L80u4t8CpbXQjegRmf7+FPTJrtCTErXFeelblRgHQa1FofEzqYYJmJ/OqjTwREp9qgmg==
+  dependencies:
+    esprima "^3.1.3"
+    estraverse "^4.2.0"
+    esutils "^2.0.2"
+    optionator "^0.8.1"
+  optionalDependencies:
+    source-map "~0.6.1"
+
+escodegen@~1.9.0:
+  version "1.9.1"
+  resolved "https://registry.yarnpkg.com/escodegen/-/escodegen-1.9.1.tgz#dbae17ef96c8e4bedb1356f4504fa4cc2f7cb7e2"
+  integrity sha512-6hTjO1NAWkHnDk3OqQ4YrCuwwmGHL9S3nPlzBOUG/R44rda3wLNrfvQ5fkSGjyhHFKM7ALPKcKGrwvCLe0lC7Q==
+  dependencies:
+    esprima "^3.1.3"
+    estraverse "^4.2.0"
+    esutils "^2.0.2"
+    optionator "^0.8.1"
+  optionalDependencies:
+    source-map "~0.6.1"
+
+eslint-plugin-babel@^5.3.0:
+  version "5.3.0"
+  resolved "https://registry.yarnpkg.com/eslint-plugin-babel/-/eslint-plugin-babel-5.3.0.tgz#2e7f251ccc249326da760c1a4c948a91c32d0023"
+  integrity sha512-HPuNzSPE75O+SnxHIafbW5QB45r2w78fxqwK3HmjqIUoPfPzVrq6rD+CINU3yzoDSzEhUkX07VUphbF73Lth/w==
+  dependencies:
+    eslint-rule-composer "^0.3.0"
+
+eslint-rule-composer@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/eslint-rule-composer/-/eslint-rule-composer-0.3.0.tgz#79320c927b0c5c0d3d3d2b76c8b4a488f25bbaf9"
+  integrity sha512-bt+Sh8CtDmn2OajxvNO+BX7Wn4CIWMpTRm3MaiKPCQcnnlm0CS2mhui6QaoeQugs+3Kj2ESKEEGJUdVafwhiCg==
+
+eslint-scope@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-5.0.0.tgz#e87c8887c73e8d1ec84f1ca591645c358bfc8fb9"
+  integrity sha512-oYrhJW7S0bxAFDvWqzvMPRm6pcgcnWc4QnofCAqRTRfQC0JcwenzGglTtsLyIuuWFfkqDG9vz67cnttSd53djw==
+  dependencies:
+    esrecurse "^4.1.0"
+    estraverse "^4.1.1"
+
+eslint-utils@^1.4.3:
+  version "1.4.3"
+  resolved "https://registry.yarnpkg.com/eslint-utils/-/eslint-utils-1.4.3.tgz#74fec7c54d0776b6f67e0251040b5806564e981f"
+  integrity sha512-fbBN5W2xdY45KulGXmLHZ3c3FHfVYmKg0IrAKGOkT/464PQsx2UeIzfz1RmEci+KLm1bBaAzZAh8+/E+XAeZ8Q==
+  dependencies:
+    eslint-visitor-keys "^1.1.0"
+
+eslint-visitor-keys@^1.0.0, eslint-visitor-keys@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-1.1.0.tgz#e2a82cea84ff246ad6fb57f9bde5b46621459ec2"
+  integrity sha512-8y9YjtM1JBJU/A9Kc+SbaOV4y29sSWckBwMHa+FGtVj5gN/sbnKDf6xJUl+8g7FAij9LVaP8C24DUiH/f/2Z9A==
+
+eslint@^6.7.2:
+  version "6.7.2"
+  resolved "https://registry.yarnpkg.com/eslint/-/eslint-6.7.2.tgz#c17707ca4ad7b2d8af986a33feba71e18a9fecd1"
+  integrity sha512-qMlSWJaCSxDFr8fBPvJM9kJwbazrhNcBU3+DszDW1OlEwKBBRWsJc7NJFelvwQpanHCR14cOLD41x8Eqvo3Nng==
+  dependencies:
+    "@babel/code-frame" "^7.0.0"
+    ajv "^6.10.0"
+    chalk "^2.1.0"
+    cross-spawn "^6.0.5"
+    debug "^4.0.1"
+    doctrine "^3.0.0"
+    eslint-scope "^5.0.0"
+    eslint-utils "^1.4.3"
+    eslint-visitor-keys "^1.1.0"
+    espree "^6.1.2"
+    esquery "^1.0.1"
+    esutils "^2.0.2"
+    file-entry-cache "^5.0.1"
+    functional-red-black-tree "^1.0.1"
+    glob-parent "^5.0.0"
+    globals "^12.1.0"
+    ignore "^4.0.6"
+    import-fresh "^3.0.0"
+    imurmurhash "^0.1.4"
+    inquirer "^7.0.0"
+    is-glob "^4.0.0"
+    js-yaml "^3.13.1"
+    json-stable-stringify-without-jsonify "^1.0.1"
+    levn "^0.3.0"
+    lodash "^4.17.14"
+    minimatch "^3.0.4"
+    mkdirp "^0.5.1"
+    natural-compare "^1.4.0"
+    optionator "^0.8.3"
+    progress "^2.0.0"
+    regexpp "^2.0.1"
+    semver "^6.1.2"
+    strip-ansi "^5.2.0"
+    strip-json-comments "^3.0.1"
+    table "^5.2.3"
+    text-table "^0.2.0"
+    v8-compile-cache "^2.0.3"
+
+espree@^6.1.2:
+  version "6.1.2"
+  resolved "https://registry.yarnpkg.com/espree/-/espree-6.1.2.tgz#6c272650932b4f91c3714e5e7b5f5e2ecf47262d"
+  integrity sha512-2iUPuuPP+yW1PZaMSDM9eyVf8D5P0Hi8h83YtZ5bPc/zHYjII5khoixIUTMO794NOY8F/ThF1Bo8ncZILarUTA==
+  dependencies:
+    acorn "^7.1.0"
+    acorn-jsx "^5.1.0"
+    eslint-visitor-keys "^1.1.0"
+
+esprima@^3.1.3:
+  version "3.1.3"
+  resolved "https://registry.yarnpkg.com/esprima/-/esprima-3.1.3.tgz#fdca51cee6133895e3c88d535ce49dbff62a4633"
+  integrity sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM=
+
+esprima@^4.0.0:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/esprima/-/esprima-4.0.1.tgz#13b04cdb3e6c5d19df91ab6987a8695619b0aa71"
+  integrity sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==
+
+esquery@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/esquery/-/esquery-1.0.1.tgz#406c51658b1f5991a5f9b62b1dc25b00e3e5c708"
+  integrity sha512-SmiyZ5zIWH9VM+SRUReLS5Q8a7GxtRdxEBVZpm98rJM7Sb+A9DVCndXfkeFUd3byderg+EbDkfnevfCwynWaNA==
+  dependencies:
+    estraverse "^4.0.0"
+
+esrecurse@^4.1.0:
+  version "4.2.1"
+  resolved "https://registry.yarnpkg.com/esrecurse/-/esrecurse-4.2.1.tgz#007a3b9fdbc2b3bb87e4879ea19c92fdbd3942cf"
+  integrity sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ==
+  dependencies:
+    estraverse "^4.1.0"
+
+estraverse@^4.0.0, estraverse@^4.1.0, estraverse@^4.1.1, estraverse@^4.2.0:
+  version "4.3.0"
+  resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.3.0.tgz#398ad3f3c5a24948be7725e83d11a7de28cdbd1d"
+  integrity sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==
+
+estree-walker@^0.6.1:
+  version "0.6.1"
+  resolved "https://registry.yarnpkg.com/estree-walker/-/estree-walker-0.6.1.tgz#53049143f40c6eb918b23671d1fe3219f3a1b362"
+  integrity sha512-SqmZANLWS0mnatqbSfRP5g8OXZC12Fgg1IwNtLsyHDzJizORW4khDfjPqJZsemPWBB2uqykUah5YpQ6epsqC/w==
+
+esutils@^2.0.0, esutils@^2.0.2:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
+  integrity sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==
+
+etag@~1.8.1:
+  version "1.8.1"
+  resolved "https://registry.yarnpkg.com/etag/-/etag-1.8.1.tgz#41ae2eeb65efa62268aebfea83ac7d79299b0887"
+  integrity sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=
+
+events@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/events/-/events-2.1.0.tgz#2a9a1e18e6106e0e812aa9ebd4a819b3c29c0ba5"
+  integrity sha512-3Zmiobend8P9DjmKAty0Era4jV8oJ0yGYe2nJJAxgymF9+N8F2m0hhZiMoWtcfepExzNKZumFU3ksdQbInGWCg==
+
+events@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/events/-/events-3.0.0.tgz#9a0a0dfaf62893d92b875b8f2698ca4114973e88"
+  integrity sha512-Dc381HFWJzEOhQ+d8pkNon++bk9h6cdAoAj4iE6Q4y6xgTzySWXlKn05/TVNpjnfRqi/X0EpJEJohPjNI3zpVA==
+
+evp_bytestokey@^1.0.0, evp_bytestokey@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/evp_bytestokey/-/evp_bytestokey-1.0.3.tgz#7fcbdb198dc71959432efe13842684e0525acb02"
+  integrity sha512-/f2Go4TognH/KvCISP7OUsHn85hT9nUkxxA9BEWxFn+Oj9o8ZNLm/40hdlgSLyuOimsrTKLUMEorQexp/aPQeA==
+  dependencies:
+    md5.js "^1.3.4"
+    safe-buffer "^5.1.1"
+
+expand-brackets@^2.1.4:
+  version "2.1.4"
+  resolved "https://registry.yarnpkg.com/expand-brackets/-/expand-brackets-2.1.4.tgz#b77735e315ce30f6b6eff0f83b04151a22449622"
+  integrity sha1-t3c14xXOMPa27/D4OwQVGiJEliI=
+  dependencies:
+    debug "^2.3.3"
+    define-property "^0.2.5"
+    extend-shallow "^2.0.1"
+    posix-character-classes "^0.1.0"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.1"
+
+extend-shallow@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-2.0.1.tgz#51af7d614ad9a9f610ea1bafbb989d6b1c56890f"
+  integrity sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=
+  dependencies:
+    is-extendable "^0.1.0"
+
+extend-shallow@^3.0.0, extend-shallow@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/extend-shallow/-/extend-shallow-3.0.2.tgz#26a71aaf073b39fb2127172746131c2704028db8"
+  integrity sha1-Jqcarwc7OfshJxcnRhMcJwQCjbg=
+  dependencies:
+    assign-symbols "^1.0.0"
+    is-extendable "^1.0.1"
+
+extend@~3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/extend/-/extend-3.0.2.tgz#f8b1136b4071fbd8eb140aff858b1019ec2915fa"
+  integrity sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==
+
+external-editor@^3.0.3:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/external-editor/-/external-editor-3.1.0.tgz#cb03f740befae03ea4d283caed2741a83f335495"
+  integrity sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==
+  dependencies:
+    chardet "^0.7.0"
+    iconv-lite "^0.4.24"
+    tmp "^0.0.33"
+
+extglob@^2.0.4:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/extglob/-/extglob-2.0.4.tgz#ad00fe4dc612a9232e8718711dc5cb5ab0285543"
+  integrity sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==
+  dependencies:
+    array-unique "^0.3.2"
+    define-property "^1.0.0"
+    expand-brackets "^2.1.4"
+    extend-shallow "^2.0.1"
+    fragment-cache "^0.2.1"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.1"
+
+extsprintf@1.3.0:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.3.0.tgz#96918440e3041a7a414f8c52e3c574eb3c3e1e05"
+  integrity sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=
+
+extsprintf@^1.2.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/extsprintf/-/extsprintf-1.4.0.tgz#e2689f8f356fad62cca65a3a91c5df5f9551692f"
+  integrity sha1-4mifjzVvrWLMplo6kcXfX5VRaS8=
+
+falafel@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/falafel/-/falafel-2.1.0.tgz#96bb17761daba94f46d001738b3cedf3a67fe06c"
+  integrity sha1-lrsXdh2rqU9G0AFzizzt86Z/4Gw=
+  dependencies:
+    acorn "^5.0.0"
+    foreach "^2.0.5"
+    isarray "0.0.1"
+    object-keys "^1.0.6"
+
+fast-deep-equal@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-2.0.1.tgz#7b05218ddf9667bf7f370bf7fdb2cb15fdd0aa49"
+  integrity sha1-ewUhjd+WZ79/Nwv3/bLLFf3Qqkk=
+
+fast-glob@^2.2.2:
+  version "2.2.7"
+  resolved "https://registry.yarnpkg.com/fast-glob/-/fast-glob-2.2.7.tgz#6953857c3afa475fff92ee6015d52da70a4cd39d"
+  integrity sha512-g1KuQwHOZAmOZMuBtHdxDtju+T2RT8jgCC9aANsbpdiDDTSnjgfuVsIBNKbUeJI3oKMRExcfNDtJl4OhbffMsw==
+  dependencies:
+    "@mrmlnc/readdir-enhanced" "^2.2.1"
+    "@nodelib/fs.stat" "^1.1.2"
+    glob-parent "^3.1.0"
+    is-glob "^4.0.0"
+    merge2 "^1.2.3"
+    micromatch "^3.1.10"
+
+fast-json-stable-stringify@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
+  integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
+
+fast-levenshtein@~2.0.6:
+  version "2.0.6"
+  resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"
+  integrity sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=
+
+fast-safe-stringify@^2.0.7:
+  version "2.0.7"
+  resolved "https://registry.yarnpkg.com/fast-safe-stringify/-/fast-safe-stringify-2.0.7.tgz#124aa885899261f68aedb42a7c080de9da608743"
+  integrity sha512-Utm6CdzT+6xsDk2m8S6uL8VHxNwI6Jub+e9NYTcAms28T84pTa25GJQV9j0CY0N1rM8hK4x6grpF2BQf+2qwVA==
+
+fastparse@^1.1.1:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/fastparse/-/fastparse-1.1.2.tgz#91728c5a5942eced8531283c79441ee4122c35a9"
+  integrity sha512-483XLLxTVIwWK3QTrMGRqUfUpoOs/0hbQrl2oz4J0pAcm3A3bu84wxTFqGqkJzewCLdME38xJLJAxBABfQT8sQ==
+
+figures@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/figures/-/figures-3.1.0.tgz#4b198dd07d8d71530642864af2d45dd9e459c4ec"
+  integrity sha512-ravh8VRXqHuMvZt/d8GblBeqDMkdJMBdv/2KntFH+ra5MXkO7nxNKpzQ3n6QD/2da1kH0aWmNISdvhM7gl2gVg==
+  dependencies:
+    escape-string-regexp "^1.0.5"
+
+file-entry-cache@^5.0.1:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/file-entry-cache/-/file-entry-cache-5.0.1.tgz#ca0f6efa6dd3d561333fb14515065c2fafdf439c"
+  integrity sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==
+  dependencies:
+    flat-cache "^2.0.1"
+
+file-uri-to-path@1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz#553a7b8446ff6f684359c445f1e37a05dacc33dd"
+  integrity sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==
+
+filesize@^3.6.0:
+  version "3.6.1"
+  resolved "https://registry.yarnpkg.com/filesize/-/filesize-3.6.1.tgz#090bb3ee01b6f801a8a8be99d31710b3422bb317"
+  integrity sha512-7KjR1vv6qnicaPMi1iiTcI85CyYwRO/PSFCu6SvqL8jN2Wjt/NIYQTFtFs7fSDCYOstUkEWIQGFUg5YZQfjlcg==
+
+fill-range@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-4.0.0.tgz#d544811d428f98eb06a63dc402d2403c328c38f7"
+  integrity sha1-1USBHUKPmOsGpj3EAtJAPDKMOPc=
+  dependencies:
+    extend-shallow "^2.0.1"
+    is-number "^3.0.0"
+    repeat-string "^1.6.1"
+    to-regex-range "^2.1.0"
+
+find-up@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/find-up/-/find-up-3.0.0.tgz#49169f1d7993430646da61ecc5ae355c21c97b73"
+  integrity sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==
+  dependencies:
+    locate-path "^3.0.0"
+
+flat-cache@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-2.0.1.tgz#5d296d6f04bda44a4630a301413bdbc2ec085ec0"
+  integrity sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==
+  dependencies:
+    flatted "^2.0.0"
+    rimraf "2.6.3"
+    write "1.0.3"
+
+flatted@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/flatted/-/flatted-2.0.1.tgz#69e57caa8f0eacbc281d2e2cb458d46fdb449e08"
+  integrity sha512-a1hQMktqW9Nmqr5aktAux3JMNqaucxGcjtjWnZLHX7yyPCmlSV3M54nGYbqT8K+0GhF3NBgmJCc3ma+WOgX8Jg==
+
+for-in@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/for-in/-/for-in-1.0.2.tgz#81068d295a8142ec0ac726c6e2200c30fb6d5e80"
+  integrity sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=
+
+foreach@^2.0.5:
+  version "2.0.5"
+  resolved "https://registry.yarnpkg.com/foreach/-/foreach-2.0.5.tgz#0bee005018aeb260d0a3af3ae658dd0136ec1b99"
+  integrity sha1-C+4AUBiusmDQo6865ljdATbsG5k=
+
+forever-agent@~0.6.1:
+  version "0.6.1"
+  resolved "https://registry.yarnpkg.com/forever-agent/-/forever-agent-0.6.1.tgz#fbc71f0c41adeb37f96c577ad1ed42d8fdacca91"
+  integrity sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=
+
+form-data@~2.3.2:
+  version "2.3.3"
+  resolved "https://registry.yarnpkg.com/form-data/-/form-data-2.3.3.tgz#dcce52c05f644f298c6a7ab936bd724ceffbf3a6"
+  integrity sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==
+  dependencies:
+    asynckit "^0.4.0"
+    combined-stream "^1.0.6"
+    mime-types "^2.1.12"
+
+fragment-cache@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/fragment-cache/-/fragment-cache-0.2.1.tgz#4290fad27f13e89be7f33799c6bc5a0abfff0d19"
+  integrity sha1-QpD60n8T6Jvn8zeZxrxaCr//DRk=
+  dependencies:
+    map-cache "^0.2.2"
+
+fresh@0.5.2:
+  version "0.5.2"
+  resolved "https://registry.yarnpkg.com/fresh/-/fresh-0.5.2.tgz#3d8cadd90d976569fa835ab1f8e4b23a105605a7"
+  integrity sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=
+
+fs-readdir-recursive@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz#e32fc030a2ccee44a6b5371308da54be0b397d27"
+  integrity sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==
+
+fs.realpath@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
+  integrity sha1-FQStJSMVjKpA20onh8sBQRmU6k8=
+
+fsevents@^1.2.7:
+  version "1.2.11"
+  resolved "https://registry.yarnpkg.com/fsevents/-/fsevents-1.2.11.tgz#67bf57f4758f02ede88fb2a1712fef4d15358be3"
+  integrity sha512-+ux3lx6peh0BpvY0JebGyZoiR4D+oYzdPZMKJwkZ+sFkNJzpL7tXc/wehS49gUAxg3tmMHPHZkA8JU2rhhgDHw==
+  dependencies:
+    bindings "^1.5.0"
+    nan "^2.12.1"
+
+function-bind@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.1.tgz#a56899d3ea3c9bab874bb9773b7c5ede92f4895d"
+  integrity sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==
+
+functional-red-black-tree@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz#1b0ab3bd553b2a0d6399d29c0e3ea0b252078327"
+  integrity sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=
+
+get-assigned-identifiers@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/get-assigned-identifiers/-/get-assigned-identifiers-1.2.0.tgz#6dbf411de648cbaf8d9169ebb0d2d576191e2ff1"
+  integrity sha512-mBBwmeGTrxEMO4pMaaf/uUEFHnYtwr8FTe8Y/mer4rcV/bye0qGm6pw1bGZFGStxC5O76c5ZAVBGnqHmOaJpdQ==
+
+get-caller-file@^2.0.1:
+  version "2.0.5"
+  resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e"
+  integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==
+
+get-port@^3.2.0:
+  version "3.2.0"
+  resolved "https://registry.yarnpkg.com/get-port/-/get-port-3.2.0.tgz#dd7ce7de187c06c8bf353796ac71e099f0980ebc"
+  integrity sha1-3Xzn3hh8Bsi/NTeWrHHgmfCYDrw=
+
+get-value@^2.0.3, get-value@^2.0.6:
+  version "2.0.6"
+  resolved "https://registry.yarnpkg.com/get-value/-/get-value-2.0.6.tgz#dc15ca1c672387ca76bd37ac0a395ba2042a2c28"
+  integrity sha1-3BXKHGcjh8p2vTesCjlbogQqLCg=
+
+getpass@^0.1.1:
+  version "0.1.7"
+  resolved "https://registry.yarnpkg.com/getpass/-/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa"
+  integrity sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=
+  dependencies:
+    assert-plus "^1.0.0"
+
+glob-parent@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-3.1.0.tgz#9e6af6299d8d3bd2bd40430832bd113df906c5ae"
+  integrity sha1-nmr2KZ2NO9K9QEMIMr0RPfkGxa4=
+  dependencies:
+    is-glob "^3.1.0"
+    path-dirname "^1.0.0"
+
+glob-parent@^5.0.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.0.tgz#5f4c1d1e748d30cd73ad2944b3577a81b081e8c2"
+  integrity sha512-qjtRgnIVmOfnKUE3NJAQEdk+lKrxfw8t5ke7SXtfMTHcjsBfOfWXCQfdb30zfDoZQ2IRSIiidmjtbHZPZ++Ihw==
+  dependencies:
+    is-glob "^4.0.1"
+
+glob-to-regexp@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/glob-to-regexp/-/glob-to-regexp-0.3.0.tgz#8c5a1494d2066c570cc3bfe4496175acc4d502ab"
+  integrity sha1-jFoUlNIGbFcMw7/kSWF1rMTVAqs=
+
+glob@^7.0.0, glob@^7.1.0, glob@^7.1.3, glob@^7.1.4:
+  version "7.1.6"
+  resolved "https://registry.yarnpkg.com/glob/-/glob-7.1.6.tgz#141f33b81a7c2492e125594307480c46679278a6"
+  integrity sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==
+  dependencies:
+    fs.realpath "^1.0.0"
+    inflight "^1.0.4"
+    inherits "2"
+    minimatch "^3.0.4"
+    once "^1.3.0"
+    path-is-absolute "^1.0.0"
+
+globals@^11.1.0:
+  version "11.12.0"
+  resolved "https://registry.yarnpkg.com/globals/-/globals-11.12.0.tgz#ab8795338868a0babd8525758018c2a7eb95c42e"
+  integrity sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==
+
+globals@^12.1.0:
+  version "12.3.0"
+  resolved "https://registry.yarnpkg.com/globals/-/globals-12.3.0.tgz#1e564ee5c4dded2ab098b0f88f24702a3c56be13"
+  integrity sha512-wAfjdLgFsPZsklLJvOBUBmzYE8/CwhEqSBEMRXA3qxIiNtyqvjYurAtIfDh6chlEPUfmTY3MnZh5Hfh4q0UlIw==
+  dependencies:
+    type-fest "^0.8.1"
+
+graceful-fs@^4.1.11, graceful-fs@^4.1.2:
+  version "4.2.3"
+  resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.3.tgz#4a12ff1b60376ef09862c2093edd908328be8423"
+  integrity sha512-a30VEBm4PEdx1dRB7MFK7BejejvCvBronbLjht+sHuGYj8PHs7M/5Z+rt5lw551vZ7yfTCj4Vuyy3mSJytDWRQ==
+
+grapheme-breaker@^0.3.2:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/grapheme-breaker/-/grapheme-breaker-0.3.2.tgz#5b9e6b78c3832452d2ba2bb1cb830f96276410ac"
+  integrity sha1-W55reMODJFLSuiuxy4MPlidkEKw=
+  dependencies:
+    brfs "^1.2.0"
+    unicode-trie "^0.3.1"
+
+har-schema@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/har-schema/-/har-schema-2.0.0.tgz#a94c2224ebcac04782a0d9035521f24735b7ec92"
+  integrity sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=
+
+har-validator@~5.1.0:
+  version "5.1.3"
+  resolved "https://registry.yarnpkg.com/har-validator/-/har-validator-5.1.3.tgz#1ef89ebd3e4996557675eed9893110dc350fa080"
+  integrity sha512-sNvOCzEQNr/qrvJgc3UG/kD4QtlHycrzwS+6mfTrrSq97BvaYcPZZI1ZSqGSPR73Cxn4LKTD4PttRwfU7jWq5g==
+  dependencies:
+    ajv "^6.5.5"
+    har-schema "^2.0.0"
+
+has-ansi@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/has-ansi/-/has-ansi-2.0.0.tgz#34f5049ce1ecdf2b0649af3ef24e45ed35416d91"
+  integrity sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=
+  dependencies:
+    ansi-regex "^2.0.0"
+
+has-flag@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-1.0.0.tgz#9d9e793165ce017a00f00418c43f942a7b1d11fa"
+  integrity sha1-nZ55MWXOAXoA8AQYxD+UKnsdEfo=
+
+has-flag@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd"
+  integrity sha1-tdRU3CGZriJWmfNGfloH87lVuv0=
+
+has-symbols@^1.0.0, has-symbols@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/has-symbols/-/has-symbols-1.0.1.tgz#9f5214758a44196c406d9bd76cebf81ec2dd31e8"
+  integrity sha512-PLcsoqu++dmEIZB+6totNFKq/7Do+Z0u4oT0zKOJNl3lYK6vGwwu2hjHs+68OEZbTjiUE9bgOABXbP/GvrS0Kg==
+
+has-value@^0.3.1:
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/has-value/-/has-value-0.3.1.tgz#7b1f58bada62ca827ec0a2078025654845995e1f"
+  integrity sha1-ex9YutpiyoJ+wKIHgCVlSEWZXh8=
+  dependencies:
+    get-value "^2.0.3"
+    has-values "^0.1.4"
+    isobject "^2.0.0"
+
+has-value@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/has-value/-/has-value-1.0.0.tgz#18b281da585b1c5c51def24c930ed29a0be6b177"
+  integrity sha1-GLKB2lhbHFxR3vJMkw7SmgvmsXc=
+  dependencies:
+    get-value "^2.0.6"
+    has-values "^1.0.0"
+    isobject "^3.0.0"
+
+has-values@^0.1.4:
+  version "0.1.4"
+  resolved "https://registry.yarnpkg.com/has-values/-/has-values-0.1.4.tgz#6d61de95d91dfca9b9a02089ad384bff8f62b771"
+  integrity sha1-bWHeldkd/Km5oCCJrThL/49it3E=
+
+has-values@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/has-values/-/has-values-1.0.0.tgz#95b0b63fec2146619a6fe57fe75628d5a39efe4f"
+  integrity sha1-lbC2P+whRmGab+V/51Yo1aOe/k8=
+  dependencies:
+    is-number "^3.0.0"
+    kind-of "^4.0.0"
+
+has@^1.0.0, has@^1.0.1, has@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/has/-/has-1.0.3.tgz#722d7cbfc1f6aa8241f16dd814e011e1f41e8796"
+  integrity sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==
+  dependencies:
+    function-bind "^1.1.1"
+
+hash-base@^3.0.0:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/hash-base/-/hash-base-3.0.4.tgz#5fc8686847ecd73499403319a6b0a3f3f6ae4918"
+  integrity sha1-X8hoaEfs1zSZQDMZprCj8/auSRg=
+  dependencies:
+    inherits "^2.0.1"
+    safe-buffer "^5.0.1"
+
+hash.js@^1.0.0, hash.js@^1.0.3:
+  version "1.1.7"
+  resolved "https://registry.yarnpkg.com/hash.js/-/hash.js-1.1.7.tgz#0babca538e8d4ee4a0f8988d68866537a003cf42"
+  integrity sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==
+  dependencies:
+    inherits "^2.0.3"
+    minimalistic-assert "^1.0.1"
+
+hex-color-regex@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/hex-color-regex/-/hex-color-regex-1.1.0.tgz#4c06fccb4602fe2602b3c93df82d7e7dbf1a8a8e"
+  integrity sha512-l9sfDFsuqtOqKDsQdqrMRk0U85RZc0RtOR9yPI7mRVOa4FsR/BVnZ0shmQRM96Ji99kYZP/7hn1cedc1+ApsTQ==
+
+hmac-drbg@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/hmac-drbg/-/hmac-drbg-1.0.1.tgz#d2745701025a6c775a6c545793ed502fc0c649a1"
+  integrity sha1-0nRXAQJabHdabFRXk+1QL8DGSaE=
+  dependencies:
+    hash.js "^1.0.3"
+    minimalistic-assert "^1.0.0"
+    minimalistic-crypto-utils "^1.0.1"
+
+hosted-git-info@^2.1.4:
+  version "2.8.5"
+  resolved "https://registry.yarnpkg.com/hosted-git-info/-/hosted-git-info-2.8.5.tgz#759cfcf2c4d156ade59b0b2dfabddc42a6b9c70c"
+  integrity sha512-kssjab8CvdXfcXMXVcvsXum4Hwdq9XGtRD3TteMEvEbq0LXyiNQr6AprqKqfeaDXze7SxWvRxdpwE6ku7ikLkg==
+
+hsl-regex@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/hsl-regex/-/hsl-regex-1.0.0.tgz#d49330c789ed819e276a4c0d272dffa30b18fe6e"
+  integrity sha1-1JMwx4ntgZ4nakwNJy3/owsY/m4=
+
+hsla-regex@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/hsla-regex/-/hsla-regex-1.0.0.tgz#c1ce7a3168c8c6614033a4b5f7877f3b225f9c38"
+  integrity sha1-wc56MWjIxmFAM6S194d/OyJfnDg=
+
+html-comment-regex@^1.1.0:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/html-comment-regex/-/html-comment-regex-1.1.2.tgz#97d4688aeb5c81886a364faa0cad1dda14d433a7"
+  integrity sha512-P+M65QY2JQ5Y0G9KKdlDpo0zK+/OHptU5AaBwUfAIDJZk1MYf32Frm84EcOytfJE0t5JvkAnKlmjsXDnWzCJmQ==
+
+html-encoding-sniffer@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/html-encoding-sniffer/-/html-encoding-sniffer-1.0.2.tgz#e70d84b94da53aa375e11fe3a351be6642ca46f8"
+  integrity sha512-71lZziiDnsuabfdYiUeWdCVyKuqwWi23L8YeIgV9jSSZHCtb6wB1BKWooH7L3tn4/FuZJMVWyNaIDr4RGmaSYw==
+  dependencies:
+    whatwg-encoding "^1.0.1"
+
+html-tags@^1.0.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/html-tags/-/html-tags-1.2.0.tgz#c78de65b5663aa597989dd2b7ab49200d7e4db98"
+  integrity sha1-x43mW1Zjqll5id0rerSSANfk25g=
+
+htmlescape@^1.1.0:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/htmlescape/-/htmlescape-1.1.1.tgz#3a03edc2214bca3b66424a3e7959349509cb0351"
+  integrity sha1-OgPtwiFLyjtmQko+eVk0lQnLA1E=
+
+htmlnano@^0.2.2:
+  version "0.2.5"
+  resolved "https://registry.yarnpkg.com/htmlnano/-/htmlnano-0.2.5.tgz#134fd9548c7cbe51c8508ce434a3f9488cff1b0b"
+  integrity sha512-X1iPSwXG/iF9bVs+/obt2n6F64uH0ETkA8zp7qFDmLW9/+A6ueHGeb/+qD67T21qUY22owZPMdawljN50ajkqA==
+  dependencies:
+    cssnano "^4.1.10"
+    normalize-html-whitespace "^1.0.0"
+    posthtml "^0.12.0"
+    posthtml-render "^1.1.5"
+    purgecss "^1.4.0"
+    svgo "^1.3.2"
+    terser "^4.3.9"
+    uncss "^0.17.2"
+
+htmlparser2@^3.9.2:
+  version "3.10.1"
+  resolved "https://registry.yarnpkg.com/htmlparser2/-/htmlparser2-3.10.1.tgz#bd679dc3f59897b6a34bb10749c855bb53a9392f"
+  integrity sha512-IgieNijUMbkDovyoKObU1DUhm1iwNYE/fuifEoEHfd1oZKZDaONBSkal7Y01shxsM49R4XaMdGez3WnF9UfiCQ==
+  dependencies:
+    domelementtype "^1.3.1"
+    domhandler "^2.3.0"
+    domutils "^1.5.1"
+    entities "^1.1.1"
+    inherits "^2.0.1"
+    readable-stream "^3.1.1"
+
+http-errors@~1.7.2:
+  version "1.7.3"
+  resolved "https://registry.yarnpkg.com/http-errors/-/http-errors-1.7.3.tgz#6c619e4f9c60308c38519498c14fbb10aacebb06"
+  integrity sha512-ZTTX0MWrsQ2ZAhA1cejAwDLycFsd7I7nVtnkT3Ol0aqodaKW+0CTZDQ1uBv5whptCnc8e8HeRRJxRs0kmm/Qfw==
+  dependencies:
+    depd "~1.1.2"
+    inherits "2.0.4"
+    setprototypeof "1.1.1"
+    statuses ">= 1.5.0 < 2"
+    toidentifier "1.0.0"
+
+http-signature@~1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/http-signature/-/http-signature-1.2.0.tgz#9aecd925114772f3d95b65a60abb8f7c18fbace1"
+  integrity sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=
+  dependencies:
+    assert-plus "^1.0.0"
+    jsprim "^1.2.2"
+    sshpk "^1.7.0"
+
+https-browserify@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/https-browserify/-/https-browserify-1.0.0.tgz#ec06c10e0a34c0f2faf199f7fd7fc78fffd03c73"
+  integrity sha1-7AbBDgo0wPL68Zn3/X/Hj//QPHM=
+
+iconv-lite@0.4.24, iconv-lite@^0.4.24:
+  version "0.4.24"
+  resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.4.24.tgz#2022b4b25fbddc21d2f524974a474aafe733908b"
+  integrity sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==
+  dependencies:
+    safer-buffer ">= 2.1.2 < 3"
+
+icss-replace-symbols@1.1.0, icss-replace-symbols@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/icss-replace-symbols/-/icss-replace-symbols-1.1.0.tgz#06ea6f83679a7749e386cfe1fe812ae5db223ded"
+  integrity sha1-Bupvg2ead0njhs/h/oEq5dsiPe0=
+
+ieee754@^1.1.4:
+  version "1.1.13"
+  resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.1.13.tgz#ec168558e95aa181fd87d37f55c32bbcb6708b84"
+  integrity sha512-4vf7I2LYV/HaWerSo3XmlMkp5eZ83i+/CDluXi/IGTs/O1sejBNhTtnxzmRZfvOUqj7lZjqHkeTvpgSFDlWZTg==
+
+ignore@^4.0.6:
+  version "4.0.6"
+  resolved "https://registry.yarnpkg.com/ignore/-/ignore-4.0.6.tgz#750e3db5862087b4737ebac8207ffd1ef27b25fc"
+  integrity sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==
+
+import-fresh@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/import-fresh/-/import-fresh-2.0.0.tgz#d81355c15612d386c61f9ddd3922d4304822a546"
+  integrity sha1-2BNVwVYS04bGH53dOSLUMEgipUY=
+  dependencies:
+    caller-path "^2.0.0"
+    resolve-from "^3.0.0"
+
+import-fresh@^3.0.0:
+  version "3.2.1"
+  resolved "https://registry.yarnpkg.com/import-fresh/-/import-fresh-3.2.1.tgz#633ff618506e793af5ac91bf48b72677e15cbe66"
+  integrity sha512-6e1q1cnWP2RXD9/keSkxHScg508CdXqXWgWBaETNhyuBFz+kUZlKboh+ISK+bU++DmbHimVBrOz/zzPe0sZ3sQ==
+  dependencies:
+    parent-module "^1.0.0"
+    resolve-from "^4.0.0"
+
+imurmurhash@^0.1.4:
+  version "0.1.4"
+  resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
+  integrity sha1-khi5srkoojixPcT7a21XbyMUU+o=
+
+indexes-of@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/indexes-of/-/indexes-of-1.0.1.tgz#f30f716c8e2bd346c7b67d3df3915566a7c05607"
+  integrity sha1-8w9xbI4r00bHtn0985FVZqfAVgc=
+
+inflight@^1.0.4:
+  version "1.0.6"
+  resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
+  integrity sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=
+  dependencies:
+    once "^1.3.0"
+    wrappy "1"
+
+inherits@2, inherits@2.0.4, inherits@^2.0.1, inherits@^2.0.3, inherits@~2.0.1, inherits@~2.0.3:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
+  integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
+
+inherits@2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.1.tgz#b17d08d326b4423e568eff719f91b0b1cbdf69f1"
+  integrity sha1-sX0I0ya0Qj5Wjv9xn5GwscvfafE=
+
+inherits@2.0.3:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de"
+  integrity sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=
+
+inline-source-map@~0.6.0:
+  version "0.6.2"
+  resolved "https://registry.yarnpkg.com/inline-source-map/-/inline-source-map-0.6.2.tgz#f9393471c18a79d1724f863fa38b586370ade2a5"
+  integrity sha1-+Tk0ccGKedFyT4Y/o4tYY3Ct4qU=
+  dependencies:
+    source-map "~0.5.3"
+
+inquirer@^7.0.0:
+  version "7.0.1"
+  resolved "https://registry.yarnpkg.com/inquirer/-/inquirer-7.0.1.tgz#13f7980eedc73c689feff3994b109c4e799c6ebb"
+  integrity sha512-V1FFQ3TIO15det8PijPLFR9M9baSlnRs9nL7zWu1MNVA2T9YVl9ZbrHJhYs7e9X8jeMZ3lr2JH/rdHFgNCBdYw==
+  dependencies:
+    ansi-escapes "^4.2.1"
+    chalk "^2.4.2"
+    cli-cursor "^3.1.0"
+    cli-width "^2.0.0"
+    external-editor "^3.0.3"
+    figures "^3.0.0"
+    lodash "^4.17.15"
+    mute-stream "0.0.8"
+    run-async "^2.2.0"
+    rxjs "^6.5.3"
+    string-width "^4.1.0"
+    strip-ansi "^5.1.0"
+    through "^2.3.6"
+
+insert-module-globals@^7.0.0:
+  version "7.2.0"
+  resolved "https://registry.yarnpkg.com/insert-module-globals/-/insert-module-globals-7.2.0.tgz#ec87e5b42728479e327bd5c5c71611ddfb4752ba"
+  integrity sha512-VE6NlW+WGn2/AeOMd496AHFYmE7eLKkUY6Ty31k4og5vmA3Fjuwe9v6ifH6Xx/Hz27QvdoMoviw1/pqWRB09Sw==
+  dependencies:
+    JSONStream "^1.0.3"
+    acorn-node "^1.5.2"
+    combine-source-map "^0.8.0"
+    concat-stream "^1.6.1"
+    is-buffer "^1.1.0"
+    path-is-absolute "^1.0.1"
+    process "~0.11.0"
+    through2 "^2.0.0"
+    undeclared-identifiers "^1.1.2"
+    xtend "^4.0.0"
+
+invariant@^2.2.2:
+  version "2.2.4"
+  resolved "https://registry.yarnpkg.com/invariant/-/invariant-2.2.4.tgz#610f3c92c9359ce1db616e538008d23ff35158e6"
+  integrity sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==
+  dependencies:
+    loose-envify "^1.0.0"
+
+is-absolute-url@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/is-absolute-url/-/is-absolute-url-2.1.0.tgz#50530dfb84fcc9aa7dbe7852e83a37b93b9f2aa6"
+  integrity sha1-UFMN+4T8yap9vnhS6Do3uTufKqY=
+
+is-absolute-url@^3.0.1:
+  version "3.0.3"
+  resolved "https://registry.yarnpkg.com/is-absolute-url/-/is-absolute-url-3.0.3.tgz#96c6a22b6a23929b11ea0afb1836c36ad4a5d698"
+  integrity sha512-opmNIX7uFnS96NtPmhWQgQx6/NYFgsUXYMllcfzwWKUMwfo8kku1TvE6hkNcH+Q1ts5cMVrsY7j0bxXQDciu9Q==
+
+is-accessor-descriptor@^0.1.6:
+  version "0.1.6"
+  resolved "https://registry.yarnpkg.com/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz#a9e12cb3ae8d876727eeef3843f8a0897b5c98d6"
+  integrity sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=
+  dependencies:
+    kind-of "^3.0.2"
+
+is-accessor-descriptor@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz#169c2f6d3df1f992618072365c9b0ea1f6878656"
+  integrity sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==
+  dependencies:
+    kind-of "^6.0.0"
+
+is-arrayish@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d"
+  integrity sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=
+
+is-arrayish@^0.3.1:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.3.2.tgz#4574a2ae56f7ab206896fb431eaeed066fdf8f03"
+  integrity sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==
+
+is-base64@^0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/is-base64/-/is-base64-0.1.0.tgz#a6f20610c6ef4863a51cba32bc0222544b932622"
+  integrity sha512-WRRyllsGXJM7ZN7gPTCCQ/6wNPTRDwiWdPK66l5sJzcU/oOzcIcRRf0Rux8bkpox/1yjt0F6VJRsQOIG2qz5sg==
+
+is-binary-path@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/is-binary-path/-/is-binary-path-1.0.1.tgz#75f16642b480f187a711c814161fd3a4a7655898"
+  integrity sha1-dfFmQrSA8YenEcgUFh/TpKdlWJg=
+  dependencies:
+    binary-extensions "^1.0.0"
+
+is-buffer@^1.1.0, is-buffer@^1.1.5:
+  version "1.1.6"
+  resolved "https://registry.yarnpkg.com/is-buffer/-/is-buffer-1.1.6.tgz#efaa2ea9daa0d7ab2ea13a97b2b8ad51fefbe8be"
+  integrity sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==
+
+is-callable@^1.1.4:
+  version "1.1.4"
+  resolved "https://registry.yarnpkg.com/is-callable/-/is-callable-1.1.4.tgz#1e1adf219e1eeb684d691f9d6a05ff0d30a24d75"
+  integrity sha512-r5p9sxJjYnArLjObpjA4xu5EKI3CuKHkJXMhT7kwbpUyIFD1n5PMAsoPvWnvtZiNz7LjkYDRZhd7FlI0eMijEA==
+
+is-color-stop@^1.0.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/is-color-stop/-/is-color-stop-1.1.0.tgz#cfff471aee4dd5c9e158598fbe12967b5cdad345"
+  integrity sha1-z/9HGu5N1cnhWFmPvhKWe1za00U=
+  dependencies:
+    css-color-names "^0.0.4"
+    hex-color-regex "^1.1.0"
+    hsl-regex "^1.0.0"
+    hsla-regex "^1.0.0"
+    rgb-regex "^1.0.1"
+    rgba-regex "^1.0.0"
+
+is-data-descriptor@^0.1.4:
+  version "0.1.4"
+  resolved "https://registry.yarnpkg.com/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz#0b5ee648388e2c860282e793f1856fec3f301b56"
+  integrity sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=
+  dependencies:
+    kind-of "^3.0.2"
+
+is-data-descriptor@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz#d84876321d0e7add03990406abbbbd36ba9268c7"
+  integrity sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==
+  dependencies:
+    kind-of "^6.0.0"
+
+is-date-object@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/is-date-object/-/is-date-object-1.0.1.tgz#9aa20eb6aeebbff77fbd33e74ca01b33581d3a16"
+  integrity sha1-mqIOtq7rv/d/vTPnTKAbM1gdOhY=
+
+is-descriptor@^0.1.0:
+  version "0.1.6"
+  resolved "https://registry.yarnpkg.com/is-descriptor/-/is-descriptor-0.1.6.tgz#366d8240dde487ca51823b1ab9f07a10a78251ca"
+  integrity sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==
+  dependencies:
+    is-accessor-descriptor "^0.1.6"
+    is-data-descriptor "^0.1.4"
+    kind-of "^5.0.0"
+
+is-descriptor@^1.0.0, is-descriptor@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/is-descriptor/-/is-descriptor-1.0.2.tgz#3b159746a66604b04f8c81524ba365c5f14d86ec"
+  integrity sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==
+  dependencies:
+    is-accessor-descriptor "^1.0.0"
+    is-data-descriptor "^1.0.0"
+    kind-of "^6.0.2"
+
+is-directory@^0.3.1:
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/is-directory/-/is-directory-0.3.1.tgz#61339b6f2475fc772fd9c9d83f5c8575dc154ae1"
+  integrity sha1-YTObbyR1/Hcv2cnYP1yFddwVSuE=
+
+is-extendable@^0.1.0, is-extendable@^0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/is-extendable/-/is-extendable-0.1.1.tgz#62b110e289a471418e3ec36a617d472e301dfc89"
+  integrity sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=
+
+is-extendable@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/is-extendable/-/is-extendable-1.0.1.tgz#a7470f9e426733d81bd81e1155264e3a3507cab4"
+  integrity sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==
+  dependencies:
+    is-plain-object "^2.0.4"
+
+is-extglob@^2.1.0, is-extglob@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
+  integrity sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=
+
+is-fullwidth-code-point@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz#a3b30a5c4f199183167aaab93beefae3ddfb654f"
+  integrity sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=
+
+is-fullwidth-code-point@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
+  integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
+
+is-glob@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-3.1.0.tgz#7ba5ae24217804ac70707b96922567486cc3e84a"
+  integrity sha1-e6WuJCF4BKxwcHuWkiVnSGzD6Eo=
+  dependencies:
+    is-extglob "^2.1.0"
+
+is-glob@^4.0.0, is-glob@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-4.0.1.tgz#7567dbe9f2f5e2467bc77ab83c4a29482407a5dc"
+  integrity sha512-5G0tKtBTFImOqDnLB2hG6Bp2qcKEFduo4tZu9MT/H6NQv/ghhy30o55ufafxJ/LdH79LLs2Kfrn85TLKyA7BUg==
+  dependencies:
+    is-extglob "^2.1.1"
+
+is-html@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/is-html/-/is-html-1.1.0.tgz#e04f1c18d39485111396f9a0273eab51af218464"
+  integrity sha1-4E8cGNOUhRETlvmgJz6rUa8hhGQ=
+  dependencies:
+    html-tags "^1.0.0"
+
+is-module@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-module/-/is-module-1.0.0.tgz#3258fb69f78c14d5b815d664336b4cffb6441591"
+  integrity sha1-Mlj7afeMFNW4FdZkM2tM/7ZEFZE=
+
+is-number@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/is-number/-/is-number-3.0.0.tgz#24fd6201a4782cf50561c810276afc7d12d71195"
+  integrity sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=
+  dependencies:
+    kind-of "^3.0.2"
+
+is-obj@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/is-obj/-/is-obj-1.0.1.tgz#3e4729ac1f5fde025cd7d83a896dab9f4f67db0f"
+  integrity sha1-PkcprB9f3gJc19g6iW2rn09n2w8=
+
+is-plain-object@^2.0.3, is-plain-object@^2.0.4:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-2.0.4.tgz#2c163b3fafb1b606d9d17928f05c2a1c38e07677"
+  integrity sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==
+  dependencies:
+    isobject "^3.0.1"
+
+is-promise@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/is-promise/-/is-promise-2.1.0.tgz#79a2a9ece7f096e80f36d2b2f3bc16c1ff4bf3fa"
+  integrity sha1-eaKp7OfwlugPNtKy87wWwf9L8/o=
+
+is-reference@^1.1.2:
+  version "1.1.4"
+  resolved "https://registry.yarnpkg.com/is-reference/-/is-reference-1.1.4.tgz#3f95849886ddb70256a3e6d062b1a68c13c51427"
+  integrity sha512-uJA/CDPO3Tao3GTrxYn6AwkM4nUPJiGGYu5+cB8qbC7WGFlrKZbiRo7SFKxUAEpFUfiHofWCXBUNhvYJMh+6zw==
+  dependencies:
+    "@types/estree" "0.0.39"
+
+is-regex@^1.0.4:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/is-regex/-/is-regex-1.0.5.tgz#39d589a358bf18967f726967120b8fc1aed74eae"
+  integrity sha512-vlKW17SNq44owv5AQR3Cq0bQPEb8+kF3UKZ2fiZNOWtztYE5i0CzCZxFDwO58qAOWtxdBRVO/V5Qin1wjCqFYQ==
+  dependencies:
+    has "^1.0.3"
+
+is-resolvable@^1.0.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/is-resolvable/-/is-resolvable-1.1.0.tgz#fb18f87ce1feb925169c9a407c19318a3206ed88"
+  integrity sha512-qgDYXFSR5WvEfuS5dMj6oTMEbrrSaM0CrFk2Yiq/gXnBvD9pMa2jGXxyhGLfvhZpuMZe18CJpFxAt3CRs42NMg==
+
+is-svg@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/is-svg/-/is-svg-3.0.0.tgz#9321dbd29c212e5ca99c4fa9794c714bcafa2f75"
+  integrity sha512-gi4iHK53LR2ujhLVVj+37Ykh9GLqYHX6JOVXbLAucaG/Cqw9xwdFOjDM2qeifLs1sF1npXXFvDu0r5HNgCMrzQ==
+  dependencies:
+    html-comment-regex "^1.1.0"
+
+is-symbol@^1.0.2:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/is-symbol/-/is-symbol-1.0.3.tgz#38e1014b9e6329be0de9d24a414fd7441ec61937"
+  integrity sha512-OwijhaRSgqvhm/0ZdAcXNZt9lYdKFpcRDT5ULUuYXPoT794UNOdU+gpT6Rzo7b4V2HUl/op6GqY894AZwv9faQ==
+  dependencies:
+    has-symbols "^1.0.1"
+
+is-typedarray@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a"
+  integrity sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=
+
+is-url@^1.2.2:
+  version "1.2.4"
+  resolved "https://registry.yarnpkg.com/is-url/-/is-url-1.2.4.tgz#04a4df46d28c4cff3d73d01ff06abeb318a1aa52"
+  integrity sha512-ITvGim8FhRiYe4IQ5uHSkj7pVaPDrCTkNd3yq3cV7iZAcJdHTUMPMEHcqSOy9xZ9qFenQCvi+2wjH9a1nXqHww==
+
+is-windows@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/is-windows/-/is-windows-1.0.2.tgz#d1850eb9791ecd18e6182ce12a30f396634bb19d"
+  integrity sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==
+
+is-wsl@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/is-wsl/-/is-wsl-1.1.0.tgz#1f16e4aa22b04d1336b66188a66af3c600c3a66d"
+  integrity sha1-HxbkqiKwTRM2tmGIpmrzxgDDpm0=
+
+isarray@0.0.1:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/isarray/-/isarray-0.0.1.tgz#8a18acfca9a8f4177e09abfc6038939b05d1eedf"
+  integrity sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=
+
+isarray@1.0.0, isarray@^1.0.0, isarray@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"
+  integrity sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=
+
+isexe@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
+  integrity sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=
+
+isobject@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/isobject/-/isobject-2.1.0.tgz#f065561096a3f1da2ef46272f815c840d87e0c89"
+  integrity sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=
+  dependencies:
+    isarray "1.0.0"
+
+isobject@^3.0.0, isobject@^3.0.1:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/isobject/-/isobject-3.0.1.tgz#4e431e92b11a9731636aa1f9c8d1ccbcfdab78df"
+  integrity sha1-TkMekrEalzFjaqH5yNHMvP2reN8=
+
+isstream@~0.1.2:
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a"
+  integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=
+
+js-levenshtein@^1.1.3:
+  version "1.1.6"
+  resolved "https://registry.yarnpkg.com/js-levenshtein/-/js-levenshtein-1.1.6.tgz#c6cee58eb3550372df8deb85fad5ce66ce01d59d"
+  integrity sha512-X2BB11YZtrRqY4EnQcLX5Rh373zbK4alC1FW7D7MBhL2gtcC17cTnr6DmfHZeS0s2rTHjUTMMHfG7gO8SSdw+g==
+
+"js-tokens@^3.0.0 || ^4.0.0", js-tokens@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
+  integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
+
+js-yaml@^3.10.0, js-yaml@^3.13.1:
+  version "3.13.1"
+  resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.13.1.tgz#aff151b30bfdfa8e49e05da22e7415e9dfa37847"
+  integrity sha512-YfbcO7jXDdyj0DGxYVSlSeQNHbD7XPWvrVWeVUujrQEoZzWJIRrCPoyk6kL6IAjAG2IolMK4T0hNUe0HOUs5Jw==
+  dependencies:
+    argparse "^1.0.7"
+    esprima "^4.0.0"
+
+jsbn@~0.1.0:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/jsbn/-/jsbn-0.1.1.tgz#a5e654c2e5a2deb5f201d96cefbca80c0ef2f513"
+  integrity sha1-peZUwuWi3rXyAdls77yoDA7y9RM=
+
+jsdom@^14.1.0:
+  version "14.1.0"
+  resolved "https://registry.yarnpkg.com/jsdom/-/jsdom-14.1.0.tgz#916463b6094956b0a6c1782c94e380cd30e1981b"
+  integrity sha512-O901mfJSuTdwU2w3Sn+74T+RnDVP+FuV5fH8tcPWyqrseRAb0s5xOtPgCFiPOtLcyK7CLIJwPyD83ZqQWvA5ng==
+  dependencies:
+    abab "^2.0.0"
+    acorn "^6.0.4"
+    acorn-globals "^4.3.0"
+    array-equal "^1.0.0"
+    cssom "^0.3.4"
+    cssstyle "^1.1.1"
+    data-urls "^1.1.0"
+    domexception "^1.0.1"
+    escodegen "^1.11.0"
+    html-encoding-sniffer "^1.0.2"
+    nwsapi "^2.1.3"
+    parse5 "5.1.0"
+    pn "^1.1.0"
+    request "^2.88.0"
+    request-promise-native "^1.0.5"
+    saxes "^3.1.9"
+    symbol-tree "^3.2.2"
+    tough-cookie "^2.5.0"
+    w3c-hr-time "^1.0.1"
+    w3c-xmlserializer "^1.1.2"
+    webidl-conversions "^4.0.2"
+    whatwg-encoding "^1.0.5"
+    whatwg-mimetype "^2.3.0"
+    whatwg-url "^7.0.0"
+    ws "^6.1.2"
+    xml-name-validator "^3.0.0"
+
+jsesc@^2.5.1:
+  version "2.5.2"
+  resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-2.5.2.tgz#80564d2e483dacf6e8ef209650a67df3f0c283a4"
+  integrity sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==
+
+jsesc@~0.5.0:
+  version "0.5.0"
+  resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-0.5.0.tgz#e7dee66e35d6fc16f710fe91d5cf69f70f08911d"
+  integrity sha1-597mbjXW/Bb3EP6R1c9p9w8IkR0=
+
+json-parse-better-errors@^1.0.1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz#bb867cfb3450e69107c131d1c514bab3dc8bcaa9"
+  integrity sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==
+
+json-schema-traverse@^0.4.1:
+  version "0.4.1"
+  resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
+  integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
+
+json-schema@0.2.3:
+  version "0.2.3"
+  resolved "https://registry.yarnpkg.com/json-schema/-/json-schema-0.2.3.tgz#b480c892e59a2f05954ce727bd3f2a4e882f9e13"
+  integrity sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=
+
+json-stable-stringify-without-jsonify@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651"
+  integrity sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=
+
+json-stable-stringify@~0.0.0:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/json-stable-stringify/-/json-stable-stringify-0.0.1.tgz#611c23e814db375527df851193db59dd2af27f45"
+  integrity sha1-YRwj6BTbN1Un34URk9tZ3Sryf0U=
+  dependencies:
+    jsonify "~0.0.0"
+
+json-stringify-safe@~5.0.1:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb"
+  integrity sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=
+
+json5@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/json5/-/json5-1.0.1.tgz#779fb0018604fa854eacbf6252180d83543e3dbe"
+  integrity sha512-aKS4WQjPenRxiQsC93MNfjx+nbF4PAdYzmd/1JIj8HYzqfbu86beTuNgXDzPknWk0n0uARlyewZo4s++ES36Ow==
+  dependencies:
+    minimist "^1.2.0"
+
+json5@^2.1.0:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/json5/-/json5-2.1.1.tgz#81b6cb04e9ba496f1c7005d07b4368a2638f90b6"
+  integrity sha512-l+3HXD0GEI3huGq1njuqtzYK8OYJyXMkOLtQ53pjWh89tvWS2h6l+1zMkYWqlb57+SiQodKZyvMEFb2X+KrFhQ==
+  dependencies:
+    minimist "^1.2.0"
+
+jsonify@~0.0.0:
+  version "0.0.0"
+  resolved "https://registry.yarnpkg.com/jsonify/-/jsonify-0.0.0.tgz#2c74b6ee41d93ca51b7b5aaee8f503631d252a73"
+  integrity sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM=
+
+jsonparse@^1.2.0:
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/jsonparse/-/jsonparse-1.3.1.tgz#3f4dae4a91fac315f71062f8521cc239f1366280"
+  integrity sha1-P02uSpH6wxX3EGL4UhzCOfE2YoA=
+
+jsprim@^1.2.2:
+  version "1.4.1"
+  resolved "https://registry.yarnpkg.com/jsprim/-/jsprim-1.4.1.tgz#313e66bc1e5cc06e438bc1b7499c2e5c56acb6a2"
+  integrity sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=
+  dependencies:
+    assert-plus "1.0.0"
+    extsprintf "1.3.0"
+    json-schema "0.2.3"
+    verror "1.10.0"
+
+kind-of@^3.0.2, kind-of@^3.0.3, kind-of@^3.2.0:
+  version "3.2.2"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-3.2.2.tgz#31ea21a734bab9bbb0f32466d893aea51e4a3c64"
+  integrity sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=
+  dependencies:
+    is-buffer "^1.1.5"
+
+kind-of@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-4.0.0.tgz#20813df3d712928b207378691a45066fae72dd57"
+  integrity sha1-IIE989cSkosgc3hpGkUGb65y3Vc=
+  dependencies:
+    is-buffer "^1.1.5"
+
+kind-of@^5.0.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-5.1.0.tgz#729c91e2d857b7a419a1f9aa65685c4c33f5845d"
+  integrity sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==
+
+kind-of@^6.0.0, kind-of@^6.0.2:
+  version "6.0.2"
+  resolved "https://registry.yarnpkg.com/kind-of/-/kind-of-6.0.2.tgz#01146b36a6218e64e58f3a8d66de5d7fc6f6d051"
+  integrity sha512-s5kLOcnH0XqDO+FvuaLX8DDjZ18CGFk7VygH40QoKPUQhW4e2rvM0rwUq0t8IQDOwYSeLK01U90OjzBTme2QqA==
+
+labeled-stream-splicer@^2.0.0:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/labeled-stream-splicer/-/labeled-stream-splicer-2.0.2.tgz#42a41a16abcd46fd046306cf4f2c3576fffb1c21"
+  integrity sha512-Ca4LSXFFZUjPScRaqOcFxneA0VpKZr4MMYCljyQr4LIewTLb3Y0IUTIsnBBsVubIeEfxeSZpSjSsRM8APEQaAw==
+  dependencies:
+    inherits "^2.0.1"
+    stream-splicer "^2.0.0"
+
+levn@^0.3.0, levn@~0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/levn/-/levn-0.3.0.tgz#3b09924edf9f083c0490fdd4c0bc4421e04764ee"
+  integrity sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=
+  dependencies:
+    prelude-ls "~1.1.2"
+    type-check "~0.3.2"
+
+load-json-file@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/load-json-file/-/load-json-file-4.0.0.tgz#2f5f45ab91e33216234fd53adab668eb4ec0993b"
+  integrity sha1-L19Fq5HjMhYjT9U62rZo607AmTs=
+  dependencies:
+    graceful-fs "^4.1.2"
+    parse-json "^4.0.0"
+    pify "^3.0.0"
+    strip-bom "^3.0.0"
+
+locate-path@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-3.0.0.tgz#dbec3b3ab759758071b58fe59fc41871af21400e"
+  integrity sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==
+  dependencies:
+    p-locate "^3.0.0"
+    path-exists "^3.0.0"
+
+lodash.clone@^4.5.0:
+  version "4.5.0"
+  resolved "https://registry.yarnpkg.com/lodash.clone/-/lodash.clone-4.5.0.tgz#195870450f5a13192478df4bc3d23d2dea1907b6"
+  integrity sha1-GVhwRQ9aExkkeN9Lw9I9LeoZB7Y=
+
+lodash.memoize@^4.1.2:
+  version "4.1.2"
+  resolved "https://registry.yarnpkg.com/lodash.memoize/-/lodash.memoize-4.1.2.tgz#bcc6c49a42a2840ed997f323eada5ecd182e0bfe"
+  integrity sha1-vMbEmkKihA7Zl/Mj6tpezRguC/4=
+
+lodash.memoize@~3.0.3:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/lodash.memoize/-/lodash.memoize-3.0.4.tgz#2dcbd2c287cbc0a55cc42328bd0c736150d53e3f"
+  integrity sha1-LcvSwofLwKVcxCMovQxzYVDVPj8=
+
+lodash.sortby@^4.7.0:
+  version "4.7.0"
+  resolved "https://registry.yarnpkg.com/lodash.sortby/-/lodash.sortby-4.7.0.tgz#edd14c824e2cc9c1e0b0a1b42bb5210516a42438"
+  integrity sha1-7dFMgk4sycHgsKG0K7UhBRakJDg=
+
+lodash.uniq@^4.5.0:
+  version "4.5.0"
+  resolved "https://registry.yarnpkg.com/lodash.uniq/-/lodash.uniq-4.5.0.tgz#d0225373aeb652adc1bc82e4945339a842754773"
+  integrity sha1-0CJTc662Uq3BvILklFM5qEJ1R3M=
+
+lodash@^4.17.13, lodash@^4.17.14, lodash@^4.17.15, lodash@^4.17.4:
+  version "4.17.15"
+  resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.15.tgz#b447f6670a0455bbfeedd11392eff330ea097548"
+  integrity sha512-8xOcRHvCjnocdS5cpwXQXVzmmh5e5+saE2QGoeQmbKmRS6J3VQppPOIt0MnmE+4xlZoumy0GPG0D0MVIQbNA1A==
+
+log-symbols@^2.2.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/log-symbols/-/log-symbols-2.2.0.tgz#5740e1c5d6f0dfda4ad9323b5332107ef6b4c40a"
+  integrity sha512-VeIAFslyIerEJLXHziedo2basKbMKtTw3vfn5IzG0XTjhAVEJyNHnL2p7vc+wBDSdQuUpNw3M2u6xb9QsAY5Eg==
+  dependencies:
+    chalk "^2.0.1"
+
+loose-envify@^1.0.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.4.0.tgz#71ee51fa7be4caec1a63839f7e682d8132d30caf"
+  integrity sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==
+  dependencies:
+    js-tokens "^3.0.0 || ^4.0.0"
+
+magic-string@^0.22.4:
+  version "0.22.5"
+  resolved "https://registry.yarnpkg.com/magic-string/-/magic-string-0.22.5.tgz#8e9cf5afddf44385c1da5bc2a6a0dbd10b03657e"
+  integrity sha512-oreip9rJZkzvA8Qzk9HFs8fZGF/u7H/gtrE8EN6RjKJ9kh2HlC+yQ2QezifqTZfGyiuAV0dRv5a+y/8gBb1m9w==
+  dependencies:
+    vlq "^0.2.2"
+
+magic-string@^0.25.2:
+  version "0.25.4"
+  resolved "https://registry.yarnpkg.com/magic-string/-/magic-string-0.25.4.tgz#325b8a0a79fc423db109b77fd5a19183b7ba5143"
+  integrity sha512-oycWO9nEVAP2RVPbIoDoA4Y7LFIJ3xRYov93gAyJhZkET1tNuB0u7uWkZS2LpBWTJUWnmau/To8ECWRC+jKNfw==
+  dependencies:
+    sourcemap-codec "^1.4.4"
+
+make-dir@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/make-dir/-/make-dir-2.1.0.tgz#5f0310e18b8be898cc07009295a30ae41e91e6f5"
+  integrity sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==
+  dependencies:
+    pify "^4.0.1"
+    semver "^5.6.0"
+
+map-cache@^0.2.2:
+  version "0.2.2"
+  resolved "https://registry.yarnpkg.com/map-cache/-/map-cache-0.2.2.tgz#c32abd0bd6525d9b051645bb4f26ac5dc98a0dbf"
+  integrity sha1-wyq9C9ZSXZsFFkW7TyasXcmKDb8=
+
+map-visit@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/map-visit/-/map-visit-1.0.0.tgz#ecdca8f13144e660f1b5bd41f12f3479d98dfb8f"
+  integrity sha1-7Nyo8TFE5mDxtb1B8S80edmN+48=
+  dependencies:
+    object-visit "^1.0.0"
+
+md5.js@^1.3.4:
+  version "1.3.5"
+  resolved "https://registry.yarnpkg.com/md5.js/-/md5.js-1.3.5.tgz#b5d07b8e3216e3e27cd728d72f70d1e6a342005f"
+  integrity sha512-xitP+WxNPcTTOgnTJcrhM0xvdPepipPSf3I8EIpGKeFLjt3PlJLIDG3u8EX53ZIubkb+5U2+3rELYpEhHhzdkg==
+  dependencies:
+    hash-base "^3.0.0"
+    inherits "^2.0.1"
+    safe-buffer "^5.1.2"
+
+mdn-data@2.0.4:
+  version "2.0.4"
+  resolved "https://registry.yarnpkg.com/mdn-data/-/mdn-data-2.0.4.tgz#699b3c38ac6f1d728091a64650b65d388502fd5b"
+  integrity sha512-iV3XNKw06j5Q7mi6h+9vbx23Tv7JkjEVgKHW4pimwyDGWm0OIQntJJ+u1C6mg6mK1EaTv42XQ7w76yuzH7M2cA==
+
+memorystream@^0.3.1:
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/memorystream/-/memorystream-0.3.1.tgz#86d7090b30ce455d63fbae12dda51a47ddcaf9b2"
+  integrity sha1-htcJCzDORV1j+64S3aUaR93K+bI=
+
+merge-source-map@1.0.4:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/merge-source-map/-/merge-source-map-1.0.4.tgz#a5de46538dae84d4114cc5ea02b4772a6346701f"
+  integrity sha1-pd5GU42uhNQRTMXqArR3KmNGcB8=
+  dependencies:
+    source-map "^0.5.6"
+
+merge2@^1.2.3:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/merge2/-/merge2-1.3.0.tgz#5b366ee83b2f1582c48f87e47cf1a9352103ca81"
+  integrity sha512-2j4DAdlBOkiSZIsaXk4mTE3sRS02yBHAtfy127xRV3bQUFqXkjHCHLW6Scv7DwNRbIWNHH8zpnz9zMaKXIdvYw==
+
+micromatch@^3.0.4, micromatch@^3.1.10, micromatch@^3.1.4:
+  version "3.1.10"
+  resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-3.1.10.tgz#70859bc95c9840952f359a068a3fc49f9ecfac23"
+  integrity sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==
+  dependencies:
+    arr-diff "^4.0.0"
+    array-unique "^0.3.2"
+    braces "^2.3.1"
+    define-property "^2.0.2"
+    extend-shallow "^3.0.2"
+    extglob "^2.0.4"
+    fragment-cache "^0.2.1"
+    kind-of "^6.0.2"
+    nanomatch "^1.2.9"
+    object.pick "^1.3.0"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.2"
+
+miller-rabin@^4.0.0:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/miller-rabin/-/miller-rabin-4.0.1.tgz#f080351c865b0dc562a8462966daa53543c78a4d"
+  integrity sha512-115fLhvZVqWwHPbClyntxEVfVDfl9DLLTuJvq3g2O/Oxi8AiNouAHvDSzHS0viUJc+V5vm3eq91Xwqn9dp4jRA==
+  dependencies:
+    bn.js "^4.0.0"
+    brorand "^1.0.1"
+
+mime-db@1.42.0:
+  version "1.42.0"
+  resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.42.0.tgz#3e252907b4c7adb906597b4b65636272cf9e7bac"
+  integrity sha512-UbfJCR4UAVRNgMpfImz05smAXK7+c+ZntjaA26ANtkXLlOe947Aag5zdIcKQULAiF9Cq4WxBi9jUs5zkA84bYQ==
+
+mime-types@^2.1.12, mime-types@~2.1.19:
+  version "2.1.25"
+  resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.25.tgz#39772d46621f93e2a80a856c53b86a62156a6437"
+  integrity sha512-5KhStqB5xpTAeGqKBAMgwaYMnQik7teQN4IAzC7npDv6kzeU6prfkR67bc87J1kWMPGkoaZSq1npmexMgkmEVg==
+  dependencies:
+    mime-db "1.42.0"
+
+mime@1.6.0:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/mime/-/mime-1.6.0.tgz#32cd9e5c64553bd58d19a568af452acff04981b1"
+  integrity sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==
+
+mimic-fn@^1.0.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-1.2.0.tgz#820c86a39334640e99516928bd03fca88057d022"
+  integrity sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ==
+
+mimic-fn@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b"
+  integrity sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==
+
+minimalistic-assert@^1.0.0, minimalistic-assert@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz#2e194de044626d4a10e7f7fbc00ce73e83e4d5c7"
+  integrity sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==
+
+minimalistic-crypto-utils@^1.0.0, minimalistic-crypto-utils@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/minimalistic-crypto-utils/-/minimalistic-crypto-utils-1.0.1.tgz#f6c00c1c0b082246e5c4d99dfb8c7c083b2b582a"
+  integrity sha1-9sAMHAsIIkblxNmd+4x8CDsrWCo=
+
+minimatch@^3.0.4:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083"
+  integrity sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==
+  dependencies:
+    brace-expansion "^1.1.7"
+
+minimist@0.0.8:
+  version "0.0.8"
+  resolved "https://registry.yarnpkg.com/minimist/-/minimist-0.0.8.tgz#857fcabfc3397d2625b8228262e86aa7a011b05d"
+  integrity sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=
+
+minimist@^1.1.0, minimist@^1.1.1, minimist@^1.1.3, minimist@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.0.tgz#a35008b20f41383eec1fb914f4cd5df79a264284"
+  integrity sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=
+
+mixin-deep@^1.2.0:
+  version "1.3.2"
+  resolved "https://registry.yarnpkg.com/mixin-deep/-/mixin-deep-1.3.2.tgz#1120b43dc359a785dce65b55b82e257ccf479566"
+  integrity sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==
+  dependencies:
+    for-in "^1.0.2"
+    is-extendable "^1.0.1"
+
+mkdirp@^0.5.0, mkdirp@^0.5.1, mkdirp@~0.5.1:
+  version "0.5.1"
+  resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-0.5.1.tgz#30057438eac6cf7f8c4767f38648d6697d75c903"
+  integrity sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=
+  dependencies:
+    minimist "0.0.8"
+
+module-deps@^6.0.0:
+  version "6.2.2"
+  resolved "https://registry.yarnpkg.com/module-deps/-/module-deps-6.2.2.tgz#d8a15c2265dfc119153c29bb47386987d0ee423b"
+  integrity sha512-a9y6yDv5u5I4A+IPHTnqFxcaKr4p50/zxTjcQJaX2ws9tN/W6J6YXnEKhqRyPhl494dkcxx951onSKVezmI+3w==
+  dependencies:
+    JSONStream "^1.0.3"
+    browser-resolve "^1.7.0"
+    cached-path-relative "^1.0.2"
+    concat-stream "~1.6.0"
+    defined "^1.0.0"
+    detective "^5.2.0"
+    duplexer2 "^0.1.2"
+    inherits "^2.0.1"
+    parents "^1.0.0"
+    readable-stream "^2.0.2"
+    resolve "^1.4.0"
+    stream-combiner2 "^1.1.1"
+    subarg "^1.0.0"
+    through2 "^2.0.0"
+    xtend "^4.0.0"
+
+ms@2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.0.0.tgz#5608aeadfc00be6c2901df5f9861788de0d597c8"
+  integrity sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=
+
+ms@2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.1.tgz#30a5864eb3ebb0a66f2ebe6d727af06a09d86e0a"
+  integrity sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg==
+
+ms@^2.1.1:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.2.tgz#d09d1f357b443f493382a8eb3ccd183872ae6009"
+  integrity sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==
+
+mute-stream@0.0.8:
+  version "0.0.8"
+  resolved "https://registry.yarnpkg.com/mute-stream/-/mute-stream-0.0.8.tgz#1630c42b2251ff81e2a283de96a5497ea92e5e0d"
+  integrity sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==
+
+nan@^2.12.1:
+  version "2.14.0"
+  resolved "https://registry.yarnpkg.com/nan/-/nan-2.14.0.tgz#7818f722027b2459a86f0295d434d1fc2336c52c"
+  integrity sha512-INOFj37C7k3AfaNTtX8RhsTw7qRy7eLET14cROi9+5HAVbbHuIWUHEauBv5qT4Av2tWasiTY1Jw6puUNqRJXQg==
+
+nanomatch@^1.2.9:
+  version "1.2.13"
+  resolved "https://registry.yarnpkg.com/nanomatch/-/nanomatch-1.2.13.tgz#b87a8aa4fc0de8fe6be88895b38983ff265bd119"
+  integrity sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==
+  dependencies:
+    arr-diff "^4.0.0"
+    array-unique "^0.3.2"
+    define-property "^2.0.2"
+    extend-shallow "^3.0.2"
+    fragment-cache "^0.2.1"
+    is-windows "^1.0.2"
+    kind-of "^6.0.2"
+    object.pick "^1.3.0"
+    regex-not "^1.0.0"
+    snapdragon "^0.8.1"
+    to-regex "^3.0.1"
+
+natural-compare@^1.4.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
+  integrity sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=
+
+nice-try@^1.0.4:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/nice-try/-/nice-try-1.0.5.tgz#a3378a7696ce7d223e88fc9b764bd7ef1089e366"
+  integrity sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==
+
+node-addon-api@^1.7.1:
+  version "1.7.1"
+  resolved "https://registry.yarnpkg.com/node-addon-api/-/node-addon-api-1.7.1.tgz#cf813cd69bb8d9100f6bdca6755fc268f54ac492"
+  integrity sha512-2+DuKodWvwRTrCfKOeR24KIc5unKjOh8mz17NCzVnHWfjAdDqbfbjqh7gUT+BkXBRQM52+xCHciKWonJ3CbJMQ==
+
+node-forge@^0.7.1:
+  version "0.7.6"
+  resolved "https://registry.yarnpkg.com/node-forge/-/node-forge-0.7.6.tgz#fdf3b418aee1f94f0ef642cd63486c77ca9724ac"
+  integrity sha512-sol30LUpz1jQFBjOKwbjxijiE3b6pjd74YwfD0fJOKPjF+fONKb2Yg8rYgS6+bK6VDl+/wfr4IYpC7jDzLUIfw==
+
+node-libs-browser@^2.0.0:
+  version "2.2.1"
+  resolved "https://registry.yarnpkg.com/node-libs-browser/-/node-libs-browser-2.2.1.tgz#b64f513d18338625f90346d27b0d235e631f6425"
+  integrity sha512-h/zcD8H9kaDZ9ALUWwlBUDo6TKF8a7qBSCSEGfjTVIYeqsioSKaAX+BN7NgiMGp6iSIXZ3PxgCu8KS3b71YK5Q==
+  dependencies:
+    assert "^1.1.1"
+    browserify-zlib "^0.2.0"
+    buffer "^4.3.0"
+    console-browserify "^1.1.0"
+    constants-browserify "^1.0.0"
+    crypto-browserify "^3.11.0"
+    domain-browser "^1.1.1"
+    events "^3.0.0"
+    https-browserify "^1.0.0"
+    os-browserify "^0.3.0"
+    path-browserify "0.0.1"
+    process "^0.11.10"
+    punycode "^1.2.4"
+    querystring-es3 "^0.2.0"
+    readable-stream "^2.3.3"
+    stream-browserify "^2.0.1"
+    stream-http "^2.7.2"
+    string_decoder "^1.0.0"
+    timers-browserify "^2.0.4"
+    tty-browserify "0.0.0"
+    url "^0.11.0"
+    util "^0.11.0"
+    vm-browserify "^1.0.1"
+
+node-releases@^1.1.42:
+  version "1.1.43"
+  resolved "https://registry.yarnpkg.com/node-releases/-/node-releases-1.1.43.tgz#2c6ca237f88ce11d49631f11190bb01f8d0549f2"
+  integrity sha512-Rmfnj52WNhvr83MvuAWHEqXVoZXCcDQssSOffU4n4XOL9sPrP61mSZ88g25NqmABDvH7PiAlFCzoSCSdzA293w==
+  dependencies:
+    semver "^6.3.0"
+
+normalize-html-whitespace@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/normalize-html-whitespace/-/normalize-html-whitespace-1.0.0.tgz#5e3c8e192f1b06c3b9eee4b7e7f28854c7601e34"
+  integrity sha512-9ui7CGtOOlehQu0t/OhhlmDyc71mKVlv+4vF+me4iZLPrNtRL2xoquEdfZxasC/bdQi/Hr3iTrpyRKIG+ocabA==
+
+normalize-package-data@^2.3.2:
+  version "2.5.0"
+  resolved "https://registry.yarnpkg.com/normalize-package-data/-/normalize-package-data-2.5.0.tgz#e66db1838b200c1dfc233225d12cb36520e234a8"
+  integrity sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==
+  dependencies:
+    hosted-git-info "^2.1.4"
+    resolve "^1.10.0"
+    semver "2 || 3 || 4 || 5"
+    validate-npm-package-license "^3.0.1"
+
+normalize-path@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-2.1.1.tgz#1ab28b556e198363a8c1a6f7e6fa20137fe6aed9"
+  integrity sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=
+  dependencies:
+    remove-trailing-separator "^1.0.1"
+
+normalize-path@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/normalize-path/-/normalize-path-3.0.0.tgz#0dcd69ff23a1c9b11fd0978316644a0388216a65"
+  integrity sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==
+
+normalize-url@^3.0.0:
+  version "3.3.0"
+  resolved "https://registry.yarnpkg.com/normalize-url/-/normalize-url-3.3.0.tgz#b2e1c4dc4f7c6d57743df733a4f5978d18650559"
+  integrity sha512-U+JJi7duF1o+u2pynbp2zXDW2/PADgC30f0GsHZtRh+HOcXHnw137TrNlyxxRvWW5fjKd3bcLHPxofWuCjaeZg==
+
+npm-run-all@^4.1.5:
+  version "4.1.5"
+  resolved "https://registry.yarnpkg.com/npm-run-all/-/npm-run-all-4.1.5.tgz#04476202a15ee0e2e214080861bff12a51d98fba"
+  integrity sha512-Oo82gJDAVcaMdi3nuoKFavkIHBRVqQ1qvMb+9LHk/cF4P6B2m8aP04hGf7oL6wZ9BuGwX1onlLhpuoofSyoQDQ==
+  dependencies:
+    ansi-styles "^3.2.1"
+    chalk "^2.4.1"
+    cross-spawn "^6.0.5"
+    memorystream "^0.3.1"
+    minimatch "^3.0.4"
+    pidtree "^0.3.0"
+    read-pkg "^3.0.0"
+    shell-quote "^1.6.1"
+    string.prototype.padend "^3.0.0"
+
+nth-check@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/nth-check/-/nth-check-1.0.2.tgz#b2bd295c37e3dd58a3bf0700376663ba4d9cf05c"
+  integrity sha512-WeBOdju8SnzPN5vTUJYxYUxLeXpCaVP5i5e0LF8fg7WORF2Wd7wFX/pk0tYZk7s8T+J7VLy0Da6J1+wCT0AtHg==
+  dependencies:
+    boolbase "~1.0.0"
+
+nwsapi@^2.1.3:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/nwsapi/-/nwsapi-2.2.0.tgz#204879a9e3d068ff2a55139c2c772780681a38b7"
+  integrity sha512-h2AatdwYH+JHiZpv7pt/gSX1XoRGb7L/qSIeuqA6GwYoF9w1vP1cw42TO0aI2pNyshRK5893hNSl+1//vHK7hQ==
+
+oauth-sign@~0.9.0:
+  version "0.9.0"
+  resolved "https://registry.yarnpkg.com/oauth-sign/-/oauth-sign-0.9.0.tgz#47a7b016baa68b5fa0ecf3dee08a85c679ac6455"
+  integrity sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==
+
+object-assign@^4.1.1:
+  version "4.1.1"
+  resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863"
+  integrity sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=
+
+object-copy@^0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/object-copy/-/object-copy-0.1.0.tgz#7e7d858b781bd7c991a41ba975ed3812754e998c"
+  integrity sha1-fn2Fi3gb18mRpBupde04EnVOmYw=
+  dependencies:
+    copy-descriptor "^0.1.0"
+    define-property "^0.2.5"
+    kind-of "^3.0.3"
+
+object-inspect@^1.7.0:
+  version "1.7.0"
+  resolved "https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.7.0.tgz#f4f6bd181ad77f006b5ece60bd0b6f398ff74a67"
+  integrity sha512-a7pEHdh1xKIAgTySUGgLMx/xwDZskN1Ud6egYYN3EdRW4ZMPNEDUTF+hwy2LUC+Bl+SyLXANnwz/jyh/qutKUw==
+
+object-inspect@~1.4.0:
+  version "1.4.1"
+  resolved "https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.4.1.tgz#37ffb10e71adaf3748d05f713b4c9452f402cbc4"
+  integrity sha512-wqdhLpfCUbEsoEwl3FXwGyv8ief1k/1aUdIPCqVnupM6e8l63BEJdiF/0swtn04/8p05tG/T0FrpTlfwvljOdw==
+
+object-keys@^1.0.11, object-keys@^1.0.12, object-keys@^1.0.6, object-keys@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/object-keys/-/object-keys-1.1.1.tgz#1c47f272df277f3b1daf061677d9c82e2322c60e"
+  integrity sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==
+
+object-visit@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/object-visit/-/object-visit-1.0.1.tgz#f79c4493af0c5377b59fe39d395e41042dd045bb"
+  integrity sha1-95xEk68MU3e1n+OdOV5BBC3QRbs=
+  dependencies:
+    isobject "^3.0.0"
+
+object.assign@^4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/object.assign/-/object.assign-4.1.0.tgz#968bf1100d7956bb3ca086f006f846b3bc4008da"
+  integrity sha512-exHJeq6kBKj58mqGyTQ9DFvrZC/eR6OwxzoM9YRoGBqrXYonaFyGiFMuc9VZrXf7DarreEwMpurG3dd+CNyW5w==
+  dependencies:
+    define-properties "^1.1.2"
+    function-bind "^1.1.1"
+    has-symbols "^1.0.0"
+    object-keys "^1.0.11"
+
+object.getownpropertydescriptors@^2.0.3:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.1.0.tgz#369bf1f9592d8ab89d712dced5cb81c7c5352649"
+  integrity sha512-Z53Oah9A3TdLoblT7VKJaTDdXdT+lQO+cNpKVnya5JDe9uLvzu1YyY1yFDFrcxrlRgWrEFH0jJtD/IbuwjcEVg==
+  dependencies:
+    define-properties "^1.1.3"
+    es-abstract "^1.17.0-next.1"
+
+object.pick@^1.3.0:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/object.pick/-/object.pick-1.3.0.tgz#87a10ac4c1694bd2e1cbf53591a66141fb5dd747"
+  integrity sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=
+  dependencies:
+    isobject "^3.0.1"
+
+object.values@^1.1.0:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/object.values/-/object.values-1.1.1.tgz#68a99ecde356b7e9295a3c5e0ce31dc8c953de5e"
+  integrity sha512-WTa54g2K8iu0kmS/us18jEmdv1a4Wi//BZ/DTVYEcH0XhLM5NYdpDHja3gt57VrZLcNAO2WGA+KpWsDBaHt6eA==
+  dependencies:
+    define-properties "^1.1.3"
+    es-abstract "^1.17.0-next.1"
+    function-bind "^1.1.1"
+    has "^1.0.3"
+
+on-finished@~2.3.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/on-finished/-/on-finished-2.3.0.tgz#20f1336481b083cd75337992a16971aa2d906947"
+  integrity sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=
+  dependencies:
+    ee-first "1.1.1"
+
+once@^1.3.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
+  integrity sha1-WDsap3WWHUsROsF9nFC6753Xa9E=
+  dependencies:
+    wrappy "1"
+
+onetime@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/onetime/-/onetime-2.0.1.tgz#067428230fd67443b2794b22bba528b6867962d4"
+  integrity sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ=
+  dependencies:
+    mimic-fn "^1.0.0"
+
+onetime@^5.1.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/onetime/-/onetime-5.1.0.tgz#fff0f3c91617fe62bb50189636e99ac8a6df7be5"
+  integrity sha512-5NcSkPHhwTVFIQN+TUqXoS5+dlElHXdpAWu9I0HP20YOtIi+aZ0Ct82jdlILDxjLEAWwvm+qj1m6aEtsDVmm6Q==
+  dependencies:
+    mimic-fn "^2.1.0"
+
+opn@^5.1.0:
+  version "5.5.0"
+  resolved "https://registry.yarnpkg.com/opn/-/opn-5.5.0.tgz#fc7164fab56d235904c51c3b27da6758ca3b9bfc"
+  integrity sha512-PqHpggC9bLV0VeWcdKhkpxY+3JTzetLSqTCWL/z/tFIbI6G8JCjondXklT1JinczLz2Xib62sSp0T/gKT4KksA==
+  dependencies:
+    is-wsl "^1.1.0"
+
+optionator@^0.8.1, optionator@^0.8.3:
+  version "0.8.3"
+  resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.8.3.tgz#84fa1d036fe9d3c7e21d99884b601167ec8fb495"
+  integrity sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==
+  dependencies:
+    deep-is "~0.1.3"
+    fast-levenshtein "~2.0.6"
+    levn "~0.3.0"
+    prelude-ls "~1.1.2"
+    type-check "~0.3.2"
+    word-wrap "~1.2.3"
+
+ora@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/ora/-/ora-2.1.0.tgz#6caf2830eb924941861ec53a173799e008b51e5b"
+  integrity sha512-hNNlAd3gfv/iPmsNxYoAPLvxg7HuPozww7fFonMZvL84tP6Ox5igfk5j/+a9rtJJwqMgKK+JgWsAQik5o0HTLA==
+  dependencies:
+    chalk "^2.3.1"
+    cli-cursor "^2.1.0"
+    cli-spinners "^1.1.0"
+    log-symbols "^2.2.0"
+    strip-ansi "^4.0.0"
+    wcwidth "^1.0.1"
+
+os-browserify@^0.3.0, os-browserify@~0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/os-browserify/-/os-browserify-0.3.0.tgz#854373c7f5c2315914fc9bfc6bd8238fdda1ec27"
+  integrity sha1-hUNzx/XCMVkU/Jv8a9gjj92h7Cc=
+
+os-tmpdir@~1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz#bbe67406c79aa85c5cfec766fe5734555dfa1274"
+  integrity sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=
+
+p-limit@^2.0.0:
+  version "2.2.1"
+  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-2.2.1.tgz#aa07a788cc3151c939b5131f63570f0dd2009537"
+  integrity sha512-85Tk+90UCVWvbDavCLKPOLC9vvY8OwEX/RtKF+/1OADJMVlFfEHOiMTPVyxg7mk/dKa+ipdHm0OUkTvCpMTuwg==
+  dependencies:
+    p-try "^2.0.0"
+
+p-locate@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-3.0.0.tgz#322d69a05c0264b25997d9f40cd8a891ab0064a4"
+  integrity sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==
+  dependencies:
+    p-limit "^2.0.0"
+
+p-try@^2.0.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/p-try/-/p-try-2.2.0.tgz#cb2868540e313d61de58fafbe35ce9004d5540e6"
+  integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==
+
+pako@^0.2.5:
+  version "0.2.9"
+  resolved "https://registry.yarnpkg.com/pako/-/pako-0.2.9.tgz#f3f7522f4ef782348da8161bad9ecfd51bf83a75"
+  integrity sha1-8/dSL073gjSNqBYbrZ7P1Rv4OnU=
+
+pako@~1.0.5:
+  version "1.0.10"
+  resolved "https://registry.yarnpkg.com/pako/-/pako-1.0.10.tgz#4328badb5086a426aa90f541977d4955da5c9732"
+  integrity sha512-0DTvPVU3ed8+HNXOu5Bs+o//Mbdj9VNQMUOe9oKCwh8l0GNwpTDMKCWbRjgtD291AWnkAgkqA/LOnQS8AmS1tw==
+
+parcel-bundler@^1.12.4:
+  version "1.12.4"
+  resolved "https://registry.yarnpkg.com/parcel-bundler/-/parcel-bundler-1.12.4.tgz#31223f4ab4d00323a109fce28d5e46775409a9ee"
+  integrity sha512-G+iZGGiPEXcRzw0fiRxWYCKxdt/F7l9a0xkiU4XbcVRJCSlBnioWEwJMutOCCpoQmaQtjB4RBHDGIHN85AIhLQ==
+  dependencies:
+    "@babel/code-frame" "^7.0.0"
+    "@babel/core" "^7.4.4"
+    "@babel/generator" "^7.4.4"
+    "@babel/parser" "^7.4.4"
+    "@babel/plugin-transform-flow-strip-types" "^7.4.4"
+    "@babel/plugin-transform-modules-commonjs" "^7.4.4"
+    "@babel/plugin-transform-react-jsx" "^7.0.0"
+    "@babel/preset-env" "^7.4.4"
+    "@babel/runtime" "^7.4.4"
+    "@babel/template" "^7.4.4"
+    "@babel/traverse" "^7.4.4"
+    "@babel/types" "^7.4.4"
+    "@iarna/toml" "^2.2.0"
+    "@parcel/fs" "^1.11.0"
+    "@parcel/logger" "^1.11.1"
+    "@parcel/utils" "^1.11.0"
+    "@parcel/watcher" "^1.12.1"
+    "@parcel/workers" "^1.11.0"
+    ansi-to-html "^0.6.4"
+    babylon-walk "^1.0.2"
+    browserslist "^4.1.0"
+    chalk "^2.1.0"
+    clone "^2.1.1"
+    command-exists "^1.2.6"
+    commander "^2.11.0"
+    core-js "^2.6.5"
+    cross-spawn "^6.0.4"
+    css-modules-loader-core "^1.1.0"
+    cssnano "^4.0.0"
+    deasync "^0.1.14"
+    dotenv "^5.0.0"
+    dotenv-expand "^5.1.0"
+    envinfo "^7.3.1"
+    fast-glob "^2.2.2"
+    filesize "^3.6.0"
+    get-port "^3.2.0"
+    htmlnano "^0.2.2"
+    is-glob "^4.0.0"
+    is-url "^1.2.2"
+    js-yaml "^3.10.0"
+    json5 "^1.0.1"
+    micromatch "^3.0.4"
+    mkdirp "^0.5.1"
+    node-forge "^0.7.1"
+    node-libs-browser "^2.0.0"
+    opn "^5.1.0"
+    postcss "^7.0.11"
+    postcss-value-parser "^3.3.1"
+    posthtml "^0.11.2"
+    posthtml-parser "^0.4.0"
+    posthtml-render "^1.1.3"
+    resolve "^1.4.0"
+    semver "^5.4.1"
+    serialize-to-js "^3.0.0"
+    serve-static "^1.12.4"
+    source-map "0.6.1"
+    terser "^3.7.3"
+    v8-compile-cache "^2.0.0"
+    ws "^5.1.1"
+
+parent-module@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/parent-module/-/parent-module-1.0.1.tgz#691d2709e78c79fae3a156622452d00762caaaa2"
+  integrity sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==
+  dependencies:
+    callsites "^3.0.0"
+
+parents@^1.0.0, parents@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/parents/-/parents-1.0.1.tgz#fedd4d2bf193a77745fe71e371d73c3307d9c751"
+  integrity sha1-/t1NK/GTp3dF/nHjcdc8MwfZx1E=
+  dependencies:
+    path-platform "~0.11.15"
+
+parse-asn1@^5.0.0:
+  version "5.1.5"
+  resolved "https://registry.yarnpkg.com/parse-asn1/-/parse-asn1-5.1.5.tgz#003271343da58dc94cace494faef3d2147ecea0e"
+  integrity sha512-jkMYn1dcJqF6d5CpU689bq7w/b5ALS9ROVSpQDPrZsqqesUJii9qutvoT5ltGedNXMO2e16YUWIghG9KxaViTQ==
+  dependencies:
+    asn1.js "^4.0.0"
+    browserify-aes "^1.0.0"
+    create-hash "^1.1.0"
+    evp_bytestokey "^1.0.0"
+    pbkdf2 "^3.0.3"
+    safe-buffer "^5.1.1"
+
+parse-json@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-4.0.0.tgz#be35f5425be1f7f6c747184f98a788cb99477ee0"
+  integrity sha1-vjX1Qlvh9/bHRxhPmKeIy5lHfuA=
+  dependencies:
+    error-ex "^1.3.1"
+    json-parse-better-errors "^1.0.1"
+
+parse5@5.1.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/parse5/-/parse5-5.1.0.tgz#c59341c9723f414c452975564c7c00a68d58acd2"
+  integrity sha512-fxNG2sQjHvlVAYmzBZS9YlDp6PTSSDwa98vkD4QgVDDCAo84z5X1t5XyJQ62ImdLXx5NdIIfihey6xpum9/gRQ==
+
+parseurl@~1.3.3:
+  version "1.3.3"
+  resolved "https://registry.yarnpkg.com/parseurl/-/parseurl-1.3.3.tgz#9da19e7bee8d12dff0513ed5b76957793bc2e8d4"
+  integrity sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==
+
+pascalcase@^0.1.1:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/pascalcase/-/pascalcase-0.1.1.tgz#b363e55e8006ca6fe21784d2db22bd15d7917f14"
+  integrity sha1-s2PlXoAGym/iF4TS2yK9FdeRfxQ=
+
+path-browserify@0.0.1, path-browserify@~0.0.0:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/path-browserify/-/path-browserify-0.0.1.tgz#e6c4ddd7ed3aa27c68a20cc4e50e1a4ee83bbc4a"
+  integrity sha512-BapA40NHICOS+USX9SN4tyhq+A2RrN/Ws5F0Z5aMHDp98Fl86lX8Oti8B7uN93L4Ifv4fHOEA+pQw87gmMO/lQ==
+
+path-dirname@^1.0.0:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/path-dirname/-/path-dirname-1.0.2.tgz#cc33d24d525e099a5388c0336c6e32b9160609e0"
+  integrity sha1-zDPSTVJeCZpTiMAzbG4yuRYGCeA=
+
+path-exists@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-3.0.0.tgz#ce0ebeaa5f78cb18925ea7d810d7b59b010fd515"
+  integrity sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=
+
+path-is-absolute@^1.0.0, path-is-absolute@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
+  integrity sha1-F0uSaHNVNP+8es5r9TpanhtcX18=
+
+path-key@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/path-key/-/path-key-2.0.1.tgz#411cadb574c5a140d3a4b1910d40d80cc9f40b40"
+  integrity sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=
+
+path-parse@^1.0.6:
+  version "1.0.6"
+  resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.6.tgz#d62dbb5679405d72c4737ec58600e9ddcf06d24c"
+  integrity sha512-GSmOT2EbHrINBf9SR7CDELwlJ8AENk3Qn7OikK4nFYAu3Ote2+JYNVvkpAEQm3/TLNEJFD/xZJjzyxg3KBWOzw==
+
+path-platform@~0.11.15:
+  version "0.11.15"
+  resolved "https://registry.yarnpkg.com/path-platform/-/path-platform-0.11.15.tgz#e864217f74c36850f0852b78dc7bf7d4a5721bf2"
+  integrity sha1-6GQhf3TDaFDwhSt43Hv31KVyG/I=
+
+path-type@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/path-type/-/path-type-3.0.0.tgz#cef31dc8e0a1a3bb0d105c0cd97cf3bf47f4e36f"
+  integrity sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==
+  dependencies:
+    pify "^3.0.0"
+
+pbkdf2@^3.0.3:
+  version "3.0.17"
+  resolved "https://registry.yarnpkg.com/pbkdf2/-/pbkdf2-3.0.17.tgz#976c206530617b14ebb32114239f7b09336e93a6"
+  integrity sha512-U/il5MsrZp7mGg3mSQfn742na2T+1/vHDCG5/iTI3X9MKUuYUZVLQhyRsg06mCgDBTd57TxzgZt7P+fYfjRLtA==
+  dependencies:
+    create-hash "^1.1.2"
+    create-hmac "^1.1.4"
+    ripemd160 "^2.0.1"
+    safe-buffer "^5.0.1"
+    sha.js "^2.4.8"
+
+performance-now@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/performance-now/-/performance-now-2.1.0.tgz#6309f4e0e5fa913ec1c69307ae364b4b377c9e7b"
+  integrity sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=
+
+physical-cpu-count@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/physical-cpu-count/-/physical-cpu-count-2.0.0.tgz#18de2f97e4bf7a9551ad7511942b5496f7aba660"
+  integrity sha1-GN4vl+S/epVRrXURlCtUlverpmA=
+
+pidtree@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/pidtree/-/pidtree-0.3.0.tgz#f6fada10fccc9f99bf50e90d0b23d72c9ebc2e6b"
+  integrity sha512-9CT4NFlDcosssyg8KVFltgokyKZIFjoBxw8CTGy+5F38Y1eQWrt8tRayiUOXE+zVKQnYu5BR8JjCtvK3BcnBhg==
+
+pify@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/pify/-/pify-3.0.0.tgz#e5a4acd2c101fdf3d9a4d07f0dbc4db49dd28176"
+  integrity sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY=
+
+pify@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/pify/-/pify-4.0.1.tgz#4b2cd25c50d598735c50292224fd8c6df41e3231"
+  integrity sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==
+
+pn@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/pn/-/pn-1.1.0.tgz#e2f4cef0e219f463c179ab37463e4e1ecdccbafb"
+  integrity sha512-2qHaIQr2VLRFoxe2nASzsV6ef4yOOH+Fi9FBOVH6cqeSgUnoyySPZkxzLuzd+RYOQTRpROA0ztTMqxROKSb/nA==
+
+posix-character-classes@^0.1.0:
+  version "0.1.1"
+  resolved "https://registry.yarnpkg.com/posix-character-classes/-/posix-character-classes-0.1.1.tgz#01eac0fe3b5af71a2a6c02feabb8c1fef7e00eab"
+  integrity sha1-AerA/jta9xoqbAL+q7jB/vfgDqs=
+
+postcss-calc@^7.0.1:
+  version "7.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-calc/-/postcss-calc-7.0.1.tgz#36d77bab023b0ecbb9789d84dcb23c4941145436"
+  integrity sha512-oXqx0m6tb4N3JGdmeMSc/i91KppbYsFZKdH0xMOqK8V1rJlzrKlTdokz8ozUXLVejydRN6u2IddxpcijRj2FqQ==
+  dependencies:
+    css-unit-converter "^1.1.1"
+    postcss "^7.0.5"
+    postcss-selector-parser "^5.0.0-rc.4"
+    postcss-value-parser "^3.3.1"
+
+postcss-colormin@^4.0.3:
+  version "4.0.3"
+  resolved "https://registry.yarnpkg.com/postcss-colormin/-/postcss-colormin-4.0.3.tgz#ae060bce93ed794ac71264f08132d550956bd381"
+  integrity sha512-WyQFAdDZpExQh32j0U0feWisZ0dmOtPl44qYmJKkq9xFWY3p+4qnRzCHeNrkeRhwPHz9bQ3mo0/yVkaply0MNw==
+  dependencies:
+    browserslist "^4.0.0"
+    color "^3.0.0"
+    has "^1.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-convert-values@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-convert-values/-/postcss-convert-values-4.0.1.tgz#ca3813ed4da0f812f9d43703584e449ebe189a7f"
+  integrity sha512-Kisdo1y77KUC0Jmn0OXU/COOJbzM8cImvw1ZFsBgBgMgb1iL23Zs/LXRe3r+EZqM3vGYKdQ2YJVQ5VkJI+zEJQ==
+  dependencies:
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-discard-comments@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-discard-comments/-/postcss-discard-comments-4.0.2.tgz#1fbabd2c246bff6aaad7997b2b0918f4d7af4033"
+  integrity sha512-RJutN259iuRf3IW7GZyLM5Sw4GLTOH8FmsXBnv8Ab/Tc2k4SR4qbV4DNbyyY4+Sjo362SyDmW2DQ7lBSChrpkg==
+  dependencies:
+    postcss "^7.0.0"
+
+postcss-discard-duplicates@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-discard-duplicates/-/postcss-discard-duplicates-4.0.2.tgz#3fe133cd3c82282e550fc9b239176a9207b784eb"
+  integrity sha512-ZNQfR1gPNAiXZhgENFfEglF93pciw0WxMkJeVmw8eF+JZBbMD7jp6C67GqJAXVZP2BWbOztKfbsdmMp/k8c6oQ==
+  dependencies:
+    postcss "^7.0.0"
+
+postcss-discard-empty@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-discard-empty/-/postcss-discard-empty-4.0.1.tgz#c8c951e9f73ed9428019458444a02ad90bb9f765"
+  integrity sha512-B9miTzbznhDjTfjvipfHoqbWKwd0Mj+/fL5s1QOz06wufguil+Xheo4XpOnc4NqKYBCNqqEzgPv2aPBIJLox0w==
+  dependencies:
+    postcss "^7.0.0"
+
+postcss-discard-overridden@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-discard-overridden/-/postcss-discard-overridden-4.0.1.tgz#652aef8a96726f029f5e3e00146ee7a4e755ff57"
+  integrity sha512-IYY2bEDD7g1XM1IDEsUT4//iEYCxAmP5oDSFMVU/JVvT7gh+l4fmjciLqGgwjdWpQIdb0Che2VX00QObS5+cTg==
+  dependencies:
+    postcss "^7.0.0"
+
+postcss-merge-longhand@^4.0.11:
+  version "4.0.11"
+  resolved "https://registry.yarnpkg.com/postcss-merge-longhand/-/postcss-merge-longhand-4.0.11.tgz#62f49a13e4a0ee04e7b98f42bb16062ca2549e24"
+  integrity sha512-alx/zmoeXvJjp7L4mxEMjh8lxVlDFX1gqWHzaaQewwMZiVhLo42TEClKaeHbRf6J7j82ZOdTJ808RtN0ZOZwvw==
+  dependencies:
+    css-color-names "0.0.4"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+    stylehacks "^4.0.0"
+
+postcss-merge-rules@^4.0.3:
+  version "4.0.3"
+  resolved "https://registry.yarnpkg.com/postcss-merge-rules/-/postcss-merge-rules-4.0.3.tgz#362bea4ff5a1f98e4075a713c6cb25aefef9a650"
+  integrity sha512-U7e3r1SbvYzO0Jr3UT/zKBVgYYyhAz0aitvGIYOYK5CPmkNih+WDSsS5tvPrJ8YMQYlEMvsZIiqmn7HdFUaeEQ==
+  dependencies:
+    browserslist "^4.0.0"
+    caniuse-api "^3.0.0"
+    cssnano-util-same-parent "^4.0.0"
+    postcss "^7.0.0"
+    postcss-selector-parser "^3.0.0"
+    vendors "^1.0.0"
+
+postcss-minify-font-values@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-minify-font-values/-/postcss-minify-font-values-4.0.2.tgz#cd4c344cce474343fac5d82206ab2cbcb8afd5a6"
+  integrity sha512-j85oO6OnRU9zPf04+PZv1LYIYOprWm6IA6zkXkrJXyRveDEuQggG6tvoy8ir8ZwjLxLuGfNkCZEQG7zan+Hbtg==
+  dependencies:
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-minify-gradients@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-minify-gradients/-/postcss-minify-gradients-4.0.2.tgz#93b29c2ff5099c535eecda56c4aa6e665a663471"
+  integrity sha512-qKPfwlONdcf/AndP1U8SJ/uzIJtowHlMaSioKzebAXSG4iJthlWC9iSWznQcX4f66gIWX44RSA841HTHj3wK+Q==
+  dependencies:
+    cssnano-util-get-arguments "^4.0.0"
+    is-color-stop "^1.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-minify-params@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-minify-params/-/postcss-minify-params-4.0.2.tgz#6b9cef030c11e35261f95f618c90036d680db874"
+  integrity sha512-G7eWyzEx0xL4/wiBBJxJOz48zAKV2WG3iZOqVhPet/9geefm/Px5uo1fzlHu+DOjT+m0Mmiz3jkQzVHe6wxAWg==
+  dependencies:
+    alphanum-sort "^1.0.0"
+    browserslist "^4.0.0"
+    cssnano-util-get-arguments "^4.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+    uniqs "^2.0.0"
+
+postcss-minify-selectors@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-minify-selectors/-/postcss-minify-selectors-4.0.2.tgz#e2e5eb40bfee500d0cd9243500f5f8ea4262fbd8"
+  integrity sha512-D5S1iViljXBj9kflQo4YutWnJmwm8VvIsU1GeXJGiG9j8CIg9zs4voPMdQDUmIxetUOh60VilsNzCiAFTOqu3g==
+  dependencies:
+    alphanum-sort "^1.0.0"
+    has "^1.0.0"
+    postcss "^7.0.0"
+    postcss-selector-parser "^3.0.0"
+
+postcss-modules-extract-imports@1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/postcss-modules-extract-imports/-/postcss-modules-extract-imports-1.1.0.tgz#b614c9720be6816eaee35fb3a5faa1dba6a05ddb"
+  integrity sha1-thTJcgvmgW6u41+zpfqh26agXds=
+  dependencies:
+    postcss "^6.0.1"
+
+postcss-modules-local-by-default@1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/postcss-modules-local-by-default/-/postcss-modules-local-by-default-1.2.0.tgz#f7d80c398c5a393fa7964466bd19500a7d61c069"
+  integrity sha1-99gMOYxaOT+nlkRmvRlQCn1hwGk=
+  dependencies:
+    css-selector-tokenizer "^0.7.0"
+    postcss "^6.0.1"
+
+postcss-modules-scope@1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/postcss-modules-scope/-/postcss-modules-scope-1.1.0.tgz#d6ea64994c79f97b62a72b426fbe6056a194bb90"
+  integrity sha1-1upkmUx5+XtipytCb75gVqGUu5A=
+  dependencies:
+    css-selector-tokenizer "^0.7.0"
+    postcss "^6.0.1"
+
+postcss-modules-values@1.3.0:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/postcss-modules-values/-/postcss-modules-values-1.3.0.tgz#ecffa9d7e192518389f42ad0e83f72aec456ea20"
+  integrity sha1-7P+p1+GSUYOJ9CrQ6D9yrsRW6iA=
+  dependencies:
+    icss-replace-symbols "^1.1.0"
+    postcss "^6.0.1"
+
+postcss-normalize-charset@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-charset/-/postcss-normalize-charset-4.0.1.tgz#8b35add3aee83a136b0471e0d59be58a50285dd4"
+  integrity sha512-gMXCrrlWh6G27U0hF3vNvR3w8I1s2wOBILvA87iNXaPvSNo5uZAMYsZG7XjCUf1eVxuPfyL4TJ7++SGZLc9A3g==
+  dependencies:
+    postcss "^7.0.0"
+
+postcss-normalize-display-values@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-display-values/-/postcss-normalize-display-values-4.0.2.tgz#0dbe04a4ce9063d4667ed2be476bb830c825935a"
+  integrity sha512-3F2jcsaMW7+VtRMAqf/3m4cPFhPD3EFRgNs18u+k3lTJJlVe7d0YPO+bnwqo2xg8YiRpDXJI2u8A0wqJxMsQuQ==
+  dependencies:
+    cssnano-util-get-match "^4.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-normalize-positions@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-positions/-/postcss-normalize-positions-4.0.2.tgz#05f757f84f260437378368a91f8932d4b102917f"
+  integrity sha512-Dlf3/9AxpxE+NF1fJxYDeggi5WwV35MXGFnnoccP/9qDtFrTArZ0D0R+iKcg5WsUd8nUYMIl8yXDCtcrT8JrdA==
+  dependencies:
+    cssnano-util-get-arguments "^4.0.0"
+    has "^1.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-normalize-repeat-style@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-repeat-style/-/postcss-normalize-repeat-style-4.0.2.tgz#c4ebbc289f3991a028d44751cbdd11918b17910c"
+  integrity sha512-qvigdYYMpSuoFs3Is/f5nHdRLJN/ITA7huIoCyqqENJe9PvPmLhNLMu7QTjPdtnVf6OcYYO5SHonx4+fbJE1+Q==
+  dependencies:
+    cssnano-util-get-arguments "^4.0.0"
+    cssnano-util-get-match "^4.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-normalize-string@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-string/-/postcss-normalize-string-4.0.2.tgz#cd44c40ab07a0c7a36dc5e99aace1eca4ec2690c"
+  integrity sha512-RrERod97Dnwqq49WNz8qo66ps0swYZDSb6rM57kN2J+aoyEAJfZ6bMx0sx/F9TIEX0xthPGCmeyiam/jXif0eA==
+  dependencies:
+    has "^1.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-normalize-timing-functions@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-timing-functions/-/postcss-normalize-timing-functions-4.0.2.tgz#8e009ca2a3949cdaf8ad23e6b6ab99cb5e7d28d9"
+  integrity sha512-acwJY95edP762e++00Ehq9L4sZCEcOPyaHwoaFOhIwWCDfik6YvqsYNxckee65JHLKzuNSSmAdxwD2Cud1Z54A==
+  dependencies:
+    cssnano-util-get-match "^4.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-normalize-unicode@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-unicode/-/postcss-normalize-unicode-4.0.1.tgz#841bd48fdcf3019ad4baa7493a3d363b52ae1cfb"
+  integrity sha512-od18Uq2wCYn+vZ/qCOeutvHjB5jm57ToxRaMeNuf0nWVHaP9Hua56QyMF6fs/4FSUnVIw0CBPsU0K4LnBPwYwg==
+  dependencies:
+    browserslist "^4.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-normalize-url@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-url/-/postcss-normalize-url-4.0.1.tgz#10e437f86bc7c7e58f7b9652ed878daaa95faae1"
+  integrity sha512-p5oVaF4+IHwu7VpMan/SSpmpYxcJMtkGppYf0VbdH5B6hN8YNmVyJLuY9FmLQTzY3fag5ESUUHDqM+heid0UVA==
+  dependencies:
+    is-absolute-url "^2.0.0"
+    normalize-url "^3.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-normalize-whitespace@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-normalize-whitespace/-/postcss-normalize-whitespace-4.0.2.tgz#bf1d4070fe4fcea87d1348e825d8cc0c5faa7d82"
+  integrity sha512-tO8QIgrsI3p95r8fyqKV+ufKlSHh9hMJqACqbv2XknufqEDhDvbguXGBBqxw9nsQoXWf0qOqppziKJKHMD4GtA==
+  dependencies:
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-ordered-values@^4.1.2:
+  version "4.1.2"
+  resolved "https://registry.yarnpkg.com/postcss-ordered-values/-/postcss-ordered-values-4.1.2.tgz#0cf75c820ec7d5c4d280189559e0b571ebac0eee"
+  integrity sha512-2fCObh5UanxvSxeXrtLtlwVThBvHn6MQcu4ksNT2tsaV2Fg76R2CV98W7wNSlX+5/pFwEyaDwKLLoEV7uRybAw==
+  dependencies:
+    cssnano-util-get-arguments "^4.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-reduce-initial@^4.0.3:
+  version "4.0.3"
+  resolved "https://registry.yarnpkg.com/postcss-reduce-initial/-/postcss-reduce-initial-4.0.3.tgz#7fd42ebea5e9c814609639e2c2e84ae270ba48df"
+  integrity sha512-gKWmR5aUulSjbzOfD9AlJiHCGH6AEVLaM0AV+aSioxUDd16qXP1PCh8d1/BGVvpdWn8k/HiK7n6TjeoXN1F7DA==
+  dependencies:
+    browserslist "^4.0.0"
+    caniuse-api "^3.0.0"
+    has "^1.0.0"
+    postcss "^7.0.0"
+
+postcss-reduce-transforms@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-reduce-transforms/-/postcss-reduce-transforms-4.0.2.tgz#17efa405eacc6e07be3414a5ca2d1074681d4e29"
+  integrity sha512-EEVig1Q2QJ4ELpJXMZR8Vt5DQx8/mo+dGWSR7vWXqcob2gQLyQGsionYcGKATXvQzMPn6DSN1vTN7yFximdIAg==
+  dependencies:
+    cssnano-util-get-match "^4.0.0"
+    has "^1.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+
+postcss-selector-parser@6.0.2, postcss-selector-parser@^6.0.0:
+  version "6.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-selector-parser/-/postcss-selector-parser-6.0.2.tgz#934cf799d016c83411859e09dcecade01286ec5c"
+  integrity sha512-36P2QR59jDTOAiIkqEprfJDsoNrvwFei3eCqKd1Y0tUsBimsq39BLp7RD+JWny3WgB1zGhJX8XVePwm9k4wdBg==
+  dependencies:
+    cssesc "^3.0.0"
+    indexes-of "^1.0.1"
+    uniq "^1.0.1"
+
+postcss-selector-parser@^3.0.0:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/postcss-selector-parser/-/postcss-selector-parser-3.1.1.tgz#4f875f4afb0c96573d5cf4d74011aee250a7e865"
+  integrity sha1-T4dfSvsMllc9XPTXQBGu4lCn6GU=
+  dependencies:
+    dot-prop "^4.1.1"
+    indexes-of "^1.0.1"
+    uniq "^1.0.1"
+
+postcss-selector-parser@^5.0.0-rc.4:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/postcss-selector-parser/-/postcss-selector-parser-5.0.0.tgz#249044356697b33b64f1a8f7c80922dddee7195c"
+  integrity sha512-w+zLE5Jhg6Liz8+rQOWEAwtwkyqpfnmsinXjXg6cY7YIONZZtgvE0v2O0uhQBs0peNomOJwWRKt6JBfTdTd3OQ==
+  dependencies:
+    cssesc "^2.0.0"
+    indexes-of "^1.0.1"
+    uniq "^1.0.1"
+
+postcss-svgo@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/postcss-svgo/-/postcss-svgo-4.0.2.tgz#17b997bc711b333bab143aaed3b8d3d6e3d38258"
+  integrity sha512-C6wyjo3VwFm0QgBy+Fu7gCYOkCmgmClghO+pjcxvrcBKtiKt0uCF+hvbMO1fyv5BMImRK90SMb+dwUnfbGd+jw==
+  dependencies:
+    is-svg "^3.0.0"
+    postcss "^7.0.0"
+    postcss-value-parser "^3.0.0"
+    svgo "^1.0.0"
+
+postcss-unique-selectors@^4.0.1:
+  version "4.0.1"
+  resolved "https://registry.yarnpkg.com/postcss-unique-selectors/-/postcss-unique-selectors-4.0.1.tgz#9446911f3289bfd64c6d680f073c03b1f9ee4bac"
+  integrity sha512-+JanVaryLo9QwZjKrmJgkI4Fn8SBgRO6WXQBJi7KiAVPlmxikB5Jzc4EvXMT2H0/m0RjrVVm9rGNhZddm/8Spg==
+  dependencies:
+    alphanum-sort "^1.0.0"
+    postcss "^7.0.0"
+    uniqs "^2.0.0"
+
+postcss-value-parser@^3.0.0, postcss-value-parser@^3.3.1:
+  version "3.3.1"
+  resolved "https://registry.yarnpkg.com/postcss-value-parser/-/postcss-value-parser-3.3.1.tgz#9ff822547e2893213cf1c30efa51ac5fd1ba8281"
+  integrity sha512-pISE66AbVkp4fDQ7VHBwRNXzAAKJjw4Vw7nWI/+Q3vuly7SNfgYXvm6i5IgFylHGK5sP/xHAbB7N49OS4gWNyQ==
+
+postcss@6.0.1:
+  version "6.0.1"
+  resolved "https://registry.yarnpkg.com/postcss/-/postcss-6.0.1.tgz#000dbd1f8eef217aa368b9a212c5fc40b2a8f3f2"
+  integrity sha1-AA29H47vIXqjaLmiEsX8QLKo8/I=
+  dependencies:
+    chalk "^1.1.3"
+    source-map "^0.5.6"
+    supports-color "^3.2.3"
+
+postcss@^6.0.1:
+  version "6.0.23"
+  resolved "https://registry.yarnpkg.com/postcss/-/postcss-6.0.23.tgz#61c82cc328ac60e677645f979054eb98bc0e3324"
+  integrity sha512-soOk1h6J3VMTZtVeVpv15/Hpdl2cBLX3CAw4TAbkpTJiNPk9YP/zWcD1ND+xEtvyuuvKzbxliTOIyvkSeSJ6ag==
+  dependencies:
+    chalk "^2.4.1"
+    source-map "^0.6.1"
+    supports-color "^5.4.0"
+
+postcss@^7.0.0, postcss@^7.0.1, postcss@^7.0.11, postcss@^7.0.14, postcss@^7.0.17, postcss@^7.0.5:
+  version "7.0.25"
+  resolved "https://registry.yarnpkg.com/postcss/-/postcss-7.0.25.tgz#dd2a2a753d50b13bed7a2009b4a18ac14d9db21e"
+  integrity sha512-NXXVvWq9icrm/TgQC0O6YVFi4StfJz46M1iNd/h6B26Nvh/HKI+q4YZtFN/EjcInZliEscO/WL10BXnc1E5nwg==
+  dependencies:
+    chalk "^2.4.2"
+    source-map "^0.6.1"
+    supports-color "^6.1.0"
+
+posthtml-parser@^0.4.0, posthtml-parser@^0.4.1:
+  version "0.4.2"
+  resolved "https://registry.yarnpkg.com/posthtml-parser/-/posthtml-parser-0.4.2.tgz#a132bbdf0cd4bc199d34f322f5c1599385d7c6c1"
+  integrity sha512-BUIorsYJTvS9UhXxPTzupIztOMVNPa/HtAm9KHni9z6qEfiJ1bpOBL5DfUOL9XAc3XkLIEzBzpph+Zbm4AdRAg==
+  dependencies:
+    htmlparser2 "^3.9.2"
+
+posthtml-render@^1.1.3, posthtml-render@^1.1.5:
+  version "1.1.5"
+  resolved "https://registry.yarnpkg.com/posthtml-render/-/posthtml-render-1.1.5.tgz#387934e85438a3de77085fbc7d264efb00bd0e0f"
+  integrity sha512-yvt54j0zCBHQVEFAuR+yHld8CZrCa/E1Z/OcFNCV1IEWTLVxT8O7nYnM4IIw1CD4r8kaRd3lc42+0lgCKgm87w==
+
+posthtml@^0.11.2:
+  version "0.11.6"
+  resolved "https://registry.yarnpkg.com/posthtml/-/posthtml-0.11.6.tgz#e349d51af7929d0683b9d8c3abd8166beecc90a8"
+  integrity sha512-C2hrAPzmRdpuL3iH0TDdQ6XCc9M7Dcc3zEW5BLerY65G4tWWszwv6nG/ksi6ul5i2mx22ubdljgktXCtNkydkw==
+  dependencies:
+    posthtml-parser "^0.4.1"
+    posthtml-render "^1.1.5"
+
+posthtml@^0.12.0:
+  version "0.12.0"
+  resolved "https://registry.yarnpkg.com/posthtml/-/posthtml-0.12.0.tgz#6e2a2fcd774eaed1a419a95c5cc3a92b676a40a6"
+  integrity sha512-aNUEP/SfKUXAt+ghG51LC5MmafChBZeslVe/SSdfKIgLGUVRE68mrMF4V8XbH07ZifM91tCSuxY3eHIFLlecQw==
+  dependencies:
+    posthtml-parser "^0.4.1"
+    posthtml-render "^1.1.5"
+
+prelude-ls@~1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.1.2.tgz#21932a549f5e52ffd9a827f570e04be62a97da54"
+  integrity sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=
+
+private@^0.1.6:
+  version "0.1.8"
+  resolved "https://registry.yarnpkg.com/private/-/private-0.1.8.tgz#2381edb3689f7a53d653190060fcf822d2f368ff"
+  integrity sha512-VvivMrbvd2nKkiG38qjULzlc+4Vx4wm/whI9pQD35YrARNnhxeiRktSOhSukRLFNlzg6Br/cJPet5J/u19r/mg==
+
+process-nextick-args@~2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz#7820d9b16120cc55ca9ae7792680ae7dba6d7fe2"
+  integrity sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==
+
+process@^0.11.10, process@~0.11.0:
+  version "0.11.10"
+  resolved "https://registry.yarnpkg.com/process/-/process-0.11.10.tgz#7332300e840161bda3e69a1d1d91a7d4bc16f182"
+  integrity sha1-czIwDoQBYb2j5podHZGn1LwW8YI=
+
+progress@^2.0.0:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/progress/-/progress-2.0.3.tgz#7e8cf8d8f5b8f239c1bc68beb4eb78567d572ef8"
+  integrity sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==
+
+psl@^1.1.24, psl@^1.1.28:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/psl/-/psl-1.6.0.tgz#60557582ee23b6c43719d9890fb4170ecd91e110"
+  integrity sha512-SYKKmVel98NCOYXpkwUqZqh0ahZeeKfmisiLIcEZdsb+WbLv02g/dI5BUmZnIyOe7RzZtLax81nnb2HbvC2tzA==
+
+public-encrypt@^4.0.0:
+  version "4.0.3"
+  resolved "https://registry.yarnpkg.com/public-encrypt/-/public-encrypt-4.0.3.tgz#4fcc9d77a07e48ba7527e7cbe0de33d0701331e0"
+  integrity sha512-zVpa8oKZSz5bTMTFClc1fQOnyyEzpl5ozpi1B5YcvBrdohMjH2rfsBtyXcuNuwjsDIXmBYlF2N5FlJYhR29t8Q==
+  dependencies:
+    bn.js "^4.1.0"
+    browserify-rsa "^4.0.0"
+    create-hash "^1.1.0"
+    parse-asn1 "^5.0.0"
+    randombytes "^2.0.1"
+    safe-buffer "^5.1.2"
+
+punycode@1.3.2:
+  version "1.3.2"
+  resolved "https://registry.yarnpkg.com/punycode/-/punycode-1.3.2.tgz#9653a036fb7c1ee42342f2325cceefea3926c48d"
+  integrity sha1-llOgNvt8HuQjQvIyXM7v6jkmxI0=
+
+punycode@^1.2.4, punycode@^1.3.2, punycode@^1.4.1:
+  version "1.4.1"
+  resolved "https://registry.yarnpkg.com/punycode/-/punycode-1.4.1.tgz#c0d5a63b2718800ad8e1eb0fa5269c84dd41845e"
+  integrity sha1-wNWmOycYgArY4esPpSachN1BhF4=
+
+punycode@^2.1.0, punycode@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.1.1.tgz#b58b010ac40c22c5657616c8d2c2c02c7bf479ec"
+  integrity sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==
+
+purgecss@^1.4.0:
+  version "1.4.2"
+  resolved "https://registry.yarnpkg.com/purgecss/-/purgecss-1.4.2.tgz#67ab50cb4f5c163fcefde56002467c974e577f41"
+  integrity sha512-hkOreFTgiyMHMmC2BxzdIw5DuC6kxAbP/gGOGd3MEsF3+5m69rIvUEPaxrnoUtfODTFKe9hcXjGwC6jcjoyhOw==
+  dependencies:
+    glob "^7.1.3"
+    postcss "^7.0.14"
+    postcss-selector-parser "^6.0.0"
+    yargs "^14.0.0"
+
+q@^1.1.2:
+  version "1.5.1"
+  resolved "https://registry.yarnpkg.com/q/-/q-1.5.1.tgz#7e32f75b41381291d04611f1bf14109ac00651d7"
+  integrity sha1-fjL3W0E4EpHQRhHxvxQQmsAGUdc=
+
+qs@~6.5.2:
+  version "6.5.2"
+  resolved "https://registry.yarnpkg.com/qs/-/qs-6.5.2.tgz#cb3ae806e8740444584ef154ce8ee98d403f3e36"
+  integrity sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==
+
+querystring-es3@^0.2.0, querystring-es3@~0.2.0:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/querystring-es3/-/querystring-es3-0.2.1.tgz#9ec61f79049875707d69414596fd907a4d711e73"
+  integrity sha1-nsYfeQSYdXB9aUFFlv2Qek1xHnM=
+
+querystring@0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/querystring/-/querystring-0.2.0.tgz#b209849203bb25df820da756e747005878521620"
+  integrity sha1-sgmEkgO7Jd+CDadW50cAWHhSFiA=
+
+quote-stream@^1.0.1, quote-stream@~1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/quote-stream/-/quote-stream-1.0.2.tgz#84963f8c9c26b942e153feeb53aae74652b7e0b2"
+  integrity sha1-hJY/jJwmuULhU/7rU6rnRlK34LI=
+  dependencies:
+    buffer-equal "0.0.1"
+    minimist "^1.1.3"
+    through2 "^2.0.0"
+
+randombytes@^2.0.0, randombytes@^2.0.1, randombytes@^2.0.5:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/randombytes/-/randombytes-2.1.0.tgz#df6f84372f0270dc65cdf6291349ab7a473d4f2a"
+  integrity sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==
+  dependencies:
+    safe-buffer "^5.1.0"
+
+randomfill@^1.0.3:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/randomfill/-/randomfill-1.0.4.tgz#c92196fc86ab42be983f1bf31778224931d61458"
+  integrity sha512-87lcbR8+MhcWcUiQ+9e+Rwx8MyR2P7qnt15ynUlbm3TU/fjbgz4GsvfSUDTemtCCtVCqb4ZcEFlyPNTh9bBTLw==
+  dependencies:
+    randombytes "^2.0.5"
+    safe-buffer "^5.1.0"
+
+range-parser@~1.2.1:
+  version "1.2.1"
+  resolved "https://registry.yarnpkg.com/range-parser/-/range-parser-1.2.1.tgz#3cf37023d199e1c24d1a55b84800c2f3e6468031"
+  integrity sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==
+
+read-only-stream@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/read-only-stream/-/read-only-stream-2.0.0.tgz#2724fd6a8113d73764ac288d4386270c1dbf17f0"
+  integrity sha1-JyT9aoET1zdkrCiNQ4YnDB2/F/A=
+  dependencies:
+    readable-stream "^2.0.2"
+
+read-pkg@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/read-pkg/-/read-pkg-3.0.0.tgz#9cbc686978fee65d16c00e2b19c237fcf6e38389"
+  integrity sha1-nLxoaXj+5l0WwA4rGcI3/Pbjg4k=
+  dependencies:
+    load-json-file "^4.0.0"
+    normalize-package-data "^2.3.2"
+    path-type "^3.0.0"
+
+readable-stream@^2.0.2, readable-stream@^2.2.2, readable-stream@^2.3.3, readable-stream@^2.3.6, readable-stream@~2.3.3, readable-stream@~2.3.6:
+  version "2.3.6"
+  resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.6.tgz#b11c27d88b8ff1fbe070643cf94b0c79ae1b0aaf"
+  integrity sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==
+  dependencies:
+    core-util-is "~1.0.0"
+    inherits "~2.0.3"
+    isarray "~1.0.0"
+    process-nextick-args "~2.0.0"
+    safe-buffer "~5.1.1"
+    string_decoder "~1.1.1"
+    util-deprecate "~1.0.1"
+
+readable-stream@^3.0.6, readable-stream@^3.1.1:
+  version "3.4.0"
+  resolved "https://registry.yarnpkg.com/readable-stream/-/readable-stream-3.4.0.tgz#a51c26754658e0a3c21dbf59163bd45ba6f447fc"
+  integrity sha512-jItXPLmrSR8jmTRmRWJXCnGJsfy85mB3Wd/uINMXA65yrnFo0cPClFIUWzo2najVNSl+mx7/4W8ttlLWJe99pQ==
+  dependencies:
+    inherits "^2.0.3"
+    string_decoder "^1.1.1"
+    util-deprecate "^1.0.1"
+
+readdirp@^2.2.1:
+  version "2.2.1"
+  resolved "https://registry.yarnpkg.com/readdirp/-/readdirp-2.2.1.tgz#0e87622a3325aa33e892285caf8b4e846529a525"
+  integrity sha512-1JU/8q+VgFZyxwrJ+SVIOsh+KywWGpds3NTqikiKpDMZWScmAYyKIgqkO+ARvNWJfXeXR1zxz7aHF4u4CyH6vQ==
+  dependencies:
+    graceful-fs "^4.1.11"
+    micromatch "^3.1.10"
+    readable-stream "^2.0.2"
+
+regenerate-unicode-properties@^8.1.0:
+  version "8.1.0"
+  resolved "https://registry.yarnpkg.com/regenerate-unicode-properties/-/regenerate-unicode-properties-8.1.0.tgz#ef51e0f0ea4ad424b77bf7cb41f3e015c70a3f0e"
+  integrity sha512-LGZzkgtLY79GeXLm8Dp0BVLdQlWICzBnJz/ipWUgo59qBaZ+BHtq51P2q1uVZlppMuUAT37SDk39qUbjTWB7bA==
+  dependencies:
+    regenerate "^1.4.0"
+
+regenerate@^1.2.1, regenerate@^1.4.0:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/regenerate/-/regenerate-1.4.0.tgz#4a856ec4b56e4077c557589cae85e7a4c8869a11"
+  integrity sha512-1G6jJVDWrt0rK99kBjvEtziZNCICAuvIPkSiUFIQxVP06RCVpq3dmDo2oi6ABpYaDYaTRr67BEhL8r1wgEZZKg==
+
+regenerator-runtime@^0.11.0:
+  version "0.11.1"
+  resolved "https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.11.1.tgz#be05ad7f9bf7d22e056f9726cee5017fbf19e2e9"
+  integrity sha512-MguG95oij0fC3QV3URf4V2SDYGJhJnJGqvIIgdECeODCT98wSWDAJ94SSuVpYQUoTcGUIL6L4yNB7j1DFFHSBg==
+
+regenerator-runtime@^0.13.2:
+  version "0.13.3"
+  resolved "https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.13.3.tgz#7cf6a77d8f5c6f60eb73c5fc1955b2ceb01e6bf5"
+  integrity sha512-naKIZz2GQ8JWh///G7L3X6LaQUAMp2lvb1rvwwsURe/VXwD6VMfr+/1NuNw3ag8v2kY1aQ/go5SNn79O9JU7yw==
+
+regenerator-transform@^0.14.0:
+  version "0.14.1"
+  resolved "https://registry.yarnpkg.com/regenerator-transform/-/regenerator-transform-0.14.1.tgz#3b2fce4e1ab7732c08f665dfdb314749c7ddd2fb"
+  integrity sha512-flVuee02C3FKRISbxhXl9mGzdbWUVHubl1SMaknjxkFB1/iqpJhArQUvRxOOPEc/9tAiX0BaQ28FJH10E4isSQ==
+  dependencies:
+    private "^0.1.6"
+
+regex-not@^1.0.0, regex-not@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/regex-not/-/regex-not-1.0.2.tgz#1f4ece27e00b0b65e0247a6810e6a85d83a5752c"
+  integrity sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==
+  dependencies:
+    extend-shallow "^3.0.2"
+    safe-regex "^1.1.0"
+
+regexpp@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/regexpp/-/regexpp-2.0.1.tgz#8d19d31cf632482b589049f8281f93dbcba4d07f"
+  integrity sha512-lv0M6+TkDVniA3aD1Eg0DVpfU/booSu7Eev3TDO/mZKHBfVjgCGTV4t4buppESEYDtkArYFOxTJWv6S5C+iaNw==
+
+regexpu-core@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/regexpu-core/-/regexpu-core-1.0.0.tgz#86a763f58ee4d7c2f6b102e4764050de7ed90c6b"
+  integrity sha1-hqdj9Y7k18L2sQLkdkBQ3n7ZDGs=
+  dependencies:
+    regenerate "^1.2.1"
+    regjsgen "^0.2.0"
+    regjsparser "^0.1.4"
+
+regexpu-core@^4.6.0:
+  version "4.6.0"
+  resolved "https://registry.yarnpkg.com/regexpu-core/-/regexpu-core-4.6.0.tgz#2037c18b327cfce8a6fea2a4ec441f2432afb8b6"
+  integrity sha512-YlVaefl8P5BnFYOITTNzDvan1ulLOiXJzCNZxduTIosN17b87h3bvG9yHMoHaRuo88H4mQ06Aodj5VtYGGGiTg==
+  dependencies:
+    regenerate "^1.4.0"
+    regenerate-unicode-properties "^8.1.0"
+    regjsgen "^0.5.0"
+    regjsparser "^0.6.0"
+    unicode-match-property-ecmascript "^1.0.4"
+    unicode-match-property-value-ecmascript "^1.1.0"
+
+regjsgen@^0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/regjsgen/-/regjsgen-0.2.0.tgz#6c016adeac554f75823fe37ac05b92d5a4edb1f7"
+  integrity sha1-bAFq3qxVT3WCP+N6wFuS1aTtsfc=
+
+regjsgen@^0.5.0:
+  version "0.5.1"
+  resolved "https://registry.yarnpkg.com/regjsgen/-/regjsgen-0.5.1.tgz#48f0bf1a5ea205196929c0d9798b42d1ed98443c"
+  integrity sha512-5qxzGZjDs9w4tzT3TPhCJqWdCc3RLYwy9J2NB0nm5Lz+S273lvWcpjaTGHsT1dc6Hhfq41uSEOw8wBmxrKOuyg==
+
+regjsparser@^0.1.4:
+  version "0.1.5"
+  resolved "https://registry.yarnpkg.com/regjsparser/-/regjsparser-0.1.5.tgz#7ee8f84dc6fa792d3fd0ae228d24bd949ead205c"
+  integrity sha1-fuj4Tcb6eS0/0K4ijSS9lJ6tIFw=
+  dependencies:
+    jsesc "~0.5.0"
+
+regjsparser@^0.6.0:
+  version "0.6.1"
+  resolved "https://registry.yarnpkg.com/regjsparser/-/regjsparser-0.6.1.tgz#5b6b28c418f312ef42898dc6865ae2d4b9f0f7a2"
+  integrity sha512-7LutE94sz/NKSYegK+/4E77+8DipxF+Qn2Tmu362AcmsF2NYq/wx3+ObvU90TKEhjf7hQoFXo23ajjrXP7eUgg==
+  dependencies:
+    jsesc "~0.5.0"
+
+remove-trailing-separator@^1.0.1:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz#c24bce2a283adad5bc3f58e0d48249b92379d8ef"
+  integrity sha1-wkvOKig62tW8P1jg1IJJuSN52O8=
+
+repeat-element@^1.1.2:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/repeat-element/-/repeat-element-1.1.3.tgz#782e0d825c0c5a3bb39731f84efee6b742e6b1ce"
+  integrity sha512-ahGq0ZnV5m5XtZLMb+vP76kcAM5nkLqk0lpqAuojSKGgQtn4eRi4ZZGm2olo2zKFH+sMsWaqOCW1dqAnOru72g==
+
+repeat-string@^1.6.1:
+  version "1.6.1"
+  resolved "https://registry.yarnpkg.com/repeat-string/-/repeat-string-1.6.1.tgz#8dcae470e1c88abc2d600fff4a776286da75e637"
+  integrity sha1-jcrkcOHIirwtYA//Sndihtp15jc=
+
+request-promise-core@1.1.3:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/request-promise-core/-/request-promise-core-1.1.3.tgz#e9a3c081b51380dfea677336061fea879a829ee9"
+  integrity sha512-QIs2+ArIGQVp5ZYbWD5ZLCY29D5CfWizP8eWnm8FoGD1TX61veauETVQbrV60662V0oFBkrDOuaBI8XgtuyYAQ==
+  dependencies:
+    lodash "^4.17.15"
+
+request-promise-native@^1.0.5:
+  version "1.0.8"
+  resolved "https://registry.yarnpkg.com/request-promise-native/-/request-promise-native-1.0.8.tgz#a455b960b826e44e2bf8999af64dff2bfe58cb36"
+  integrity sha512-dapwLGqkHtwL5AEbfenuzjTYg35Jd6KPytsC2/TLkVMz8rm+tNt72MGUWT1RP/aYawMpN6HqbNGBQaRcBtjQMQ==
+  dependencies:
+    request-promise-core "1.1.3"
+    stealthy-require "^1.1.1"
+    tough-cookie "^2.3.3"
+
+request@^2.88.0:
+  version "2.88.0"
+  resolved "https://registry.yarnpkg.com/request/-/request-2.88.0.tgz#9c2fca4f7d35b592efe57c7f0a55e81052124fef"
+  integrity sha512-NAqBSrijGLZdM0WZNsInLJpkJokL72XYjUpnB0iwsRgxh7dB6COrHnTBNwN0E+lHDAJzu7kLAkDeY08z2/A0hg==
+  dependencies:
+    aws-sign2 "~0.7.0"
+    aws4 "^1.8.0"
+    caseless "~0.12.0"
+    combined-stream "~1.0.6"
+    extend "~3.0.2"
+    forever-agent "~0.6.1"
+    form-data "~2.3.2"
+    har-validator "~5.1.0"
+    http-signature "~1.2.0"
+    is-typedarray "~1.0.0"
+    isstream "~0.1.2"
+    json-stringify-safe "~5.0.1"
+    mime-types "~2.1.19"
+    oauth-sign "~0.9.0"
+    performance-now "^2.1.0"
+    qs "~6.5.2"
+    safe-buffer "^5.1.2"
+    tough-cookie "~2.4.3"
+    tunnel-agent "^0.6.0"
+    uuid "^3.3.2"
+
+require-directory@^2.1.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42"
+  integrity sha1-jGStX9MNqxyXbiNE/+f3kqam30I=
+
+require-main-filename@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-2.0.0.tgz#d0b329ecc7cc0f61649f62215be69af54aa8989b"
+  integrity sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==
+
+resolve-from@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-3.0.0.tgz#b22c7af7d9d6881bc8b6e653335eebcb0a188748"
+  integrity sha1-six699nWiBvItuZTM17rywoYh0g=
+
+resolve-from@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-4.0.0.tgz#4abcd852ad32dd7baabfe9b40e00a36db5f392e6"
+  integrity sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==
+
+resolve-url@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/resolve-url/-/resolve-url-0.2.1.tgz#2c637fe77c893afd2a663fe21aa9080068e2052a"
+  integrity sha1-LGN/53yJOv0qZj/iGqkIAGjiBSo=
+
+resolve@1.1.7:
+  version "1.1.7"
+  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.1.7.tgz#203114d82ad2c5ed9e8e0411b3932875e889e97b"
+  integrity sha1-IDEU2CrSxe2ejgQRs5ModeiJ6Xs=
+
+resolve@^1.1.4, resolve@^1.1.5, resolve@^1.10.0, resolve@^1.11.0, resolve@^1.11.1, resolve@^1.12.0, resolve@^1.3.2, resolve@^1.4.0:
+  version "1.14.0"
+  resolved "https://registry.yarnpkg.com/resolve/-/resolve-1.14.0.tgz#6d14c6f9db9f8002071332b600039abf82053f64"
+  integrity sha512-uviWSi5N67j3t3UKFxej1loCH0VZn5XuqdNxoLShPcYPw6cUZn74K1VRj+9myynRX03bxIBEkwlkob/ujLsJVw==
+  dependencies:
+    path-parse "^1.0.6"
+
+restore-cursor@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/restore-cursor/-/restore-cursor-2.0.0.tgz#9f7ee287f82fd326d4fd162923d62129eee0dfaf"
+  integrity sha1-n37ih/gv0ybU/RYpI9YhKe7g368=
+  dependencies:
+    onetime "^2.0.0"
+    signal-exit "^3.0.2"
+
+restore-cursor@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/restore-cursor/-/restore-cursor-3.1.0.tgz#39f67c54b3a7a58cea5236d95cf0034239631f7e"
+  integrity sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==
+  dependencies:
+    onetime "^5.1.0"
+    signal-exit "^3.0.2"
+
+ret@~0.1.10:
+  version "0.1.15"
+  resolved "https://registry.yarnpkg.com/ret/-/ret-0.1.15.tgz#b8a4825d5bdb1fc3f6f53c2bc33f81388681c7bc"
+  integrity sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==
+
+rgb-regex@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/rgb-regex/-/rgb-regex-1.0.1.tgz#c0e0d6882df0e23be254a475e8edd41915feaeb1"
+  integrity sha1-wODWiC3w4jviVKR16O3UGRX+rrE=
+
+rgba-regex@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/rgba-regex/-/rgba-regex-1.0.0.tgz#43374e2e2ca0968b0ef1523460b7d730ff22eeb3"
+  integrity sha1-QzdOLiyglosO8VI0YLfXMP8i7rM=
+
+rimraf@2.6.3:
+  version "2.6.3"
+  resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-2.6.3.tgz#b2d104fe0d8fb27cf9e0a1cda8262dd3833c6cab"
+  integrity sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==
+  dependencies:
+    glob "^7.1.3"
+
+rimraf@^2.6.2:
+  version "2.7.1"
+  resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-2.7.1.tgz#35797f13a7fdadc566142c29d4f07ccad483e3ec"
+  integrity sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==
+  dependencies:
+    glob "^7.1.3"
+
+ripemd160@^2.0.0, ripemd160@^2.0.1:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/ripemd160/-/ripemd160-2.0.2.tgz#a1c1a6f624751577ba5d07914cbc92850585890c"
+  integrity sha512-ii4iagi25WusVoiC4B4lq7pbXfAp3D9v5CwfkY33vffw2+pkDjY1D8GaN7spsxvCSx8dkPqOZCEZyfxcmJG2IA==
+  dependencies:
+    hash-base "^3.0.0"
+    inherits "^2.0.1"
+
+rollup-plugin-commonjs@^10.1.0:
+  version "10.1.0"
+  resolved "https://registry.yarnpkg.com/rollup-plugin-commonjs/-/rollup-plugin-commonjs-10.1.0.tgz#417af3b54503878e084d127adf4d1caf8beb86fb"
+  integrity sha512-jlXbjZSQg8EIeAAvepNwhJj++qJWNJw1Cl0YnOqKtP5Djx+fFGkp3WRh+W0ASCaFG5w1jhmzDxgu3SJuVxPF4Q==
+  dependencies:
+    estree-walker "^0.6.1"
+    is-reference "^1.1.2"
+    magic-string "^0.25.2"
+    resolve "^1.11.0"
+    rollup-pluginutils "^2.8.1"
+
+rollup-plugin-node-resolve@^5.2.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/rollup-plugin-node-resolve/-/rollup-plugin-node-resolve-5.2.0.tgz#730f93d10ed202473b1fb54a5997a7db8c6d8523"
+  integrity sha512-jUlyaDXts7TW2CqQ4GaO5VJ4PwwaV8VUGA7+km3n6k6xtOEacf61u0VXwN80phY/evMcaS+9eIeJ9MOyDxt5Zw==
+  dependencies:
+    "@types/resolve" "0.0.8"
+    builtin-modules "^3.1.0"
+    is-module "^1.0.0"
+    resolve "^1.11.1"
+    rollup-pluginutils "^2.8.1"
+
+rollup-pluginutils@^2.8.1:
+  version "2.8.2"
+  resolved "https://registry.yarnpkg.com/rollup-pluginutils/-/rollup-pluginutils-2.8.2.tgz#72f2af0748b592364dbd3389e600e5a9444a351e"
+  integrity sha512-EEp9NhnUkwY8aif6bxgovPHMoMoNr2FulJziTndpt5H9RdwC47GSGuII9XxpSdzVGM0GWrNPHV6ie1LTNJPaLQ==
+  dependencies:
+    estree-walker "^0.6.1"
+
+rollup@^1.27.13:
+  version "1.27.13"
+  resolved "https://registry.yarnpkg.com/rollup/-/rollup-1.27.13.tgz#d6d3500512daacbf8de54d2800de62d893085b90"
+  integrity sha512-hDi7M07MpmNSDE8YVwGVFA8L7n8jTLJ4lG65nMAijAyqBe//rtu4JdxjUBE7JqXfdpqxqDTbCDys9WcqdpsQvw==
+  dependencies:
+    "@types/estree" "*"
+    "@types/node" "*"
+    acorn "^7.1.0"
+
+run-async@^2.2.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/run-async/-/run-async-2.3.0.tgz#0371ab4ae0bdd720d4166d7dfda64ff7a445a6c0"
+  integrity sha1-A3GrSuC91yDUFm19/aZP96RFpsA=
+  dependencies:
+    is-promise "^2.1.0"
+
+rxjs@^6.5.3:
+  version "6.5.3"
+  resolved "https://registry.yarnpkg.com/rxjs/-/rxjs-6.5.3.tgz#510e26317f4db91a7eb1de77d9dd9ba0a4899a3a"
+  integrity sha512-wuYsAYYFdWTAnAaPoKGNhfpWwKZbJW+HgAJ+mImp+Epl7BG8oNWBCTyRM8gba9k4lk8BgWdoYm21Mo/RYhhbgA==
+  dependencies:
+    tslib "^1.9.0"
+
+safe-buffer@^5.0.1, safe-buffer@^5.1.0, safe-buffer@^5.1.1, safe-buffer@^5.1.2, safe-buffer@~5.2.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.0.tgz#b74daec49b1148f88c64b68d49b1e815c1f2f519"
+  integrity sha512-fZEwUGbVl7kouZs1jCdMLdt95hdIv0ZeHg6L7qPeciMZhZ+/gdesW4wgTARkrFWEpspjEATAzUGPG8N2jJiwbg==
+
+safe-buffer@~5.1.0, safe-buffer@~5.1.1:
+  version "5.1.2"
+  resolved "https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d"
+  integrity sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==
+
+safe-regex@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/safe-regex/-/safe-regex-1.1.0.tgz#40a3669f3b077d1e943d44629e157dd48023bf2e"
+  integrity sha1-QKNmnzsHfR6UPURinhV91IAjvy4=
+  dependencies:
+    ret "~0.1.10"
+
+"safer-buffer@>= 2.1.2 < 3", safer-buffer@^2.0.2, safer-buffer@^2.1.0, safer-buffer@~2.1.0:
+  version "2.1.2"
+  resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
+  integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
+
+sax@~1.2.4:
+  version "1.2.4"
+  resolved "https://registry.yarnpkg.com/sax/-/sax-1.2.4.tgz#2816234e2378bddc4e5354fab5caa895df7100d9"
+  integrity sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==
+
+saxes@^3.1.9:
+  version "3.1.11"
+  resolved "https://registry.yarnpkg.com/saxes/-/saxes-3.1.11.tgz#d59d1fd332ec92ad98a2e0b2ee644702384b1c5b"
+  integrity sha512-Ydydq3zC+WYDJK1+gRxRapLIED9PWeSuuS41wqyoRmzvhhh9nc+QQrVMKJYzJFULazeGhzSV0QleN2wD3boh2g==
+  dependencies:
+    xmlchars "^2.1.1"
+
+"semver@2 || 3 || 4 || 5", semver@^5.4.1, semver@^5.5.0, semver@^5.6.0:
+  version "5.7.1"
+  resolved "https://registry.yarnpkg.com/semver/-/semver-5.7.1.tgz#a954f931aeba508d307bbf069eff0c01c96116f7"
+  integrity sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==
+
+semver@^6.1.2, semver@^6.3.0:
+  version "6.3.0"
+  resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.0.tgz#ee0a64c8af5e8ceea67687b133761e1becbd1d3d"
+  integrity sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==
+
+send@0.17.1:
+  version "0.17.1"
+  resolved "https://registry.yarnpkg.com/send/-/send-0.17.1.tgz#c1d8b059f7900f7466dd4938bdc44e11ddb376c8"
+  integrity sha512-BsVKsiGcQMFwT8UxypobUKyv7irCNRHk1T0G680vk88yf6LBByGcZJOTJCrTP2xVN6yI+XjPJcNuE3V4fT9sAg==
+  dependencies:
+    debug "2.6.9"
+    depd "~1.1.2"
+    destroy "~1.0.4"
+    encodeurl "~1.0.2"
+    escape-html "~1.0.3"
+    etag "~1.8.1"
+    fresh "0.5.2"
+    http-errors "~1.7.2"
+    mime "1.6.0"
+    ms "2.1.1"
+    on-finished "~2.3.0"
+    range-parser "~1.2.1"
+    statuses "~1.5.0"
+
+serialize-to-js@^3.0.0:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/serialize-to-js/-/serialize-to-js-3.0.2.tgz#d71834a18135aff742e516d3b2208f662a46a8ac"
+  integrity sha512-o5FqeMyxGx1wkp8p14q9QqGXh1JjXtIDYTr15N/B4ThM5ULqlpXdtOO84m950jFGvBkeRD1utW+WyNKvao2ybQ==
+
+serve-static@^1.12.4:
+  version "1.14.1"
+  resolved "https://registry.yarnpkg.com/serve-static/-/serve-static-1.14.1.tgz#666e636dc4f010f7ef29970a88a674320898b2f9"
+  integrity sha512-JMrvUwE54emCYWlTI+hGrGv5I8dEwmco/00EvkzIIsR7MqrHonbD9pO2MOfFnpFntl7ecpZs+3mW+XbQZu9QCg==
+  dependencies:
+    encodeurl "~1.0.2"
+    escape-html "~1.0.3"
+    parseurl "~1.3.3"
+    send "0.17.1"
+
+set-blocking@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/set-blocking/-/set-blocking-2.0.0.tgz#045f9782d011ae9a6803ddd382b24392b3d890f7"
+  integrity sha1-BF+XgtARrppoA93TgrJDkrPYkPc=
+
+set-value@^2.0.0, set-value@^2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/set-value/-/set-value-2.0.1.tgz#a18d40530e6f07de4228c7defe4227af8cad005b"
+  integrity sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==
+  dependencies:
+    extend-shallow "^2.0.1"
+    is-extendable "^0.1.1"
+    is-plain-object "^2.0.3"
+    split-string "^3.0.1"
+
+setimmediate@^1.0.4:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/setimmediate/-/setimmediate-1.0.5.tgz#290cbb232e306942d7d7ea9b83732ab7856f8285"
+  integrity sha1-KQy7Iy4waULX1+qbg3Mqt4VvgoU=
+
+setprototypeof@1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/setprototypeof/-/setprototypeof-1.1.1.tgz#7e95acb24aa92f5885e0abef5ba131330d4ae683"
+  integrity sha512-JvdAWfbXeIGaZ9cILp38HntZSFSo3mWg6xGcJJsd+d4aRMOqauag1C63dJfDw7OaMYwEbHMOxEZ1lqVRYP2OAw==
+
+sha.js@^2.4.0, sha.js@^2.4.8, sha.js@~2.4.4:
+  version "2.4.11"
+  resolved "https://registry.yarnpkg.com/sha.js/-/sha.js-2.4.11.tgz#37a5cf0b81ecbc6943de109ba2960d1b26584ae7"
+  integrity sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==
+  dependencies:
+    inherits "^2.0.1"
+    safe-buffer "^5.0.1"
+
+shallow-copy@~0.0.1:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/shallow-copy/-/shallow-copy-0.0.1.tgz#415f42702d73d810330292cc5ee86eae1a11a170"
+  integrity sha1-QV9CcC1z2BAzApLMXuhurhoRoXA=
+
+shasum-object@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/shasum-object/-/shasum-object-1.0.0.tgz#0b7b74ff5b66ecf9035475522fa05090ac47e29e"
+  integrity sha512-Iqo5rp/3xVi6M4YheapzZhhGPVs0yZwHj7wvwQ1B9z8H6zk+FEnI7y3Teq7qwnekfEhu8WmG2z0z4iWZaxLWVg==
+  dependencies:
+    fast-safe-stringify "^2.0.7"
+
+shasum@^1.0.0:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/shasum/-/shasum-1.0.2.tgz#e7012310d8f417f4deb5712150e5678b87ae565f"
+  integrity sha1-5wEjENj0F/TetXEhUOVni4euVl8=
+  dependencies:
+    json-stable-stringify "~0.0.0"
+    sha.js "~2.4.4"
+
+shebang-command@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-1.2.0.tgz#44aac65b695b03398968c39f363fee5deafdf1ea"
+  integrity sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=
+  dependencies:
+    shebang-regex "^1.0.0"
+
+shebang-regex@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-1.0.0.tgz#da42f49740c0b42db2ca9728571cb190c98efea3"
+  integrity sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=
+
+shell-quote@^1.6.1:
+  version "1.7.2"
+  resolved "https://registry.yarnpkg.com/shell-quote/-/shell-quote-1.7.2.tgz#67a7d02c76c9da24f99d20808fcaded0e0e04be2"
+  integrity sha512-mRz/m/JVscCrkMyPqHc/bczi3OQHkLTqXHEFu0zDhK/qfv3UcOA4SVmRCLmos4bhjr9ekVQubj/R7waKapmiQg==
+
+signal-exit@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.2.tgz#b5fdc08f1287ea1178628e415e25132b73646c6d"
+  integrity sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=
+
+simple-concat@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/simple-concat/-/simple-concat-1.0.0.tgz#7344cbb8b6e26fb27d66b2fc86f9f6d5997521c6"
+  integrity sha1-c0TLuLbib7J9ZrL8hvn21Zl1IcY=
+
+simple-swizzle@^0.2.2:
+  version "0.2.2"
+  resolved "https://registry.yarnpkg.com/simple-swizzle/-/simple-swizzle-0.2.2.tgz#a4da6b635ffcccca33f70d17cb92592de95e557a"
+  integrity sha1-pNprY1/8zMoz9w0Xy5JZLeleVXo=
+  dependencies:
+    is-arrayish "^0.3.1"
+
+slash@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/slash/-/slash-2.0.0.tgz#de552851a1759df3a8f206535442f5ec4ddeab44"
+  integrity sha512-ZYKh3Wh2z1PpEXWr0MpSBZ0V6mZHAQfYevttO11c51CaWjGTaadiKZ+wVt1PbMlDV5qhMFslpZCemhwOK7C89A==
+
+slice-ansi@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-2.1.0.tgz#cacd7693461a637a5788d92a7dd4fba068e81636"
+  integrity sha512-Qu+VC3EwYLldKa1fCxuuvULvSJOKEgk9pi8dZeCVK7TqBfUNTH4sFkk4joj8afVSfAYgJoSOetjx9QWOJ5mYoQ==
+  dependencies:
+    ansi-styles "^3.2.0"
+    astral-regex "^1.0.0"
+    is-fullwidth-code-point "^2.0.0"
+
+snapdragon-node@^2.0.1:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/snapdragon-node/-/snapdragon-node-2.1.1.tgz#6c175f86ff14bdb0724563e8f3c1b021a286853b"
+  integrity sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==
+  dependencies:
+    define-property "^1.0.0"
+    isobject "^3.0.0"
+    snapdragon-util "^3.0.1"
+
+snapdragon-util@^3.0.1:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/snapdragon-util/-/snapdragon-util-3.0.1.tgz#f956479486f2acd79700693f6f7b805e45ab56e2"
+  integrity sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==
+  dependencies:
+    kind-of "^3.2.0"
+
+snapdragon@^0.8.1:
+  version "0.8.2"
+  resolved "https://registry.yarnpkg.com/snapdragon/-/snapdragon-0.8.2.tgz#64922e7c565b0e14204ba1aa7d6964278d25182d"
+  integrity sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==
+  dependencies:
+    base "^0.11.1"
+    debug "^2.2.0"
+    define-property "^0.2.5"
+    extend-shallow "^2.0.1"
+    map-cache "^0.2.2"
+    source-map "^0.5.6"
+    source-map-resolve "^0.5.0"
+    use "^3.1.0"
+
+source-map-resolve@^0.5.0:
+  version "0.5.2"
+  resolved "https://registry.yarnpkg.com/source-map-resolve/-/source-map-resolve-0.5.2.tgz#72e2cc34095543e43b2c62b2c4c10d4a9054f259"
+  integrity sha512-MjqsvNwyz1s0k81Goz/9vRBe9SZdB09Bdw+/zYyO+3CuPk6fouTaxscHkgtE8jKvf01kVfl8riHzERQ/kefaSA==
+  dependencies:
+    atob "^2.1.1"
+    decode-uri-component "^0.2.0"
+    resolve-url "^0.2.1"
+    source-map-url "^0.4.0"
+    urix "^0.1.0"
+
+source-map-support@~0.5.10, source-map-support@~0.5.12:
+  version "0.5.16"
+  resolved "https://registry.yarnpkg.com/source-map-support/-/source-map-support-0.5.16.tgz#0ae069e7fe3ba7538c64c98515e35339eac5a042"
+  integrity sha512-efyLRJDr68D9hBBNIPWFjhpFzURh+KJykQwvMyW5UiZzYwoF6l4YMMDIJJEyFWxWCqfyxLzz6tSfUFR+kXXsVQ==
+  dependencies:
+    buffer-from "^1.0.0"
+    source-map "^0.6.0"
+
+source-map-url@^0.4.0:
+  version "0.4.0"
+  resolved "https://registry.yarnpkg.com/source-map-url/-/source-map-url-0.4.0.tgz#3e935d7ddd73631b97659956d55128e87b5084a3"
+  integrity sha1-PpNdfd1zYxuXZZlW1VEo6HtQhKM=
+
+source-map@0.6.1, source-map@^0.6.0, source-map@^0.6.1, source-map@~0.6.1:
+  version "0.6.1"
+  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263"
+  integrity sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==
+
+source-map@^0.5.0, source-map@^0.5.6, source-map@~0.5.3:
+  version "0.5.7"
+  resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.5.7.tgz#8a039d2d1021d22d1ea14c80d8ea468ba2ef3fcc"
+  integrity sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=
+
+sourcemap-codec@^1.4.4:
+  version "1.4.6"
+  resolved "https://registry.yarnpkg.com/sourcemap-codec/-/sourcemap-codec-1.4.6.tgz#e30a74f0402bad09807640d39e971090a08ce1e9"
+  integrity sha512-1ZooVLYFxC448piVLBbtOxFcXwnymH9oUF8nRd3CuYDVvkRBxRl6pB4Mtas5a4drtL+E8LDgFkQNcgIw6tc8Hg==
+
+spdx-correct@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/spdx-correct/-/spdx-correct-3.1.0.tgz#fb83e504445268f154b074e218c87c003cd31df4"
+  integrity sha512-lr2EZCctC2BNR7j7WzJ2FpDznxky1sjfxvvYEyzxNyb6lZXHODmEoJeFu4JupYlkfha1KZpJyoqiJ7pgA1qq8Q==
+  dependencies:
+    spdx-expression-parse "^3.0.0"
+    spdx-license-ids "^3.0.0"
+
+spdx-exceptions@^2.1.0:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/spdx-exceptions/-/spdx-exceptions-2.2.0.tgz#2ea450aee74f2a89bfb94519c07fcd6f41322977"
+  integrity sha512-2XQACfElKi9SlVb1CYadKDXvoajPgBVPn/gOQLrTvHdElaVhr7ZEbqJaRnJLVNeaI4cMEAgVCeBMKF6MWRDCRA==
+
+spdx-expression-parse@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/spdx-expression-parse/-/spdx-expression-parse-3.0.0.tgz#99e119b7a5da00e05491c9fa338b7904823b41d0"
+  integrity sha512-Yg6D3XpRD4kkOmTpdgbUiEJFKghJH03fiC1OPll5h/0sO6neh2jqRDVHOQ4o/LMea0tgCkbMgea5ip/e+MkWyg==
+  dependencies:
+    spdx-exceptions "^2.1.0"
+    spdx-license-ids "^3.0.0"
+
+spdx-license-ids@^3.0.0:
+  version "3.0.5"
+  resolved "https://registry.yarnpkg.com/spdx-license-ids/-/spdx-license-ids-3.0.5.tgz#3694b5804567a458d3c8045842a6358632f62654"
+  integrity sha512-J+FWzZoynJEXGphVIS+XEh3kFSjZX/1i9gFBaWQcB+/tmpe2qUsSBABpcxqxnAxFdiUFEgAX1bjYGQvIZmoz9Q==
+
+split-string@^3.0.1, split-string@^3.0.2:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/split-string/-/split-string-3.1.0.tgz#7cb09dda3a86585705c64b39a6466038682e8fe2"
+  integrity sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==
+  dependencies:
+    extend-shallow "^3.0.0"
+
+sprintf-js@~1.0.2:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c"
+  integrity sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=
+
+sshpk@^1.7.0:
+  version "1.16.1"
+  resolved "https://registry.yarnpkg.com/sshpk/-/sshpk-1.16.1.tgz#fb661c0bef29b39db40769ee39fa70093d6f6877"
+  integrity sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==
+  dependencies:
+    asn1 "~0.2.3"
+    assert-plus "^1.0.0"
+    bcrypt-pbkdf "^1.0.0"
+    dashdash "^1.12.0"
+    ecc-jsbn "~0.1.1"
+    getpass "^0.1.1"
+    jsbn "~0.1.0"
+    safer-buffer "^2.0.2"
+    tweetnacl "~0.14.0"
+
+stable@^0.1.8:
+  version "0.1.8"
+  resolved "https://registry.yarnpkg.com/stable/-/stable-0.1.8.tgz#836eb3c8382fe2936feaf544631017ce7d47a3cf"
+  integrity sha512-ji9qxRnOVfcuLDySj9qzhGSEFVobyt1kIOSkj1qZzYLzq7Tos/oUUWvotUPQLlrsidqsK6tBH89Bc9kL5zHA6w==
+
+static-eval@^2.0.0:
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/static-eval/-/static-eval-2.0.3.tgz#cb62fc79946bd4d5f623a45ad428233adace4d72"
+  integrity sha512-zsxDGucfAh8T339sSKgpFbvg15Fms2IVaJGC+jqp0bVsxhcpM+iMeAI8weNo8dmf4OblgifTBUoyk1vGVtYw2w==
+  dependencies:
+    escodegen "^1.11.1"
+
+static-extend@^0.1.1:
+  version "0.1.2"
+  resolved "https://registry.yarnpkg.com/static-extend/-/static-extend-0.1.2.tgz#60809c39cbff55337226fd5e0b520f341f1fb5c6"
+  integrity sha1-YICcOcv/VTNyJv1eC1IPNB8ftcY=
+  dependencies:
+    define-property "^0.2.5"
+    object-copy "^0.1.0"
+
+static-module@^2.2.0:
+  version "2.2.5"
+  resolved "https://registry.yarnpkg.com/static-module/-/static-module-2.2.5.tgz#bd40abceae33da6b7afb84a0e4329ff8852bfbbf"
+  integrity sha512-D8vv82E/Kpmz3TXHKG8PPsCPg+RAX6cbCOyvjM6x04qZtQ47EtJFVwRsdov3n5d6/6ynrOY9XB4JkaZwB2xoRQ==
+  dependencies:
+    concat-stream "~1.6.0"
+    convert-source-map "^1.5.1"
+    duplexer2 "~0.1.4"
+    escodegen "~1.9.0"
+    falafel "^2.1.0"
+    has "^1.0.1"
+    magic-string "^0.22.4"
+    merge-source-map "1.0.4"
+    object-inspect "~1.4.0"
+    quote-stream "~1.0.2"
+    readable-stream "~2.3.3"
+    shallow-copy "~0.0.1"
+    static-eval "^2.0.0"
+    through2 "~2.0.3"
+
+"statuses@>= 1.5.0 < 2", statuses@~1.5.0:
+  version "1.5.0"
+  resolved "https://registry.yarnpkg.com/statuses/-/statuses-1.5.0.tgz#161c7dac177659fd9811f43771fa99381478628c"
+  integrity sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=
+
+stealthy-require@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/stealthy-require/-/stealthy-require-1.1.1.tgz#35b09875b4ff49f26a777e509b3090a3226bf24b"
+  integrity sha1-NbCYdbT/SfJqd35QmzCQoyJr8ks=
+
+stream-browserify@^2.0.0, stream-browserify@^2.0.1:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/stream-browserify/-/stream-browserify-2.0.2.tgz#87521d38a44aa7ee91ce1cd2a47df0cb49dd660b"
+  integrity sha512-nX6hmklHs/gr2FuxYDltq8fJA1GDlxKQCz8O/IM4atRqBH8OORmBNgfvW5gG10GT/qQ9u0CzIvr2X5Pkt6ntqg==
+  dependencies:
+    inherits "~2.0.1"
+    readable-stream "^2.0.2"
+
+stream-combiner2@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/stream-combiner2/-/stream-combiner2-1.1.1.tgz#fb4d8a1420ea362764e21ad4780397bebcb41cbe"
+  integrity sha1-+02KFCDqNidk4hrUeAOXvry0HL4=
+  dependencies:
+    duplexer2 "~0.1.0"
+    readable-stream "^2.0.2"
+
+stream-http@^2.7.2:
+  version "2.8.3"
+  resolved "https://registry.yarnpkg.com/stream-http/-/stream-http-2.8.3.tgz#b2d242469288a5a27ec4fe8933acf623de6514fc"
+  integrity sha512-+TSkfINHDo4J+ZobQLWiMouQYB+UVYFttRA94FpEzzJ7ZdqcL4uUUQ7WkdkI4DSozGmgBUE/a47L+38PenXhUw==
+  dependencies:
+    builtin-status-codes "^3.0.0"
+    inherits "^2.0.1"
+    readable-stream "^2.3.6"
+    to-arraybuffer "^1.0.0"
+    xtend "^4.0.0"
+
+stream-http@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/stream-http/-/stream-http-3.1.0.tgz#22fb33fe9b4056b4eccf58bd8f400c4b993ffe57"
+  integrity sha512-cuB6RgO7BqC4FBYzmnvhob5Do3wIdIsXAgGycHJnW+981gHqoYcYz9lqjJrk8WXRddbwPuqPYRl+bag6mYv4lw==
+  dependencies:
+    builtin-status-codes "^3.0.0"
+    inherits "^2.0.1"
+    readable-stream "^3.0.6"
+    xtend "^4.0.0"
+
+stream-splicer@^2.0.0:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/stream-splicer/-/stream-splicer-2.0.1.tgz#0b13b7ee2b5ac7e0609a7463d83899589a363fcd"
+  integrity sha512-Xizh4/NPuYSyAXyT7g8IvdJ9HJpxIGL9PjyhtywCZvvP0OPIdqyrr4dMikeuvY8xahpdKEBlBTySe583totajg==
+  dependencies:
+    inherits "^2.0.1"
+    readable-stream "^2.0.2"
+
+string-to-arraybuffer@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/string-to-arraybuffer/-/string-to-arraybuffer-1.0.2.tgz#161147fbadea02e28b0935002cec4c40f1ca7f0a"
+  integrity sha512-DaGZidzi93dwjQen5I2osxR9ERS/R7B1PFyufNMnzhj+fmlDQAc1DSDIJVJhgI8Oq221efIMbABUBdPHDRt43Q==
+  dependencies:
+    atob-lite "^2.0.0"
+    is-base64 "^0.1.0"
+
+string-width@^3.0.0, string-width@^3.1.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/string-width/-/string-width-3.1.0.tgz#22767be21b62af1081574306f69ac51b62203961"
+  integrity sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==
+  dependencies:
+    emoji-regex "^7.0.1"
+    is-fullwidth-code-point "^2.0.0"
+    strip-ansi "^5.1.0"
+
+string-width@^4.1.0:
+  version "4.2.0"
+  resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.0.tgz#952182c46cc7b2c313d1596e623992bd163b72b5"
+  integrity sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==
+  dependencies:
+    emoji-regex "^8.0.0"
+    is-fullwidth-code-point "^3.0.0"
+    strip-ansi "^6.0.0"
+
+string.prototype.padend@^3.0.0:
+  version "3.1.0"
+  resolved "https://registry.yarnpkg.com/string.prototype.padend/-/string.prototype.padend-3.1.0.tgz#dc08f57a8010dc5c153550318f67e13adbb72ac3"
+  integrity sha512-3aIv8Ffdp8EZj8iLwREGpQaUZiPyrWrpzMBHvkiSW/bK/EGve9np07Vwy7IJ5waydpGXzQZu/F8Oze2/IWkBaA==
+  dependencies:
+    define-properties "^1.1.3"
+    es-abstract "^1.17.0-next.1"
+
+string.prototype.trimleft@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/string.prototype.trimleft/-/string.prototype.trimleft-2.1.0.tgz#6cc47f0d7eb8d62b0f3701611715a3954591d634"
+  integrity sha512-FJ6b7EgdKxxbDxc79cOlok6Afd++TTs5szo+zJTUyow3ycrRfJVE2pq3vcN53XexvKZu/DJMDfeI/qMiZTrjTw==
+  dependencies:
+    define-properties "^1.1.3"
+    function-bind "^1.1.1"
+
+string.prototype.trimright@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/string.prototype.trimright/-/string.prototype.trimright-2.1.0.tgz#669d164be9df9b6f7559fa8e89945b168a5a6c58"
+  integrity sha512-fXZTSV55dNBwv16uw+hh5jkghxSnc5oHq+5K/gXgizHwAvMetdAJlHqqoFC1FSDVPYWLkAKl2cxpUT41sV7nSg==
+  dependencies:
+    define-properties "^1.1.3"
+    function-bind "^1.1.1"
+
+string_decoder@^1.0.0, string_decoder@^1.1.1:
+  version "1.3.0"
+  resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.3.0.tgz#42f114594a46cf1a8e30b0a84f56c78c3edac21e"
+  integrity sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==
+  dependencies:
+    safe-buffer "~5.2.0"
+
+string_decoder@~1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/string_decoder/-/string_decoder-1.1.1.tgz#9cf1611ba62685d7030ae9e4ba34149c3af03fc8"
+  integrity sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==
+  dependencies:
+    safe-buffer "~5.1.0"
+
+strip-ansi@^3.0.0:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-3.0.1.tgz#6a385fb8853d952d5ff05d0e8aaf94278dc63dcf"
+  integrity sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=
+  dependencies:
+    ansi-regex "^2.0.0"
+
+strip-ansi@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-4.0.0.tgz#a8479022eb1ac368a871389b635262c505ee368f"
+  integrity sha1-qEeQIusaw2iocTibY1JixQXuNo8=
+  dependencies:
+    ansi-regex "^3.0.0"
+
+strip-ansi@^5.0.0, strip-ansi@^5.1.0, strip-ansi@^5.2.0:
+  version "5.2.0"
+  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-5.2.0.tgz#8c9a536feb6afc962bdfa5b104a5091c1ad9c0ae"
+  integrity sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==
+  dependencies:
+    ansi-regex "^4.1.0"
+
+strip-ansi@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.0.tgz#0b1571dd7669ccd4f3e06e14ef1eed26225ae532"
+  integrity sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==
+  dependencies:
+    ansi-regex "^5.0.0"
+
+strip-bom@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/strip-bom/-/strip-bom-3.0.0.tgz#2334c18e9c759f7bdd56fdef7e9ae3d588e68ed3"
+  integrity sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM=
+
+strip-json-comments@^3.0.1:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.0.1.tgz#85713975a91fb87bf1b305cca77395e40d2a64a7"
+  integrity sha512-VTyMAUfdm047mwKl+u79WIdrZxtFtn+nBxHeb844XBQ9uMNTuTHdx2hc5RiAJYqwTj3wc/xe5HLSdJSkJ+WfZw==
+
+stylehacks@^4.0.0:
+  version "4.0.3"
+  resolved "https://registry.yarnpkg.com/stylehacks/-/stylehacks-4.0.3.tgz#6718fcaf4d1e07d8a1318690881e8d96726a71d5"
+  integrity sha512-7GlLk9JwlElY4Y6a/rmbH2MhVlTyVmiJd1PfTCqFaIBEGMYNsrO/v3SeGTdhBThLg4Z+NbOk/qFMwCa+J+3p/g==
+  dependencies:
+    browserslist "^4.0.0"
+    postcss "^7.0.0"
+    postcss-selector-parser "^3.0.0"
+
+subarg@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/subarg/-/subarg-1.0.0.tgz#f62cf17581e996b48fc965699f54c06ae268b8d2"
+  integrity sha1-9izxdYHplrSPyWVpn1TAauJouNI=
+  dependencies:
+    minimist "^1.1.0"
+
+supports-color@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-2.0.0.tgz#535d045ce6b6363fa40117084629995e9df324c7"
+  integrity sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=
+
+supports-color@^3.2.3:
+  version "3.2.3"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-3.2.3.tgz#65ac0504b3954171d8a64946b2ae3cbb8a5f54f6"
+  integrity sha1-ZawFBLOVQXHYpklGsq48u4pfVPY=
+  dependencies:
+    has-flag "^1.0.0"
+
+supports-color@^5.3.0, supports-color@^5.4.0:
+  version "5.5.0"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-5.5.0.tgz#e2e69a44ac8772f78a1ec0b35b689df6530efc8f"
+  integrity sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==
+  dependencies:
+    has-flag "^3.0.0"
+
+supports-color@^6.1.0:
+  version "6.1.0"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-6.1.0.tgz#0764abc69c63d5ac842dd4867e8d025e880df8f3"
+  integrity sha512-qe1jfm1Mg7Nq/NSh6XE24gPXROEVsWHxC1LIx//XNlD9iw7YZQGjZNjYN7xGaEG6iKdA8EtNFW6R0gjnVXp+wQ==
+  dependencies:
+    has-flag "^3.0.0"
+
+svgo@^1.0.0, svgo@^1.3.2:
+  version "1.3.2"
+  resolved "https://registry.yarnpkg.com/svgo/-/svgo-1.3.2.tgz#b6dc511c063346c9e415b81e43401145b96d4167"
+  integrity sha512-yhy/sQYxR5BkC98CY7o31VGsg014AKLEPxdfhora76l36hD9Rdy5NZA/Ocn6yayNPgSamYdtX2rFJdcv07AYVw==
+  dependencies:
+    chalk "^2.4.1"
+    coa "^2.0.2"
+    css-select "^2.0.0"
+    css-select-base-adapter "^0.1.1"
+    css-tree "1.0.0-alpha.37"
+    csso "^4.0.2"
+    js-yaml "^3.13.1"
+    mkdirp "~0.5.1"
+    object.values "^1.1.0"
+    sax "~1.2.4"
+    stable "^0.1.8"
+    unquote "~1.1.1"
+    util.promisify "~1.0.0"
+
+symbol-tree@^3.2.2:
+  version "3.2.4"
+  resolved "https://registry.yarnpkg.com/symbol-tree/-/symbol-tree-3.2.4.tgz#430637d248ba77e078883951fb9aa0eed7c63fa2"
+  integrity sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==
+
+syntax-error@^1.1.1:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/syntax-error/-/syntax-error-1.4.0.tgz#2d9d4ff5c064acb711594a3e3b95054ad51d907c"
+  integrity sha512-YPPlu67mdnHGTup2A8ff7BC2Pjq0e0Yp/IyTFN03zWO0RcK07uLcbi7C2KpGR2FvWbaB0+bfE27a+sBKebSo7w==
+  dependencies:
+    acorn-node "^1.2.0"
+
+table@^5.2.3:
+  version "5.4.6"
+  resolved "https://registry.yarnpkg.com/table/-/table-5.4.6.tgz#1292d19500ce3f86053b05f0e8e7e4a3bb21079e"
+  integrity sha512-wmEc8m4fjnob4gt5riFRtTu/6+4rSe12TpAELNSqHMfF3IqnA+CH37USM6/YR3qRZv7e56kAEAtd6nKZaxe0Ug==
+  dependencies:
+    ajv "^6.10.2"
+    lodash "^4.17.14"
+    slice-ansi "^2.1.0"
+    string-width "^3.0.0"
+
+terser@^3.7.3:
+  version "3.17.0"
+  resolved "https://registry.yarnpkg.com/terser/-/terser-3.17.0.tgz#f88ffbeda0deb5637f9d24b0da66f4e15ab10cb2"
+  integrity sha512-/FQzzPJmCpjAH9Xvk2paiWrFq+5M6aVOf+2KRbwhByISDX/EujxsK+BAvrhb6H+2rtrLCHK9N01wO014vrIwVQ==
+  dependencies:
+    commander "^2.19.0"
+    source-map "~0.6.1"
+    source-map-support "~0.5.10"
+
+terser@^4.3.9:
+  version "4.4.3"
+  resolved "https://registry.yarnpkg.com/terser/-/terser-4.4.3.tgz#401abc52b88869cf904412503b1eb7da093ae2f0"
+  integrity sha512-0ikKraVtRDKGzHrzkCv5rUNDzqlhmhowOBqC0XqUHFpW+vJ45+20/IFBcebwKfiS2Z9fJin6Eo+F1zLZsxi8RA==
+  dependencies:
+    commander "^2.20.0"
+    source-map "~0.6.1"
+    source-map-support "~0.5.12"
+
+text-table@^0.2.0:
+  version "0.2.0"
+  resolved "https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4"
+  integrity sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=
+
+through2@^2.0.0, through2@~2.0.3:
+  version "2.0.5"
+  resolved "https://registry.yarnpkg.com/through2/-/through2-2.0.5.tgz#01c1e39eb31d07cb7d03a96a70823260b23132cd"
+  integrity sha512-/mrRod8xqpA+IHSLyGCQ2s8SPHiCDEeQJSep1jqLYeEUClOFG2Qsh+4FU6G9VeqpZnGW/Su8LQGc4YKni5rYSQ==
+  dependencies:
+    readable-stream "~2.3.6"
+    xtend "~4.0.1"
+
+"through@>=2.2.7 <3", through@^2.3.6:
+  version "2.3.8"
+  resolved "https://registry.yarnpkg.com/through/-/through-2.3.8.tgz#0dd4c9ffaabc357960b1b724115d7e0e86a2e1f5"
+  integrity sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=
+
+timers-browserify@^1.0.1:
+  version "1.4.2"
+  resolved "https://registry.yarnpkg.com/timers-browserify/-/timers-browserify-1.4.2.tgz#c9c58b575be8407375cb5e2462dacee74359f41d"
+  integrity sha1-ycWLV1voQHN1y14kYtrO50NZ9B0=
+  dependencies:
+    process "~0.11.0"
+
+timers-browserify@^2.0.4:
+  version "2.0.11"
+  resolved "https://registry.yarnpkg.com/timers-browserify/-/timers-browserify-2.0.11.tgz#800b1f3eee272e5bc53ee465a04d0e804c31211f"
+  integrity sha512-60aV6sgJ5YEbzUdn9c8kYGIqOubPoUdqQCul3SBAsRCZ40s6Y5cMcrW4dt3/k/EsbLVJNl9n6Vz3fTc+k2GeKQ==
+  dependencies:
+    setimmediate "^1.0.4"
+
+timsort@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/timsort/-/timsort-0.3.0.tgz#405411a8e7e6339fe64db9a234de11dc31e02bd4"
+  integrity sha1-QFQRqOfmM5/mTbmiNN4R3DHgK9Q=
+
+tiny-inflate@^1.0.0:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/tiny-inflate/-/tiny-inflate-1.0.3.tgz#122715494913a1805166aaf7c93467933eea26c4"
+  integrity sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw==
+
+tmp@^0.0.33:
+  version "0.0.33"
+  resolved "https://registry.yarnpkg.com/tmp/-/tmp-0.0.33.tgz#6d34335889768d21b2bcda0aa277ced3b1bfadf9"
+  integrity sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==
+  dependencies:
+    os-tmpdir "~1.0.2"
+
+to-arraybuffer@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/to-arraybuffer/-/to-arraybuffer-1.0.1.tgz#7d229b1fcc637e466ca081180836a7aabff83f43"
+  integrity sha1-fSKbH8xjfkZsoIEYCDanqr/4P0M=
+
+to-fast-properties@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-1.0.3.tgz#b83571fa4d8c25b82e231b06e3a3055de4ca1a47"
+  integrity sha1-uDVx+k2MJbguIxsG46MFXeTKGkc=
+
+to-fast-properties@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz#dc5e698cbd079265bc73e0377681a4e4e83f616e"
+  integrity sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4=
+
+to-object-path@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/to-object-path/-/to-object-path-0.3.0.tgz#297588b7b0e7e0ac08e04e672f85c1f4999e17af"
+  integrity sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=
+  dependencies:
+    kind-of "^3.0.2"
+
+to-regex-range@^2.1.0:
+  version "2.1.1"
+  resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-2.1.1.tgz#7c80c17b9dfebe599e27367e0d4dd5590141db38"
+  integrity sha1-fIDBe53+vlmeJzZ+DU3VWQFB2zg=
+  dependencies:
+    is-number "^3.0.0"
+    repeat-string "^1.6.1"
+
+to-regex@^3.0.1, to-regex@^3.0.2:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/to-regex/-/to-regex-3.0.2.tgz#13cfdd9b336552f30b51f33a8ae1b42a7a7599ce"
+  integrity sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==
+  dependencies:
+    define-property "^2.0.2"
+    extend-shallow "^3.0.2"
+    regex-not "^1.0.2"
+    safe-regex "^1.1.0"
+
+toidentifier@1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/toidentifier/-/toidentifier-1.0.0.tgz#7e1be3470f1e77948bc43d94a3c8f4d7752ba553"
+  integrity sha512-yaOH/Pk/VEhBWWTlhI+qXxDFXlejDGcQipMlyxda9nthulaxLZUNcUqFxokp0vcYnvteJln5FNQDRrxj3YcbVw==
+
+tough-cookie@^2.3.3, tough-cookie@^2.5.0:
+  version "2.5.0"
+  resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.5.0.tgz#cd9fb2a0aa1d5a12b473bd9fb96fa3dcff65ade2"
+  integrity sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==
+  dependencies:
+    psl "^1.1.28"
+    punycode "^2.1.1"
+
+tough-cookie@~2.4.3:
+  version "2.4.3"
+  resolved "https://registry.yarnpkg.com/tough-cookie/-/tough-cookie-2.4.3.tgz#53f36da3f47783b0925afa06ff9f3b165280f781"
+  integrity sha512-Q5srk/4vDM54WJsJio3XNn6K2sCG+CQ8G5Wz6bZhRZoAe/+TxjWB/GlFAnYEbkYVlON9FMk/fE3h2RLpPXo4lQ==
+  dependencies:
+    psl "^1.1.24"
+    punycode "^1.4.1"
+
+tr46@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/tr46/-/tr46-1.0.1.tgz#a8b13fd6bfd2489519674ccde55ba3693b706d09"
+  integrity sha1-qLE/1r/SSJUZZ0zN5VujaTtwbQk=
+  dependencies:
+    punycode "^2.1.0"
+
+tslib@^1.9.0:
+  version "1.10.0"
+  resolved "https://registry.yarnpkg.com/tslib/-/tslib-1.10.0.tgz#c3c19f95973fb0a62973fb09d90d961ee43e5c8a"
+  integrity sha512-qOebF53frne81cf0S9B41ByenJ3/IuH8yJKngAX35CmiZySA0khhkovshKK+jGCaMnVomla7gVlIcc3EvKPbTQ==
+
+tty-browserify@0.0.0:
+  version "0.0.0"
+  resolved "https://registry.yarnpkg.com/tty-browserify/-/tty-browserify-0.0.0.tgz#a157ba402da24e9bf957f9aa69d524eed42901a6"
+  integrity sha1-oVe6QC2iTpv5V/mqadUk7tQpAaY=
+
+tty-browserify@0.0.1:
+  version "0.0.1"
+  resolved "https://registry.yarnpkg.com/tty-browserify/-/tty-browserify-0.0.1.tgz#3f05251ee17904dfd0677546670db9651682b811"
+  integrity sha512-C3TaO7K81YvjCgQH9Q1S3R3P3BtN3RIM8n+OvX4il1K1zgE8ZhI0op7kClgkxtutIE8hQrcrHBXvIheqKUUCxw==
+
+tunnel-agent@^0.6.0:
+  version "0.6.0"
+  resolved "https://registry.yarnpkg.com/tunnel-agent/-/tunnel-agent-0.6.0.tgz#27a5dea06b36b04a0a9966774b290868f0fc40fd"
+  integrity sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=
+  dependencies:
+    safe-buffer "^5.0.1"
+
+tweetnacl@^0.14.3, tweetnacl@~0.14.0:
+  version "0.14.5"
+  resolved "https://registry.yarnpkg.com/tweetnacl/-/tweetnacl-0.14.5.tgz#5ae68177f192d4456269d108afa93ff8743f4f64"
+  integrity sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=
+
+type-check@~0.3.2:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.3.2.tgz#5884cab512cf1d355e3fb784f30804b2b520db72"
+  integrity sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=
+  dependencies:
+    prelude-ls "~1.1.2"
+
+type-fest@^0.8.1:
+  version "0.8.1"
+  resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.8.1.tgz#09e249ebde851d3b1e48d27c105444667f17b83d"
+  integrity sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==
+
+typedarray@^0.0.6:
+  version "0.0.6"
+  resolved "https://registry.yarnpkg.com/typedarray/-/typedarray-0.0.6.tgz#867ac74e3864187b1d3d47d996a78ec5c8830777"
+  integrity sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c=
+
+umd@^3.0.0:
+  version "3.0.3"
+  resolved "https://registry.yarnpkg.com/umd/-/umd-3.0.3.tgz#aa9fe653c42b9097678489c01000acb69f0b26cf"
+  integrity sha512-4IcGSufhFshvLNcMCV80UnQVlZ5pMOC8mvNPForqwA4+lzYQuetTESLDQkeLmihq8bRcnpbQa48Wb8Lh16/xow==
+
+uncss@^0.17.2:
+  version "0.17.2"
+  resolved "https://registry.yarnpkg.com/uncss/-/uncss-0.17.2.tgz#fac1c2429be72108e8a47437c647d58cf9ea66f1"
+  integrity sha512-hu2HquwDItuGDem4YsJROdAD8SknmWtM24zwhQax6J1se8tPjV1cnwPKhtjodzBaUhaL8Zb3hlGdZ2WAUpbAOg==
+  dependencies:
+    commander "^2.20.0"
+    glob "^7.1.4"
+    is-absolute-url "^3.0.1"
+    is-html "^1.1.0"
+    jsdom "^14.1.0"
+    lodash "^4.17.15"
+    postcss "^7.0.17"
+    postcss-selector-parser "6.0.2"
+    request "^2.88.0"
+
+undeclared-identifiers@^1.1.2:
+  version "1.1.3"
+  resolved "https://registry.yarnpkg.com/undeclared-identifiers/-/undeclared-identifiers-1.1.3.tgz#9254c1d37bdac0ac2b52de4b6722792d2a91e30f"
+  integrity sha512-pJOW4nxjlmfwKApE4zvxLScM/njmwj/DiUBv7EabwE4O8kRUy+HIwxQtZLBPll/jx1LJyBcqNfB3/cpv9EZwOw==
+  dependencies:
+    acorn-node "^1.3.0"
+    dash-ast "^1.0.0"
+    get-assigned-identifiers "^1.2.0"
+    simple-concat "^1.0.0"
+    xtend "^4.0.1"
+
+unicode-canonical-property-names-ecmascript@^1.0.4:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-1.0.4.tgz#2619800c4c825800efdd8343af7dd9933cbe2818"
+  integrity sha512-jDrNnXWHd4oHiTZnx/ZG7gtUTVp+gCcTTKr8L0HjlwphROEW3+Him+IpvC+xcJEFegapiMZyZe02CyuOnRmbnQ==
+
+unicode-match-property-ecmascript@^1.0.4:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-1.0.4.tgz#8ed2a32569961bce9227d09cd3ffbb8fed5f020c"
+  integrity sha512-L4Qoh15vTfntsn4P1zqnHulG0LdXgjSO035fEpdtp6YxXhMT51Q6vgM5lYdG/5X3MjS+k/Y9Xw4SFCY9IkR0rg==
+  dependencies:
+    unicode-canonical-property-names-ecmascript "^1.0.4"
+    unicode-property-aliases-ecmascript "^1.0.4"
+
+unicode-match-property-value-ecmascript@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-1.1.0.tgz#5b4b426e08d13a80365e0d657ac7a6c1ec46a277"
+  integrity sha512-hDTHvaBk3RmFzvSl0UVrUmC3PuW9wKVnpoUDYH0JDkSIovzw+J5viQmeYHxVSBptubnr7PbH2e0fnpDRQnQl5g==
+
+unicode-property-aliases-ecmascript@^1.0.4:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-1.0.5.tgz#a9cc6cc7ce63a0a3023fc99e341b94431d405a57"
+  integrity sha512-L5RAqCfXqAwR3RriF8pM0lU0w4Ryf/GgzONwi6KnL1taJQa7x1TCxdJnILX59WIGOwR57IVxn7Nej0fz1Ny6fw==
+
+unicode-trie@^0.3.1:
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/unicode-trie/-/unicode-trie-0.3.1.tgz#d671dddd89101a08bac37b6a5161010602052085"
+  integrity sha1-1nHd3YkQGgi6w3tqUWEBBgIFIIU=
+  dependencies:
+    pako "^0.2.5"
+    tiny-inflate "^1.0.0"
+
+union-value@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/union-value/-/union-value-1.0.1.tgz#0b6fe7b835aecda61c6ea4d4f02c14221e109847"
+  integrity sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==
+  dependencies:
+    arr-union "^3.1.0"
+    get-value "^2.0.6"
+    is-extendable "^0.1.1"
+    set-value "^2.0.1"
+
+uniq@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/uniq/-/uniq-1.0.1.tgz#b31c5ae8254844a3a8281541ce2b04b865a734ff"
+  integrity sha1-sxxa6CVIRKOoKBVBzisEuGWnNP8=
+
+uniqs@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/uniqs/-/uniqs-2.0.0.tgz#ffede4b36b25290696e6e165d4a59edb998e6b02"
+  integrity sha1-/+3ks2slKQaW5uFl1KWe25mOawI=
+
+unquote@~1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/unquote/-/unquote-1.1.1.tgz#8fded7324ec6e88a0ff8b905e7c098cdc086d544"
+  integrity sha1-j97XMk7G6IoP+LkF58CYzcCG1UQ=
+
+unset-value@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/unset-value/-/unset-value-1.0.0.tgz#8376873f7d2335179ffb1e6fc3a8ed0dfc8ab559"
+  integrity sha1-g3aHP30jNRef+x5vw6jtDfyKtVk=
+  dependencies:
+    has-value "^0.3.1"
+    isobject "^3.0.0"
+
+upath@^1.1.1:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/upath/-/upath-1.2.0.tgz#8f66dbcd55a883acdae4408af8b035a5044c1894"
+  integrity sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg==
+
+uri-js@^4.2.2:
+  version "4.2.2"
+  resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.2.2.tgz#94c540e1ff772956e2299507c010aea6c8838eb0"
+  integrity sha512-KY9Frmirql91X2Qgjry0Wd4Y+YTdrdZheS8TFwvkbLWf/G5KNJDCh6pKL5OZctEW4+0Baa5idK2ZQuELRwPznQ==
+  dependencies:
+    punycode "^2.1.0"
+
+urix@^0.1.0:
+  version "0.1.0"
+  resolved "https://registry.yarnpkg.com/urix/-/urix-0.1.0.tgz#da937f7a62e21fec1fd18d49b35c2935067a6c72"
+  integrity sha1-2pN/emLiH+wf0Y1Js1wpNQZ6bHI=
+
+url@^0.11.0, url@~0.11.0:
+  version "0.11.0"
+  resolved "https://registry.yarnpkg.com/url/-/url-0.11.0.tgz#3838e97cfc60521eb73c525a8e55bfdd9e2e28f1"
+  integrity sha1-ODjpfPxgUh63PFJajlW/3Z4uKPE=
+  dependencies:
+    punycode "1.3.2"
+    querystring "0.2.0"
+
+use@^3.1.0:
+  version "3.1.1"
+  resolved "https://registry.yarnpkg.com/use/-/use-3.1.1.tgz#d50c8cac79a19fbc20f2911f56eb973f4e10070f"
+  integrity sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==
+
+util-deprecate@^1.0.1, util-deprecate@~1.0.1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/util-deprecate/-/util-deprecate-1.0.2.tgz#450d4dc9fa70de732762fbd2d4a28981419a0ccf"
+  integrity sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=
+
+util.promisify@~1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/util.promisify/-/util.promisify-1.0.0.tgz#440f7165a459c9a16dc145eb8e72f35687097030"
+  integrity sha512-i+6qA2MPhvoKLuxnJNpXAGhg7HphQOSUq2LKMZD0m15EiskXUkMvKdF4Uui0WYeCUGea+o2cw/ZuwehtfsrNkA==
+  dependencies:
+    define-properties "^1.1.2"
+    object.getownpropertydescriptors "^2.0.3"
+
+util@0.10.3:
+  version "0.10.3"
+  resolved "https://registry.yarnpkg.com/util/-/util-0.10.3.tgz#7afb1afe50805246489e3db7fe0ed379336ac0f9"
+  integrity sha1-evsa/lCAUkZInj23/g7TeTNqwPk=
+  dependencies:
+    inherits "2.0.1"
+
+util@^0.11.0:
+  version "0.11.1"
+  resolved "https://registry.yarnpkg.com/util/-/util-0.11.1.tgz#3236733720ec64bb27f6e26f421aaa2e1b588d61"
+  integrity sha512-HShAsny+zS2TZfaXxD9tYj4HQGlBezXZMZuM/S5PKLLoZkShZiGk9o5CzukI1LVHZvjdvZ2Sj1aW/Ndn2NB/HQ==
+  dependencies:
+    inherits "2.0.3"
+
+util@~0.10.1:
+  version "0.10.4"
+  resolved "https://registry.yarnpkg.com/util/-/util-0.10.4.tgz#3aa0125bfe668a4672de58857d3ace27ecb76901"
+  integrity sha512-0Pm9hTQ3se5ll1XihRic3FDIku70C+iHUdT/W926rSgHV5QgXsYbKZN8MSC3tJtSkhuROzvsQjAaFENRXr+19A==
+  dependencies:
+    inherits "2.0.3"
+
+uuid@^3.3.2:
+  version "3.3.3"
+  resolved "https://registry.yarnpkg.com/uuid/-/uuid-3.3.3.tgz#4568f0216e78760ee1dbf3a4d2cf53e224112866"
+  integrity sha512-pW0No1RGHgzlpHJO1nsVrHKpOEIxkGg1xB+v0ZmdNH5OAeAwzAVrCnI2/6Mtx+Uys6iaylxa+D3g4j63IKKjSQ==
+
+v8-compile-cache@^2.0.0, v8-compile-cache@^2.0.3:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/v8-compile-cache/-/v8-compile-cache-2.1.0.tgz#e14de37b31a6d194f5690d67efc4e7f6fc6ab30e"
+  integrity sha512-usZBT3PW+LOjM25wbqIlZwPeJV+3OSz3M1k1Ws8snlW39dZyYL9lOGC5FgPVHfk0jKmjiDV8Z0mIbVQPiwFs7g==
+
+validate-npm-package-license@^3.0.1:
+  version "3.0.4"
+  resolved "https://registry.yarnpkg.com/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz#fc91f6b9c7ba15c857f4cb2c5defeec39d4f410a"
+  integrity sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==
+  dependencies:
+    spdx-correct "^3.0.0"
+    spdx-expression-parse "^3.0.0"
+
+vendors@^1.0.0:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/vendors/-/vendors-1.0.3.tgz#a6467781abd366217c050f8202e7e50cc9eef8c0"
+  integrity sha512-fOi47nsJP5Wqefa43kyWSg80qF+Q3XA6MUkgi7Hp1HQaKDQW4cQrK2D0P7mmbFtsV1N89am55Yru/nyEwRubcw==
+
+verror@1.10.0:
+  version "1.10.0"
+  resolved "https://registry.yarnpkg.com/verror/-/verror-1.10.0.tgz#3a105ca17053af55d6e270c1f8288682e18da400"
+  integrity sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=
+  dependencies:
+    assert-plus "^1.0.0"
+    core-util-is "1.0.2"
+    extsprintf "^1.2.0"
+
+vlq@^0.2.2:
+  version "0.2.3"
+  resolved "https://registry.yarnpkg.com/vlq/-/vlq-0.2.3.tgz#8f3e4328cf63b1540c0d67e1b2778386f8975b26"
+  integrity sha512-DRibZL6DsNhIgYQ+wNdWDL2SL3bKPlVrRiBqV5yuMm++op8W4kGFtaQfCs4KEJn0wBZcHVHJ3eoywX8983k1ow==
+
+vm-browserify@^1.0.0, vm-browserify@^1.0.1:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/vm-browserify/-/vm-browserify-1.1.2.tgz#78641c488b8e6ca91a75f511e7a3b32a86e5dda0"
+  integrity sha512-2ham8XPWTONajOR0ohOKOHXkm3+gaBmGut3SRuu75xLd/RRaY6vqgh8NBYYk7+RW3u5AtzPQZG8F10LHkl0lAQ==
+
+w3c-hr-time@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/w3c-hr-time/-/w3c-hr-time-1.0.1.tgz#82ac2bff63d950ea9e3189a58a65625fedf19045"
+  integrity sha1-gqwr/2PZUOqeMYmlimViX+3xkEU=
+  dependencies:
+    browser-process-hrtime "^0.1.2"
+
+w3c-xmlserializer@^1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/w3c-xmlserializer/-/w3c-xmlserializer-1.1.2.tgz#30485ca7d70a6fd052420a3d12fd90e6339ce794"
+  integrity sha512-p10l/ayESzrBMYWRID6xbuCKh2Fp77+sA0doRuGn4tTIMrrZVeqfpKjXHY+oDh3K4nLdPgNwMTVP6Vp4pvqbNg==
+  dependencies:
+    domexception "^1.0.1"
+    webidl-conversions "^4.0.2"
+    xml-name-validator "^3.0.0"
+
+wcwidth@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/wcwidth/-/wcwidth-1.0.1.tgz#f0b0dcf915bc5ff1528afadb2c0e17b532da2fe8"
+  integrity sha1-8LDc+RW8X/FSivrbLA4XtTLaL+g=
+  dependencies:
+    defaults "^1.0.3"
+
+webidl-conversions@^4.0.2:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-4.0.2.tgz#a855980b1f0b6b359ba1d5d9fb39ae941faa63ad"
+  integrity sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==
+
+whatwg-encoding@^1.0.1, whatwg-encoding@^1.0.5:
+  version "1.0.5"
+  resolved "https://registry.yarnpkg.com/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz#5abacf777c32166a51d085d6b4f3e7d27113ddb0"
+  integrity sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==
+  dependencies:
+    iconv-lite "0.4.24"
+
+whatwg-mimetype@^2.2.0, whatwg-mimetype@^2.3.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz#3d4b1e0312d2079879f826aff18dbeeca5960fbf"
+  integrity sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==
+
+whatwg-url@^7.0.0:
+  version "7.1.0"
+  resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-7.1.0.tgz#c2c492f1eca612988efd3d2266be1b9fc6170d06"
+  integrity sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==
+  dependencies:
+    lodash.sortby "^4.7.0"
+    tr46 "^1.0.1"
+    webidl-conversions "^4.0.2"
+
+which-module@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/which-module/-/which-module-2.0.0.tgz#d9ef07dce77b9902b8a3a8fa4b31c3e3f7e6e87a"
+  integrity sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=
+
+which@^1.2.9:
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/which/-/which-1.3.1.tgz#a45043d54f5805316da8d62f9f50918d3da70b0a"
+  integrity sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==
+  dependencies:
+    isexe "^2.0.0"
+
+word-wrap@~1.2.3:
+  version "1.2.3"
+  resolved "https://registry.yarnpkg.com/word-wrap/-/word-wrap-1.2.3.tgz#610636f6b1f703891bd34771ccb17fb93b47079c"
+  integrity sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==
+
+wrap-ansi@^5.1.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-5.1.0.tgz#1fd1f67235d5b6d0fee781056001bfb694c03b09"
+  integrity sha512-QC1/iN/2/RPVJ5jYK8BGttj5z83LmSKmvbvrXPNCLZSEb32KKVDJDl/MOt2N01qU2H/FkzEa9PKto1BqDjtd7Q==
+  dependencies:
+    ansi-styles "^3.2.0"
+    string-width "^3.0.0"
+    strip-ansi "^5.0.0"
+
+wrappy@1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
+  integrity sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=
+
+write@1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/write/-/write-1.0.3.tgz#0800e14523b923a387e415123c865616aae0f5c3"
+  integrity sha512-/lg70HAjtkUgWPVZhZcm+T4hkL8Zbtp1nFNOn3lRrxnlv50SRBv7cR7RqR+GMsd3hUXy9hWBo4CHTbFTcOYwig==
+  dependencies:
+    mkdirp "^0.5.1"
+
+ws@^5.1.1:
+  version "5.2.2"
+  resolved "https://registry.yarnpkg.com/ws/-/ws-5.2.2.tgz#dffef14866b8e8dc9133582514d1befaf96e980f"
+  integrity sha512-jaHFD6PFv6UgoIVda6qZllptQsMlDEJkTQcybzzXDYM1XO9Y8em691FGMPmM46WGyLU4z9KMgQN+qrux/nhlHA==
+  dependencies:
+    async-limiter "~1.0.0"
+
+ws@^6.1.2:
+  version "6.2.1"
+  resolved "https://registry.yarnpkg.com/ws/-/ws-6.2.1.tgz#442fdf0a47ed64f59b6a5d8ff130f4748ed524fb"
+  integrity sha512-GIyAXC2cB7LjvpgMt9EKS2ldqr0MTrORaleiOno6TweZ6r3TKtoFQWay/2PceJ3RuBasOHzXNn5Lrw1X0bEjqA==
+  dependencies:
+    async-limiter "~1.0.0"
+
+xml-name-validator@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/xml-name-validator/-/xml-name-validator-3.0.0.tgz#6ae73e06de4d8c6e47f9fb181f78d648ad457c6a"
+  integrity sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==
+
+xmlchars@^2.1.1:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/xmlchars/-/xmlchars-2.2.0.tgz#060fe1bcb7f9c76fe2a17db86a9bc3ab894210cb"
+  integrity sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==
+
+xtend@^4.0.0, xtend@^4.0.1, xtend@^4.0.2, xtend@~4.0.1:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/xtend/-/xtend-4.0.2.tgz#bb72779f5fa465186b1f438f674fa347fdb5db54"
+  integrity sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==
+
+y18n@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/y18n/-/y18n-4.0.0.tgz#95ef94f85ecc81d007c264e190a120f0a3c8566b"
+  integrity sha512-r9S/ZyXu/Xu9q1tYlpsLIsa3EeLXXk0VwlxqTcFRfg9EhMW+17kbt9G0NrgCmhGb5vT2hyhJZLfDGx+7+5Uj/w==
+
+yargs-parser@^15.0.0:
+  version "15.0.0"
+  resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-15.0.0.tgz#cdd7a97490ec836195f59f3f4dbe5ea9e8f75f08"
+  integrity sha512-xLTUnCMc4JhxrPEPUYD5IBR1mWCK/aT6+RJ/K29JY2y1vD+FhtgKK0AXRWvI262q3QSffAQuTouFIKUuHX89wQ==
+  dependencies:
+    camelcase "^5.0.0"
+    decamelize "^1.2.0"
+
+yargs@^14.0.0:
+  version "14.2.2"
+  resolved "https://registry.yarnpkg.com/yargs/-/yargs-14.2.2.tgz#2769564379009ff8597cdd38fba09da9b493c4b5"
+  integrity sha512-/4ld+4VV5RnrynMhPZJ/ZpOCGSCeghMykZ3BhdFBDa9Wy/RH6uEGNWDJog+aUlq+9OM1CFTgtYRW5Is1Po9NOA==
+  dependencies:
+    cliui "^5.0.0"
+    decamelize "^1.2.0"
+    find-up "^3.0.0"
+    get-caller-file "^2.0.1"
+    require-directory "^2.1.1"
+    require-main-filename "^2.0.0"
+    set-blocking "^2.0.0"
+    string-width "^3.0.0"
+    which-module "^2.0.0"
+    y18n "^4.0.0"
+    yargs-parser "^15.0.0"
diff --git a/node_modules/gost-crypto/lib/gostASN1.js b/node_modules/gost-crypto/lib/gostASN1.js
index cb88c5a..8de81ca 100644
--- a/node_modules/gost-crypto/lib/gostASN1.js
+++ b/node_modules/gost-crypto/lib/gostASN1.js
@@ -39,498 +39,431 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const gostCrypto = require('./gostCrypto'); // const GostCoding = require('./gostCoding')
+
+
+const gostCrypto = require('./gostCrypto')
+// const GostCoding = require('./gostCoding')
 // const GostSecurity = require('./gostSecurity')
 
 
-const CryptoOperationData = global.ArrayBuffer; // Security parameters
+const CryptoOperationData = global.ArrayBuffer
 
-const algorithms = gostCrypto.security.algorithms;
-const names = gostCrypto.security.names;
-const identifiers = gostCrypto.security.identifiers;
-const attributes = gostCrypto.security.attributes;
-const parameters = gostCrypto.security.parameters; // BER coding
+// Security parameters
+const algorithms = gostCrypto.security.algorithms
 
-const BER = gostCrypto.coding.BER; // PEM coding
+const names = gostCrypto.security.names
 
-const PEM = gostCrypto.coding.PEM; // Chars coding
+const identifiers = gostCrypto.security.identifiers
 
-const Chars = gostCrypto.coding.Chars; // Hex coding;
+const attributes = gostCrypto.security.attributes
 
-const Hex = gostCrypto.coding.Hex; // Hex coding;
+const parameters = gostCrypto.security.parameters
 
-const Int16 = gostCrypto.coding.Int16; // Expand javascript object
+// BER coding
+const BER = gostCrypto.coding.BER
 
-function expand() {
-  const r = {};
+// PEM coding
+const PEM = gostCrypto.coding.PEM
+
+// Chars coding
+const Chars = gostCrypto.coding.Chars
 
+// Hex coding;
+const Hex = gostCrypto.coding.Hex
+
+// Hex coding;
+const Int16 = gostCrypto.coding.Int16
+
+// Expand javascript object
+function expand() {
+  const r = {}
   for (let i = 0, n = arguments.length; i < n; i++) {
     // eslint-disable-next-line
-    const item = arguments[i];
-
+    const item = arguments[i]
     if (typeof item === 'object') {
-      for (const name in item) {
-        r[name] = item[name];
-      }
+      for (const name in item) {r[name] = item[name]}
     }
   }
-
-  return r;
-} // Swap bytes in buffer
+  return r
+}
 
 
+// Swap bytes in buffer
 function swapBytes(src) {
-  if (src instanceof CryptoOperationData) {
-    src = new Uint8Array(src);
-  }
-
-  const dst = new Uint8Array(src.length);
-
-  for (let i = 0, n = src.length; i < n; i++) {
-    dst[n - i - 1] = src[i];
-  }
-
-  return dst.buffer;
+  if (src instanceof CryptoOperationData) {src = new Uint8Array(src)}
+  const dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
 }
 
 function isBinary(value) {
-  return value instanceof CryptoOperationData || value.buffer instanceof CryptoOperationData;
-} // Left pad zero
-
+  return value instanceof CryptoOperationData || value.buffer instanceof CryptoOperationData
+}
 
+// Left pad zero
 function lpad(n, width) {
-  return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
-} // Nearest power 2
-
+  return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n
+}
 
+// Nearest power 2
 function npw2(n) {
-  return n <= 2 ? n : n <= 4 ? 4 : n <= 8 ? 8 : n <= 16 ? 16 : n <= 32 ? 32 : n <= 64 ? 64 : n <= 128 ? 128 : n <= 256 ? 256 : n < 512 ? 512 : n < 1024 ? 1024 : undefined;
-} // String int encode/decode to buffer
-
+  return n <= 2 ? n : n <= 4 ? 4 : n <= 8 ? 8 : n <= 16 ? 16 :
+    n <= 32 ? 32 : n <= 64 ? 64 : n <= 128 ? 128 : n <= 256 ? 256 :
+      n < 512 ? 512 : n < 1024 ? 1024 : undefined
+}
 
+// String int encode/decode to buffer
 const SInt = {
   encode: function (value, endian) {
-    return `0x${Hex.encode(value, endian)}`;
+    return `0x${ Hex.encode(value, endian)}`
   },
   decode: function (value, endian, len) {
-    if (typeof value === 'number') {
-      value = value.toString(16);
-    }
-
-    const s = value.replace('0x', '');
-    len = len || npw2(s.length);
-    return Hex.decode(lpad(s, len), endian);
-  }
-}; // Assert invalid message
+    if (typeof value === 'number') {value = value.toString(16)}
+    const s = value.replace('0x', '')
+    len = len || npw2(s.length)
+    return Hex.decode(lpad(s, len), endian)
+  },
+}
 
+// Assert invalid message
 function assert(value) {
-  if (value) {
-    throw Error('Invalid format');
-  }
+  if (value) {throw Error('Invalid format')}
 }
 
 function defineProperty(object, name, descriptor, enumerable) {
-  if (typeof descriptor !== 'object') {
-    descriptor = {
-      value: descriptor
-    };
-  }
-
-  if (enumerable !== undefined) {
-    descriptor.enumerable = enumerable;
-  }
-
-  Object.defineProperty(object, name, descriptor);
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
 }
 
 function defineProperties(object, properties, enumerable) {
-  for (const name in properties) {
-    defineProperty(object, name, properties[name], enumerable);
-  }
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
 }
 
 function getOwnPropertyDescriptor(object, name) {
-  return Object.getOwnPropertyDescriptor(object, name);
-} // </editor-fold>
+  return Object.getOwnPropertyDescriptor(object, name)
+}
+
+// </editor-fold>
 
 /*
  * Base ASN.1 types and definitions
  *
- */
-// <editor-fold defaultstate="collapsed">
-// Encode object primitive
-
+ */ // <editor-fold defaultstate="collapsed">
 
+// Encode object primitive
 function encode(format, object, tagNumber, tagClass, tagConstructed, uniformTitle) {
-  assert(object === undefined);
+  assert(object === undefined)
   let source = {
     tagNumber: tagNumber,
     tagClass: tagClass || 0x00,
     tagConstructed: tagConstructed || false,
-    object: object
-  }; // Output format
-
-  format = format || 'DER';
-
-  if (format === 'DER' || format === 'CER') {
-    source = BER.encode(source, format);
+    object: object,
   }
+  // Output format
+  format = format || 'DER'
+  if (format === 'DER' || format === 'CER') {source = BER.encode(source, format)}
+  if (format === 'PEM') {source = PEM.encode(source, uniformTitle)}
+  return source
+}
 
-  if (format === 'PEM') {
-    source = PEM.encode(source, uniformTitle);
-  }
-
-  return source;
-} // Decode object primitive
-
-
+// Decode object primitive
 function decode(source, tagNumber, tagClass, tagConstructed, uniformTitle) {
-  assert(source === undefined); // Decode PEM
-
-  if (typeof source === 'string') {
-    source = PEM.decode(source, uniformTitle, false);
-  } // Decode binary data
-
+  assert(source === undefined)
 
+  // Decode PEM
+  if (typeof source === 'string') {source = PEM.decode(source, uniformTitle, false)}
+  // Decode binary data
   if (source instanceof CryptoOperationData) {
     try {
-      source = PEM.decode(Chars.encode(source), uniformTitle, true);
+      source = PEM.decode(Chars.encode(source), uniformTitle, true)
     } catch (e) {
-      source = BER.decode(source);
+      source = BER.decode(source)
     }
   }
 
-  tagClass = tagClass || 0;
-  tagConstructed = tagConstructed || false; // Restore context implicit formats
-
+  tagClass = tagClass || 0
+  tagConstructed = tagConstructed || false
+  // Restore context implicit formats
   if (source.tagNumber === undefined) {
-    source = encode(true, source.object, tagNumber, tagClass, source.object instanceof Array);
-    source = BER.decode(source);
-  } // Check format
-
-
-  assert(source.tagClass !== tagClass || source.tagNumber !== tagNumber || source.tagConstructed !== tagConstructed); // Clone value define from redefine original
-
-  if (tagClass === 0 && tagNumber === 0x05) {
-    return null;
+    source = encode(true, source.object, tagNumber, tagClass,
+      source.object instanceof Array)
+    source = BER.decode(source)
   }
 
-  return source.object;
-} // Create class based on super
-
+  // Check format
+  assert(source.tagClass !== tagClass ||
+        source.tagNumber !== tagNumber ||
+        source.tagConstructed !== tagConstructed)
+  // Clone value define from redefine original
+  if (tagClass === 0 && tagNumber === 0x05) {return null}
+  return source.object
+}
 
+// Create class based on super
 function extend(Super, Class, propertiesObject, propertiesClass) {
   // If constructor not defined
   if (typeof Class !== 'function') {
-    propertiesClass = propertiesObject;
-    propertiesObject = Class;
-
+    propertiesClass = propertiesObject
+    propertiesObject = Class
     Class = function () {
-      Super.apply(this, arguments);
-    };
-  } // Create prototype properties
-
-
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
   Class.prototype = Object.create(Super.prototype, {
     constructor: {
-      value: Class
+      value: Class,
     },
     superclass: {
-      value: Super.prototype
-    }
-  });
-
-  if (propertiesObject) {
-    defineProperties(Class.prototype, propertiesObject);
-  } // Inherites super class properties
-
-
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject)}
+  // Inherites super class properties
   if (Super !== Object) {
-    for (const name in Super) {
-      Class[name] = Super[name];
-    }
+    for (const name in Super) {Class[name] = Super[name]}
   }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
 
-  Class.super = Super;
-
-  if (propertiesClass) {
-    defineProperties(Class, propertiesClass, true);
-  }
-
-  return Class;
-} // Base class
-
-
+// Base class
 const ASN1Object = extend(Object, function (object) {
-  this.object = object;
+  this.object = object
 }, {
   // Call set method for a class property
   _set: function (Class, propName, value) {
-    Class.property(propName).set.call(this, value);
+    Class.property(propName).set.call(this, value)
   },
   // Call get method for a class property
   _get: function (Class, propName) {
-    return Class.property(propName).get.call(this);
+    return Class.property(propName).get.call(this)
   },
   // Call method for a class
   _call: function (Class, methodName, args) {
-    return Class.method(methodName).apply(this, args);
+    return Class.method(methodName).apply(this, args)
   },
   hasProperty: function (propName) {
-    return this.hasOwnProperty(propName) || !!this.constructor.property(propName);
+    return this.hasOwnProperty(propName) ||
+            !!this.constructor.property(propName)
   },
   encode: function () {
-    return this.object;
-  }
+    return this.object
+  },
 }, {
   decode: function (source) {
-    return new this(source);
+    return new this(source)
   },
   // Find ingerited property
   property: function (propName) {
-    let proto = this.prototype;
-
+    let proto = this.prototype
     while (proto) {
-      const descriptor = getOwnPropertyDescriptor(proto, propName);
-
-      if (descriptor) {
-        return descriptor;
-      }
-
-      proto = proto.superclass;
+      const descriptor = getOwnPropertyDescriptor(proto, propName)
+      if (descriptor) {return descriptor}
+      proto = proto.superclass
     }
   },
   // Find method
   method: function (methodName) {
-    let proto = this.prototype;
-
+    let proto = this.prototype
     while (proto) {
-      if (proto[methodName]) {
-        return proto[methodName];
-      }
-
-      proto = proto.superclass;
+      if (proto[methodName]) {return proto[methodName]}
+      proto = proto.superclass
     }
-  }
-}); // Primitive metaclass
+  },
+})
 
+// Primitive metaclass
 const PRIMITIVE = function (tagNumber) {
   return extend(ASN1Object, {
     encode: function (format) {
-      return encode(format, this.object, tagNumber);
-    }
+      return encode(format, this.object, tagNumber)
+    },
   }, {
     decode: function (source) {
-      return new this(decode(source, tagNumber));
-    }
-  });
-};
-
-const ANY = ASN1Object;
-const BOOLEAN = PRIMITIVE(0x01);
-const IA5String = PRIMITIVE(0x16);
-const NumericString = PRIMITIVE(0x12);
-const PrintableString = PRIMITIVE(0x13);
-const TeletexString = PRIMITIVE(0x14);
-const UTF8String = PRIMITIVE(0x0c);
-const UTCTime = PRIMITIVE(0x17);
-const GeneralizedTime = PRIMITIVE(0x18);
-const UniversalString = PRIMITIVE(0x1C);
-const BMPString = PRIMITIVE(0x1e);
+      return new this(decode(source, tagNumber))
+    },
+  })
+}
+
+const ANY = ASN1Object
+
+const BOOLEAN = PRIMITIVE(0x01)
+
+const IA5String = PRIMITIVE(0x16)
+
+const NumericString = PRIMITIVE(0x12)
+
+const PrintableString = PRIMITIVE(0x13)
+
+const TeletexString = PRIMITIVE(0x14)
+
+const UTF8String = PRIMITIVE(0x0c)
+
+const UTCTime = PRIMITIVE(0x17)
+
+const GeneralizedTime = PRIMITIVE(0x18)
+
+const UniversalString = PRIMITIVE(0x1C)
+
+const BMPString = PRIMITIVE(0x1e)
+
 const NULL = extend(PRIMITIVE(0x05), {
   object: {
     get: function () {
-      return null;
+      return null
     },
     set: function (object) {
-      assert(object !== null);
-    }
-  }
-}); // Primitive class with value coding
+      assert(object !== null)
+    },
+  },
+})
 
+// Primitive class with value coding
 const PRIMITIVE_CODE = function (tagNumber) {
+
   // Base class primitive
   const Class = extend(PRIMITIVE(tagNumber), function (object) {
-    if (this instanceof Class) {
-      Class.super.apply(this, arguments);
-    } else {
-      return CODE(object);
-    }
-  }); // Create Class with encoded
+    if (this instanceof Class) {Class.super.apply(this, arguments)} else {return CODE(object)}
+  })
 
+  // Create Class with encoded
   function CODE(structure) {
     // Structured class
     return extend(PRIMITIVE(tagNumber), function (object) {
-      Class.super.call(this, object);
+      Class.super.call(this, object)
     }, {
       // Transformation to code values
       encode: function (format) {
-        return encode(format, structure[this.object], tagNumber);
-      }
+        return encode(format, structure[this.object], tagNumber)
+      },
     }, {
       decode: function (source) {
-        const id = decode(source, tagNumber);
-
+        const id = decode(source, tagNumber)
         for (const name in structure) {
-          if (id === structure[name]) {
-            return new this(name);
-          }
+          if (id === structure[name]) {return new this(name)}
         }
-
-        assert(true);
-      }
-    });
+        assert(true)
+      },
+    })
   }
+  return Class
+}
 
-  return Class;
-};
+const INTEGER = PRIMITIVE_CODE(0x02)
 
-const INTEGER = PRIMITIVE_CODE(0x02);
-const ENUMERATED = PRIMITIVE_CODE(0x0a);
+const ENUMERATED = PRIMITIVE_CODE(0x0a)
 
-const OCTET_STRING = function () {
+const OCTET_STRING = (function () {
   // Base class primitive
   var Class = extend(PRIMITIVE(0x04), function (object) {
-    if (this instanceof Class) {
-      Class.super.apply(this, arguments);
-    } else {
-      return WRAPPING(object);
-    }
-  }); // Wrapping class
-
+    if (this instanceof Class) {Class.super.apply(this, arguments)} else {return WRAPPING(object)}
+  })
+  // Wrapping class
   function WRAPPING(WrappedClass) {
     if (WrappedClass) {
       return extend(WrappedClass, {
         encode: function (format) {
-          return encode(format, WrappedClass.method('encode').call(this, true), 0x04);
-        }
+          return encode(format, WrappedClass.method('encode').call(this, true), 0x04)
+        },
       }, {
         decode: function (source) {
-          return WrappedClass.decode.call(this, decode(source, 0x04));
-        }
-      });
-    }
-
-    return Class;
+          return WrappedClass.decode.call(this, decode(source, 0x04))
+        },
+      })
+    } return Class
   }
+  return Class
+})()
 
-  return Class;
-}();
-
-const BIT_STRING = function () {
+const BIT_STRING = (function () {
   // Base class primitive
   var Class = extend(PRIMITIVE(0x03), function (object) {
-    if (this instanceof Class) {
-      Class.super.apply(this, arguments);
-    } else if (typeof object === 'object') {
-      return MASK(object);
-    } else {
-      return WRAPPING(object);
-    }
-  }); // Wrapping class
+    if (this instanceof Class) {Class.super.apply(this, arguments)} else if (typeof object === 'object') {return MASK(object)} else {return WRAPPING(object)}
+  })
 
+  // Wrapping class
   function WRAPPING(WrappedClass) {
     if (WrappedClass) {
       return extend(WrappedClass, {
         encode: function (format) {
-          return encode(format, WrappedClass.method('encode').call(this, true), 0x03);
-        }
+          return encode(format, WrappedClass.method('encode').call(this, true), 0x03)
+        },
       }, {
         decode: function (source) {
-          return WrappedClass.decode.call(this, decode(source, 0x03));
-        }
-      });
-    }
-
-    return Class;
-  } // Create new class for a mask
-
+          return WrappedClass.decode.call(this, decode(source, 0x03))
+        },
+      })
+    } return Class
+  }
 
+  // Create new class for a mask
   function MASK(structure) {
     // Bit string masked class
     return extend(ASN1Object, function (object, numbits) {
-      ASN1Object.call(this, object);
-      this.numbits = numbits || 0;
+      ASN1Object.call(this, object)
+      this.numbits = numbits || 0
     }, {
       encode: function (format) {
-        let object = this.object,
-            data = [];
-
+        let object = this.object, data = []
         if (object instanceof Array) {
           for (var i = 0, n = object.length; i < n; i++) {
-            const j = structure[object[i]];
-
-            if (j !== undefined) {
-              data[j] = '1';
-            }
+            const j = structure[object[i]]
+            if (j !== undefined) {data[j] = '1'}
           }
-
           for (var i = 0, n = Math.max(data.length, this.numbits); i < n; i++) {
-            if (!data[i]) {
-              data[i] = '0';
-            }
+            if (!data[i]) {data[i] = '0'}
           }
-
-          data = data.join('');
-        } else {
-          data = '0';
-        }
-
-        return encode(format, data, 0x03);
-      }
+          data = data.join('')
+        } else {data = '0'}
+        return encode(format, data, 0x03)
+      },
     }, {
       // Transformation to array of values
       decode: function (source) {
-        const data = decode(source, 0x03),
-              object = [];
-
+        const data = decode(source, 0x03), object = []
         for (const name in structure) {
-          const i = structure[name];
-
-          if (data.charAt(i) === '1') {
-            object.push(name);
-          }
+          const i = structure[name]
+          if (data.charAt(i) === '1') {object.push(name)}
         }
-
-        return new this(object, data.length);
-      }
-    });
+        return new this(object, data.length)
+      },
+    })
   }
 
-  return Class;
-}(); // Combine sequence object properties with owner object
-
+  return Class
+})()
 
+// Combine sequence object properties with owner object
 const COMBINE = function (Class) {
   Class.combine = function (owner, valueName) {
     for (const name in Class.prototype) {
       if (Class.prototype.hasOwnProperty(name) && !owner.hasProperty(name)) {
-        defineProperty(owner, name, function (name) {
+        defineProperty(owner, name, (function (name) {
           return {
             get: function () {
               // Get object property
-              return this[valueName] && this[valueName][name];
+              return this[valueName] && this[valueName][name]
             },
             set: function (object) {
               // Set object property
-              if (!this[valueName]) {
-                this[valueName] = {};
-              }
-
-              this[valueName][name] = object;
+              if (!this[valueName]) {this[valueName] = {}}
+              this[valueName][name] = object
             },
             configurable: false,
-            enumerable: true
-          };
-        }(name));
+            enumerable: true,
+          }
+        })(name))
       }
     }
-  };
-
-  return Class;
-};
+  }
+  return Class
+}
 
 const SEQUENCE = function (structure, uniformTitle) {
+
   /**
      * Create SEQUENCE ASN.1 metaclass
      *
@@ -542,63 +475,47 @@ const SEQUENCE = function (structure, uniformTitle) {
     // Define hidden properties
     defineProperty(this, 'items', {
       writable: true,
-      value: {}
-    });
-
-    if (typeof object === 'string' || object instanceof CryptoOperationData) {
-      this.decode(object);
-    } else if (object !== undefined) {
-      this.object = object; // Check structure
-
-      if (check) {
-        this.check();
-      }
+      value: {},
+    })
+    if (typeof object === 'string' || object instanceof CryptoOperationData) {this.decode(object)} else if (object !== undefined) {
+      this.object = object
+      // Check structure
+      if (check) {this.check()}
     }
   }, {
     object: {
       get: function () {
-        return this;
+        return this
       },
       set: function (object) {
         if (object instanceof Class) {
           // Set the same sequence class
-          this.items = object.items;
-
+          this.items = object.items
           for (var name in structure) {
-            var ItemClass = this.getItemClass(name, this.items);
-
-            if (ItemClass.combine) {
-              ItemClass.combine(this, name);
-            }
+            var ItemClass = this.getItemClass(name, this.items)
+            if (ItemClass.combine) {ItemClass.combine(this, name)}
           }
         } else {
           // Set other object structure
-          const data = {};
-
+          const data = {}
           for (var name in structure) {
-            const item = object[name];
-            var ItemClass = this.getItemClass(name, data);
-
+            const item = object[name]
+            var ItemClass = this.getItemClass(name, data)
             if (item !== undefined) {
-              data[name] = new ItemClass(item);
+              data[name] = new ItemClass(item)
             } else if (ItemClass.combine) {
               // Create combined object
-              data[name] = new ItemClass(object);
-            }
-
-            if (ItemClass.combine) {
-              ItemClass.combine(this, name);
+              data[name] = new ItemClass(object)
             }
+            if (ItemClass.combine) {ItemClass.combine(this, name)}
           }
-
-          this.items = data;
+          this.items = data
         }
-      }
+      },
     },
     getItemClass: function (name, items) {
-      return structure[name];
+      return structure[name]
     },
-
     /**
          * Encode the object
          *
@@ -608,24 +525,19 @@ const SEQUENCE = function (structure, uniformTitle) {
          * @returns {FormatedData}
          */
     encode: function (format) {
-      const source = [],
-            items = this.items; // Encode objects in structure
-
+      const source = [], items = this.items
+      // Encode objects in structure
       for (const name in structure) {
         // console.log(name, 'encoding...', items[name]);
         if (items[name]) {
-          const encoded = items[name].encode(true); // Source from object
-
+          const encoded = items[name].encode(true)// Source from object
           if (encoded !== undefined) // Can be optional
-            {
-              source.push(encoded);
-            }
+          {source.push(encoded)}
+
         }
       }
-
-      return encode(format, source, 0x10, 0, true, uniformTitle);
+      return encode(format, source, 0x10, 0, true, uniformTitle)
     },
-
     /**
          * Decode the source to self object
          *
@@ -634,9 +546,8 @@ const SEQUENCE = function (structure, uniformTitle) {
          * @param {FormatedData} source Encoded data
          */
     decode: function (source) {
-      this.object = this.constructor.decode(source);
+      this.object = this.constructor.decode(source)
     },
-
     /**
          * Check the object structure
          *
@@ -644,8 +555,8 @@ const SEQUENCE = function (structure, uniformTitle) {
          * @instance
          */
     check: function () {
-      this.constructor.decode(this.encode(true));
-    }
+      this.constructor.decode(this.encode(true))
+    },
   }, {
     /**
          * Encode data values with creating object
@@ -657,9 +568,8 @@ const SEQUENCE = function (structure, uniformTitle) {
          * @returns {FormatedData}
          */
     encode: function (object, format) {
-      return new this(object).encode(format);
+      return new this(object).encode(format)
     },
-
     /**
          * Decode source and create object
          *
@@ -671,239 +581,206 @@ const SEQUENCE = function (structure, uniformTitle) {
          */
     decode: function (source) {
       // Decode structure
-      source = decode(source, 0x10, 0, true, uniformTitle);
-      let i = 0,
-          result = new this(),
-          data = result.items = {};
-
+      source = decode(source, 0x10, 0, true, uniformTitle)
+      let i = 0, result = new this(), data = result.items = {}
       for (const name in structure) {
         // console.log(name, 'decoding...');
         // try to create and decode object
-        const ItemClass = result.getItemClass(name, data);
-        const item = ItemClass.decode(source[i]); // success? item can be optional
-
+        const ItemClass = result.getItemClass(name, data)
+        const item = ItemClass.decode(source[i])
+        // success? item can be optional
         if (item !== undefined) {
-          data[name] = item;
-
-          if (ItemClass.combine) {
-            ItemClass.combine(result, name);
-          }
-
-          i++;
+          data[name] = item
+          if (ItemClass.combine) {ItemClass.combine(result, name)}
+          i++
         }
       }
+      return result
+    },
+  })
 
-      return result;
-    }
-  }); // Append structure items
-
+  // Append structure items
   for (const name in structure) {
-    defineProperty(Class.prototype, name, function (name) {
+    defineProperty(Class.prototype, name, (function (name) {
       return {
         get: function () {
           // Get object property
-          return this.items[name] && this.items[name].object;
+          return this.items[name] && this.items[name].object
         },
         set: function (object) {
           // Set object property
           if (object !== undefined) {
-            const ItemClass = this.getItemClass(name, this.items);
-            this.items[name] = new ItemClass(object);
-          } else {
-            delete this.items[name];
-          }
+            const ItemClass = this.getItemClass(name, this.items)
+            this.items[name] = new ItemClass(object)
+          } else {delete this.items[name]}
         },
         configurable: false,
-        enumerable: !structure[name].combine
-      };
-    }(name));
-
-    if (structure[name].combine) {
-      structure[name].combine(Class.prototype, name);
-    }
+        enumerable: !structure[name].combine,
+      }
+    })(name))
+    if (structure[name].combine) {structure[name].combine(Class.prototype, name)}
   }
-
-  return Class;
-};
+  return Class
+}
 
 const ATTRIBUTE = function (structure, typeName, valueName, ownerDafaultType, uniformName) {
-  const BaseClass = SEQUENCE(structure, uniformName); // Define attribute sequence
 
+  const BaseClass = SEQUENCE(structure, uniformName)
+
+  // Define attribute sequence
   var DEFINE = function (typeSet, defaultType) {
-    typeName = typeName || 'type';
-    valueName = valueName || 'value';
-    defaultType = defaultType || ownerDafaultType || ANY;
+
+    typeName = typeName || 'type'
+    valueName = valueName || 'value'
+    defaultType = defaultType || ownerDafaultType || ANY
+
     var Class = extend(BaseClass, function (object) {
       // Constructor - "matrioshka"
       if (this instanceof Class) {
         // Call super
-        BaseClass.apply(this, arguments);
-      } else {
-        return DEFINE.apply(this, arguments);
-      }
+        BaseClass.apply(this, arguments)
+      } else {return DEFINE.apply(this, arguments)}
     }, {
       getItemClass: function (name, items) {
-        let ItemClass = structure[name];
-
+        let ItemClass = structure[name]
         if (valueName === name) {
           // Define type of value attribute based on type attribute
-          let type,
-              typeId = items && items[typeName];
-
+          let type, typeId = items && items[typeName]
           if (typeId) {
-            const id = typeId.object;
-
+            const id = typeId.object
             if (typeSet) {
-              if (typeof typeSet === 'function') {
-                type = typeSet(id);
-              } else {
-                type = typeSet[id];
-              }
+              if (typeof typeSet === 'function') {type = typeSet(id)} else {type = typeSet[id]}
             }
           }
-
-          type = type || defaultType || ANY;
-          ItemClass = ItemClass === ANY ? type : ItemClass(type);
+          type = type || defaultType || ANY
+          ItemClass = ItemClass === ANY ? type :
+            ItemClass(type)
         }
+        return ItemClass
+      },
+    })
 
-        return ItemClass;
-      }
-    }); // Redefine type property
-
+    // Redefine type property
     defineProperty(Class.prototype, typeName, {
       get: function () {
         // Get value property of object
-        return this.items[typeName] && this.items[typeName].object;
+        return this.items[typeName] && this.items[typeName].object
       },
       set: function () {
         // Can't set type definition property separatery
-        assert(true);
+        assert(true)
       },
       configurable: false,
-      enumerable: true
-    });
-    return Class;
-  };
+      enumerable: true,
+    })
+
+    return Class
+  }
+
+  return DEFINE()
+}
 
-  return DEFINE();
-};
 
 const OBJECT_IDENTIFIER = extend(ASN1Object, {
   encode: function (format) {
-    let object = this.object;
-    object = /^(\d+\.)+\d+$/.test(object) ? object : identifiers[object];
-    assert(!object);
-    return encode(format, object, 0x06);
-  }
+    let object = this.object
+    object = /^(\d+\.)+\d+$/.test(object) ? object : identifiers[object]
+    assert(!object)
+    return encode(format, object, 0x06)
+  },
 }, {
   decode: function (source) {
-    const object = decode(source, 0x06);
-    return new this(names[object] || object);
-  }
-});
+    const object = decode(source, 0x06)
+    return new this(names[object] || object)
+  },
+})
 
 const IMPLICIT = function (Class) {
-  Class = Class || ANY; // Add constracted tag
-
+  Class = Class || ANY
+  // Add constracted tag
   return extend(Class, {
     encode: function (format) {
       // Format encoding without CTX header
-      const source = Class.method('encode').call(this, format);
-
-      if (typeof source === 'string' || source instanceof CryptoOperationData) {
-        return source;
-      }
-
-      if (source.tagNumber !== 0x04 && source.tagClass === 0 && !(source.object instanceof Array)) // Encode primitive source
-        {
-          return {
-            object: BER.encode(source, 'DER', true)
-          };
-        }
-
-      return {
-        object: source.object
-      };
-    }
+      const source = Class.method('encode').call(this, format)
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {return source}
+      if (source.tagNumber !== 0x04 && source.tagClass === 0 &&
+                !(source.object instanceof Array))
+      // Encode primitive source
+      {return { object: BER.encode(source, 'DER', true) }}
+      return { object: source.object }
+    },
   }, {
     decode: function (source) {
       if (typeof source === 'string' || source instanceof CryptoOperationData) {
-        return Class.decode.call(this, source);
+        return Class.decode.call(this, source)
       }
-
       source = {
         object: source.object,
         header: source.header,
-        content: source.content
-      };
-      return Class.decode.call(this, source);
-    }
-  });
-};
+        content: source.content,
+      }
+      return Class.decode.call(this, source)
 
-const EXPLICIT = function (Class) {
-  Class = Class || ANY; // Add constracted tag
+    },
+  })
+}
 
+const EXPLICIT = function (Class) {
+  Class = Class || ANY
+  // Add constracted tag
   return extend(Class, {
     encode: function (format) {
       // Format encoding without CTX header
-      const source = Class.method('encode').call(this, format);
-
-      if (typeof source === 'string' || source instanceof CryptoOperationData) {
-        return source;
-      }
-
-      return {
-        object: [source]
-      };
-    }
+      const source = Class.method('encode').call(this, format)
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {return source}
+      return { object: [source] }
+    },
   }, {
     decode: function (source) {
       if (typeof source === 'string' || source instanceof CryptoOperationData) {
-        return Class.decode.call(this, source);
-      }
-
-      return Class.decode.call(this, source.object[0]);
-    }
-  });
-};
+        return Class.decode.call(this, source)
+      } return Class.decode.call(this, source.object[0])
+    },
+  })
+}
 
 const CTX = function (number, ContentClass) {
   function CTX() {
-    ContentClass.apply(this, arguments);
-  } // Create CTX number class with wrapped content class
-
-
+    ContentClass.apply(this, arguments)
+  }
+  // Create CTX number class with wrapped content class
   return extend(ContentClass, CTX, {
     encode: function (format) {
-      const source = ContentClass.method('encode').call(this, format);
-
-      if (typeof source === 'string' || source instanceof CryptoOperationData) {
-        return source;
-      }
-
-      source.tagNumber = number;
-      source.tagClass = 0x02;
-      source.tagConstructed = source.object instanceof Array;
-      return source;
-    }
+      const source = ContentClass.method('encode').call(this, format)
+      if (typeof source === 'string' || source instanceof CryptoOperationData) {return source}
+      source.tagNumber = number
+      source.tagClass = 0x02
+      source.tagConstructed = source.object instanceof Array
+      return source
+    },
   }, {
     decode: function (source) {
       // Format decoding without CTX
-      assert(source.tagNumber !== undefined && (source.tagClass !== 0x02 || source.tagNumber !== number));
-      return ContentClass.decode.call(this, source);
-    }
-  });
-};
+      assert(source.tagNumber !== undefined &&
+                (source.tagClass !== 0x02 || source.tagNumber !== number))
+      return ContentClass.decode.call(this, source)
+    },
+  })
+}
 
 const ARRAY_OF = function (tagNumber) {
+
   return function (ItemClassDef, typeAndValue) {
     // Difininition of item class
-    ItemClassDef = ItemClassDef || ANY; // Metaclass definition
+    ItemClassDef = ItemClassDef || ANY
 
+    // Metaclass definition
     var DEFINE = function (typeSet, defaultType) {
+
       // Define item class
-      const ItemClass = typeof ItemClassDef === 'function' && typeSet !== undefined ? ItemClassDef(typeSet, defaultType) : ItemClassDef;
+      const ItemClass = typeof ItemClassDef === 'function' &&
+                typeSet !== undefined ?
+        ItemClassDef(typeSet, defaultType) : ItemClassDef
 
       if (typeAndValue) {
         /**
@@ -920,97 +797,77 @@ const ARRAY_OF = function (tagNumber) {
             // Define hidden items property
             defineProperty(this, 'items', {
               writable: true,
-              value: {}
-            }); // Call super
-
-            ASN1Object.call(this, object || {});
-          } else {
-            return DEFINE.apply(this, arguments);
-          }
+              value: {},
+            })
+            // Call super
+            ASN1Object.call(this, object || {})
+          } else {return DEFINE.apply(this, arguments)}
         }, {
           object: {
             get: function () {
               // refresh items from object properties
-              this.read();
-              return this;
+              this.read()
+              return this
             },
             set: function (object) {
               if (object instanceof Class) {
-                object.read();
-                this.items = object.items;
+                object.read()
+                this.items = object.items
               } else {
                 // Set other object structure
-                const data = {};
-
+                const data = {}
                 for (const id in object) {
-                  const item = object[id];
-                  data[id] = this.createItem(item, id);
+                  const item = object[id]
+                  data[id] = this.createItem(item, id)
                 }
-
-                this.items = data;
-              } // refresh object properties to items
-
-
-              this.reset();
-            }
+                this.items = data
+              }
+              // refresh object properties to items
+              this.reset()
+            },
           },
           createItem: function (value, type) {
             if (typeAndValue) {
-              var object = {};
-              object[typeAndValue.typeName] = type;
-              object[typeAndValue.valueName] = value;
-            } else {
-              object = value;
-            }
-
-            return new ItemClass(object);
+              var object = {}
+              object[typeAndValue.typeName] = type
+              object[typeAndValue.valueName] = value
+            } else {object = value}
+            return new ItemClass(object)
           },
           getItemValue: function (id) {
-            const item = this.items[id];
-            return typeAndValue ? item.object[typeAndValue.valueName] : item.object;
+            const item = this.items[id]
+            return typeAndValue ? item.object[typeAndValue.valueName] : item.object
           },
           setItemValue: function (id, value) {
-            const item = this.items[id];
-
-            if (typeAndValue) {
-              item.object[typeAndValue.valueName] = value;
-            } else {
-              item.object = value;
-            }
+            const item = this.items[id]
+            if (typeAndValue) {item.object[typeAndValue.valueName] = value} else {item.object = value}
           },
           isItemType: function (id) {
-            return typeAndValue ? identifiers[id] : !isNaN(parseInt(id));
+            return typeAndValue ? identifiers[id] : !isNaN(parseInt(id))
           },
           reset: function () {
             // remove unused properties
-            const items = this.items;
-
+            const items = this.items
             for (var id in this) {
-              if (this.hasOwnProperty(id) && !this.items[id] && this.isItemType(id)) {
-                delete this[id];
-              }
-            } // add new properties
-
-
-            for (var id in items) {
-              this[id] = this.getItemValue(id);
+              if (this.hasOwnProperty(id) && !this.items[id] &&
+                                this.isItemType(id)) {delete this[id]}
             }
+            // add new properties
+            for (var id in items) {this[id] = this.getItemValue(id)}
           },
           read: function () {
-            const items = this.items;
-
+            const items = this.items
             for (const id in this) {
               if (this.isItemType(id)) {
                 if (!this.items[id]) {
-                  items[id] = this.createItem(this[id], id);
-                  this[id] = this.getItemValue(id);
+                  items[id] = this.createItem(this[id], id)
+                  this[id] = this.getItemValue(id)
                 } else if (this.getItemValue(id) !== this[id]) {
-                  this.setItemValue(id, this[id]);
+                  this.setItemValue(id, this[id])
                 }
               }
             }
           },
-
           /**
                      * Encode the object
                      *
@@ -1021,23 +878,16 @@ const ARRAY_OF = function (tagNumber) {
                      */
           encode: function (format) {
             // refresh items from object properties
-            this.read(); // repare source
-
-            const object = this.items,
-                  source = [];
-
+            this.read()
+            // repare source
+            const object = this.items, source = []
             for (const id in object) {
               // console.log(id, object[id], 'encoding...');
-              const encoded = object[id].encode(true);
-
-              if (encoded !== undefined) {
-                source.push(encoded);
-              }
+              const encoded = object[id].encode(true)
+              if (encoded !== undefined) {source.push(encoded)}
             }
-
-            return encode(format, source, tagNumber, 0, true);
+            return encode(format, source, tagNumber, 0, true)
           },
-
           /**
                      * Decode the source to self object
                      *
@@ -1046,9 +896,8 @@ const ARRAY_OF = function (tagNumber) {
                      * @param {FormatedData} source Encoded data
                      */
           decode: function (source) {
-            this.object = this.constructor.decode(source);
+            this.object = this.constructor.decode(source)
           },
-
           /**
                      * Check the object structure
                      *
@@ -1056,8 +905,8 @@ const ARRAY_OF = function (tagNumber) {
                      * @instance
                      */
           check: function () {
-            this.constructor.decode(this.encode(true));
-          }
+            this.constructor.decode(this.encode(true))
+          },
         }, {
           /**
                      * Encode data values with creating object
@@ -1069,9 +918,8 @@ const ARRAY_OF = function (tagNumber) {
                      * @returns {FormatedData}
                      */
           encode: function (object, format) {
-            return new this(object).encode(format);
+            return new this(object).encode(format)
           },
-
           /**
                      * Decode source and create object
                      *
@@ -1083,24 +931,21 @@ const ARRAY_OF = function (tagNumber) {
                      */
           decode: function (source) {
             // Decode structure
-            source = decode(source, tagNumber, 0, true);
-            const result = new this(),
-                  data = result.items = {};
-
+            source = decode(source, tagNumber, 0, true)
+            const result = new this(), data = result.items = {}
             for (let i = 0, n = source.length; i < n; i++) {
-              const item = ItemClass.decode(source[i]);
-              const id = typeAndValue ? item.object[typeAndValue.typeName] : i;
-              data[id] = item;
+              const item = ItemClass.decode(source[i])
+              const id = typeAndValue ? item.object[typeAndValue.typeName] : i
+              data[id] = item
             }
+            result.reset()
+            return result
+          },
+        })
 
-            result.reset();
-            return result;
-          }
-        });
-        return Class;
-      } // Create array class
-
-
+        return Class
+      }
+      // Create array class
       var ArrayClass = extend(ASN1Object, function (object) {
         // Constructor - "matrioshka"
         if (this instanceof ArrayClass) {
@@ -1108,309 +953,256 @@ const ARRAY_OF = function (tagNumber) {
           defineProperties(this, {
             items: {
               writable: true,
-              value: []
+              value: [],
             },
             values: {
               writable: true,
-              value: []
-            }
-          }); // Call super
-
-          ASN1Object.call(this, object || []);
-        } else {
-          return DEFINE.apply(this, arguments);
-        }
+              value: [],
+            },
+          })
+          // Call super
+          ASN1Object.call(this, object || [])
+        } else {return DEFINE.apply(this, arguments)}
       }, {
         object: {
           get: function () {
             // refresh items from object properties
-            this.read();
-            return this.values;
+            this.read()
+            return this.values
           },
           set: function (object) {
             if (object instanceof ArrayClass) {
-              object.read();
-              this.items = object.items;
+              object.read()
+              this.items = object.items
             } else {
               // Set other object structure
-              const data = [];
-
-              for (let i = 0, n = object.length; i < n; i++) {
-                data[i] = new ItemClass(object[i]);
-              }
-
-              this.items = data;
-            } // refresh object properties to items
-
-
-            this.reset();
-          }
+              const data = []
+              for (let i = 0, n = object.length; i < n; i++) {data[i] = new ItemClass(object[i])}
+              this.items = data
+            }
+            // refresh object properties to items
+            this.reset()
+          },
         },
         encode: function (format) {
           // refresh items from object properties
-          this.read(); // repare source
-
-          const data = this.items,
-                source = [];
-
+          this.read()
+          // repare source
+          const data = this.items, source = []
           for (let i = 0, n = data.length; i < n; i++) {
-            const encoded = data[i].encode(true);
-
-            if (encoded !== undefined) {
-              source.push(encoded);
-            }
+            const encoded = data[i].encode(true)
+            if (encoded !== undefined) {source.push(encoded)}
           }
-
-          return encode(format, source, tagNumber, 0, true);
+          return encode(format, source, tagNumber, 0, true)
         },
         decode: function (source) {
-          this.object = this.constructor.decode(source);
+          this.object = this.constructor.decode(source)
         },
         check: function () {
-          this.constructor.decode(this.encode(true));
+          this.constructor.decode(this.encode(true))
         },
         reset: function () {
           // remove unused properties
-          for (let i = 0, n = this.items.length; i < n; i++) {
-            this.values.push(this.items[i].object);
-          }
+          for (let i = 0, n = this.items.length; i < n; i++) {this.values.push(this.items[i].object)}
         },
         read: function () {
-          const items = this.items,
-                values = this.values;
-
+          const items = this.items, values = this.values
           for (let i = 0, n = values.length; i < n; i++) {
             if (!this.items[i]) {
-              items[i] = new ItemClass(values[i]);
-              values[i] = items[i].object;
-            } else if (items[i].object !== values[i]) {
-              items[i].object = values[i];
-            }
+              items[i] = new ItemClass(values[i])
+              values[i] = items[i].object
+            } else if (items[i].object !== values[i]) {items[i].object = values[i]}
           }
-        }
+        },
       }, {
         encode: function (object, format) {
-          return new this(object).encode(format);
+          return new this(object).encode(format)
         },
         decode: function (source) {
-          source = decode(source, tagNumber, 0, true);
-          const result = new this();
-          result.items = [];
+          source = decode(source, tagNumber, 0, true)
+          const result = new this()
+          result.items = []
+          for (let i = 0, n = source.length; i < n; i++) {result.items.push(ItemClass.decode(source[i]))}
+          result.reset()
+          return result
+        },
+      })
 
-          for (let i = 0, n = source.length; i < n; i++) {
-            result.items.push(ItemClass.decode(source[i]));
-          }
+      return ArrayClass
 
-          result.reset();
-          return result;
-        }
-      });
-      return ArrayClass;
-    };
+    }
+    return DEFINE() // Create simple class w/o any parameters
+  }
+}
 
-    return DEFINE(); // Create simple class w/o any parameters
-  };
-};
+const SEQUENCE_OF = ARRAY_OF(0x10)
 
-const SEQUENCE_OF = ARRAY_OF(0x10);
-const SET_OF = ARRAY_OF(0x11);
+const SET_OF = ARRAY_OF(0x11)
 
 const ENCLOSURE = function (BaseClass, modifier) {
   if (modifier) {
     const Class = extend(ASN1Object, {
       object: {
         get: function () {
-          if (this.item) {
-            return modifier.decode(this.item.object);
-          }
-
-          return undefined;
+          if (this.item) {return modifier.decode(this.item.object)}
+          return undefined
         },
         set: function (object) {
-          if (object !== undefined) {
-            this.item = new BaseClass(modifier.encode(object));
-          } else {
-            delete this.item;
-          }
-        }
+          if (object !== undefined) {this.item = new BaseClass(modifier.encode(object))} else {delete this.item}
+        },
       },
       encode: function (format) {
-        return this.item.encode(format);
-      }
+        return this.item.encode(format)
+      },
     }, {
       decode: function (source) {
-        const result = new this();
-        result.item = BaseClass.decode(source);
-        return result;
-      }
-    });
-
+        const result = new this()
+        result.item = BaseClass.decode(source)
+        return result
+      },
+    })
     for (const name in BaseClass) {
-      if (!Class[name]) {
-        Class[name] = BaseClass[name];
-      }
+      if (!Class[name]) {Class[name] = BaseClass[name]}
     }
-
-    return Class;
-  }
-
-  return BaseClass;
-};
+    return Class
+  } return BaseClass
+}
 
 const SET_OF_SINGLE = function (ItemClass) {
+
   const Class = ENCLOSURE(SET_OF(ItemClass), {
     encode: function (item) {
-      return [item];
+      return [item]
     },
     decode: function (item) {
-      return item[0];
-    }
-  });
-  return Class;
-};
+      return item[0]
+    },
+  })
+  return Class
+}
 
 const CHOICE = function (structure, define) {
+
   return extend(ASN1Object, {
     object: {
       get: function () {
-        return this.item && this.item.object;
+        return this.item && this.item.object
       },
       set: function (object) {
         // Try to find appropriate type in structure
         if (object instanceof ASN1Object) {
           for (var name in structure) {
             if (object instanceof structure[name]) {
-              this.item = object;
-              return;
+              this.item = object
+              return
             }
           }
-        } // Define class
-
-
-        var name = typeof define === 'function' ? define(object) : define;
-        assert(!name || !structure[name]);
-        object = new structure[name](object);
-        this.item = object;
-      }
+        }
+        // Define class
+        var name = typeof define === 'function' ? define(object) : define
+        assert(!name || !structure[name])
+        object = new structure[name](object)
+        this.item = object
+      },
     },
     encode: function (format) {
       // Already in class
-      return this.item.encode(format);
-    }
+      return this.item.encode(format)
+    },
   }, {
     decode: function (source) {
       // Try to find class structure
       for (const name in structure) {
         try {
-          const item = structure[name].decode(source);
-
-          if (item !== undefined) {
-            return new this(item);
-          }
-        } catch (e) {}
+          const item = structure[name].decode(source)
+          if (item !== undefined) {return new this(item)}
+        } catch (e) {
+        }
       }
-
-      assert(true);
-    }
-  });
-};
+      assert(true)
+    },
+  })
+}
 
 const ENCAPSULATES = function (WrappedClass) {
-  WrappedClass = WrappedClass || ANY; // BER Encode/Decode values
-
+  WrappedClass = WrappedClass || ANY
+  // BER Encode/Decode values
   return extend(WrappedClass, {
     encode: function () {
-      return BER.encode(WrappedClass.method('encode').call(this, true));
-    }
+      return BER.encode(WrappedClass.method('encode').call(this, true))
+    },
   }, {
     encode: function (object, format) {
-      return new this(object).encode(format);
+      return new this(object).encode(format)
     },
     decode: function (source) {
-      return WrappedClass.decode.call(this, BER.decode(source));
-    }
-  });
-};
+      return WrappedClass.decode.call(this, BER.decode(source))
+    },
+  })
+}
 
 const DEFAULT = function (Class, optional) {
-  Class = Class || ANY;
+  Class = Class || ANY
   return extend(Class, {
     encode: function (format) {
-      if (this.object === optional) {
-        return undefined;
-      }
-
-      return Class.method('encode').call(this, format);
-    }
+      if (this.object === optional) {return undefined}
+      return Class.method('encode').call(this, format)
+    },
   }, {
     decode: function (source) {
-      if (source === undefined) {
-        return new this(optional);
-      }
-
+      if (source === undefined) {return new this(optional)}
       try {
-        return Class.decode.call(this, source);
+        return Class.decode.call(this, source)
       } catch (e) {
-        return undefined;
+        return undefined
       }
-    }
-  });
-};
+    },
+  })
+}
 
 const OPTIONAL = function (Class) {
-  Class = Class || ANY;
+  Class = Class || ANY
   return extend(Class, {}, {
     decode: function (source) {
-      if (source === undefined) {
-        return undefined;
-      }
-
+      if (source === undefined) {return undefined}
       try {
-        return Class.decode.call(this, source);
+        return Class.decode.call(this, source)
       } catch (e) {
-        return undefined;
+        return undefined
       }
-    }
-  });
-};
+    },
+  })
+}
 
 const DEFAULT_NULL = function (Class, optional) {
-  Class = Class || ANY;
+  Class = Class || ANY
   return extend(Class, {
     encode: function (format) {
-      if (this.object === optional) {
-        return new NULL(null).encode(format);
-      }
-
-      return Class.method('encode').call(this, format);
-    }
+      if (this.object === optional) {return new NULL(null).encode(format)}
+      return Class.method('encode').call(this, format)
+    },
   }, {
     decode: function (source) {
-      if (source === undefined) {
-        return undefined;
-      }
-
-      if (source === null || source.tagNumber === 0x05 && source.tagClass === 0) {
-        return new this(optional);
-      }
-
+      if (source === undefined) {return undefined}
+      if (source === null ||
+                (source.tagNumber === 0x05 && source.tagClass === 0)) {return new this(optional)}
       try {
-        return Class.decode.call(this, source);
+        return Class.decode.call(this, source)
       } catch (e) {
-        return undefined;
+        return undefined
       }
-    }
-  });
-}; // </editor-fold>
+    },
+  })
+}
+
+// </editor-fold>
 
 /*
  * Certificate Version, Name, Attributes, Validity
  *
  * http://tools.ietf.org/html/rfc5280
  *
- */
-// <editor-fold defaultstate="collapsed">
-
+ */ // <editor-fold defaultstate="collapsed">
 
 const DirectoryString = CHOICE({
   teletexString: TeletexString,
@@ -1418,28 +1210,34 @@ const DirectoryString = CHOICE({
   universalString: UniversalString,
   utf8String: UTF8String,
   bmpString: BMPString,
-  numericString: NumericString
+  numericString: NumericString,
 }, function (value) {
   // PrintableString - for characters and symbols with no spaces, overrise UTF8String
-  return /^[A-Za-z0-9\.@\+\-\:\=\\\/\?\!\#\$\%\^\&\*\(\)\[\]\{\}\>\<\|\~]*$/.test(value) ? 'printableString' : 'utf8String';
-});
+  return /^[A-Za-z0-9\.@\+\-\:\=\\\/\?\!\#\$\%\^\&\*\(\)\[\]\{\}\>\<\|\~]*$/.test(value) ? 'printableString' : 'utf8String'
+})
+
 const Time = CHOICE({
   utcTime: UTCTime,
-  generalTime: GeneralizedTime
+  generalTime: GeneralizedTime,
 }, function (value) {
-  return value.getYear() >= 2050 ? 'generalTime' : 'utcTime';
-}); // Attribute
+  return value.getYear() >= 2050 ? 'generalTime' : 'utcTime'
+})
+
+// Attribute
+const AttributeType = OBJECT_IDENTIFIER
+
+const AttributeValue = ANY
 
-const AttributeType = OBJECT_IDENTIFIER;
-const AttributeValue = ANY;
 const AttributeTypeAndValue = ATTRIBUTE({
   type: AttributeType,
-  value: AttributeValue
-});
+  value: AttributeValue,
+})
+
 const typeAndValue = {
   typeName: 'type',
-  valueName: 'value'
-};
+  valueName: 'value',
+}
+
 /**
  * X.501 type Name
  * The Name describes a hierarchical name composed of attributes, such
@@ -1505,7 +1303,6 @@ const typeAndValue = {
  *  </pre>
  * @class GostASN1.Name
  */
-
 const RelativeDistinguishedName = SET_OF_SINGLE(AttributeTypeAndValue({
   serialName: PrintableString,
   countryName: PrintableString,
@@ -1514,28 +1311,33 @@ const RelativeDistinguishedName = SET_OF_SINGLE(AttributeTypeAndValue({
   domainComponent: IA5String,
   SNILS: NumericString,
   OGRN: NumericString,
-  INN: NumericString
-}, DirectoryString));
-const RDNSequence = SEQUENCE_OF(RelativeDistinguishedName, typeAndValue)();
+  INN: NumericString,
+}, DirectoryString))
+
+const RDNSequence = SEQUENCE_OF(RelativeDistinguishedName, typeAndValue)()
+
 const Name = CHOICE({
   // only one possibility for now
-  rdnSequence: RDNSequence
-}, 'rdnSequence');
+  rdnSequence: RDNSequence,
+}, 'rdnSequence')
+
 /**
  * Validity
  * @class GostASN1.Validity
  * @extends GostASN1.Sequence
  */
-
 const Validity = COMBINE(SEQUENCE({
   notBefore: Time,
-  notAfter: Time
-}));
-const Version = INTEGER;
+  notAfter: Time,
+}))
+
+const Version = INTEGER
+
 const Attribute = ATTRIBUTE({
   type: OBJECT_IDENTIFIER,
-  value: ANY
-});
+  value: ANY,
+})
+
 /**
  * Type and Value Attributes <br>
  *
@@ -1549,9 +1351,10 @@ const Attribute = ATTRIBUTE({
  * @class GostASN1.Attributes
  * @extends GostASN1.Set
  */
+const Attributes = SET_OF(Attribute, typeAndValue)
 
-const Attributes = SET_OF(Attribute, typeAndValue);
-const AttributeSequence = SEQUENCE_OF(Attribute, typeAndValue); // </editor-fold>
+const AttributeSequence = SEQUENCE_OF(Attribute, typeAndValue)
+// </editor-fold>
 
 /*
  * Algorithm identifiers
@@ -1560,185 +1363,158 @@ const AttributeSequence = SEQUENCE_OF(Attribute, typeAndValue); // </editor-fold
  * http://tools.ietf.org/html/rfc4357
  * http://tools.ietf.org/html/rfc2898
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
-const FieldElement = INTEGER;
+const FieldElement = INTEGER
 const Curve = SEQUENCE({
   a: FieldElement,
   b: FieldElement,
-  seed: OPTIONAL(BIT_STRING)
-});
+  seed: OPTIONAL(BIT_STRING),
+})
+
 const ECPoint = OCTET_STRING(extend(ASN1Object, {
   encode: function () {
-    const value = this.object;
+    const value = this.object
     const len = Math.max(npw2(value.x.length - 2), npw2(value.y.length - 2)) / 2,
-          r = new Uint8Array(2 * len + 1);
-    r[0] = 0x04;
-    r.set(new Uint8Array(SInt.decode(value.x, false, len)), 1); // x
-
-    r.set(new Uint8Array(SInt.decode(value.y, false, len)), len + 1); // y
-
-    return r.buffer;
-  }
+      r = new Uint8Array(2 * len + 1)
+    r[0] = 0x04
+    r.set(new Uint8Array(SInt.decode(value.x, false, len)), 1) // x
+    r.set(new Uint8Array(SInt.decode(value.y, false, len)), len + 1) // y
+    return r.buffer
+  },
 }, {
   decode: function (value) {
-    const len = (value.byteLength - 1) / 2;
+    const len = (value.byteLength - 1) / 2
     return new this({
       x: SInt.encode(new Uint8Array(value, 1, len)),
-      y: SInt.encode(new Uint8Array(value, len + 1, len))
-    });
-  }
-}));
+      y: SInt.encode(new Uint8Array(value, len + 1, len)),
+    })
+  },
+}))
+
 const FieldID = SEQUENCE({
   fieldType: OBJECT_IDENTIFIER,
-  parameters: INTEGER
-});
+  parameters: INTEGER,
+})
+
 const ECParameters = SEQUENCE({
-  version: Version,
-  // version is always 1
-  fieldID: FieldID,
-  // identifies the finite field over which the curve is defined
-  curve: Curve,
-  // coefficients a and b of the elliptic curve
-  base: ECPoint,
-  // specifies the base point P on the elliptic curve
-  order: INTEGER,
-  // the order n of the base point
-  cofactor: OPTIONAL(INTEGER)
-}); // The integer h = #E(Fq)/n
+  version: Version, // version is always 1
+  fieldID: FieldID, // identifies the finite field over which the curve is defined
+  curve: Curve, // coefficients a and b of the elliptic curve
+  base: ECPoint, // specifies the base point P on the elliptic curve
+  order: INTEGER, // the order n of the base point
+  cofactor: OPTIONAL(INTEGER),
+}) // The integer h = #E(Fq)/n
 
 const GostR3410Parameters = SEQUENCE({
   publicKeyParamSet: OBJECT_IDENTIFIER,
   digestParamSet: OBJECT_IDENTIFIER,
-  encryptionParamSet: OPTIONAL(OBJECT_IDENTIFIER)
-});
-const GostR3411Parameters = DEFAULT_NULL(OBJECT_IDENTIFIER, 'id-GostR3411-94-CryptoProParamSet');
+  encryptionParamSet: OPTIONAL(OBJECT_IDENTIFIER),
+})
+
+const GostR3411Parameters = DEFAULT_NULL(OBJECT_IDENTIFIER, 'id-GostR3411-94-CryptoProParamSet')
+
 const ECDHParameters = CHOICE({
   namedParameters: OBJECT_IDENTIFIER,
   ecParameters: ECParameters,
-  implicitly: OPTIONAL(NULL)
+  implicitly: OPTIONAL(NULL),
 }, function (value) {
-  return typeof value === 'string' || value instanceof String ? 'namedParameters' : 'ecParameters';
-});
+  return typeof value === 'string' || value instanceof String ?
+    'namedParameters' : 'ecParameters'
+})
 
 const Algorithm = function (paramType, modifier) {
   return ENCLOSURE(SEQUENCE({
     algorithm: OBJECT_IDENTIFIER,
-    parameters: OPTIONAL(paramType)
-  }), modifier);
-};
+    parameters: OPTIONAL(paramType),
+  }), modifier)
+}
+
+const AlgorithmIdentifier = (function () {
 
-const AlgorithmIdentifier = function () {
   var DefaultAlgorithm = Algorithm(ANY),
-      Class = extend(ASN1Object, function (object) {
-    if (this instanceof Class) {
-      Class.super.apply(this, arguments);
-    } else {
-      return DEFINE(object);
-    }
-  }, {
-    encode: function (format) {
-      return new DefaultAlgorithm(this.object).encode(format);
-    }
-  }, {
-    decode: function (source) {
-      return new this(DefaultAlgorithm.decode(source).object);
-    }
-  });
+    Class = extend(ASN1Object, function (object) {
+      if (this instanceof Class) {Class.super.apply(this, arguments)} else {return DEFINE(object)}
+    }, {
+      encode: function (format) {
+        return new DefaultAlgorithm(this.object).encode(format)
+      },
+    }, {
+      decode: function (source) {
+        return new this(DefaultAlgorithm.decode(source).object)
+      },
+    })
 
   var DEFINE = function (algorithmSet) {
+
     return extend(ASN1Object, {
       object: {
         get: function () {
-          if (this.item) {
-            return this.item.object;
-          }
-
-          return undefined;
+          if (this.item) {return this.item.object}
+          return undefined
         },
         set: function (object) {
           if (object) {
-            const ItemClass = algorithmSet[object.id];
-
-            if (!ItemClass) {
-              throw new Error('Algorithm not supported');
-            }
-
-            this.item = new ItemClass(object);
-          } else {
-            delete this.item;
-          }
-        }
+            const ItemClass = algorithmSet[object.id]
+            if (!ItemClass) {throw new Error('Algorithm not supported')}
+            this.item = new ItemClass(object)
+          } else {delete this.item}
+        },
       },
       encode: function (format) {
-        return this.item.encode(format);
-      }
+        return this.item.encode(format)
+      },
     }, {
       decode: function (source) {
         // Decode PEM
-        if (typeof source === 'string') {
-          source = PEM.decode(source, undefined, false);
-        } // Decode binary data
-
-
-        if (source instanceof CryptoOperationData) {
-          source = BER.decode(source);
-        }
-
-        const ItemClass = algorithmSet[names[source.object[0].object]];
-
+        if (typeof source === 'string') {source = PEM.decode(source, undefined, false)}
+        // Decode binary data
+        if (source instanceof CryptoOperationData) {source = BER.decode(source)}
+        const ItemClass = algorithmSet[names[source.object[0].object]]
         if (ItemClass) {
-          const result = new this();
-          result.item = ItemClass.decode(source);
-          return result;
-        }
-
-        throw new Error('Algorithm not supported');
-      }
-    });
-  };
+          const result = new this()
+          result.item = ItemClass.decode(source)
+          return result
+        } throw new Error('Algorithm not supported')
+      },
+    })
+  }
 
-  return Class;
-}();
+  return Class
+})()
 
 const ECDHKeyAlgorithm = Algorithm(ECDHParameters, {
   encode: function (value) {
-    let params;
-
-    if (typeof value.namedCurve === 'string') {
-      params = attributes['namedCurve'][value.namedCurve];
-    } else {
+    let params
+    if (typeof value.namedCurve === 'string') {params = attributes['namedCurve'][value.namedCurve]} else {
       params = {
         version: 1,
         fieldID: {
           fieldType: 'id-prime-Field',
-          parameters: value.curve.p
+          parameters: value.curve.p,
         },
         curve: {
           a: value.curve.a,
-          b: value.curve.b
+          b: value.curve.b,
         },
         base: {
           x: value.curve.x,
-          y: value.curve.y
+          y: value.curve.y,
         },
         order: value.curve.q,
-        cofactor: 1
-      };
+        cofactor: 1,
+      }
     }
-
     return {
       algorithm: value.id,
-      parameters: params
-    };
+      parameters: params,
+    }
   },
   decode: function (value) {
     let params = value.parameters,
-        result = algorithms[value.algorithm];
-
+      result = algorithms[value.algorithm]
     if (typeof params === 'string' || params instanceof String) {
-      result = expand(result, parameters[params]);
+      result = expand(result, parameters[params])
     } else if (typeof params === 'object') {
       result = expand(result, {
         curve: {
@@ -1747,81 +1523,76 @@ const ECDHKeyAlgorithm = Algorithm(ECDHParameters, {
           b: params.curve.b,
           x: params.base.x,
           y: params.base.y,
-          q: params.order
-        }
-      });
-    } else {
-      throw new DataError('Invalid key paramters');
-    }
+          q: params.order,
+        },
+      })
+    } else {throw new DataError('Invalid key paramters')}
+    return result
+  },
+})
 
-    return result;
-  }
-});
 const GostKeyAlgorithm = Algorithm(GostR3410Parameters, {
   encode: function (value) {
     const paramName = value.namedCurve ? 'namedCurve' : 'namedParam',
-          sBox = value.name.indexOf('-94') >= 0 || value.name.indexOf('-2001') >= 0 || value.version === 1994 || value.version === 2001 ? value.sBox || 'D-A' : value.name.indexOf('-512') >= 0 || value.length === 512 ? 'D-512' : 'D-256';
+      sBox = (value.name.indexOf('-94') >= 0 || value.name.indexOf('-2001') >= 0 ||
+                value.version === 1994 || value.version === 2001) ? value.sBox || 'D-A' :
+        (value.name.indexOf('-512') >= 0 || value.length === 512) ? 'D-512' : 'D-256'
     return {
       algorithm: value.id,
       parameters: {
         publicKeyParamSet: attributes[paramName][value[paramName]],
         digestParamSet: attributes['sBox'][sBox],
-        encryptionParamSet: value.encParams && value.encParams.sBox ? attributes['sBox'][value.encParams.sBox] : undefined
-      }
-    };
+        encryptionParamSet: value.encParams && value.encParams.sBox ?
+          attributes['sBox'][value.encParams.sBox] : undefined,
+      },
+    }
   },
   decode: function (value) {
     const params = value.parameters,
-          algorithm = expand(algorithms[value.algorithm], parameters[params.publicKeyParamSet], parameters[params.digestParamSet]);
-
-    if (params.encryptionParamSet) {
-      algorithm.encParams = parameters[params.encryptionParamSet];
-    }
+      algorithm = expand(algorithms[value.algorithm],
+        parameters[params.publicKeyParamSet],
+        parameters[params.digestParamSet])
+    if (params.encryptionParamSet) {algorithm.encParams = parameters[params.encryptionParamSet]}
+    return algorithm
+  },
+})
 
-    return algorithm;
-  }
-});
 const AlgorithmWithNoParam = Algorithm(ANY, {
   encode: function (value) {
-    return {
-      algorithm: value.id
-    };
+    return { algorithm: value.id }
   },
   decode: function (value) {
-    return algorithms[value.algorithm];
-  }
-});
+    return algorithms[value.algorithm]
+  },
+})
+
 const AlgorithmWithNullParam = Algorithm(NULL, {
   encode: function (value) {
     return {
       algorithm: value.id,
-      parameters: null
-    };
+      parameters: null,
+    }
   },
   decode: function (value) {
-    return algorithms[value.algorithm];
-  }
-});
+    return algorithms[value.algorithm]
+  },
+})
+
 const Gost341194DigestAlgorithm = Algorithm(GostR3411Parameters, {
   encode: function (value) {
     return {
       algorithm: value.id,
-      parameters: attributes['sBox'][value.sBox || value.hash && value.hash.sBox || 'D-A']
-    };
+      parameters: attributes['sBox'][value.sBox || (value.hash && value.hash.sBox) || 'D-A'],
+    }
   },
   decode: function (value) {
     let algorithm = expand(algorithms[value.algorithm]),
-        parameter = parameters[value.parameters];
-
-    if (algorithm.hash) {
-      algorithm.hash = expand(algorithm.hash, parameter);
-    } else {
-      algorithm = expand(algorithm, parameter);
-    }
+      parameter = parameters[value.parameters]
+    if (algorithm.hash) {algorithm.hash = expand(algorithm.hash, parameter)} else {algorithm = expand(algorithm, parameter)}
+    return algorithm
+  },
+})
 
-    return algorithm;
-  }
-});
 const KeyAlgorithmIdentifier = AlgorithmIdentifier({
   ecdsa: ECDHKeyAlgorithm,
   noSignature: AlgorithmWithNullParam,
@@ -1836,8 +1607,9 @@ const KeyAlgorithmIdentifier = AlgorithmIdentifier({
   'id-tc26-agreement-gost-3410-12-256': GostKeyAlgorithm,
   'id-tc26-agreement-gost-3410-12-512': GostKeyAlgorithm,
   'id-sc-gost28147-gfb': AlgorithmWithNoParam,
-  'id-Gost28147-89': AlgorithmWithNoParam
-});
+  'id-Gost28147-89': AlgorithmWithNoParam,
+})
+
 const SignatureAlgorithmIdentifier = AlgorithmIdentifier({
   noSignature: AlgorithmWithNullParam,
   rsaEncryption: AlgorithmWithNullParam,
@@ -1862,8 +1634,9 @@ const SignatureAlgorithmIdentifier = AlgorithmIdentifier({
   'id-sc-gostR3410-94': AlgorithmWithNullParam,
   'id-sc-gostR3410-2001': AlgorithmWithNullParam,
   'id-sc-gostR3411-94-with-gostR3410-94': AlgorithmWithNullParam,
-  'id-sc-gostR3411-94-with-gostR3410-2001': AlgorithmWithNullParam
-});
+  'id-sc-gostR3411-94-with-gostR3410-2001': AlgorithmWithNullParam,
+})
+
 const DigestAlgorithmIdentifier = AlgorithmIdentifier({
   sha1: AlgorithmWithNoParam,
   sha256: AlgorithmWithNullParam,
@@ -1873,23 +1646,26 @@ const DigestAlgorithmIdentifier = AlgorithmIdentifier({
   'id-tc26-gost3411-94': Gost341194DigestAlgorithm,
   'id-tc26-gost3411-12-256': AlgorithmWithNullParam,
   'id-tc26-gost3411-12-512': AlgorithmWithNullParam,
-  'id-sc-gostR3411-94': AlgorithmWithNoParam
-});
-const Gost2814789Key = OCTET_STRING; //(SIZE (32))
+  'id-sc-gostR3411-94': AlgorithmWithNoParam,
+})
+
+const Gost2814789Key = OCTET_STRING //(SIZE (32))
 
-const Gost2814789MAC = OCTET_STRING; // (SIZE (1..4))
+const Gost2814789MAC = OCTET_STRING // (SIZE (1..4))
 
-const Gost2814789ParamSet = OBJECT_IDENTIFIER;
-const Gost2814789IV = OCTET_STRING; // (SIZE (8))
+const Gost2814789ParamSet = OBJECT_IDENTIFIER
+
+const Gost2814789IV = OCTET_STRING // (SIZE (8))
 
 const Gost2814789Parameters = SEQUENCE({
   iv: Gost2814789IV,
-  encryptionParamSet: Gost2814789ParamSet
-});
+  encryptionParamSet: Gost2814789ParamSet,
+})
+
 const Gost2814789KeyWrapParameters = SEQUENCE({
   encryptionParamSet: Gost2814789ParamSet,
-  ukm: OPTIONAL(OCTET_STRING)
-}); // (SIZE (8)) must be absent in key agreement
+  ukm: OPTIONAL(OCTET_STRING),
+}) // (SIZE (8)) must be absent in key agreement
 
 const Gost2814789Algorithm = Algorithm(Gost2814789Parameters, {
   encode: function (value) {
@@ -1897,70 +1673,74 @@ const Gost2814789Algorithm = Algorithm(Gost2814789Parameters, {
       algorithm: value.id,
       parameters: {
         iv: value.iv,
-        encryptionParamSet: attributes['sBox'][value.sBox || 'E-A']
-      }
-    };
+        encryptionParamSet: attributes['sBox'][value.sBox || 'E-A'],
+      },
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm], parameters[value.parameters.encryptionParamSet]);
-    algorithm.iv = value.parameters.iv;
-    return algorithm;
-  }
-});
+    const algorithm = expand(algorithms[value.algorithm],
+      parameters[value.parameters.encryptionParamSet])
+    algorithm.iv = value.parameters.iv
+    return algorithm
+  },
+})
+
 const SCGostAlgorithm = Algorithm(Gost2814789IV, {
   encode: function (value) {
     return {
       algorithm: value.id,
-      parameters: value.iv
-    };
+      parameters: value.iv,
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm]);
-    algorithm.iv = value.parameters || new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
-    return algorithm;
-  }
-});
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.iv = value.parameters || new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
+    return algorithm
+  },
+})
+
 const GostKeyWrapAlgorithm = Algorithm(Gost2814789KeyWrapParameters, {
   encode: function (value) {
     return {
       algorithm: value.id,
       parameters: {
         encryptionParamSet: attributes['sBox'][value.sBox || 'E-A'],
-        ukm: value.ukm
-      }
-    };
+        ukm: value.ukm,
+      },
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm], parameters[value.parameters.encryptionParamSet]);
-
-    if (value.parameters.ukm) {
-      algorithm.ukm = value.parameters.ukm;
-    }
+    const algorithm = expand(algorithms[value.algorithm],
+      parameters[value.parameters.encryptionParamSet])
+    if (value.parameters.ukm) {algorithm.ukm = value.parameters.ukm}
+    return algorithm
+  },
+})
 
-    return algorithm;
-  }
-});
 const KeyWrapAlgorithmIdentifier = AlgorithmIdentifier({
   'id-Gost28147-89-None-KeyWrap': GostKeyWrapAlgorithm,
-  'id-Gost28147-89-CryptoPro-KeyWrap': GostKeyWrapAlgorithm
-});
+  'id-Gost28147-89-CryptoPro-KeyWrap': GostKeyWrapAlgorithm,
+})
+
 const GostKeyAgreementAlgorithm = Algorithm(KeyWrapAlgorithmIdentifier, {
   encode: function (value) {
     return {
       algorithm: value.id,
-      parameters: value.wrapping
-    };
+      parameters: value.wrapping,
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm]);
-    algorithm.wrapping = value.parameters;
-    return algorithm;
-  }
-});
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.wrapping = value.parameters
+    return algorithm
+  },
+})
+
 const BaseEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
   'id-sc-gost28147-gfb': SCGostAlgorithm,
-  'id-Gost28147-89': Gost2814789Algorithm
-});
+  'id-Gost28147-89': Gost2814789Algorithm,
+})
+
 const MessageAuthenticationCodeAlgorithm = AlgorithmIdentifier({
   'id-Gost28147-89-MAC': Gost2814789Parameters,
   'id-HMACGostR3411-94': Gost341194DigestAlgorithm,
@@ -1972,21 +1752,23 @@ const MessageAuthenticationCodeAlgorithm = AlgorithmIdentifier({
   'hmacWithSHA384': AlgorithmWithNoParam,
   'hmacWithSHA512': AlgorithmWithNoParam,
   'id-sc-gost28147-mac': AlgorithmWithNoParam,
-  'id-sc-hmacWithGostR3411': AlgorithmWithNoParam
-}); // rfc2898 PKCS #5: Password-Based Cryptography Specification
-// PBKDF2
+  'id-sc-hmacWithGostR3411': AlgorithmWithNoParam,
+})
 
+// rfc2898 PKCS #5: Password-Based Cryptography Specification
+// PBKDF2
 const PBKDF2params = SEQUENCE({
   salt: CHOICE({
     specified: OCTET_STRING,
-    otherSource: AlgorithmIdentifier
+    otherSource: AlgorithmIdentifier,
   }, function (value) {
-    return isBinary(value) ? 'specified' : 'otherSource';
+    return isBinary(value) ? 'specified' : 'otherSource'
   }),
   iterationCount: INTEGER,
   keyLength: OPTIONAL(INTEGER),
-  prf: MessageAuthenticationCodeAlgorithm
-});
+  prf: MessageAuthenticationCodeAlgorithm,
+})
+
 const PBKDF2Algorithm = Algorithm(PBKDF2params, {
   encode: function (value) {
     return {
@@ -1994,26 +1776,29 @@ const PBKDF2Algorithm = Algorithm(PBKDF2params, {
       parameters: {
         salt: value.salt,
         iterationCount: value.iterations,
-        prf: value.hmac
-      }
-    };
+        prf: value.hmac,
+      },
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm]);
-    algorithm.salt = value.parameters.salt;
-    algorithm.iterations = value.parameters.iterationCount;
-    algorithm.hmac = value.parameters.prf;
-    algorithm.hash = algorithm.hmac.hash;
-    return algorithm;
-  }
-});
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.salt = value.parameters.salt
+    algorithm.iterations = value.parameters.iterationCount
+    algorithm.hmac = value.parameters.prf
+    algorithm.hash = algorithm.hmac.hash
+    return algorithm
+  },
+})
+
 const KeyDerivationAlgorithmIdentifier = AlgorithmIdentifier({
-  'PBKDF2': PBKDF2Algorithm
-});
+  'PBKDF2': PBKDF2Algorithm,
+})
+
 const PBEParameter = SEQUENCE({
   salt: OCTET_STRING,
-  iterationCount: INTEGER
-});
+  iterationCount: INTEGER,
+})
+
 const PBES1Algorithm = Algorithm(PBEParameter, {
   paramType: PBEParameter,
   encode: function (value) {
@@ -2021,25 +1806,23 @@ const PBES1Algorithm = Algorithm(PBEParameter, {
       algorithm: value.id,
       parameters: {
         salt: value.derivation.salt,
-        iterationCount: value.derivation.iterations
-      }
-    };
+        iterationCount: value.derivation.iterations,
+      },
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm]);
-    algorithm.derivation = expand(algorithm.derivation, {
-      salt: value.parameters.salt,
-      iterations: value.parameters.iterationCount
-    });
-    return algorithm;
-  }
-}); // PBES2
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.derivation = expand(algorithm.derivation,
+      { salt: value.parameters.salt, iterations: value.parameters.iterationCount })
+    return algorithm
+  },
+})
 
+// PBES2
 const PBES2params = SEQUENCE({
-  keyDerivationFunc: KeyDerivationAlgorithmIdentifier,
-  // {{PBES2-KDFs}},
-  encryptionScheme: BaseEncryptionAlgorithmIdentifier
-}); // {{PBES2-Encs}}
+  keyDerivationFunc: KeyDerivationAlgorithmIdentifier, // {{PBES2-KDFs}},
+  encryptionScheme: BaseEncryptionAlgorithmIdentifier,
+}) // {{PBES2-Encs}}
 
 const PBES2Algorithm = Algorithm(PBES2params, {
   encode: function (value) {
@@ -2047,17 +1830,18 @@ const PBES2Algorithm = Algorithm(PBES2params, {
       algorithm: value.id,
       parameters: {
         keyDerivationFunc: value.derivation,
-        encryptionScheme: value.encryption
-      }
-    };
+        encryptionScheme: value.encryption,
+      },
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm]);
-    algorithm.derivation = value.parameters.keyDerivationFunc;
-    algorithm.encryption = value.parameters.encryptionScheme;
-    return algorithm;
-  }
-});
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.derivation = value.parameters.keyDerivationFunc
+    algorithm.encryption = value.parameters.encryptionScheme
+    return algorithm
+  },
+})
+
 const PasswordEncryptionAlgorithmIndentifier = AlgorithmIdentifier({
   // PBES1
   'pbeWithSHAAndAES128-CBC': PBES1Algorithm,
@@ -2075,8 +1859,9 @@ const PasswordEncryptionAlgorithmIndentifier = AlgorithmIdentifier({
   'pbeWithSHAAnd40BitRC2-CBC': PBES1Algorithm,
   'pbeUnknownGost': PBES1Algorithm,
   // PBES2
-  'PBES2': PBES2Algorithm
-});
+  'PBES2': PBES2Algorithm,
+})
+
 const KeyEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
   ecdsa: ECDHKeyAlgorithm,
   rsaEncryption: AlgorithmWithNullParam,
@@ -2096,11 +1881,9 @@ const KeyEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
   'id-tc26-agreement-gost-3410-12-512': GostKeyAgreementAlgorithm,
   'id-sc-r3410-ESDH-r3411kdf': AlgorithmWithNullParam,
   // Key encryption key algorithms
-  'id-Gost28147-89-None-KeyWrap': GostKeyWrapAlgorithm,
-  // Add ukm to algorithm
+  'id-Gost28147-89-None-KeyWrap': GostKeyWrapAlgorithm, // Add ukm to algorithm
   'id-Gost28147-89-CryptoPro-KeyWrap': GostKeyWrapAlgorithm,
-  'id-sc-cmsGostWrap': AlgorithmWithNoParam,
-  // SC don't use ukm
+  'id-sc-cmsGostWrap': AlgorithmWithNoParam, // SC don't use ukm
   'id-sc-cmsGost28147Wrap': AlgorithmWithNoParam,
   // Password based encryption
   'pbeWithSHAAndAES128-CBC': PBES1Algorithm,
@@ -2118,13 +1901,13 @@ const KeyEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
   'pbeWithSHAAnd40BitRC2-CBC': PBES1Algorithm,
   'pbeUnknownGost': PBES1Algorithm,
   // PBES2
-  'PBES2': PBES2Algorithm
-});
+  'PBES2': PBES2Algorithm,
+})
+
 const PBMAC1params = SEQUENCE({
-  keyDerivationFunc: KeyDerivationAlgorithmIdentifier,
-  // {{PBMAC1-KDFs}},
-  messageAuthScheme: MessageAuthenticationCodeAlgorithm
-}); // {{PBMAC1-MACs}}
+  keyDerivationFunc: KeyDerivationAlgorithmIdentifier, // {{PBMAC1-KDFs}},
+  messageAuthScheme: MessageAuthenticationCodeAlgorithm,
+}) // {{PBMAC1-MACs}}
 
 const PasswordMACAlgorithm = Algorithm(PBMAC1params, {
   encode: function (value) {
@@ -2132,20 +1915,22 @@ const PasswordMACAlgorithm = Algorithm(PBMAC1params, {
       algorithm: value.id,
       parameters: {
         keyDerivationFunc: value.derivation,
-        messageAuthScheme: value.hmac
-      }
-    };
+        messageAuthScheme: value.hmac,
+      },
+    }
   },
   decode: function (value) {
-    const algorithm = expand(algorithms[value.algorithm]);
-    algorithm.derivation = value.parameters.keyDerivationFunc;
-    algorithm.hmac = value.parameters.messageAuthScheme;
-    return algorithm;
-  }
-});
+    const algorithm = expand(algorithms[value.algorithm])
+    algorithm.derivation = value.parameters.keyDerivationFunc
+    algorithm.hmac = value.parameters.messageAuthScheme
+    return algorithm
+  },
+})
+
 const PasswordMACAlgorithmIdentifier = AlgorithmIdentifier({
-  'PBMAC1': PasswordMACAlgorithm
-});
+  'PBMAC1': PasswordMACAlgorithm,
+})
+
 const ContentEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
   // Base encryption
   'id-sc-gost28147-gfb': SCGostAlgorithm,
@@ -2166,51 +1951,51 @@ const ContentEncryptionAlgorithmIdentifier = AlgorithmIdentifier({
   'pbeWithSHAAnd40BitRC2-CBC': PBES1Algorithm,
   'pbeUnknownGost': PBES1Algorithm,
   // PBES2
-  'PBES2': PBES2Algorithm
-}); // </editor-fold>
+  'PBES2': PBES2Algorithm,
+})
+
+// </editor-fold>
 
 /*
  * Public Key Info
  *
  * http://tools.ietf.org/html/rfc5280
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
+const KeyData = ENCLOSURE
 
-const KeyData = ENCLOSURE;
 const DHPublicKey = KeyData(BIT_STRING(ENCAPSULATES(INTEGER)), {
   encode: function (value) {
-    return Int16.encode(swapBytes(value));
+    return Int16.encode(swapBytes(value))
   },
   decode: function (value) {
-    return swapBytes(Int16.decode(value));
-  }
-});
+    return swapBytes(Int16.decode(value))
+  },
+})
+
 const ECDHPublicKey = KeyData(BIT_STRING(ENCAPSULATES(OCTET_STRING)), {
   encode: function (value) {
     const r = new Uint8Array(value.byteLength + 1),
-          d = swapBytes(value),
-          len = value.byteLength / 2;
-    r[0] = 0x04; // type hex;
-
-    r.set(new Uint8Array(d, len, len), 1); // x
-
-    r.set(new Uint8Array(d, 0, len), len + 1); // y
-
-    return r.buffer;
+      d = swapBytes(value),
+      len = value.byteLength / 2
+    r[0] = 0x04 // type hex;
+    r.set(new Uint8Array(d, len, len), 1) // x
+    r.set(new Uint8Array(d, 0, len), len + 1) // y
+    return r.buffer
   },
   decode: function (value) {
-    assert((value.byteLength & 1) === 0);
+    assert((value.byteLength & 1) === 0)
     const d = new Uint8Array(value.byteLength - 1),
-          len = d.byteLength / 2;
-    d.set(new Uint8Array(value, len + 1, len), 0); // y
+      len = d.byteLength / 2
+    d.set(new Uint8Array(value, len + 1, len), 0) // y
+    d.set(new Uint8Array(value, 1, len), len) // x
+    return swapBytes(d)
+  },
+})
 
-    d.set(new Uint8Array(value, 1, len), len); // x
+const GostR3410PublicKey = BIT_STRING(ENCAPSULATES(OCTET_STRING))
 
-    return swapBytes(d);
-  }
-});
-const GostR3410PublicKey = BIT_STRING(ENCAPSULATES(OCTET_STRING));
 /**
  * Subject Public Key Info Syntax X.509
  * <pre>
@@ -2231,13 +2016,13 @@ const GostR3410PublicKey = BIT_STRING(ENCAPSULATES(OCTET_STRING));
  * @property {AlgorithmIdentifier} algorithm Identifies the public-key algorithm.
  * @property {CryptoOperationData} subjectPublicKey An binary data whose contents are the value of the public key
  */
-
 const SubjectPublicKeyInfo = SEQUENCE({
   algorithm: KeyAlgorithmIdentifier,
-  subjectPublicKey: BIT_STRING
-}, 'PUBLIC KEY');
+  subjectPublicKey: BIT_STRING,
+}, 'PUBLIC KEY')
+
+const GostSubjectPublicKeyInfo = (function (PKTypes) {
 
-const GostSubjectPublicKeyInfo = function (PKTypes) {
   /**
      * Coding methods for {@link Algorithm} and {@link GostASN1.SubjectPublicKeyInfo}
      * Supported types for GOST algorithms:
@@ -2258,15 +2043,16 @@ const GostSubjectPublicKeyInfo = function (PKTypes) {
      */
   return ENCLOSURE(ATTRIBUTE({
     algorithm: KeyAlgorithmIdentifier,
-    subjectPublicKey: ANY
-  }, 'algorithm', 'subjectPublicKey')(function (algorithm) {
-    return PKTypes[algorithm.id];
+    subjectPublicKey: ANY,
+  },
+  'algorithm', 'subjectPublicKey')(function (algorithm) {
+    return PKTypes[algorithm.id]
   }), {
     encode: function (value) {
       return {
         algorithm: value.algorithm,
-        subjectPublicKey: value.buffer
-      };
+        subjectPublicKey: value.buffer,
+      }
     },
     decode: function (value) {
       return {
@@ -2274,60 +2060,60 @@ const GostSubjectPublicKeyInfo = function (PKTypes) {
         type: 'public',
         extractable: true,
         usages: ['verify', 'deriveKey', 'deriveBits'],
-        buffer: value.subjectPublicKey
-      };
-    }
-  });
-}({
+        buffer: value.subjectPublicKey,
+      }
+    },
+  })
+})({
   'id-sc-gostR3410-2001': ECDHPublicKey,
   'id-sc-gostR3410-94': DHPublicKey,
   'id-GostR3410-2001': GostR3410PublicKey,
   'id-GostR3410-94': GostR3410PublicKey,
   'id-tc26-gost3410-12-256': GostR3410PublicKey,
-  'id-tc26-gost3410-12-512': GostR3410PublicKey
-}); // </editor-fold>
+  'id-tc26-gost3410-12-512': GostR3410PublicKey,
+})
+// </editor-fold>
 
 /*
  * Private Key Info PKCS#8
  *
  * http://tools.ietf.org/html/rfc5208
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
+const PrivateKey = OCTET_STRING
 
-const PrivateKey = OCTET_STRING;
 const DHPrivateKey = KeyData(PrivateKey(ENCAPSULATES(INTEGER)), {
-  encode: function (value) {
-    // for SignalCom INTEGER d
-    return SInt.encode(value, true);
+  encode: function (value) { // for SignalCom INTEGER d
+    return SInt.encode(value, true)
   },
   decode: function (value) {
-    return SInt.decode(value, true);
-  }
-});
-const GostR3410KeyValueMask = OCTET_STRING;
+    return SInt.decode(value, true)
+  },
+})
+
+const GostR3410KeyValueMask = OCTET_STRING
+
 const GostR3410KeyValueInfo = SEQUENCE({
   keyValueMask: GostR3410KeyValueMask,
-  keyValyePublicKey: OCTET_STRING
-});
+  keyValyePublicKey: OCTET_STRING,
+})
+
 const GostR3410PrivateKey = CHOICE({
   privateKey: PrivateKey(ENCAPSULATES(CHOICE({
     keyValueMask: GostR3410KeyValueMask,
-    keyValueInfo: GostR3410KeyValueInfo
+    keyValueInfo: GostR3410KeyValueInfo,
   }, function (value) {
-    if (isBinary(value)) {
-      return 'keyValueMask';
-    }
-
-    return 'keyValueInfo';
+    if (isBinary(value)) {return 'keyValueMask'}
+    return 'keyValueInfo'
   }))),
-  keyValueMask: GostR3410KeyValueMask
+  keyValueMask: GostR3410KeyValueMask,
 }, function (value) {
-  return value.enclosed ? 'keyValueMask' : 'privateKey';
-});
+  return value.enclosed ? 'keyValueMask' : 'privateKey'
+})
+
+const GostWrappedPrivateKey = (function (PKTypes) {
 
-const GostWrappedPrivateKey = function (PKTypes) {
   /**
      * Gost Wrapped Private Key for SignalCom key container
      *
@@ -2339,31 +2125,31 @@ const GostWrappedPrivateKey = function (PKTypes) {
     privateKeyAlgorithm: KeyAlgorithmIdentifier,
     privateKeyWrapped: KeyData(PrivateKey(ENCAPSULATES(SEQUENCE({
       keyData: INTEGER,
-      keyMac: INTEGER
+      keyMac: INTEGER,
     }))), {
       encode: function (value) {
-        const size = value.byteLength - 4;
+        const size = value.byteLength - 4
         return {
           keyData: SInt.encode(new Uint8Array(value, 0, size)),
-          keyMac: SInt.encode(new Uint8Array(value, size, 4))
-        };
+          keyMac: SInt.encode(new Uint8Array(value, size, 4)),
+        }
       },
       decode: function (value) {
         const data = SInt.decode(value.keyData),
-              mac = SInt.decode(value.keyMac),
-              result = new Uint8Array(data.byteLength + mac.byteLength);
-        result.set(new Uint8Array(data));
-        result.set(new Uint8Array(mac), data.byteLength);
-        return result;
-      }
+          mac = SInt.decode(value.keyMac),
+          result = new Uint8Array(data.byteLength + mac.byteLength)
+        result.set(new Uint8Array(data))
+        result.set(new Uint8Array(mac), data.byteLength)
+        return result
+      },
     }),
-    attributes: ANY
+    attributes: ANY,
   }, 'privateKeyAlgorithm', 'attributes')(function (algorithm) {
     return OPTIONAL(CTX(0, IMPLICIT(Attributes({
-      'id-sc-gostR3410-2001-publicKey': SET_OF_SINGLE(PKTypes[algorithm.id])
-    }))));
-  });
-}({
+      'id-sc-gostR3410-2001-publicKey': SET_OF_SINGLE(PKTypes[algorithm.id]),
+    }))))
+  })
+})({
   // Signature keys
   'id-sc-gostR3410-2001': ECDHPublicKey,
   'id-sc-gostR3410-94': DHPublicKey,
@@ -2374,8 +2160,9 @@ const GostWrappedPrivateKey = function (PKTypes) {
   'id-tc26-gost3410-12-256': GostR3410PublicKey,
   'id-tc26-gost3410-12-512': GostR3410PublicKey,
   'id-tc26-agreement-gost-3410-12-256': GostR3410PublicKey,
-  'id-tc26-agreement-gost-3410-12-512': GostR3410PublicKey
-});
+  'id-tc26-agreement-gost-3410-12-512': GostR3410PublicKey,
+})
+
 /**
  * Private-Key Information Syntax PKSC#8
  * <pre>
@@ -2401,26 +2188,29 @@ const GostWrappedPrivateKey = function (PKTypes) {
  * @property {CryptoOperationData} privateKey Is an binary data whose contents are the value of the private key.
  * @property {GostASN1.Attributes} attributes A set of attributes
  */
-
-
 const PrivateKeyInfo = SEQUENCE({
   version: Version,
   privateKeyAlgorithm: KeyAlgorithmIdentifier,
   privateKey: PrivateKey,
-  attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes)))
-}, 'PRIVATE KEY');
-const PrivateKeyAlgorithmIdentifier = KeyAlgorithmIdentifier;
-const PublicKey = BIT_STRING;
+  attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes))),
+}, 'PRIVATE KEY')
+
+const PrivateKeyAlgorithmIdentifier = KeyAlgorithmIdentifier
+
+const PublicKey = BIT_STRING
+
 const OneAsymmetricKey = SEQUENCE({
   version: Version,
   privateKeyAlgorithm: PrivateKeyAlgorithmIdentifier,
   privateKey: PrivateKey,
   attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes))),
-  publicKey: OPTIONAL(CTX(1, IMPLICIT(PublicKey)))
-});
-const AsymmetricKeyPackage = SEQUENCE_OF(OneAsymmetricKey);
+  publicKey: OPTIONAL(CTX(1, IMPLICIT(PublicKey))),
+})
+
+const AsymmetricKeyPackage = SEQUENCE_OF(OneAsymmetricKey)
+
+const GostPrivateKeyInfo = (function (PKTypes) {
 
-const GostPrivateKeyInfo = function (PKTypes) {
   /**
      * Coding methods for {@link Algorithm} and {@link GostASN1.PrivateKeyInfo}
      * Supported types for GOST algorithms:
@@ -2443,16 +2233,17 @@ const GostPrivateKeyInfo = function (PKTypes) {
     version: Version,
     privateKeyAlgorithm: KeyAlgorithmIdentifier,
     privateKey: ANY,
-    attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes)))
-  }, 'privateKeyAlgorithm', 'privateKey')(function (algorithm) {
-    return PKTypes[algorithm.id];
+    attributes: OPTIONAL(CTX(0, IMPLICIT(Attributes))),
+  },
+  'privateKeyAlgorithm', 'privateKey')(function (algorithm) {
+    return PKTypes[algorithm.id]
   }), {
     encode: function (value) {
       return {
         version: 0,
         privateKeyAlgorithm: value.algorithm,
-        privateKey: value.buffer
-      };
+        privateKey: value.buffer,
+      }
     },
     decode: function (value) {
       return {
@@ -2460,11 +2251,12 @@ const GostPrivateKeyInfo = function (PKTypes) {
         type: 'private',
         extractable: true,
         usages: ['sign', 'deriveKey', 'deriveBits'],
-        buffer: isBinary(value.privateKey) ? value.privateKey : value.privateKey.keyValueMask
-      };
-    }
-  });
-}({
+        buffer: isBinary(value.privateKey) ? value.privateKey :
+          value.privateKey.keyValueMask,
+      }
+    },
+  })
+})({
   // Signature keys
   'id-sc-gostR3410-2001': DHPrivateKey,
   'id-sc-gostR3410-94': DHPrivateKey,
@@ -2475,10 +2267,10 @@ const GostPrivateKeyInfo = function (PKTypes) {
   'id-tc26-gost3410-12-256': GostR3410PrivateKey,
   'id-tc26-gost3410-12-512': GostR3410PrivateKey,
   'id-tc26-agreement-gost-3410-12-256': GostR3410PrivateKey,
-  'id-tc26-agreement-gost-3410-12-512': GostR3410PrivateKey
-});
+  'id-tc26-agreement-gost-3410-12-512': GostR3410PrivateKey,
+})
 
-const KeyEncryptedData = OCTET_STRING;
+const KeyEncryptedData = OCTET_STRING
 /**
  * Encrypted Private-Key Information Syntax
  * <pre>
@@ -2505,26 +2297,27 @@ const KeyEncryptedData = OCTET_STRING;
  * @property {AlgorithmIdentifier} encryptionAlgorithm Identifies key encryption algorithm
  * @property {CryptoOperationData} encryptedData Encrypted {@link GostASN1.PrivateKeyInfo}
  */
-
 const EncryptedPrivateKeyInfo = SEQUENCE({
   encryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
-  encryptedData: KeyEncryptedData
-}, 'ENCRYPTED PRIVATE KEY'); // </editor-fold>
+  encryptedData: KeyEncryptedData,
+}, 'ENCRYPTED PRIVATE KEY')
+// </editor-fold>
 
 /*
  * Certificate Extensions
  *
  * http://tools.ietf.org/html/rfc5280
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+const UniqueIdentifier = BIT_STRING
+
+const CertificateSerialNumber = INTEGER
 
-const UniqueIdentifier = BIT_STRING;
-const CertificateSerialNumber = INTEGER;
 const BasicConstraints = SEQUENCE({
   cA: DEFAULT(BOOLEAN, false),
-  pathLenConstraint: OPTIONAL(INTEGER)
-});
+  pathLenConstraint: OPTIONAL(INTEGER),
+})
+
 const KeyUsage = BIT_STRING({
   digitalSignature: 0,
   nonRepudiation: 1,
@@ -2534,74 +2327,94 @@ const KeyUsage = BIT_STRING({
   keyCertSign: 5,
   cRLSign: 6,
   encipherOnly: 7,
-  decipherOnly: 8
-});
+  decipherOnly: 8,
+})
 const KeyPurposeId = OBJECT_IDENTIFIER,
-      ExtKeyUsageSyntax = SEQUENCE_OF(KeyPurposeId);
-const KeyIdentifier = OCTET_STRING;
+  ExtKeyUsageSyntax = SEQUENCE_OF(KeyPurposeId)
+
+const KeyIdentifier = OCTET_STRING
+
 const OtherName = SEQUENCE({
   type: OBJECT_IDENTIFIER,
-  value: CTX(0, EXPLICIT(ANY))
-});
+  value: CTX(0, EXPLICIT(ANY)),
+})
+
 const EDIPartyName = SEQUENCE({
   nameAssigner: OPTIONAL(CTX(0, IMPLICIT(DirectoryString))),
-  partyName: OPTIONAL(CTX(1, IMPLICIT(DirectoryString)))
-});
-const ORAddress = SEQUENCE({});
+  partyName: OPTIONAL(CTX(1, IMPLICIT(DirectoryString))),
+})
+
+const ORAddress = SEQUENCE({})
+
 const GeneralName = CHOICE({
   otherName: CTX(0, IMPLICIT(OtherName)),
   rfc822Name: CTX(1, IMPLICIT(DirectoryString)),
   dNSName: CTX(2, IMPLICIT(DirectoryString)),
   x400Address: CTX(3, IMPLICIT(ORAddress)),
-  directoryName: CTX(4, EXPLICIT(Name)),
-  // Name is CHOICE(RDNSequence)
+  directoryName: CTX(4, EXPLICIT(Name)), // Name is CHOICE(RDNSequence)
   ediPartyName: CTX(5, IMPLICIT(EDIPartyName)),
   uniformResourceIdentifier: CTX(6, IMPLICIT(DirectoryString)),
   iPAddress: CTX(7, IMPLICIT(OCTET_STRING)),
-  registeredID: CTX(8, IMPLICIT(OBJECT_IDENTIFIER))
+  registeredID: CTX(8, IMPLICIT(OBJECT_IDENTIFIER)),
 }, function (value) {
-  return typeof value === 'string' || value instanceof String ? value.indexOf('@') >= 0 ? 'rfc822Name' : 'dNSName' : isBinary(value) ? 'iPAddress' : 'directoryName';
-});
-const GeneralNames = SEQUENCE_OF(GeneralName);
+  return typeof value === 'string' || value instanceof String ?
+    (value.indexOf('@') >= 0 ? 'rfc822Name' : 'dNSName') :
+    isBinary(value) ? 'iPAddress' : 'directoryName'
+})
+
+const GeneralNames = SEQUENCE_OF(GeneralName)
+
 const AuthorityKeyIdentifier = SEQUENCE({
   keyIdentifier: OPTIONAL(CTX(0, IMPLICIT(KeyIdentifier))),
   authorityCertIssuer: OPTIONAL(CTX(1, IMPLICIT(GeneralNames))),
-  authorityCertSerialNumber: OPTIONAL(CTX(2, IMPLICIT(CertificateSerialNumber)))
-});
+  authorityCertSerialNumber: OPTIONAL(CTX(2, IMPLICIT(CertificateSerialNumber))),
+})
+
 const PrivateKeyUsagePeriod = SEQUENCE({
   notBefore: OPTIONAL(CTX(0, IMPLICIT(GeneralizedTime))),
-  notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime)))
-});
+  notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime))),
+})
+
 const CertPolicyId = OBJECT_IDENTIFIER,
-      PolicyQualifierId = OBJECT_IDENTIFIER;
+  PolicyQualifierId = OBJECT_IDENTIFIER
+
 const PolicyQualifierInfo = SEQUENCE({
   policyQualifierId: PolicyQualifierId,
-  qualifier: ANY
-});
+  qualifier: ANY,
+})
+
 const PolicyInformation = SEQUENCE({
   policyIdentifier: CertPolicyId,
-  policyQualifiers: OPTIONAL(SEQUENCE_OF(PolicyQualifierInfo))
-});
+  policyQualifiers: OPTIONAL(SEQUENCE_OF(PolicyQualifierInfo)),
+})
+
 const PolicyMapping = SEQUENCE({
   issuerDomainPolicy: CertPolicyId,
-  subjectDomainPolicy: CertPolicyId
-});
-const BaseDistance = INTEGER;
+  subjectDomainPolicy: CertPolicyId,
+})
+
+const BaseDistance = INTEGER
+
 const GeneralSubtree = SEQUENCE({
   base: GeneralName,
   minimum: DEFAULT(CTX(0, IMPLICIT(BaseDistance)), 0),
-  maximum: OPTIONAL(CTX(1, IMPLICIT(BaseDistance)))
-});
-const GeneralSubtrees = SEQUENCE_OF(GeneralSubtree);
+  maximum: OPTIONAL(CTX(1, IMPLICIT(BaseDistance))),
+})
+
+const GeneralSubtrees = SEQUENCE_OF(GeneralSubtree)
+
 const NameConstraints = SEQUENCE({
   permittedSubtrees: OPTIONAL(CTX(0, IMPLICIT(GeneralSubtrees))),
-  excludedSubtrees: OPTIONAL(CTX(1, IMPLICIT(GeneralSubtrees)))
-});
-const SkipCerts = INTEGER;
+  excludedSubtrees: OPTIONAL(CTX(1, IMPLICIT(GeneralSubtrees))),
+})
+
+const SkipCerts = INTEGER
+
 const PolicyConstraints = SEQUENCE({
   requireExplicitPolicy: OPTIONAL(CTX(0, IMPLICIT(SkipCerts))),
-  inhibitPolicyMapping: OPTIONAL(CTX(1, IMPLICIT(SkipCerts)))
-});
+  inhibitPolicyMapping: OPTIONAL(CTX(1, IMPLICIT(SkipCerts))),
+})
+
 const ReasonFlags = BIT_STRING({
   unused: 0,
   keyCompromise: 1,
@@ -2611,123 +2424,112 @@ const ReasonFlags = BIT_STRING({
   cessationOfOperation: 5,
   certificateHold: 6,
   privilegeWithdrawn: 7,
-  aACompromise: 8
-});
+  aACompromise: 8,
+})
+
 const DistributionPointName = CHOICE({
   fullName: CTX(0, IMPLICIT(GeneralNames)),
-  nameRelativeToCRLIssuer: CTX(1, IMPLICIT(RelativeDistinguishedName))
+  nameRelativeToCRLIssuer: CTX(1, IMPLICIT(RelativeDistinguishedName)),
 }, function (value) {
-  return value instanceof Array ? 'fullName' : 'nameRelativeToCRLIssuer';
-});
+  return value instanceof Array ? 'fullName' : 'nameRelativeToCRLIssuer'
+})
+
 const DistributionPoint = SEQUENCE({
-  distributionPoint: OPTIONAL(CTX(0, EXPLICIT(DistributionPointName))),
-  // DistributionPointName CHOICE
+  distributionPoint: OPTIONAL(CTX(0, EXPLICIT(DistributionPointName))), // DistributionPointName CHOICE
   reasons: OPTIONAL(CTX(1, IMPLICIT(ReasonFlags))),
-  cRLIssuer: OPTIONAL(CTX(2, IMPLICIT(GeneralNames)))
-});
-const CRLDistributionPoints = SEQUENCE_OF(DistributionPoint);
-const FreshestCRL = CRLDistributionPoints;
+  cRLIssuer: OPTIONAL(CTX(2, IMPLICIT(GeneralNames))),
+})
+
+const CRLDistributionPoints = SEQUENCE_OF(DistributionPoint)
+
+const FreshestCRL = CRLDistributionPoints
+
 const AccessDescription = SEQUENCE({
   accessMethod: OBJECT_IDENTIFIER,
-  accessLocation: GeneralName
-});
+  accessLocation: GeneralName,
+})
 
 const Extension = function (typeSet, defaultCritical) {
+
   const Attribute = ATTRIBUTE({
     extnID: OBJECT_IDENTIFIER,
     critical: DEFAULT(BOOLEAN, false),
     extnValue: function (type) {
-      return OCTET_STRING(ENCAPSULATES(type));
-    }
-  }, 'extnID', 'extnValue');
+      return OCTET_STRING(ENCAPSULATES(type))
+    },
+  }, 'extnID', 'extnValue')
+
   var Class = extend(Attribute(typeSet), {
     object: {
       get: function () {
-        const value = this._get(Class.super, 'object');
-
-        if (value && typeof value.extnValue === 'object') {
-          this.defineValue(value.extnValue);
-        }
-
-        return value;
+        const value = this._get(Class.super, 'object')
+        if (value && typeof value.extnValue === 'object') {this.defineValue(value.extnValue)}
+        return value
       },
       set: function (object) {
-        this._set(Class.super, 'object', object); // Define critical
-
-
+        this._set(Class.super, 'object', object)
+        // Define critical
         if (object && object.extnValue) {
-          if (object.extnValue.critical !== undefined) {
-            this.critical = object.extnValue.critical;
-          } else if (this.critical === undefined && defaultCritical) {
-            this.critical = defaultCritical(this.extnID, object.extnValue);
-          }
+          if (object.extnValue.critical !== undefined) {this.critical = object.extnValue.critical} else if (this.critical === undefined && defaultCritical) {this.critical = defaultCritical(this.extnID, object.extnValue)}
         }
-      }
+      },
     },
     extnValue: {
       get: function () {
         // Get value property of object
-        const value = this._get(Class.super, 'extnValue');
-
-        if (typeof value === 'object') {
-          this.defineValue(value);
-        }
-
-        return value;
+        const value = this._get(Class.super, 'extnValue')
+        if (typeof value === 'object') {this.defineValue(value)}
+        return value
       },
       set: function (object) {
         // Set value property of object
-        this._set(Class.super, 'extnValue', object); // Define critical
-
-
+        this._set(Class.super, 'extnValue', object)
+        // Define critical
         if (object) {
-          if (object.critical !== undefined) {
-            this.critical = object.critical;
-          } else if (this.critical === undefined && defaultCritical) {
-            this.critical = defaultCritical(this.extnID, object);
-          }
+          if (object.critical !== undefined) {this.critical = object.critical} else if (this.critical === undefined && defaultCritical) {this.critical = defaultCritical(this.extnID, object)}
         }
-      }
+      },
     },
     defineValue: function (value) {
       if (typeof value === 'object') {
         if (!getOwnPropertyDescriptor(value, 'critical')) {
-          const self = this;
+          const self = this
           defineProperty(value, 'critical', {
             get: function () {
-              return self.critical;
+              return self.critical
             },
             set: function (value) {
-              self.critical = value;
+              self.critical = value
             },
             enumerable: true,
-            configurable: false
-          });
+            configurable: false,
+          })
         }
       }
-    }
-  });
-  return Class;
-}; // http://base.garant.ru/70133464/#ixzz4KaOTGI1l
-
+    },
+  })
+  return Class
+}
 
+// http://base.garant.ru/70133464/#ixzz4KaOTGI1l
 const IssuerSignTool = SEQUENCE({
   signTool: UTF8String,
   cATool: UTF8String,
   signToolCert: UTF8String,
-  cAToolCert: UTF8String
-});
+  cAToolCert: UTF8String,
+})
+
 /**
  * Extensions is a base class for extension attributes of certificates, CRLs, requests and etc.
  *
  * @class GostASN1.Extensions
  * @extends GostASN1.Set
  */
-
 const Extensions = SEQUENCE_OF(Extension, {
   typeName: 'extnID',
-  valueName: 'extnValue'
-});
+  valueName: 'extnValue',
+})
+
 const CertExtensions = Extensions({
   authorityKeyIdentifier: AuthorityKeyIdentifier,
   subjectKeyIdentifier: KeyIdentifier,
@@ -2748,10 +2550,12 @@ const CertExtensions = Extensions({
   authorityInfoAccess: SEQUENCE_OF(AccessDescription),
   subjectInfoAccess: SEQUENCE_OF(AccessDescription),
   subjectSignTool: UTF8String,
-  issuerSignTool: IssuerSignTool
+  issuerSignTool: IssuerSignTool,
 }, function (id, value) {
-  return id === 'keyUsage' || id === 'basicConstraints' && value.pathLenConstraint === undefined;
-}); // </editor-fold>
+  return id === 'keyUsage' ||
+        (id === 'basicConstraints' && value.pathLenConstraint === undefined)
+})
+// </editor-fold>
 
 /*
  * Signature Values
@@ -2759,8 +2563,7 @@ const CertExtensions = Extensions({
  * http://tools.ietf.org/html/rfc5280
  * http://tools.ietf.org/html/rfc4491
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
 /**
  * Gost Signature encode signature values for different GOST signatures
@@ -2786,25 +2589,28 @@ const CertExtensions = Extensions({
  * @class GostASN1.GostSignature
  * @extends GostASN1.Sequence
  */
-// SignalCom signature
 
+// SignalCom signature
 const ECDHSignature = SEQUENCE({
   r: INTEGER,
-  s: INTEGER
-});
-const GostR3410Signature = ANY; // Signature value (only need for CryptoPro
+  s: INTEGER,
+})
+
+const GostR3410Signature = ANY
+
+// Signature value (only need for CryptoPro
 //    var GostSignature = extend(CHOICE({
 //        ecdhSignature: ECDHSignature}, 'ecdhSignature'));
+const GostSignature = ECDHSignature
 
-const GostSignature = ECDHSignature; // </editor-fold>
+// </editor-fold>
 
 /*
  * Certificate
  *
  * http://tools.ietf.org/html/rfc5280
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
 /**
  * The sequence TBSCertificate contains information associated with the
@@ -2874,7 +2680,6 @@ const GostSignature = ECDHSignature; // </editor-fold>
  * @property {CryptoOperationData} subjectUniqueID The subject unique identifier
  * @property {GostASN1.Extensions} extensions The extensions defined for X.509 v3 certificates
  */
-
 const TBSCertificate = COMBINE(SEQUENCE({
   version: CTX(0, EXPLICIT(Version)),
   serialNumber: CertificateSerialNumber,
@@ -2883,12 +2688,10 @@ const TBSCertificate = COMBINE(SEQUENCE({
   validity: Validity,
   subject: Name,
   subjectPublicKeyInfo: SubjectPublicKeyInfo,
-  issuerUniqueID: OPTIONAL(CTX(1, IMPLICIT(UniqueIdentifier))),
-  // If present, version MUST be v2 or v3
-  subjectUniqueID: OPTIONAL(CTX(2, IMPLICIT(UniqueIdentifier))),
-  // If present, version MUST be v2 or v3
-  extensions: OPTIONAL(CTX(3, EXPLICIT(CertExtensions)))
-})); // If present, version MUST be v3
+  issuerUniqueID: OPTIONAL(CTX(1, IMPLICIT(UniqueIdentifier))), // If present, version MUST be v2 or v3
+  subjectUniqueID: OPTIONAL(CTX(2, IMPLICIT(UniqueIdentifier))), // If present, version MUST be v2 or v3
+  extensions: OPTIONAL(CTX(3, EXPLICIT(CertExtensions))),
+})) // If present, version MUST be v3
 
 /**
  * The X.509 v3 certificate basic syntax is as follows.  For signature
@@ -2910,28 +2713,29 @@ const TBSCertificate = COMBINE(SEQUENCE({
  * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
  * @property {CryptoOperationData} signatureValue Signature value
  */
-
 const Certificate = SEQUENCE({
   tbsCertificate: TBSCertificate,
   signatureAlgorithm: SignatureAlgorithmIdentifier,
-  signatureValue: BIT_STRING
-}, 'CERTIFICATE'); // </editor-fold>
+  signatureValue: BIT_STRING,
+}, 'CERTIFICATE')
+// </editor-fold>
 
 /*
  * Certification Request
  *
  * http://tools.ietf.org/html/rfc2986
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
+const ExtensionRequest = CertExtensions
 
-const ExtensionRequest = CertExtensions;
 const CRIAttributes = Attributes({
   challengePassword: SET_OF_SINGLE(DirectoryString),
   extensionRequest: SET_OF_SINGLE(ExtensionRequest),
   msCertExtensions: SET_OF_SINGLE(CertExtensions),
-  extendedCertificateAttributes: SET_OF_SINGLE(Attributes)
-});
+  extendedCertificateAttributes: SET_OF_SINGLE(Attributes),
+})
+
 /**
  * Certification request information shall have ASN.1 type CertificationRequestInfo:
  * <pre>
@@ -2970,13 +2774,13 @@ const CRIAttributes = Attributes({
  * @property {GostASN1.SubjectPublicKeyInfo} subject The public key and identify the algorithm with which the key is used
  * @property {GostASN1.Attributes} attributes The request attributes
  */
-
 const CertificationRequestInfo = COMBINE(SEQUENCE({
   version: INTEGER,
   subject: Name,
   subjectPublicKeyInfo: SubjectPublicKeyInfo,
-  attributes: CTX(0, IMPLICIT(CRIAttributes))
-}));
+  attributes: CTX(0, IMPLICIT(CRIAttributes)),
+}))
+
 /**
  * A certification request consists of three parts: "certification
  * request information," a signature algorithm identifier, and a digital
@@ -3010,22 +2814,22 @@ const CertificationRequestInfo = COMBINE(SEQUENCE({
  * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
  * @property {CryptoOperationData} signatureValue Signature value
  */
-
 const CertificationRequest = SEQUENCE({
   requestInfo: CertificationRequestInfo,
   signatureAlgorithm: SignatureAlgorithmIdentifier,
-  signatureValue: BIT_STRING
-}, 'CERTIFICATE REQUEST'); // </editor-fold>
+  signatureValue: BIT_STRING,
+}, 'CERTIFICATE REQUEST')
+// </editor-fold>
 
 /*
  * Certificate Revocation List
  *
  * http://tools.ietf.org/html/rfc5280
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
+const CRLNumber = INTEGER
 
-const CRLNumber = INTEGER;
 const CRLReason = ENUMERATED({
   unspecified: 0,
   keyCompromise: 1,
@@ -3036,33 +2840,36 @@ const CRLReason = ENUMERATED({
   certificateHold: 6,
   removeFromCRL: 8,
   privilegeWithdrawn: 9,
-  aACompromise: 10
-});
+  aACompromise: 10,
+})
+
 const IssuingDistributionPoint = SEQUENCE({
-  distributionPoint: OPTIONAL(CTX(0, EXPLICIT(DistributionPointName))),
-  // DistributionPointName is CHOICE
+  distributionPoint: OPTIONAL(CTX(0, EXPLICIT(DistributionPointName))), // DistributionPointName is CHOICE
   onlyContainsUserCerts: DEFAULT(CTX(1, IMPLICIT(BOOLEAN)), false),
   onlyContainsCACerts: DEFAULT(CTX(2, IMPLICIT(BOOLEAN)), false),
   onlySomeReasons: OPTIONAL(CTX(3, IMPLICIT(ReasonFlags))),
   indirectCRL: DEFAULT(CTX(4, IMPLICIT(BOOLEAN)), false),
-  onlyContainsAttributeCerts: DEFAULT(CTX(5, IMPLICIT(BOOLEAN)), false)
-});
+  onlyContainsAttributeCerts: DEFAULT(CTX(5, IMPLICIT(BOOLEAN)), false),
+})
+
 const CLRExtensions = Extensions({
   authorityKeyIdentifier: AuthorityKeyIdentifier,
   issuerAltName: GeneralNames,
   cRLNumber: CRLNumber,
   deltaCRLIndicator: CRLNumber,
   issuingDistributionPoint: IssuingDistributionPoint,
-  freshestCRL: FreshestCRL
+  freshestCRL: FreshestCRL,
 }, function (id) {
-  return id === 'cRLNumber';
-});
+  return id === 'cRLNumber'
+})
+
 const CLREntryExtensions = Extensions({
   cRLReason: CRLReason,
   instructionCode: OBJECT_IDENTIFIER,
   invalidityDate: GeneralizedTime,
-  certificateIssuer: GeneralNames
-});
+  certificateIssuer: GeneralNames,
+})
+
 /**
  * This field is itself a sequence containing the name of the issuer,
  * issue date, issue date of the next list, the optional list of revoked
@@ -3102,10 +2909,8 @@ const CLREntryExtensions = Extensions({
  * @property {Array} revokedCertificates The revoked certificates are listed by their serial numbers
  * @property {Extensions} crlExtensions The CRL extensions
  */
-
 const TBSCertList = COMBINE(SEQUENCE({
-  version: OPTIONAL(Version),
-  // if present, MUST be v2
+  version: OPTIONAL(Version), // if present, MUST be v2
   signature: SignatureAlgorithmIdentifier,
   issuer: Name,
   thisUpdate: Time,
@@ -3113,11 +2918,10 @@ const TBSCertList = COMBINE(SEQUENCE({
   revokedCertificates: OPTIONAL(SEQUENCE_OF(SEQUENCE({
     userCertificate: CertificateSerialNumber,
     revocationDate: Time,
-    crlEntryExtensions: OPTIONAL(CLREntryExtensions) // if present, MUST be v2
-
+    crlEntryExtensions: OPTIONAL(CLREntryExtensions), // if present, MUST be v2
   }))),
-  crlExtensions: OPTIONAL(CTX(0, EXPLICIT(CLRExtensions)))
-})); // if present, MUST be v2
+  crlExtensions: OPTIONAL(CTX(0, EXPLICIT(CLRExtensions))),
+})) // if present, MUST be v2
 
 /**
  * The X.509 v2 CRL syntax is as follows.  For signature calculation,
@@ -3138,93 +2942,100 @@ const TBSCertList = COMBINE(SEQUENCE({
  * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
  * @property {CryptoOperationData} signatureValue Signature value
  */
-
 const CertificateList = SEQUENCE({
   tbsCertList: TBSCertList,
   signatureAlgorithm: SignatureAlgorithmIdentifier,
-  signatureValue: BIT_STRING
-}, 'CRL'); // </editor-fold>
+  signatureValue: BIT_STRING,
+}, 'CRL')
+// </editor-fold>
 
 /*
  * Attribute Certificate Definision
  * http://tools.ietf.org/html/rfc5755
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
+const AttCertVersion = INTEGER
 
-const AttCertVersion = INTEGER;
 const ObjectDigestInfo = SEQUENCE({
   digestedObjectType: ENUMERATED({
     publicKey: 0,
     publicKeyCert: 1,
-    otherObjectTypes: 2
-  }),
-  // otherObjectTypes MUST NOT be used in this profile
+    otherObjectTypes: 2,
+  }), // otherObjectTypes MUST NOT be used in this profile
   otherObjectTypeID: OPTIONAL(OBJECT_IDENTIFIER),
   digestAlgorithm: DigestAlgorithmIdentifier,
-  objectDigest: BIT_STRING
-});
+  objectDigest: BIT_STRING,
+})
+
 const IssuerSerial = SEQUENCE({
   issuer: GeneralNames,
   serial: CertificateSerialNumber,
-  issuerUID: OPTIONAL(UniqueIdentifier)
-});
+  issuerUID: OPTIONAL(UniqueIdentifier),
+})
+
 const V2Form = SEQUENCE({
   issuerName: OPTIONAL(GeneralNames),
   baseCertificateID: OPTIONAL(CTX(0, IMPLICIT(IssuerSerial))),
   // issuerName MUST be present in this profile baseCertificateID and
   // objectDigestInfo MUST NOT be present in this profile
-  objectDigestInfo: OPTIONAL(CTX(1, IMPLICIT(ObjectDigestInfo)))
-});
+  objectDigestInfo: OPTIONAL(CTX(1, IMPLICIT(ObjectDigestInfo))),
+})
+
 const TargetCert = SEQUENCE({
   targetCertificate: IssuerSerial,
   targetName: OPTIONAL(GeneralName),
-  certDigestInfo: OPTIONAL(ObjectDigestInfo)
-});
+  certDigestInfo: OPTIONAL(ObjectDigestInfo),
+})
+
 const Target = CHOICE({
-  targetName: CTX(0, EXPLICIT(GeneralName)),
-  // GeneralName is CHOICE
+  targetName: CTX(0, EXPLICIT(GeneralName)), // GeneralName is CHOICE
   targetGroup: CTX(1, EXPLICIT(GeneralName)),
-  targetCert: CTX(2, IMPLICIT(TargetCert))
-});
-const Targets = SEQUENCE_OF(Target);
+  targetCert: CTX(2, IMPLICIT(TargetCert)),
+})
+
+const Targets = SEQUENCE_OF(Target)
+
 const AttCertExtensions = Extensions({
   auditIdentity: OCTET_STRING,
   targetInformation: Targets,
   authorityKeyIdentifier: AuthorityKeyIdentifier,
   authorityInfoAccess: SEQUENCE_OF(AccessDescription),
   cRLDistributionPoints: CRLDistributionPoints,
-  noRevAvail: NULL
+  noRevAvail: NULL,
 }, function (id) {
-  return id === 'auditIdentity' || id === 'targetInformation';
-});
+  return id === 'auditIdentity' || id === 'targetInformation'
+})
+
 const Holder = SEQUENCE({
   // the issuer and serial number of the holder's Public Key Certificate
   baseCertificateID: OPTIONAL(CTX(0, IMPLICIT(IssuerSerial))),
   // the name of the claimant or role
   entityName: OPTIONAL(CTX(1, IMPLICIT(GeneralNames))),
   // used to directly authenticate the holder, for example, an executable
-  objectDigestInfo: OPTIONAL(CTX(2, IMPLICIT(ObjectDigestInfo)))
-});
+  objectDigestInfo: OPTIONAL(CTX(2, IMPLICIT(ObjectDigestInfo))),
+})
+
 const AttCertIssuer = CHOICE({
-  v1Form: GeneralNames,
-  // MUST NOT be used in this profile
-  v2Form: CTX(0, IMPLICIT(V2Form))
-}, 'v2Form'); // v2 only
+  v1Form: GeneralNames, // MUST NOT be used in this profile
+  v2Form: CTX(0, IMPLICIT(V2Form)),
+}, 'v2Form') // v2 only
 
 const AttCertValidityPeriod = SEQUENCE({
   notBeforeTime: GeneralizedTime,
-  notAfterTime: GeneralizedTime
-});
+  notAfterTime: GeneralizedTime,
+})
+
 const SvceAuthInfo = SEQUENCE({
   service: GeneralName,
   ident: GeneralName,
-  authInfo: OPTIONAL(OCTET_STRING)
-});
+  authInfo: OPTIONAL(OCTET_STRING),
+})
+
 const RoleSyntax = SEQUENCE({
   roleAuthority: OPTIONAL(CTX(0, IMPLICIT(GeneralNames))),
-  roleName: CTX(1, EXPLICIT(GeneralName))
-}); // GeneralName is CHOICE
+  roleName: CTX(1, EXPLICIT(GeneralName)),
+}) // GeneralName is CHOICE
 
 const ClassList = BIT_STRING({
   unmarked: 0,
@@ -3232,27 +3043,31 @@ const ClassList = BIT_STRING({
   restricted: 2,
   confidential: 3,
   secret: 4,
-  topSecret: 5
-});
+  topSecret: 5,
+})
+
 const SecurityCategory = SEQUENCE({
   type: CTX(0, IMPLICIT(OBJECT_IDENTIFIER)),
-  value: CTX(1, IMPLICIT(ANY))
-});
+  value: CTX(1, IMPLICIT(ANY)),
+})
+
 const Clearance = SEQUENCE({
   policyId: CTX(0, IMPLICIT(OBJECT_IDENTIFIER)),
   classList: DEFAULT(CTX(1, IMPLICIT(ClassList)), ['unclassified']),
-  securityCategories: OPTIONAL(CTX(2, IMPLICIT(SET_OF(SecurityCategory))))
-});
+  securityCategories: OPTIONAL(CTX(2, IMPLICIT(SET_OF(SecurityCategory)))),
+})
+
 const IetfAttrSyntax = SEQUENCE({
   policyAuthority: OPTIONAL(CTX(0, IMPLICIT(GeneralNames))),
   values: SEQUENCE_OF(CHOICE({
     octets: OCTET_STRING,
     oid: OBJECT_IDENTIFIER,
-    string: UTF8String
+    string: UTF8String,
   }, function (value) {
-    return isBinary ? 'octets' : getIdentifier(value) ? 'oid' : 'string';
-  }))
-});
+    return isBinary ? 'octets' : getIdentifier(value) ? 'oid' : 'string'
+  })),
+})
+
 /**
  * X.509 Attribute Certificate Definition<br><br>
  *
@@ -3285,10 +3100,8 @@ const IetfAttrSyntax = SEQUENCE({
  * @property {CryptoOperationData} issuerUniqueID The issuer unique identifier
  * @property {GostASN1.Extensions} extensions The certificate extensions
  */
-
 const AttributeCertificateInfo = COMBINE(SEQUENCE({
-  version: AttCertVersion,
-  // version is v2,
+  version: AttCertVersion, // version is v2,
   holder: Holder,
   issuer: AttCertIssuer,
   signature: SignatureAlgorithmIdentifier,
@@ -3300,11 +3113,12 @@ const AttributeCertificateInfo = COMBINE(SEQUENCE({
     chargingIdentity: SET_OF_SINGLE(IetfAttrSyntax),
     group: SET_OF_SINGLE(IetfAttrSyntax),
     role: SET_OF(RoleSyntax),
-    clearance: SET_OF(Clearance)
+    clearance: SET_OF(Clearance),
   }),
   issuerUniqueID: OPTIONAL(UniqueIdentifier),
-  extensions: OPTIONAL(AttCertExtensions)
-}));
+  extensions: OPTIONAL(AttCertExtensions),
+}))
+
 /**
  * Attribute Certificate Profile<br></br>
  *
@@ -3332,12 +3146,12 @@ const AttributeCertificateInfo = COMBINE(SEQUENCE({
  * @property {AlgorithmIndentifier} signatureAlgorithm Identifies signature algorithm
  * @property {CryptoOperationData} signatureValue Signature value
  */
-
 const AttributeCertificate = SEQUENCE({
   acinfo: AttributeCertificateInfo,
   signatureAlgorithm: SignatureAlgorithmIdentifier,
-  signatureValue: BIT_STRING
-}, 'ATTRIBUTE CERTIFICATE'); // </editor-fold>
+  signatureValue: BIT_STRING,
+}, 'ATTRIBUTE CERTIFICATE')
+// </editor-fold>
 
 /*
  * Encrypted Key with CMS
@@ -3345,118 +3159,118 @@ const AttributeCertificate = SEQUENCE({
  * http://tools.ietf.org/html/rfc5652
  * http://tools.ietf.org/html/rfc4490
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
 // RecipientInfo
+var EncryptedKey = OCTET_STRING
+
+const EncryptedContent = OCTET_STRING
+
+var SubjectKeyIdentifier = OCTET_STRING
+
+const UserKeyingMaterial = OCTET_STRING
 
-var EncryptedKey = OCTET_STRING;
-const EncryptedContent = OCTET_STRING;
-var SubjectKeyIdentifier = OCTET_STRING;
-const UserKeyingMaterial = OCTET_STRING;
 const ECCCMSSharedInfo = SEQUENCE({
   keyInfo: KeyWrapAlgorithmIdentifier,
   entityUInfo: OPTIONAL(CTX(0, EXPLICIT(OCTET_STRING))),
-  suppPubInfo: CTX(2, EXPLICIT(OCTET_STRING))
-}); // GOST Key Transport & Key agreement rfc4490
+  suppPubInfo: CTX(2, EXPLICIT(OCTET_STRING)),
+})
 
+// GOST Key Transport & Key agreement rfc4490
 const Gost2814789EncryptedKey = ENCLOSURE(SEQUENCE({
   encryptedKey: Gost2814789Key,
   maskKey: OPTIONAL(CTX(0, IMPLICIT(Gost2814789Key))),
-  macKey: Gost2814789MAC
+  macKey: Gost2814789MAC,
 }), {
   encode: function (value) {
     // wrappedKey: (CEK_ENC(32) | CEK_MAC(4))
     const encryptedKey = new Uint8Array(new Uint8Array(value, 0, 32)).buffer,
-          macKey = new Uint8Array(new Uint8Array(value, 32, 4)).buffer;
-    return {
-      // from wrapped key
+      macKey = new Uint8Array(new Uint8Array(value, 32, 4)).buffer
+    return { // from wrapped key
       encryptedKey: encryptedKey,
-      macKey: macKey
-    };
+      macKey: macKey,
+    }
   },
   decode: function (value) {
     const encryptedKey = value.encryptedKey,
-          maskKey = value.maskKey,
-          macKey = value.macKey;
-
+      maskKey = value.maskKey,
+      macKey = value.macKey
     if (maskKey) {
-      const m = new Int32Array(maskKey),
-            k = new Int32Array(encryptedKey);
-
+      const m = new Int32Array(maskKey), k = new Int32Array(encryptedKey)
       for (let i = 0, n = m.length / k.length; i < n; i++) {
-        for (let j = 0, l = k.length; j < l; j++) {
-          k[j] = k[j] + m[l * i + j] & 0xffffffff;
-        }
+        for (let j = 0, l = k.length; j < l; j++) {k[j] = (k[j] + m[l * i + j]) & 0xffffffff}
       }
     }
+    const result = new Uint8Array(encryptedKey.byteLength + macKey.byteLength)
+    result.set(new Uint8Array(encryptedKey), 0)
+    result.set(new Uint8Array(macKey), 32)
+    return result.buffer
+  },
+})
+
 
-    const result = new Uint8Array(encryptedKey.byteLength + macKey.byteLength);
-    result.set(new Uint8Array(encryptedKey), 0);
-    result.set(new Uint8Array(macKey), 32);
-    return result.buffer;
-  }
-});
 const GostR3410TransportParameters = SEQUENCE({
   encryptionParamSet: Gost2814789ParamSet,
   ephemeralPublicKey: OPTIONAL(CTX(0, IMPLICIT(GostSubjectPublicKeyInfo))),
-  ukm: OCTET_STRING
-}); // ( SIZE(8) )
+  ukm: OCTET_STRING,
+}) // ( SIZE(8) )
 
 const GostR3410KeyTransport = ENCLOSURE(SEQUENCE({
   sessionEncryptedKey: Gost2814789EncryptedKey,
-  transportParameters: OPTIONAL(CTX(0, IMPLICIT(GostR3410TransportParameters)))
+  transportParameters: OPTIONAL(CTX(0, IMPLICIT(GostR3410TransportParameters))),
 }), {
   encode: function (value) {
-    const algorithm = value.algorithm;
+    const algorithm = value.algorithm
     return {
       sessionEncryptedKey: value.sessionEncryptedKey,
       transportParameters: {
         encryptionParamSet: attributes['sBox'][algorithm.wrapping.sBox || 'E-A'],
         ephemeralPublicKey: algorithm['public'],
-        ukm: algorithm.ukm
-      }
-    };
+        ukm: algorithm.ukm,
+      },
+    }
   },
   decode: function (value) {
     return {
       algorithm: {
         wrapping: parameters[value.transportParameters.encryptionParamSet],
         ukm: value.transportParameters.ukm,
-        'public': value.transportParameters.ephemeralPublicKey
+        'public': value.transportParameters.ephemeralPublicKey,
       },
-      sessionEncryptedKey: value.sessionEncryptedKey
-    };
-  }
-});
+      sessionEncryptedKey: value.sessionEncryptedKey,
+    }
+  },
+})
+
 const SCGostKeyTransport = ENCLOSURE(SEQUENCE({
   sessionEncryptedKey: Gost2814789EncryptedKey,
   ukm: SEQUENCE({
     ephemeralPublicKey: GostSubjectPublicKeyInfo,
-    addedukm: OPTIONAL(CTX(0, EXPLICIT(UserKeyingMaterial)))
-  })
+    addedukm: OPTIONAL(CTX(0, EXPLICIT(UserKeyingMaterial))),
+  }),
 }), {
   encode: function (value) {
-    const algorithm = value.algorithm;
+    const algorithm = value.algorithm
     return {
       sessionEncryptedKey: value.sessionEncryptedKey,
       ukm: {
         ephemeralPublicKey: algorithm['public'],
-        addedukm: algorithm.ukm
-      }
-    };
+        addedukm: algorithm.ukm,
+      },
+    }
   },
   decode: function (value) {
     return {
       algorithm: {
         ukm: value.ukm.addedukm,
-        'public': value.ukm.ephemeralPublicKey
+        'public': value.ukm.ephemeralPublicKey,
       },
-      sessionEncryptedKey: value.sessionEncryptedKey
-    };
-  }
-});
+      sessionEncryptedKey: value.sessionEncryptedKey,
+    }
+  },
+})
 
-const GostEncryptedKey = function (typeSet) {
+const GostEncryptedKey = (function (typeSet) {
   /**
      * Gost Encrypted key encoder for CMS
      *
@@ -3465,10 +3279,10 @@ const GostEncryptedKey = function (typeSet) {
      * @param {AlgorithmIdentifier} algorithm
      */
   return function (algorithm) {
-    const type = typeSet[algorithm.id];
-    return type ? ENCAPSULATES(type) : ANY;
-  };
-}({
+    const type = typeSet[algorithm.id]
+    return type ? ENCAPSULATES(type) : ANY
+  }
+})({
   // Key transport algorithms
   'id-sc-gostR3410-2001': SCGostKeyTransport,
   'id-sc-gostR3410-94': SCGostKeyTransport,
@@ -3486,38 +3300,43 @@ const GostEncryptedKey = function (typeSet) {
   'id-Gost28147-89-None-KeyWrap': Gost2814789EncryptedKey,
   'id-Gost28147-89-CryptoPro-KeyWrap': Gost2814789EncryptedKey,
   'id-sc-cmsGostWrap': Gost2814789EncryptedKey,
-  'id-sc-cmsGost28147Wrap': Gost2814789EncryptedKey
-}); // </editor-fold>
+  'id-sc-cmsGost28147Wrap': Gost2814789EncryptedKey,
+})
+
+// </editor-fold>
 
 /*
  * CryptoPro Gost Private Key Store
- */
-// <editor-fold defaultstate="collapsed">
-
+ */ // <editor-fold defaultstate="collapsed">
 
 const GostKeyContainerContentAttributes = BIT_STRING({
   kccaSoftPassword: 0,
   kccaReservePrimary: 1,
   kccaPrimaryKeyAbsent: 2,
-  kccaFKCShared: 3
-});
+  kccaFKCShared: 3,
+})
+
 const GostPrivateKeyAttributes = BIT_STRING({
   pkaExportable: 0,
   pkaUserProtect: 1,
   pkaExchange: 2,
   pkaEphemeral: 3,
   pkaNonCachable: 4,
-  pkaDhAllowed: 5
-});
+  pkaDhAllowed: 5,
+})
+
 const GostPrivateKeyParameters = SEQUENCE({
   attributes: OPTIONAL(GostPrivateKeyAttributes),
-  privateKeyAlgorithm: OPTIONAL(CTX(0, IMPLICIT(KeyAlgorithmIdentifier)))
-});
+  privateKeyAlgorithm: OPTIONAL(CTX(0, IMPLICIT(KeyAlgorithmIdentifier))),
+})
+
 const CertificateLink = SEQUENCE({
   path: IA5String,
-  hmac: Gost2814789MAC
-});
-const PasswordPolicy = AlgorithmIdentifier;
+  hmac: Gost2814789MAC,
+})
+
+const PasswordPolicy = AlgorithmIdentifier
+
 const GostKeyContainerContent = SEQUENCE({
   containerAlgoritmIdentifier: OPTIONAL(CTX(0, IMPLICIT(AlgorithmIdentifier))),
   containerName: OPTIONAL(IA5String),
@@ -3538,62 +3357,63 @@ const GostKeyContainerContent = SEQUENCE({
   extensions: OPTIONAL(CTX(12, IMPLICIT(Extensions({
     keyValidity: SEQUENCE({
       notBefore: OPTIONAL(CTX(0, IMPLICIT(GeneralizedTime))),
-      notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime)))
-    })
+      notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime))),
+    }),
   })))),
-  secondaryEncryptionContainerName: OPTIONAL(CTX(13, IMPLICIT(IA5String)))
-});
+  secondaryEncryptionContainerName: OPTIONAL(CTX(13, IMPLICIT(IA5String))),
+})
+
 /**
  * CryptoPro key container header
  *
  * @class GostASN1.GostKeyContainer
  * @extends GostASN1.Sequence
  */
-
 const GostKeyContainer = SEQUENCE({
   keyContainerContent: GostKeyContainerContent,
-  hmacKeyContainerContent: Gost2814789MAC
-});
+  hmacKeyContainerContent: Gost2814789MAC,
+})
+
 /**
  * CryptoPro key container name
  *
  * @class GostASN1.GostKeyContainerName
  * @extends GostASN1.Sequence
  */
-
 const GostKeyContainerName = SEQUENCE({
   containerName: IA5String,
-  extElem1: OPTIONAL(ANY)
-});
+  extElem1: OPTIONAL(ANY),
+})
+
 /**
  * PrivateKey encrypted content for CryptoPro key containers
  *
  * @class GostASN1.GostPrivateKeys
  * @extends GostASN1.Sequence
  */
-
 const GostPrivateKeys = SEQUENCE({
   primaryKey: Gost2814789Key,
   secondaryKey: OPTIONAL(Gost2814789Key),
-  hmacKey: OPTIONAL(Gost2814789MAC)
-});
+  hmacKey: OPTIONAL(Gost2814789MAC),
+})
+
 /**
  * PrivateKey masks for CryptoPro key containers
  *
  * @class GostASN1.GostPrivateMasks
  * @extends GostASN1.Sequence
  */
-
 const GostPrivateMasks = SEQUENCE({
   mask: Gost2814789Key,
   randomStatus: OCTET_STRING,
-  hmacRandom: Gost2814789MAC
-}); // </editor-fold>
+  hmacRandom: Gost2814789MAC,
+})
+
+// </editor-fold>
 
 /*
  * ViPNet Gost Private Key Store
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
 const ViPNetKeyInfo = SEQUENCE({
   keyClass: INTEGER,
@@ -3608,52 +3428,60 @@ const ViPNetKeyInfo = SEQUENCE({
     validity: Validity,
     keyValidity: SEQUENCE({
       notBefore: OPTIONAL(CTX(0, IMPLICIT(GeneralizedTime))),
-      notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime)))
-    })
+      notAfter: OPTIONAL(CTX(1, IMPLICIT(GeneralizedTime))),
+    }),
   }, function () {
-    return 'keyValidity';
+    return 'keyValidity'
   })))),
   keyUID: OPTIONAL(CTX(7, EXPLICIT(BIT_STRING))),
-  flags: OPTIONAL(CTX(10, EXPLICIT(INTEGER)))
-});
+  flags: OPTIONAL(CTX(10, EXPLICIT(INTEGER))),
+})
+
 /**
  * ViPNet key container info
  *
  * @class GostASN1.ViPNetInfo
  * @extends GostASN1.Sequence
  */
-
 const ViPNetInfo = SEQUENCE({
   version: INTEGER,
   keyInfo: ViPNetKeyInfo,
   defenceKeyInfo: ViPNetKeyInfo,
   certificate: OPTIONAL(CTX(0, EXPLICIT(Certificate))),
-  publicKey: OPTIONAL(CTX(1, EXPLICIT(OCTET_STRING)))
-}); // </editor-fold>
+  publicKey: OPTIONAL(CTX(1, EXPLICIT(OCTET_STRING))),
+})
+
+// </editor-fold>
 
 /*
  * Cryptographic Message Syntax
  *
  * http://tools.ietf.org/html/rfc5652
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
 // CMS signed data
+const CMSVersion = INTEGER
+
+var ContentType = OBJECT_IDENTIFIER
+
+const SigningTime = Time
+
+var SubjectKeyIdentifier = OCTET_STRING
+
+const Digest = OCTET_STRING
+
+const MessageAuthenticationCode = OCTET_STRING
+
+const BodyPartID = INTEGER
+
+const BodyPartPath = SEQUENCE_OF(BodyPartID)
 
-const CMSVersion = INTEGER;
-var ContentType = OBJECT_IDENTIFIER;
-const SigningTime = Time;
-var SubjectKeyIdentifier = OCTET_STRING;
-const Digest = OCTET_STRING;
-const MessageAuthenticationCode = OCTET_STRING;
-const BodyPartID = INTEGER;
-const BodyPartPath = SEQUENCE_OF(BodyPartID);
 const CMCUnsignedData = SEQUENCE({
   bodyPartPath: BodyPartPath,
   identifier: OBJECT_IDENTIFIER,
-  content: ANY
-}); // DEFINED BY identifier
-
+  content: ANY,
+}) // DEFINED BY identifier
 /**
  * SignedAttributes is a collection of attributes that are signed.  The
  * field is optional, but it MUST be present if the content type of
@@ -3676,12 +3504,12 @@ const CMCUnsignedData = SEQUENCE({
  * @class GostASN1.SignedAttributes
  * @extends GostASN1.Attributes
  */
-
 const SignedAttributes = Attributes({
   contentType: SET_OF_SINGLE(ContentType),
   signingTime: SET_OF_SINGLE(SigningTime),
-  messageDigest: SET_OF_SINGLE(OCTET_STRING)
-});
+  messageDigest: SET_OF_SINGLE(OCTET_STRING),
+})
+
 const UnsignedAttributes = Attributes(function (type) {
   /**
      * UnsignedAttributes is a collection of attributes that are not signed.
@@ -3695,25 +3523,28 @@ const UnsignedAttributes = Attributes(function (type) {
   //        countersignature: SET_OF(Countersignature), // -- check forward
   //        unsignedData: SET_OF(CMCUnsignedData)
   //    });
-  return {
-    countersignature: SET_OF(Countersignature),
-    // recursion
-    unsignedData: SET_OF(CMCUnsignedData)
-  }[type];
-});
+  return ({
+    countersignature: SET_OF(Countersignature), // recursion
+    unsignedData: SET_OF(CMCUnsignedData),
+  })[type]
+})
+
 const AuthAttributes = SignedAttributes,
-      UnauthAttributes = Attributes,
-      UnprotectedAttributes = Attributes;
+  UnauthAttributes = Attributes,
+  UnprotectedAttributes = Attributes
+
 const IssuerAndSerialNumber = SEQUENCE({
   issuer: Name,
-  serialNumber: CertificateSerialNumber
-});
+  serialNumber: CertificateSerialNumber,
+})
+
 const SignerIdentifier = CHOICE({
   issuerAndSerialNumber: IssuerAndSerialNumber,
-  subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier))
+  subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier)),
 }, function (value) {
-  return isBinary(value) ? 'subjectKeyIdentifier' : 'issuerAndSerialNumber';
-});
+  return isBinary(value) ? 'subjectKeyIdentifier' : 'issuerAndSerialNumber'
+})
+
 const SignerInfo = SEQUENCE({
   version: CMSVersion,
   sid: SignerIdentifier,
@@ -3721,76 +3552,86 @@ const SignerInfo = SEQUENCE({
   signedAttrs: OPTIONAL(CTX(0, IMPLICIT(SignedAttributes))),
   signatureAlgorithm: SignatureAlgorithmIdentifier,
   signatureValue: OCTET_STRING,
-  unsignedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnsignedAttributes)))
-});
+  unsignedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnsignedAttributes))),
+})
+
 var Countersignature = SignerInfo,
-    SignerInfos = SET_OF(SignerInfo),
-    DigestAlgorithmIdentifiers = SET_OF(DigestAlgorithmIdentifier),
-    AttributeCertificateV2 = AttributeCertificate;
+  SignerInfos = SET_OF(SignerInfo),
+  DigestAlgorithmIdentifiers = SET_OF(DigestAlgorithmIdentifier),
+  AttributeCertificateV2 = AttributeCertificate
+
 const ExtendedCertificateInfo = COMBINE(SEQUENCE({
   version: CMSVersion,
   certificate: Certificate,
-  attributes: UnauthAttributes
-}));
+  attributes: UnauthAttributes,
+}))
+
 const ExtendedCertificate = SEQUENCE({
   extendedCertificateInfo: ExtendedCertificateInfo,
   signatureAlgorithm: SignatureAlgorithmIdentifier,
-  signatureValue: BIT_STRING
-});
+  signatureValue: BIT_STRING,
+})
+
 const OtherCertificateFormat = SEQUENCE({
   otherCertFormat: OBJECT_IDENTIFIER,
-  otherCert: ANY
-});
+  otherCert: ANY,
+})
+
 const AttributeCertificateInfoV1 = COMBINE(SEQUENCE({
   version: INTEGER,
   subject: CHOICE({
-    baseCertificateID: CTX(0, IMPLICIT(IssuerSerial)),
-    // associated with a Public Key Certificate
-    subjectName: CTX(1, IMPLICIT(GeneralNames))
+    baseCertificateID: CTX(0, IMPLICIT(IssuerSerial)), // associated with a Public Key Certificate
+    subjectName: CTX(1, IMPLICIT(GeneralNames)),
   }, function (value) {
-    return value.issuer ? 'baseCertificateID' : 'subjectName';
-  }),
-  //associated with a name
+    return value.issuer ? 'baseCertificateID' : 'subjectName'
+  }), //associated with a name
   issuer: GeneralNames,
   signature: SignatureAlgorithmIdentifier,
   serialNumber: CertificateSerialNumber,
   attCertValidityPeriod: AttCertValidityPeriod,
   attributes: AttributeSequence,
   issuerUniqueID: OPTIONAL(UniqueIdentifier),
-  extensions: OPTIONAL(CertExtensions)
-}));
+  extensions: OPTIONAL(CertExtensions),
+}))
+
 const AttributeCertificateV1 = SEQUENCE({
   acInfo: AttributeCertificateInfoV1,
   signatureAlgorithm: SignatureAlgorithmIdentifier,
-  signatureValue: BIT_STRING
-});
+  signatureValue: BIT_STRING,
+})
+
 const EncapsulatedContentInfo = SEQUENCE({
   eContentType: ContentType,
-  eContent: OPTIONAL(CTX(0, EXPLICIT(OCTET_STRING)))
-});
+  eContent: OPTIONAL(CTX(0, EXPLICIT(OCTET_STRING))),
+})
+
 const CertificateChoices = CHOICE({
   certificate: Certificate,
-  extendedCertificate: CTX(0, IMPLICIT(ExtendedCertificate)),
-  // Obsolete
-  v1AttrCert: CTX(1, IMPLICIT(AttributeCertificateV1)),
-  // Obsolete
+  extendedCertificate: CTX(0, IMPLICIT(ExtendedCertificate)), // Obsolete
+  v1AttrCert: CTX(1, IMPLICIT(AttributeCertificateV1)), // Obsolete
   v2AttrCert: CTX(2, IMPLICIT(AttributeCertificateV2)),
-  other: CTX(3, IMPLICIT(OtherCertificateFormat))
+  other: CTX(3, IMPLICIT(OtherCertificateFormat)),
 }, function (value) {
-  return value.holder ? 'AttributeCertificateV2' : value.certificate ? 'ExtendedCertificate' : value.otherCertFormat ? 'other' : 'certificate';
-});
+  return value.holder ? 'AttributeCertificateV2' : value.certificate ?
+    'ExtendedCertificate' : value.otherCertFormat ? 'other' :
+      'certificate'
+})
+
 const OtherRevocationInfoFormat = SEQUENCE({
   otherRevInfoFormat: OBJECT_IDENTIFIER,
-  otherRevInfo: ANY
-});
+  otherRevInfo: ANY,
+})
+
 const RevocationInfoChoice = CHOICE({
   crl: CertificateList,
-  other: CTX(1, IMPLICIT(OtherRevocationInfoFormat))
+  other: CTX(1, IMPLICIT(OtherRevocationInfoFormat)),
 }, function (value) {
-  return value.otherRevInfoFormat ? 'other' : 'crl';
-});
+  return value.otherRevInfoFormat ? 'other' : 'crl'
+})
+
 const CertificateSet = SET_OF(CertificateChoices),
-      RevocationInfoChoices = SET_OF(RevocationInfoChoice);
+  RevocationInfoChoices = SET_OF(RevocationInfoChoice)
+
 /**
  * The signed-data content type consists of a content of any type and zero or more
  * signature values.  Any number of signers in parallel can sign any type of content.<br><br>
@@ -3848,115 +3689,131 @@ const CertificateSet = SET_OF(CertificateChoices),
  * @property {GostASN1.CertificateList[]} crls Certificates
  * @property {GostASN1.Sequence[]} signerInfos The Signer information
  */
-
 const SignedData = SEQUENCE({
   version: CMSVersion,
   digestAlgorithms: DigestAlgorithmIdentifiers,
   encapContentInfo: EncapsulatedContentInfo,
   certificates: OPTIONAL(CTX(0, IMPLICIT(CertificateSet))),
   crls: OPTIONAL(CTX(1, IMPLICIT(RevocationInfoChoices))),
-  signerInfos: SignerInfos
-});
+  signerInfos: SignerInfos,
+})
+
 const RecipientIdentifier = CHOICE({
   issuerAndSerialNumber: IssuerAndSerialNumber,
-  subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier))
+  subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier)),
 }, function (value) {
-  return isBinary(value) ? 'subjectKeyIdentifier' : 'issuerAndSerialNumber';
-});
+  return isBinary(value) ? 'subjectKeyIdentifier' : 'issuerAndSerialNumber'
+})
+
 const KeyTransRecipientInfo = SEQUENCE({
-  version: CMSVersion,
-  // always set to 0 or 2
+  version: CMSVersion, // always set to 0 or 2
   rid: RecipientIdentifier,
   keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
-  encryptedKey: EncryptedKey
-});
+  encryptedKey: EncryptedKey,
+})
+
 const OtherKeyAttribute = SEQUENCE({
   keyAttrId: OBJECT_IDENTIFIER,
-  keyAttr: OPTIONAL(ANY)
-});
+  keyAttr: OPTIONAL(ANY),
+})
+
 const RecipientKeyIdentifier = SEQUENCE({
   subjectKeyIdentifier: SubjectKeyIdentifier,
   date: OPTIONAL(GeneralizedTime),
-  other: OPTIONAL(OtherKeyAttribute)
-});
+  other: OPTIONAL(OtherKeyAttribute),
+})
+
 const KeyAgreeRecipientIdentifier = CHOICE({
   issuerAndSerialNumber: IssuerAndSerialNumber,
-  rKeyId: CTX(0, IMPLICIT(RecipientKeyIdentifier))
+  rKeyId: CTX(0, IMPLICIT(RecipientKeyIdentifier)),
 }, function (value) {
-  return isBinary(value) ? 'rKeyId' : 'issuerAndSerialNumber';
-});
+  return isBinary(value) ? 'rKeyId' : 'issuerAndSerialNumber'
+})
+
 const RecipientEncryptedKey = SEQUENCE({
   rid: KeyAgreeRecipientIdentifier,
-  encryptedKey: EncryptedKey
-});
-const RecipientEncryptedKeys = SEQUENCE_OF(RecipientEncryptedKey);
+  encryptedKey: EncryptedKey,
+})
+
+const RecipientEncryptedKeys = SEQUENCE_OF(RecipientEncryptedKey)
+
 const OriginatorPublicKey = SEQUENCE({
   algorithm: KeyAlgorithmIdentifier,
-  publicKey: BIT_STRING
-});
-const MQVuserKeyingMaterial = SEQUENCE({
-  // ECC rfc5753 KeyAgreeRecipientInfo in ukm
+  publicKey: BIT_STRING,
+})
+
+const MQVuserKeyingMaterial = SEQUENCE({ // ECC rfc5753 KeyAgreeRecipientInfo in ukm
   ephemeralPublicKey: OriginatorPublicKey,
-  addedukm: OPTIONAL(CTX(0, EXPLICIT(UserKeyingMaterial)))
-});
+  addedukm: OPTIONAL(CTX(0, EXPLICIT(UserKeyingMaterial))),
+})
+
 const OriginatorIdentifierOrKey = CHOICE({
   issuerAndSerialNumber: IssuerAndSerialNumber,
   subjectKeyIdentifier: CTX(0, IMPLICIT(SubjectKeyIdentifier)),
-  originatorKey: CTX(1, IMPLICIT(OriginatorPublicKey))
+  originatorKey: CTX(1, IMPLICIT(OriginatorPublicKey)),
 }, function (value) {
-  return isBinary(value) ? 'subjectKeyIdentifier' : value.algorithm ? 'originatorKey' : 'issuerAndSerialNumber';
-});
+  return isBinary(value) ? 'subjectKeyIdentifier' : value.algorithm ?
+    'originatorKey' : 'issuerAndSerialNumber'
+})
+
 const KeyAgreeRecipientInfo = SEQUENCE({
-  version: CMSVersion,
-  // always set to 3
+  version: CMSVersion, // always set to 3
   originator: CTX(0, EXPLICIT(OriginatorIdentifierOrKey)),
   ukm: OPTIONAL(CTX(1, EXPLICIT(UserKeyingMaterial))),
   keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
-  recipientEncryptedKeys: RecipientEncryptedKeys
-});
+  recipientEncryptedKeys: RecipientEncryptedKeys,
+})
+
 const KEKIdentifier = SEQUENCE({
   keyIdentifier: OCTET_STRING,
   date: OPTIONAL(GeneralizedTime),
-  other: OPTIONAL(OtherKeyAttribute)
-});
+  other: OPTIONAL(OtherKeyAttribute),
+})
+
 const KEKRecipientInfo = SEQUENCE({
-  version: CMSVersion,
-  // always set to 4
+  version: CMSVersion, // always set to 4
   kekid: KEKIdentifier,
   keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
-  encryptedKey: EncryptedKey
-});
+  encryptedKey: EncryptedKey,
+})
+
 const PasswordRecipientInfo = SEQUENCE({
-  version: CMSVersion,
-  // always set to 0
+  version: CMSVersion, // always set to 0
   friendlyName: OPTIONAL(CTX(0, IMPLICIT(KeyDerivationAlgorithmIdentifier))),
   keyEncryptionAlgorithm: KeyEncryptionAlgorithmIdentifier,
-  encryptedKey: EncryptedKey
-});
+  encryptedKey: EncryptedKey,
+})
+
 const OtherRecipientInfo = SEQUENCE({
   oriType: OBJECT_IDENTIFIER,
-  oriValue: ANY
-});
+  oriValue: ANY,
+})
+
 const RecipientInfo = CHOICE({
   ktri: KeyTransRecipientInfo,
   kari: CTX(1, IMPLICIT(KeyAgreeRecipientInfo)),
   kekri: CTX(2, IMPLICIT(KEKRecipientInfo)),
   pwri: CTX(3, IMPLICIT(PasswordRecipientInfo)),
-  ori: CTX(4, IMPLICIT(OtherRecipientInfo))
+  ori: CTX(4, IMPLICIT(OtherRecipientInfo)),
 }, function (value) {
-  return value.rid ? 'ktri' : value.originator ? 'kari' : value.kekid ? 'kekri' : value.oriType ? 'ori' : 'pwri';
-});
+  return value.rid ? 'ktri' : value.originator ? 'kari' :
+    value.kekid ? 'kekri' : value.oriType ? 'ori' : 'pwri'
+})
+
 const OriginatorInfo = SEQUENCE({
   certs: OPTIONAL(CTX(0, IMPLICIT(CertificateSet))),
-  crls: OPTIONAL(CTX(1, IMPLICIT(RevocationInfoChoices)))
-});
-const RecipientInfos = SET_OF(RecipientInfo); // EncryptedContentInfo
+  crls: OPTIONAL(CTX(1, IMPLICIT(RevocationInfoChoices))),
+})
+
+const RecipientInfos = SET_OF(RecipientInfo)
 
+// EncryptedContentInfo
 const EncryptedContentInfo = SEQUENCE({
   contentType: ContentType,
   contentEncryptionAlgorithm: ContentEncryptionAlgorithmIdentifier,
-  encryptedContent: OPTIONAL(CTX(0, IMPLICIT(EncryptedContent)))
-});
+  encryptedContent: OPTIONAL(CTX(0, IMPLICIT(EncryptedContent))),
+})
+
 /**
  * The enveloped-data content type consists of an encrypted content of
  * any type and encrypted content-encryption keys for one or more
@@ -4002,14 +3859,14 @@ const EncryptedContentInfo = SEQUENCE({
  * @property {GostASN1.Sequence} encryptedContentInfo The content is represented in the type EncryptedContentInfo
  * @property {Attributes} unprotectedAttrs The unprotected attributes
  */
-
 const EnvelopedData = SEQUENCE({
   version: CMSVersion,
   originatorInfo: OPTIONAL(CTX(0, IMPLICIT(OriginatorInfo))),
   recipientInfos: RecipientInfos,
   encryptedContentInfo: EncryptedContentInfo,
-  unprotectedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnprotectedAttributes)))
-});
+  unprotectedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnprotectedAttributes))),
+})
+
 /**
  * The digested-data content type consists of content of any type and a
  * message digest of the content.<br><br>
@@ -4034,13 +3891,13 @@ const EnvelopedData = SEQUENCE({
  * @property {GostASN1.Sequence} encapContentInfo The content is represented in the type EncapsulatedContentInfo
  * @property {CryptoOperationData} digest The degist
  */
-
 const DigestedData = SEQUENCE({
   version: CMSVersion,
   digestAlgorithm: DigestAlgorithmIdentifier,
   encapContentInfo: EncapsulatedContentInfo,
-  digest: Digest
-});
+  digest: Digest,
+})
+
 /**
  * The encrypted-data content type consists of encrypted content of any
  * type.  Unlike the enveloped-data content type, the encrypted-data
@@ -4071,12 +3928,12 @@ const DigestedData = SEQUENCE({
  * @property {GostASN1.Sequence} encryptedContentInfo The content is represented in the type EncryptedContentInfo
  * @property {Attributes} unprotectedAttrs The unprotected attributes
  */
-
 const EncryptedData = SEQUENCE({
   version: CMSVersion,
   encryptedContentInfo: EncryptedContentInfo,
-  unprotectedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnprotectedAttributes)))
-});
+  unprotectedAttrs: OPTIONAL(CTX(1, IMPLICIT(UnprotectedAttributes))),
+})
+
 /**
  * The authenticated-data content type consists of content of any type,
  * a message authentication code (MAC), and encrypted authentication
@@ -4117,7 +3974,6 @@ const EncryptedData = SEQUENCE({
  * @property {CryptoOpertionData} mac The Message Authentication Code
  * @property {Attributes} unauthAttrs The unautheniticated attributes
  */
-
 const AuthenticatedData = SEQUENCE({
   version: CMSVersion,
   originatorInfo: OPTIONAL(CTX(0, IMPLICIT(OriginatorInfo))),
@@ -4127,9 +3983,10 @@ const AuthenticatedData = SEQUENCE({
   encapContentInfo: EncapsulatedContentInfo,
   authAttrs: OPTIONAL(CTX(2, IMPLICIT(AuthAttributes))),
   mac: MessageAuthenticationCode,
-  unauthAttrs: OPTIONAL(CTX(3, IMPLICIT(UnauthAttributes)))
-}); // AuthEnvelopedData RFC 5911
+  unauthAttrs: OPTIONAL(CTX(3, IMPLICIT(UnauthAttributes))),
+})
 
+// AuthEnvelopedData RFC 5911
 const AuthEnvelopedData = SEQUENCE({
   version: CMSVersion,
   originatorInfo: OPTIONAL(CTX(0, IMPLICIT(OriginatorInfo))),
@@ -4137,16 +3994,19 @@ const AuthEnvelopedData = SEQUENCE({
   authEncryptedContentInfo: EncryptedContentInfo,
   authAttrs: OPTIONAL(CTX(1, IMPLICIT(AuthAttributes))),
   mac: MessageAuthenticationCode,
-  unauthAttrs: OPTIONAL(CTX(2, IMPLICIT(UnauthAttributes)))
-}); // EncryptedKeyPackage rfc6032
+  unauthAttrs: OPTIONAL(CTX(2, IMPLICIT(UnauthAttributes))),
+})
 
+// EncryptedKeyPackage rfc6032
 const EncryptedKeyPackage = CHOICE({
   encrypted: EncryptedData,
   enveloped: CTX(0, IMPLICIT(EnvelopedData)),
-  authEnveloped: CTX(1, IMPLICIT(AuthEnvelopedData))
+  authEnveloped: CTX(1, IMPLICIT(AuthEnvelopedData)),
 }, function (value) {
-  return value.encryptedContentInfo ? value.recipientInfos ? 'enveloped' : 'encrypted' : 'authEnveloped';
-});
+  return value.encryptedContentInfo ? (value.recipientInfos ?
+    'enveloped' : 'encrypted') : 'authEnveloped'
+})
+
 /**
  * Cryptographic Message Syntax<br>
  * The CMS associates a content type identifier with a content. The syntax
@@ -4179,13 +4039,13 @@ const EncryptedKeyPackage = CHOICE({
  * @property {string} contentType The content type identifier
  * @property {(GostASN1.Sequence|CryptoOperationData)} content The content
  */
+var ContentType = OBJECT_IDENTIFIER
 
-var ContentType = OBJECT_IDENTIFIER;
 const ContentInfo = ATTRIBUTE({
   contentType: ContentType,
   content: function (type) {
-    return CTX(0, EXPLICIT(type));
-  }
+    return CTX(0, EXPLICIT(type))
+  },
 }, 'contentType', 'content', undefined, 'CMS')({
   data: OCTET_STRING,
   signedData: COMBINE(SignedData),
@@ -4194,78 +4054,89 @@ const ContentInfo = ATTRIBUTE({
   encryptedData: COMBINE(EncryptedData),
   authData: COMBINE(AuthenticatedData),
   encryptedKeyPkg: COMBINE(EncryptedKeyPackage),
-  aKeyPackage: COMBINE(AsymmetricKeyPackage)
-});
+  aKeyPackage: COMBINE(AsymmetricKeyPackage),
+})
+
 const DigestInfo = SEQUENCE({
   digestAlgorithm: DigestAlgorithmIdentifier,
-  digest: Digest
-}); // </editor-fold>
+  digest: Digest,
+})
+// </editor-fold>
 
 /*
  * PFX format syntax PKCS#12
  *
  * http://tools.ietf.org/html/rfc7292
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
 const PKCS12Attributes = Attributes({
   friendlyName: SET_OF_SINGLE(BMPString),
   keyProviderNameAttr: SET_OF_SINGLE(BMPString),
   localKeyId: SET_OF_SINGLE(OCTET_STRING),
-  certKeyIdentifierPropId: SET_OF_SINGLE(OCTET_STRING)
-});
-const SafeBagType = OBJECT_IDENTIFIER;
-const CertType = OBJECT_IDENTIFIER;
-const CRLType = OBJECT_IDENTIFIER;
-const SecretType = OBJECT_IDENTIFIER;
-const KeyBag = PrivateKeyInfo;
-const PKCS8ShroudedKeyBag = EncryptedPrivateKeyInfo;
+  certKeyIdentifierPropId: SET_OF_SINGLE(OCTET_STRING),
+})
+
+const SafeBagType = OBJECT_IDENTIFIER
+
+const CertType = OBJECT_IDENTIFIER
+
+const CRLType = OBJECT_IDENTIFIER
+
+const SecretType = OBJECT_IDENTIFIER
+
+const KeyBag = PrivateKeyInfo
+
+const PKCS8ShroudedKeyBag = EncryptedPrivateKeyInfo
+
 const CertBag = ATTRIBUTE({
   certId: CertType,
   certValue: function (type) {
-    return CTX(0, EXPLICIT(type));
-  }
+    return CTX(0, EXPLICIT(type))
+  },
 }, 'certId', 'certValue')({
   // DER-encoded X.509 certificate stored in OCTET STRING
   x509Certificate: OCTET_STRING(ENCAPSULATES(Certificate)),
   // Base64-encoded SDSI certificate stored in IA5String
-  sdsiCertificate: IA5String
-}, OCTET_STRING);
+  sdsiCertificate: IA5String,
+}, OCTET_STRING)
+
 const CRLBag = ATTRIBUTE({
   crlId: CRLType,
   crlValue: function (type) {
-    return CTX(0, EXPLICIT(type));
-  }
+    return CTX(0, EXPLICIT(type))
+  },
 }, 'crlId', 'crlValue')({
   // DER-encoded X.509 certificate stored in OCTET STRING
-  x509CRL: OCTET_STRING(ENCAPSULATES(CertificateList))
-}, OCTET_STRING);
+  x509CRL: OCTET_STRING(ENCAPSULATES(CertificateList)),
+}, OCTET_STRING)
+
 const SecretBag = ATTRIBUTE({
   secretTypeId: SecretType,
   secretValue: function (type) {
-    return CTX(0, EXPLICIT(type));
-  }
+    return CTX(0, EXPLICIT(type))
+  },
 }, 'secretTypeId', 'secretValue')({
-  secret: OCTET_STRING
-}, OCTET_STRING);
+  secret: OCTET_STRING,
+}, OCTET_STRING)
+
 const SafeBag = ATTRIBUTE({
   bagId: SafeBagType,
   bagValue: function (type) {
-    return CTX(0, EXPLICIT(type));
+    return CTX(0, EXPLICIT(type))
   },
-  bagAttributes: OPTIONAL(PKCS12Attributes)
+  bagAttributes: OPTIONAL(PKCS12Attributes),
 }, 'bagId', 'bagValue')(function (type) {
-  return {
+  return ({
     keyBag: KeyBag,
     pkcs8ShroudedKeyBag: PKCS8ShroudedKeyBag,
     certBag: CertBag,
     crlBag: CRLBag,
     secretBag: SecretBag,
-    safeContentsBag: SafeContents // recursion
+    safeContentsBag: SafeContents, // recursion
+  })[type]
+})
 
-  }[type];
-});
 /**
  * The SafeContents Type<br><br>
  *
@@ -4301,8 +4172,8 @@ const SafeBag = ATTRIBUTE({
  * RFC 7292 references {@link http://tools.ietf.org/html/rfc7292}
  * @class GostASN1.SafeContents
  */
+var SafeContents = SEQUENCE_OF(SafeBag)
 
-var SafeContents = SEQUENCE_OF(SafeBag);
 /**
  * The AuthenticatedSafe<br><br>
  * Each compliant platform shall be able to import and export
@@ -4328,14 +4199,15 @@ var SafeContents = SEQUENCE_OF(SafeBag);
  *
  * @class GostASN1.AuthenticatedSafe
  */
+const AuthenticatedSafe = SEQUENCE_OF(ContentInfo)
 
-const AuthenticatedSafe = SEQUENCE_OF(ContentInfo);
 const MacData = SEQUENCE({
   mac: DigestInfo,
   macSalt: OCTET_STRING,
   // Note: The default is for historical reasons and its use is deprecated.
-  iterations: DEFAULT(INTEGER, 1)
-});
+  iterations: DEFAULT(INTEGER, 1),
+})
+
 /**
  * PFX format syntax<br><br>
  *
@@ -4385,29 +4257,32 @@ const MacData = SEQUENCE({
  * @property {number} version Encoded version number
  * @property {GostASN1.ContentInfo} authSafe ContentInfo with {@link GostASN1.AuthenticatedSafe} content
  */
-
 const PFX = SEQUENCE({
   version: INTEGER,
   authSafe: ContentInfo,
-  macData: OPTIONAL(MacData)
-}, 'PFX'); // </editor-fold>
+  macData: OPTIONAL(MacData),
+}, 'PFX')
+// </editor-fold>
 
 /*
  * Certificate Request Message Format
  *
  * http://tools.ietf.org/html/rfc4211
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
+const RegToken = UTF8String
+
+const Authenticator = UTF8String
 
-const RegToken = UTF8String;
-const Authenticator = UTF8String;
 const CertId = SEQUENCE({
   issuer: GeneralName,
-  serialNumber: INTEGER
-});
-const OldCertId = CertId;
-const ProtocolEncrKey = SubjectPublicKeyInfo;
+  serialNumber: INTEGER,
+})
+const OldCertId = CertId
+
+const ProtocolEncrKey = SubjectPublicKeyInfo
+
 const EncryptedValue = SEQUENCE({
   // the intended algorithm for which the value will be used
   intendedAlg: OPTIONAL(CTX(0, IMPLICIT(AlgorithmIdentifier))),
@@ -4422,18 +4297,19 @@ const EncryptedValue = SEQUENCE({
   // (may be meaningful only to the sending entity, and used only
   // if EncryptedValue might be re-examined by the sending entity
   // in the future)
-  encValue: BIT_STRING
-});
-const KeyGenParameters = OCTET_STRING; // The encrypted private key MUST be placed in the envelopedData
-// encryptedContentInfo encryptedContent OCTET STRING.
+  encValue: BIT_STRING,
+})
+const KeyGenParameters = OCTET_STRING
 
+// The encrypted private key MUST be placed in the envelopedData
+// encryptedContentInfo encryptedContent OCTET STRING.
 var EncryptedKey = CHOICE({
-  encryptedValue: EncryptedValue,
-  // Deprecated
-  envelopedData: CTX(0, IMPLICIT(EnvelopedData))
+  encryptedValue: EncryptedValue, // Deprecated
+  envelopedData: CTX(0, IMPLICIT(EnvelopedData)),
 }, function (value) {
-  return value.encryptedContentInfo ? 'envelopedData' : 'encryptedValue';
-});
+  return value.encryptedContentInfo ? 'envelopedData' : 'encryptedValue'
+})
+
 const PKIArchiveOptions = CHOICE({
   // the actual value of the private key
   encryptedPrivKey: CTX(0, EncryptedKey),
@@ -4442,27 +4318,30 @@ const PKIArchiveOptions = CHOICE({
   // set to TRUE if sender wishes receiver to archive the private
   // key of a key pair that the receiver generates in response to
   // this request; set to FALSE if no archival is desired.
-  archiveRemGenPrivKey: CTX(2, IMPLICIT(BOOLEAN))
-});
+  archiveRemGenPrivKey: CTX(2, IMPLICIT(BOOLEAN)),
+})
+
 const SinglePubInfo = SEQUENCE({
   pubMethod: INTEGER({
     dontCare: 0,
     x500: 1,
     web: 2,
-    ldap: 3
+    ldap: 3,
   }),
-  pubLocation: OPTIONAL(GeneralName)
-}); // pubInfos MUST NOT be present if action is "dontPublish"
+  pubLocation: OPTIONAL(GeneralName),
+})
+
+// pubInfos MUST NOT be present if action is "dontPublish"
 // (if action is "pleasePublish" and pubInfos is omitted,
 // "dontCare" is assumed)
-
 const PKIPublicationInfo = SEQUENCE({
   action: INTEGER({
     dontPublish: 0,
-    pleasePublish: 1
+    pleasePublish: 1,
   }),
-  pubInfos: OPTIONAL(SEQUENCE_OF(SinglePubInfo))
-});
+  pubInfos: OPTIONAL(SEQUENCE_OF(SinglePubInfo)),
+})
+
 const SubsequentMessage = INTEGER({
   // requests that resulting certificate be encrypted for the
   // end entity (following which, POP will be proven in a
@@ -4470,20 +4349,20 @@ const SubsequentMessage = INTEGER({
   encrCert: 0,
   // requests that CA engage in challenge-response exchange with
   // end entity in order to prove private key possession
-  challengeResp: 1
-});
+  challengeResp: 1,
+})
+
 const POPOPrivKey = CHOICE({
   // possession is proven in this message (which contains the private
   // key itself (encrypted for the CA))
-  thisMessage: CTX(0, IMPLICIT(BIT_STRING)),
-  // Deprecated
+  thisMessage: CTX(0, IMPLICIT(BIT_STRING)), // Deprecated
   subsequentMessage: CTX(1, IMPLICIT(SubsequentMessage)),
   // possession will be proven in a subsequent message
-  dhMAC: CTX(2, IMPLICIT(BIT_STRING)),
-  // Deprecated
+  dhMAC: CTX(2, IMPLICIT(BIT_STRING)), // Deprecated
   agreeMAC: CTX(3, IMPLICIT(PKMACValue)),
-  encryptedKey: CTX(4, IMPLICIT(EnvelopedData))
-});
+  encryptedKey: CTX(4, IMPLICIT(EnvelopedData)),
+})
+
 const PBMParameter = SEQUENCE({
   salt: OCTET_STRING,
   // AlgId for a One-Way Function (SHA-1 recommended)
@@ -4491,54 +4370,58 @@ const PBMParameter = SEQUENCE({
   // number of times the OWF is applied
   iterationCount: INTEGER,
   // the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11], or HMAC [HMAC, RFC2202])
-  mac: AlgorithmIdentifier
-});
+  mac: AlgorithmIdentifier,
+})
+
 var PKMACValue = SEQUENCE({
   // algorithm value shall be PasswordBasedMac {1 2 840 113533 7 66 13}
   // parameter value is PBMParameter
   algId: AlgorithmIdentifier,
-  value: BIT_STRING
-});
+  value: BIT_STRING,
+})
+
 const POPOSigningKeyInput = SEQUENCE({
   authInfo: CHOICE({
     // used only if an authenticated identity has been
     // established for the sender (e.g., a DN from a
     // previously-issued and currently-valid certificate)
-    sender: CTX(0, EXPLICIT(GeneralName)),
-    // GeneralName choice - explicit
+    sender: CTX(0, EXPLICIT(GeneralName)), // GeneralName choice - explicit
     // used if no authenticated GeneralName currently exists for
     // the sender; publicKeyMAC contains a password-based MAC
     // on the DER-encoded value of publicKey
-    publicKeyMAC: PKMACValue
+    publicKeyMAC: PKMACValue,
   }),
-  publicKey: SubjectPublicKeyInfo
-}); // from CertTemplate
+  publicKey: SubjectPublicKeyInfo,
+}) // from CertTemplate
 
 const POPOSigningKey = SEQUENCE({
   poposkInput: OPTIONAL(CTX(0, POPOSigningKeyInput)),
   algorithmIdentifier: AlgorithmIdentifier,
-  signature: BIT_STRING
-});
+  signature: BIT_STRING,
+})
+
 const ProofOfPossession = CHOICE({
   // used if the RA has already verified that the requester is in
   // possession of the private key
   raVerified: CTX(0, IMPLICIT(NULL)),
   signature: CTX(1, IMPLICIT(POPOSigningKey)),
   keyEncipherment: CTX(2, IMPLICIT(POPOPrivKey)),
-  keyAgreement: CTX(3, IMPLICIT(POPOPrivKey))
-});
+  keyAgreement: CTX(3, IMPLICIT(POPOPrivKey)),
+})
+
 const Controls = SEQUENCE_OF(AttributeTypeAndValue({
   regToken: RegToken,
   authenticator: Authenticator,
   pkiPublicationInfo: PKIPublicationInfo,
   pkiArchiveOptions: PKIArchiveOptions,
   oldCertID: OldCertId,
-  protocolEncrKey: ProtocolEncrKey
-}));
+  protocolEncrKey: ProtocolEncrKey,
+}))
+
 const OptionalValidity = SEQUENCE({
   notBefore: OPTIONAL(CTX(0, IMPLICIT(Time))),
-  notAfter: OPTIONAL(CTX(1, IMPLICIT(Time)))
-}); // at least one MUST be present
+  notAfter: OPTIONAL(CTX(1, IMPLICIT(Time))),
+}) // at least one MUST be present
 
 const CertTemplate = SEQUENCE({
   version: OPTIONAL(CTX(0, IMPLICIT(Version))),
@@ -4550,27 +4433,30 @@ const CertTemplate = SEQUENCE({
   publicKey: OPTIONAL(CTX(6, IMPLICIT(SubjectPublicKeyInfo))),
   issuerUID: OPTIONAL(CTX(7, IMPLICIT(UniqueIdentifier))),
   subjectUID: OPTIONAL(CTX(8, IMPLICIT(UniqueIdentifier))),
-  extensions: OPTIONAL(CTX(9, IMPLICIT(Extensions)))
-});
+  extensions: OPTIONAL(CTX(9, IMPLICIT(Extensions))),
+})
+
 const CertRequest = SEQUENCE({
-  certReqId: INTEGER,
-  // ID for matching request and reply
-  certTemplate: CertTemplate,
-  // Selected fields of cert to be issued
-  controls: OPTIONAL(Controls)
-}); // Attributes affecting issuance
+  certReqId: INTEGER, // ID for matching request and reply
+  certTemplate: CertTemplate, // Selected fields of cert to be issued
+  controls: OPTIONAL(Controls),
+}) // Attributes affecting issuance
+
+const UTF8Pairs = UTF8String
+
+const CertReq = CertRequest
 
-const UTF8Pairs = UTF8String;
-const CertReq = CertRequest;
 const EncKeyWithID = SEQUENCE({
   privateKey: PrivateKeyInfo,
   identifier: OPTIONAL(CHOICE({
     string: UTF8String,
-    generalName: GeneralName
+    generalName: GeneralName,
   }, function (value) {
-    return typeof value === 'string' || value instanceof String ? 'string' : 'generalName';
-  }))
-});
+    return typeof value === 'string' || value instanceof String ?
+      'string' : 'generalName'
+  })),
+})
+
 const CertReqMsg = SEQUENCE({
   certReq: CertRequest,
   popo: OPTIONAL(ProofOfPossession),
@@ -4578,23 +4464,26 @@ const CertReqMsg = SEQUENCE({
   regInfo: OPTIONAL(SEQUENCE_OF(AttributeTypeAndValue({
     utf8Pairs: UTF8Pairs,
     certReq: CertReq,
-    encKeyWithID: EncKeyWithID
-  })))
-});
-const CertReqMessages = SEQUENCE_OF(CertReqMsg); // </editor-fold>
+    encKeyWithID: EncKeyWithID,
+  }))),
+})
+
+const CertReqMessages = SEQUENCE_OF(CertReqMsg)
+
+// </editor-fold>
 
 /*
  * Certificate Management over CMS
  *
  * http://tools.ietf.org/html/rfc5272
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
 const PendInfo = SEQUENCE({
   pendToken: OCTET_STRING,
-  pendTime: GeneralizedTime
-});
+  pendTime: GeneralizedTime,
+})
+
 const CMCStatus = INTEGER({
   success: 0,
   failed: 2,
@@ -4602,8 +4491,9 @@ const CMCStatus = INTEGER({
   noSupport: 4,
   confirmRequired: 5,
   popRequired: 6,
-  partial: 7
-});
+  partial: 7,
+})
+
 const CMCFailInfo = INTEGER({
   badAlg: 0,
   badMessageCheck: 1,
@@ -4618,54 +4508,64 @@ const CMCFailInfo = INTEGER({
   noKeyReuse: 10,
   internalCAError: 11,
   tryLater: 12,
-  authDataFail: 13
-});
+  authDataFail: 13,
+})
+
 const CMCStatusInfo = SEQUENCE({
   cMCStatus: CMCStatus,
   bodyList: SEQUENCE_OF(BodyPartID),
   statusString: OPTIONAL(UTF8String),
   otherInfo: OPTIONAL(CHOICE({
     failInfo: CMCFailInfo,
-    pendInfo: PendInfo
-  }))
-});
+    pendInfo: PendInfo,
+  })),
+})
+
 const AddExtensions = SEQUENCE({
   pkiDataReference: BodyPartID,
   certReferences: SEQUENCE_OF(BodyPartID),
-  extensions: SEQUENCE_OF(Extension)
-});
+  extensions: SEQUENCE_OF(Extension),
+})
+
 const LraPopWitness = SEQUENCE({
   pkiDataBodyid: BodyPartID,
-  bodyIds: SEQUENCE_OF(BodyPartID)
-});
+  bodyIds: SEQUENCE_OF(BodyPartID),
+})
+
 const GetCert = SEQUENCE({
   issuerName: GeneralName,
-  serialNumber: INTEGER
-});
+  serialNumber: INTEGER,
+})
+
 const GetCRL = SEQUENCE({
   issuerName: Name,
   cRLName: OPTIONAL(GeneralName),
   time: OPTIONAL(GeneralizedTime),
-  reasons: OPTIONAL(ReasonFlags)
-});
+  reasons: OPTIONAL(ReasonFlags),
+})
+
 const RevokeRequest = SEQUENCE({
   issuerName: Name,
   serialNumber: INTEGER,
   reason: CRLReason,
   invalidityDate: OPTIONAL(GeneralizedTime),
   passphrase: OPTIONAL(OCTET_STRING),
-  comment: OPTIONAL(UTF8String)
-});
+  comment: OPTIONAL(UTF8String),
+})
+
 const DecryptedPOP = SEQUENCE({
   bodyPartID: BodyPartID,
   thePOPAlgID: AlgorithmIdentifier,
-  thePOP: OCTET_STRING
-});
-const CMCCertId = IssuerAndSerialNumber;
+  thePOP: OCTET_STRING,
+})
+
+const CMCCertId = IssuerAndSerialNumber
+
 const BodyPartReference = CHOICE({
   bodyPartID: BodyPartID,
-  bodyPartPath: BodyPartPath
-});
+  bodyPartPath: BodyPartPath,
+})
+
 const CMCStatusInfoV2 = SEQUENCE({
   cMCStatus: CMCStatus,
   bodyList: SEQUENCE_OF(BodyPartReference),
@@ -4675,54 +4575,65 @@ const CMCStatusInfoV2 = SEQUENCE({
     pendInfo: PendInfo,
     extendedFailInfo: SEQUENCE({
       failInfoOID: OBJECT_IDENTIFIER,
-      failInfoValue: AttributeValue
-    })
-  }))
-});
+      failInfoValue: AttributeValue,
+    }),
+  })),
+})
+
 const PublishTrustAnchors = SEQUENCE({
   seqNumber: INTEGER,
   hashAlgorithm: AlgorithmIdentifier,
-  anchorHashes: SEQUENCE_OF(OCTET_STRING)
-});
-const AuthPublish = BodyPartID;
-const BodyPartList = SEQUENCE_OF(BodyPartID);
+  anchorHashes: SEQUENCE_OF(OCTET_STRING),
+})
+
+const AuthPublish = BodyPartID
+
+const BodyPartList = SEQUENCE_OF(BodyPartID)
+
 const CMCPublicationInfo = SEQUENCE({
   hashAlg: AlgorithmIdentifier,
   certHashes: SEQUENCE_OF(OCTET_STRING),
-  pubInfo: PKIPublicationInfo
-});
+  pubInfo: PKIPublicationInfo,
+})
+
 const ModCertTemplate = SEQUENCE({
   pkiDataReference: BodyPartPath,
   certReferences: BodyPartList,
   replace: DEFAULT(BOOLEAN, true),
-  certTemplate: CertTemplate
-});
+  certTemplate: CertTemplate,
+})
+
 const ControlsProcessed = SEQUENCE({
-  bodyList: SEQUENCE_OF(BodyPartReference)
-});
+  bodyList: SEQUENCE_OF(BodyPartReference),
+})
+
 const IdentifyProofV2 = SEQUENCE({
   proofAlgID: AlgorithmIdentifier,
   macAlgId: AlgorithmIdentifier,
-  witness: OCTET_STRING
-});
+  witness: OCTET_STRING,
+})
+
 const PopLinkWitnessV2 = SEQUENCE({
   keyGenAlgorithm: AlgorithmIdentifier,
   macAlgorithm: AlgorithmIdentifier,
-  witness: OCTET_STRING
-});
+  witness: OCTET_STRING,
+})
+
 const TaggedCertificationRequest = SEQUENCE({
   bodyPartID: BodyPartID,
-  certificationRequest: CertificationRequest
-});
+  certificationRequest: CertificationRequest,
+})
+
 const TaggedContentInfo = SEQUENCE({
   bodyPartID: BodyPartID,
-  contentInfo: ContentInfo
-});
+  contentInfo: ContentInfo,
+})
+
 const OtherMsg = SEQUENCE({
   bodyPartID: BodyPartID,
   otherMsgType: OBJECT_IDENTIFIER,
-  otherMsgValue: ANY
-}); //DEFINED BY otherMsgType
+  otherMsgValue: ANY,
+}) //DEFINED BY otherMsgType
 
 const TaggedRequest = CHOICE({
   tcr: CTX(0, IMPLICIT(TaggedCertificationRequest)),
@@ -4730,23 +4641,24 @@ const TaggedRequest = CHOICE({
   orm: CTX(2, IMPLICIT(SEQUENCE({
     bodyPartID: BodyPartID,
     requestMessageType: OBJECT_IDENTIFIER,
-    requestMessageValue: ANY
-  })))
-}); // DEFINED BY requestMessageType
+    requestMessageValue: ANY,
+  }))),
+}) // DEFINED BY requestMessageType
 
 const EncryptedPOP = SEQUENCE({
   request: TaggedRequest,
   cms: ContentInfo,
   thePOPAlgID: AlgorithmIdentifier,
   witnessAlgID: AlgorithmIdentifier,
-  witness: OCTET_STRING
-});
+  witness: OCTET_STRING,
+})
+
 const TaggedAttribute = ATTRIBUTE({
   bodyPartID: BodyPartID,
   attrType: OBJECT_IDENTIFIER,
   attrValues: function (type) {
-    return SET_OF(type);
-  }
+    return SET_OF(type)
+  },
 }, 'attrType', 'attrValues', AttributeValue)({
   statusInfo: CMCStatusInfo,
   identification: UTF8String,
@@ -4777,8 +4689,8 @@ const TaggedAttribute = ATTRIBUTE({
   modCertTemplate: ModCertTemplate,
   controlProcessed: ControlsProcessed,
   popLinkWitnessV2: PopLinkWitnessV2,
-  identityProofV2: IdentifyProofV2
-});
+  identityProofV2: IdentifyProofV2,
+})
 /**
  * PKIData Content Type<br><br>
  *
@@ -4810,13 +4722,13 @@ const TaggedAttribute = ATTRIBUTE({
  * @property {GostASN1.ContentInfo[]} cmsSequence
  * @property {GostASN1.Sequence[]} otherMsgSequence
  */
-
 const PKIData = SEQUENCE({
   controlSequence: SEQUENCE_OF(TaggedAttribute),
   reqSequence: SEQUENCE_OF(TaggedRequest),
   cmsSequence: SEQUENCE_OF(TaggedContentInfo),
-  otherMsgSequence: SEQUENCE_OF(OtherMsg)
-}, 'PKI REQUEST');
+  otherMsgSequence: SEQUENCE_OF(OtherMsg),
+}, 'PKI REQUEST')
+
 /**
  * PKIResponse Content Type<br><br>
  *
@@ -4850,20 +4762,21 @@ const PKIData = SEQUENCE({
  * @property {GostASN1.ContentInfo[]} cmsSequence
  * @property {GostASN1.Sequence[]} otherMsgSequence
  */
-
 const PKIResponse = SEQUENCE({
   controlSequence: SEQUENCE_OF(TaggedAttribute),
   cmsSequence: SEQUENCE_OF(TaggedContentInfo),
-  otherMsgSequence: SEQUENCE_OF(OtherMsg)
-}, 'PKI RESPONSE'); // </editor-fold>
+  otherMsgSequence: SEQUENCE_OF(OtherMsg),
+}, 'PKI RESPONSE')
+
+// </editor-fold>
 
 /**
  * ASN.1 syntax definitions
  *
  * @class GostASN1
  */
-
-function GostASN1() {}
+function GostASN1() {
+}
 
 GostASN1.prototype = {
   /**
@@ -4874,7 +4787,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostPrivateKeyInfo
      */
   GostPrivateKeyInfo: GostPrivateKeyInfo,
-
   /**
      * Gost subject PublicKey info encoder
      *
@@ -4883,7 +4795,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostSubjectPublicKeyInfo
      */
   GostSubjectPublicKeyInfo: GostSubjectPublicKeyInfo,
-
   /**
      * CryptoPro key container header
      *
@@ -4892,7 +4803,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostKeyContainer
      */
   GostKeyContainer: GostKeyContainer,
-
   /**
      * CryptoPro key container name
      *
@@ -4901,7 +4811,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostKeyContainerName
      */
   GostKeyContainerName: GostKeyContainerName,
-
   /**
      * CryptoPro encrypted PrivateKey for key containers
      *
@@ -4910,7 +4819,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostPrivateKeys
      */
   GostPrivateKeys: GostPrivateKeys,
-
   /**
      * CryptoPro PrivateKey masks for key containers
      *
@@ -4919,7 +4827,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostPrivateMasks
      */
   GostPrivateMasks: GostPrivateMasks,
-
   /**
      * ViPNet key container
      *
@@ -4928,7 +4835,6 @@ GostASN1.prototype = {
      * @type GostASN1.ViPNetInfo
      */
   ViPNetInfo: ViPNetInfo,
-
   /**
      * Gost Signature encoders
      *
@@ -4937,7 +4843,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostSignature
      */
   GostSignature: GostSignature,
-
   /**
      * Gost Encrypted key encoder for CMS
      *
@@ -4946,7 +4851,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostEncryptedKey
      */
   GostEncryptedKey: GostEncryptedKey,
-
   /**
      * SignalCom wrapped PrivateKey
      *
@@ -4955,7 +4859,6 @@ GostASN1.prototype = {
      * @type GostASN1.GostWrappedPrivateKey
      */
   GostWrappedPrivateKey: GostWrappedPrivateKey,
-
   /**
      * PKCS#8 PrivateKey info
      *
@@ -4964,7 +4867,6 @@ GostASN1.prototype = {
      * @type GostASN1.PrivateKeyInfo
      */
   PrivateKeyInfo: PrivateKeyInfo,
-
   /**
      * PKCS#8 encrypted PrivateKey info
      *
@@ -4973,7 +4875,6 @@ GostASN1.prototype = {
      * @type GostASN1.EncryptedPrivateKeyInfo
      */
   EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo,
-
   /**
      * X.509 subject PublicKey info
      *
@@ -4982,7 +4883,6 @@ GostASN1.prototype = {
      * @type GostASN1.SubjectPublicKeyInfo
      */
   SubjectPublicKeyInfo: SubjectPublicKeyInfo,
-
   /**
      * X.509 To be signed Certificate
      *
@@ -4991,7 +4891,6 @@ GostASN1.prototype = {
      * @type GostASN1.TBSCertificate
      */
   TBSCertificate: TBSCertificate,
-
   /**
      * X.509 Certificate
      *
@@ -5000,7 +4899,6 @@ GostASN1.prototype = {
      * @type GostASN1.Certificate
      */
   Certificate: Certificate,
-
   /**
      * PKCS#10 Certification request definition
      *
@@ -5009,7 +4907,6 @@ GostASN1.prototype = {
      * @type GostASN1.CertificationRequestInfo
      */
   CertificationRequestInfo: CertificationRequestInfo,
-
   /**
      * PKCS#10 Certification request
      *
@@ -5018,7 +4915,6 @@ GostASN1.prototype = {
      * @type GostASN1.CertificationRequest
      */
   CertificationRequest: CertificationRequest,
-
   /**
      * X.509 To be signed CRL
      *
@@ -5027,7 +4923,6 @@ GostASN1.prototype = {
      * @type GostASN1.TBSCertList
      */
   TBSCertList: TBSCertList,
-
   /**
      * X.509 CRL
      *
@@ -5036,7 +4931,6 @@ GostASN1.prototype = {
      * @type GostASN1.CertificateList
      */
   CertificateList: CertificateList,
-
   /**
      * X.509 Attribute Certificate definition
      *
@@ -5045,7 +4939,6 @@ GostASN1.prototype = {
      * @type GostASN1.AttributeCertificateInfo
      */
   AttributeCertificateInfo: AttributeCertificateInfo,
-
   /**
      * X.509 Attribute Certificate
      *
@@ -5054,7 +4947,6 @@ GostASN1.prototype = {
      * @type GostASN1.AttributeCertificate
      */
   AttributeCertificate: AttributeCertificate,
-
   /**
      * CMS Signed Attributes
      *
@@ -5063,7 +4955,6 @@ GostASN1.prototype = {
      * @type GostASN1.SignedAttributes
      */
   SignedAttributes: SignedAttributes,
-
   /**
      * CMS Unsigned Attributes
      *
@@ -5072,7 +4963,6 @@ GostASN1.prototype = {
      * @type GostASN1.UnsignedAttributes
      */
   UnsignedAttributes: UnsignedAttributes,
-
   /**
      * CMS Content definition
      *
@@ -5081,7 +4971,6 @@ GostASN1.prototype = {
      * @type GostASN1.ContentInfo
      */
   ContentInfo: ContentInfo,
-
   /**
      * PKCS#12 Safe Contents
      *
@@ -5090,7 +4979,6 @@ GostASN1.prototype = {
      * @type GostASN1.SafeContents
      */
   SafeContents: SafeContents,
-
   /**
      * PKCS#12 Authenticated Safe
      *
@@ -5099,7 +4987,6 @@ GostASN1.prototype = {
      * @type GostASN1.AuthenticatedSafe
      */
   AuthenticatedSafe: AuthenticatedSafe,
-
   /**
      * PKCS#12 Personal Information Exchange (PFX)
      *
@@ -5108,7 +4995,6 @@ GostASN1.prototype = {
      * @type GostASN1.PFX
      */
   PFX: PFX,
-
   /**
      * PKI Request
      *
@@ -5117,7 +5003,6 @@ GostASN1.prototype = {
      * @type GostASN1.PKIData
      */
   PKIData: PKIData,
-
   /**
      * PKI Response
      *
@@ -5125,14 +5010,15 @@ GostASN1.prototype = {
      * @instance
      * @type GostASN1.PKIResponse
      */
-  PKIResponse: PKIResponse
-};
+  PKIResponse: PKIResponse,
+}
+
 /**
  * PKCS ASN.1 message syntax and converters
  *
  * @memberOf gostCrypto
  * @type GostASN1
  */
+gostCrypto.asn1 = new GostASN1()
 
-gostCrypto.asn1 = new GostASN1();
-module.exports = GostASN1;
\ No newline at end of file
+module.exports = GostASN1
diff --git a/node_modules/gost-crypto/lib/gostCMS.js b/node_modules/gost-crypto/lib/gostCMS.js
index df25de9..bd02f15 100644
--- a/node_modules/gost-crypto/lib/gostCMS.js
+++ b/node_modules/gost-crypto/lib/gostCMS.js
@@ -39,407 +39,314 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const gostCrypto = require('./gostCrypto');
 
-const GostASN1 = require('./gostASN1');
+const gostCrypto = require('./gostCrypto')
+const GostASN1 = require('./gostASN1')
+const GostCert = require('./gostCert')
 
-const GostCert = require('./gostCert');
 /*
  * Common algorithms
- */
-// <editor-fold defaultstate="collapsed">
-
-
-const Promise = global.Promise;
-const Object = global.Object;
-const CryptoOperationData = global.ArrayBuffer;
-const Date = global.Date;
-const subtle = gostCrypto.subtle;
-const asn1 = gostCrypto.asn1;
-const coding = gostCrypto.coding;
-const cert = gostCrypto.cert;
-const providers = gostCrypto.security.providers; // Expand javascript object
-
+ */ // <editor-fold defaultstate="collapsed">
+const Promise = global.Promise
+const Object = global.Object
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
+
+const subtle = gostCrypto.subtle
+const asn1 = gostCrypto.asn1
+const coding = gostCrypto.coding
+const cert = gostCrypto.cert
+const providers = gostCrypto.security.providers
+
+// Expand javascript object
 function expand() {
-  const r = {};
-
+  const r = {}
   for (let i = 0, n = arguments.length; i < n; i++) {
-    const item = arguments[i];
-
+    const item = arguments[i]
     if (typeof item === 'object') {
       for (const name in item) {
-        if (item.hasOwnProperty(name)) {
-          r[name] = item[name];
-        }
+        if (item.hasOwnProperty(name)) {r[name] = item[name]}
       }
     }
   }
-
-  return r;
+  return r
 }
 
 function defineProperty(object, name, descriptor, enumerable) {
-  if (typeof descriptor !== 'object') {
-    descriptor = {
-      value: descriptor
-    };
-  }
-
-  if (enumerable !== undefined) {
-    descriptor.enumerable = enumerable;
-  }
-
-  Object.defineProperty(object, name, descriptor);
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
 }
 
 function defineProperties(object, properties, enumerable) {
-  for (const name in properties) {
-    defineProperty(object, name, properties[name], enumerable);
-  }
-} // Extend javascript class
-
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
+}
 
+// Extend javascript class
 function extend(Super, Class, propertiesObject, propertiesClass) {
   // If constructor not defined
   if (typeof Class !== 'function') {
-    propertiesClass = propertiesObject;
-    propertiesObject = Class;
-
+    propertiesClass = propertiesObject
+    propertiesObject = Class
     Class = function () {
-      Super.apply(this, arguments);
-    };
-  } // Create prototype properties
-
-
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
   Class.prototype = Object.create(Super.prototype, {
     constructor: {
-      value: Class
+      value: Class,
     },
     superclass: {
-      value: Super.prototype
-    }
-  });
-
-  if (propertiesObject) {
-    defineProperties(Class.prototype, propertiesObject, true);
-  } // Inherites super class properties
-
-
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject, true)}
+  // Inherites super class properties
   if (Super !== Object) {
-    for (const name in Super) {
-      Class[name] = Super[name];
-    }
+    for (const name in Super) {Class[name] = Super[name]}
   }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
 
-  Class.super = Super;
-
-  if (propertiesClass) {
-    defineProperties(Class, propertiesClass, true);
-  }
-
-  return Class;
-} // Self resolver
-
-
+// Self resolver
 function call(callback) {
   try {
-    callback();
-  } catch (e) {}
-} // Check the buffers to equal
-
+    callback()
+  } catch (e) {
+  }
+}
 
+// Check the buffers to equal
 function equalBuffers(r1, r2) {
   const s1 = new Uint8Array(r1),
-        s2 = new Uint8Array(r2);
-
-  if (s1.length !== s2.length) {
-    return false;
-  }
-
+    s2 = new Uint8Array(r2)
+  if (s1.length !== s2.length) {return false}
   for (let i = 0, n = s1.length; i < n; i++) {
-    if (s1[i] !== s2[i]) {
-      return false;
-    }
+    if (s1[i] !== s2[i]) {return false}
   }
+  return true
+}
 
-  return true;
-} // True if equal numbers
-
-
-const equalNumbers = function () {
+// True if equal numbers
+const equalNumbers = (function () {
   // Convert number to bigendian hex string
   const hex = function (s) {
-    const t = typeof s;
-    return t === 'undefined' || s === '' ? '0' : t === 'number' || s instanceof Number ? s.toString(16).toLowerCase() : s.replace('0x', '').toLowerCase();
-  }; // Zero left padding
-
-
+    const t = typeof s
+    return t === 'undefined' || s === '' ? '0' :
+      t === 'number' || s instanceof Number ? s.toString(16).toLowerCase() :
+        s.replace('0x', '').toLowerCase()
+  }
+  // Zero left padding
   const lpad = function (s, size) {
-    return (new Array(size + 1).join('0') + s).slice(-size);
-  };
-
+    return (new Array(size + 1).join('0') + s).slice(-size)
+  }
   return function (s1, s2) {
-    s1 = hex(s1);
-    s2 = hex(s2);
-    const len = Math.max(s1.length, s2.length);
-    return lpad(s1, len) === lpad(s2, len);
-  };
-}(); // Check equal names
-
+    s1 = hex(s1)
+    s2 = hex(s2)
+    const len = Math.max(s1.length, s2.length)
+    return lpad(s1, len) === lpad(s2, len)
+  }
+})()
 
+// Check equal names
 function equalNames(name1, name2) {
   for (var key in name1) {
-    if (name1[key] !== name2[key]) {
-      return false;
-    }
+    if (name1[key] !== name2[key]) {return false}
   }
-
   for (var key in name2) {
-    if (name1[key] !== name2[key]) {
-      return false;
-    }
+    if (name1[key] !== name2[key]) {return false}
   }
+  return true
+}
 
-  return true;
-} // Add unique value to array
-
-
+// Add unique value to array
 function addUnique(array, item, comparator) {
-  let found = false;
-
+  let found = false
   for (let i = 0, n = array.length; i < n; i++) {
     if (comparator(array[i], item)) {
-      found = true;
-      break;
+      found = true
+      break
     }
   }
+  if (!found) {array.push(item)}
+}
 
-  if (!found) {
-    array.push(item);
-  }
-} // Set content data
-
-
+// Set content data
 function setContentData(object, data) {
-  const content = object.content;
-
+  const content = object.content
   switch (object.contentType) {
     case 'data':
-      object.content = data.content;
-      break;
-
+      object.content = data.content
+      break
     case 'digestedData':
     case 'signedData':
     case 'authData':
       content.encapContentInfo = {
         eContentType: data.contentType,
-        eContent: data.content
-      };
-      break;
-
+        eContent: data.content,
+      }
+      break
     case 'envelopedData':
     case 'encryptedData':
       content.encryptedContentInfo = {
         contentType: data.contentType,
-        encryptedContent: data.content
-      };
-      break;
+        encryptedContent: data.content,
+      }
+      break
   }
-} // Get content data
-
+}
 
+// Get content data
 function getContentData(object) {
-  const content = object.content;
-
+  const content = object.content
   switch (object.contentType) {
     case 'data':
       return {
         contentType: object.contentType,
-        content: object.content
-      };
-
+        content: object.content,
+      }
     case 'digestedData':
     case 'signedData':
     case 'authData':
-      var encap = content.encapContentInfo;
+      var encap = content.encapContentInfo
       return {
         contentType: encap.eContentType,
-        content: encap.eContent
-      };
-
+        content: encap.eContent,
+      }
     case 'envelopedData':
     case 'encryptedData':
-      var enc = content.encryptedContentInfo;
+      var enc = content.encryptedContentInfo
       return {
         contentType: enc.contentType,
-        content: enc.encryptedContent
-      };
+        content: enc.encryptedContent,
+      }
   }
-} // Check content info type
-
+}
 
+// Check content info type
 function checkContentInfo(contentInfo) {
-  let content, contentType;
-
+  let content, contentType
   if (contentInfo) {
     if (typeof contentInfo === 'string') {
       try {
-        contentInfo = coding.PEM.decode(contentInfo);
+        contentInfo = coding.PEM.decode(contentInfo)
       } catch (e1) {
-        contentInfo = coding.Chars.decode(contentInfo);
+        contentInfo = coding.Chars.decode(contentInfo)
       }
     }
-
     if (contentInfo instanceof CryptoOperationData) {
       try {
-        contentInfo = asn1.ContentInfo.decode(contentInfo);
+        contentInfo = asn1.ContentInfo.decode(contentInfo)
       } catch (e) {
-        contentInfo = {
-          contentType: 'data',
-          content: contentInfo
-        };
+        contentInfo = { contentType: 'data', content: contentInfo }
       }
     }
-
-    contentType = contentInfo.contentType;
-
-    if (!contentType) {
-      throw new Error('Invalid content object');
-    }
-
-    content = contentInfo.content;
-
-    if (!(content instanceof CryptoOperationData)) {
-      content = content.encode();
-    }
-
-    return {
-      contentType: contentType,
-      content: content
-    };
-  }
-
-  contentInfo = {
-    contentType: 'data'
-  };
-  return contentInfo;
+    contentType = contentInfo.contentType
+    if (!contentType) {throw new Error('Invalid content object')}
+    content = contentInfo.content
+    if (!(content instanceof CryptoOperationData)) {content = content.encode()}
+    return { contentType: contentType, content: content }
+  } contentInfo = { contentType: 'data' }
+  return contentInfo
 }
 
 function createContentInfo(contentInfo) {
   try {
     // Some provider has mistake to envelop ContentInfo enstead
     // content field of ContentInfo
-    contentInfo = new asn1.ContentInfo(contentInfo.content, true);
-  } catch (e) {} // Create situable content info object
-
-
+    contentInfo = new asn1.ContentInfo(contentInfo.content, true)
+  } catch (e) {
+  }
+  // Create situable content info object
   switch (contentInfo.contentType) {
     case 'data':
-      return new DataContentInfo(contentInfo);
-
+      return new DataContentInfo(contentInfo)
     case 'digestedData':
-      return new DigestedDataContentInfo(contentInfo);
-
+      return new DigestedDataContentInfo(contentInfo)
     case 'signedData':
-      return new SignedDataContentInfo(contentInfo);
-
+      return new SignedDataContentInfo(contentInfo)
     case 'encryptedData':
-      return new EncryptedDataContentInfo(contentInfo);
-
+      return new EncryptedDataContentInfo(contentInfo)
     case 'envelopedData':
-      return new EnvelopedDataContentInfo(contentInfo);
-
+      return new EnvelopedDataContentInfo(contentInfo)
     default:
-      return new asn1.ContentInfo(contentInfo);
+      return new asn1.ContentInfo(contentInfo)
   }
 }
 
-function matchCert(id, cert) {
-  return id instanceof CryptoOperationData ? cert.extensions && equalBuffers(id, cert.extensions.subjectKeyIdentifier) : equalNames(cert.issuer, id.issuer) && equalNumbers(cert.serialNumber, id.serialNumber);
-} // Get random values
 
+function matchCert(id, cert) {
+  return (id instanceof CryptoOperationData ? cert.extensions &&
+        equalBuffers(id, cert.extensions.subjectKeyIdentifier) :
+    equalNames(cert.issuer, id.issuer) &&
+        equalNumbers(cert.serialNumber, id.serialNumber))
+}
 
+// Get random values
 function getSeed(length) {
-  const seed = new Uint8Array(length);
-  gostCrypto.getRandomValues(seed);
-  return seed.buffer;
-} // Salt size
-
+  const seed = new Uint8Array(length)
+  gostCrypto.getRandomValues(seed)
+  return seed.buffer
+}
 
+// Salt size
 function saltSize(algorithm) {
   switch (algorithm.id) {
     case 'pbeWithSHAAnd40BitRC2-CBC':
     case 'pbeWithSHAAnd128BitRC2-CBC':
-      return 8;
-
+      return 8
     case 'pbeUnknownGost':
-      return 16;
-
+      return 16
     case 'sha1':
-      return 20;
-
+      return 20
     default:
-      return 32;
+      return 32
   }
-} // Password to bytes
-
+}
 
+// Password to bytes
 function passwordData(derivation, password) {
-  if (!password) {
-    return new CryptoOperationData(0);
-  }
-
-  if (password instanceof CryptoOperationData) {
-    return password;
-  }
-
-  if (typeof password !== 'string') {
-    throw new Error('The password must be string or raw data type');
-  }
-
+  if (!password) {return new CryptoOperationData(0)}
+  if (password instanceof CryptoOperationData) {return password}
+  if (typeof password !== 'string') {throw new Error('The password must be string or raw data type')}
   if (derivation.name.indexOf('CPKDF') >= 0) {
     // CryptoPro store password
-    const r = [];
-
+    const r = []
     for (let i = 0; i < password.length; i++) {
-      const c = password.charCodeAt(i);
-      r.push(c & 0xff);
-      r.push(c >>> 8 & 0xff);
-      r.push(0);
-      r.push(0);
+      const c = password.charCodeAt(i)
+      r.push(c & 0xff)
+      r.push(c >>> 8 & 0xff)
+      r.push(0)
+      r.push(0)
     }
+    return new Uint8Array(r).buffer
+  } if (derivation.name.indexOf('PFXKDF') >= 0)
+  // PKCS#12 unicode password
+  {return coding.Chars.decode(`${password }\0`, 'unicode')}
+  return coding.Chars.decode(password, 'utf8')
+}
 
-    return new Uint8Array(r).buffer;
-  }
-
-  if (derivation.name.indexOf('PFXKDF') >= 0) // PKCS#12 unicode password
-    {
-      return coding.Chars.decode(`${password}\0`, 'unicode');
-    }
-
-  return coding.Chars.decode(password, 'utf8');
-} // Define provider for encription algorithm
-
-
+// Define provider for encription algorithm
 function encryptionProvider(algorithm) {
-  const id = algorithm.id;
-
+  const id = algorithm.id
   for (const name in providers) {
-    const provider = providers[name];
-
-    if (provider.encryption.id === id) {
-      return provider;
-    }
+    const provider = providers[name]
+    if (provider.encryption.id === id) {return provider}
   }
-} // </editor-fold>
+}
+
+// </editor-fold>
 
 /**
  * Provides facilities for handling certificates, CRLs, etc.
  * @class GostCMS
  */
+function GostCMS() {
+}
 
-
-function GostCMS() {}
 /**
  * Message templates
  * <ul>
@@ -451,16 +358,14 @@ function GostCMS() {}
  * @memberOf GostCMS
  * @instance
  */
-
-
-const options = {
-  // <editor-fold defaultstate="collapsed">
+const options = { // <editor-fold defaultstate="collapsed">
   providerName: 'CP-01',
   autoAddCert: false,
-  useKeyIdentifier: false // </editor-fold>
+  useKeyIdentifier: false, // </editor-fold>
+}
+
+GostCMS.prototype.options = options
 
-};
-GostCMS.prototype.options = options;
 /**
  * The base class for all CMS objects.<br><br>
  *
@@ -471,19 +376,12 @@ GostCMS.prototype.options = options;
  * @param {string} defaultSet The default object initialization set.
  * @extends GostASN1.ContentInfo
  */
-
 function DataContentInfo(contentInfo, defaultSet) // <editor-fold defaultstate="collapsed">
 {
-  asn1.ContentInfo.call(this, contentInfo || defaultSet || {
-    contentType: 'data'
-  });
-
-  if (defaultSet && this.contentType !== (defaultSet.contentType || 'data')) {
-    throw new Error('Invalid content type');
-  }
+  asn1.ContentInfo.call(this, contentInfo || defaultSet || { contentType: 'data' })
+  if (defaultSet && this.contentType !== (defaultSet.contentType || 'data')) {throw new Error('Invalid content type')}
 } // </editor-fold>
 
-
 extend(asn1.ContentInfo, DataContentInfo, {
   /**
      * Indicates if this is a detached CMS object.
@@ -492,14 +390,11 @@ extend(asn1.ContentInfo, DataContentInfo, {
      * @instance
      * @returns {boolean} true if detached; false otherwise.
      */
-  isDetached: {
-    // <editor-fold defaultstate="collapsed">
+  isDetached: { // <editor-fold defaultstate="collapsed">
     value: false,
     enumerable: true,
-    writable: true // </editor-fold>
-
+    writable: true, // </editor-fold>
   },
-
   /**
      * Indicates if an external (detached) signature must be created.
      *
@@ -510,10 +405,8 @@ extend(asn1.ContentInfo, DataContentInfo, {
   writeDetached: function (createDetached) // <editor-fold defaultstate="collapsed">
   {
     // Define external signature mode
-    this.isDetached = createDetached;
-  },
-  // </editor-fold>
-
+    this.isDetached = createDetached
+  }, // </editor-fold>
   /**
      * Encode the message to binary format 'DER' or 'PEM'
      *
@@ -521,24 +414,17 @@ extend(asn1.ContentInfo, DataContentInfo, {
      * @instance
      * @param {string} format
      * @returns {FormatedData}
-     */
-  // <editor-fold defaultstate="collapsed">
+     */ // <editor-fold defaultstate="collapsed">
   encode: function (format) // <editor-fold defaultstate="collapsed">
   {
     if (this.isDetached) {
-      const data = getContentData(this);
-      setContentData(this, {
-        contentType: data.contentType
-      });
-      const result = asn1.ContentInfo.method('encode').call(this, format);
-      setContentData(this, data);
-      return result;
-    }
-
-    return asn1.ContentInfo.method('encode').call(this, format);
-  },
-  // </editor-fold>
-
+      const data = getContentData(this)
+      setContentData(this, { contentType: data.contentType })
+      const result = asn1.ContentInfo.method('encode').call(this, format)
+      setContentData(this, data)
+      return result
+    } return asn1.ContentInfo.method('encode').call(this, format)
+  }, // </editor-fold>
   /**
      * Enclose content to document.
      *
@@ -549,14 +435,12 @@ extend(asn1.ContentInfo, DataContentInfo, {
      */
   encloseContent: function (contentInfo) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
-      self.setEnclosed(contentInfo);
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      self.setEnclosed(contentInfo)
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Sets the content of attached document.<br><br>
      *
@@ -568,10 +452,8 @@ extend(asn1.ContentInfo, DataContentInfo, {
      */
   setEnclosed: function (contentInfo) // <editor-fold defaultstate="collapsed">
   {
-    setContentData(this, checkContentInfo(contentInfo));
-  },
-  // </editor-fold>
-
+    setContentData(this, checkContentInfo(contentInfo))
+  }, // </editor-fold>
   /**
      * Returns the document which attached. If the content is not attached, the CMS object
      * which is returned will be degenerate.
@@ -582,18 +464,18 @@ extend(asn1.ContentInfo, DataContentInfo, {
      */
   getEnclosed: function () // <editor-fold defaultstate="collapsed">
   {
-    return createContentInfo(getContentData(this));
-  } // </editor-fold>
+    return createContentInfo(getContentData(this))
+  }, // </editor-fold>
+})
 
-});
 /**
  * This class encapsulates a CMS object of content type binary data.
  *
  * @memberOf GostCMS
  * @type GostCMS.DigestedDataContentInfo
  */
+GostCMS.prototype.DataContentInfo = DataContentInfo
 
-GostCMS.prototype.DataContentInfo = DataContentInfo;
 /**
  * This class encapsulates a CMS object of content type digested-data.
  *
@@ -602,7 +484,6 @@ GostCMS.prototype.DataContentInfo = DataContentInfo;
  * @extends GostCMS.DataContentInfo
  * @extends GostASN1.DigestedData
  */
-
 function DigestedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
 {
   DataContentInfo.call(this, contentInfo, {
@@ -610,13 +491,12 @@ function DigestedDataContentInfo(contentInfo) // <editor-fold defaultstate="coll
     version: 0,
     digestAlgorithm: providers[options.providerName].digest,
     encapContentInfo: {
-      eContentType: 'data'
+      eContentType: 'data',
     },
-    digest: new CryptoOperationData(0)
-  });
+    digest: new CryptoOperationData(0),
+  })
 } // </editor-fold>
 
-
 extend(DataContentInfo, DigestedDataContentInfo, {
   /**
      * Enclose the content and calculate the message digest with given digest algorithm
@@ -629,25 +509,25 @@ extend(DataContentInfo, DigestedDataContentInfo, {
      */
   encloseContent: function (contentInfo, digestAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
       // Set enclosed data
-      self.setEnclosed(contentInfo); // Define digest algorithm
+      self.setEnclosed(contentInfo)
 
+      // Define digest algorithm
       if (digestAlgorithm) {
-        const digestProvider = providers[digestAlgorithm];
-        self.digestAlgorithm = digestProvider && digestProvider.digest || digestAlgorithm;
-      } // Calculate digest
-
+        const digestProvider = providers[digestAlgorithm]
+        self.digestAlgorithm = (digestProvider && digestProvider.digest) || digestAlgorithm
+      }
 
-      return subtle.digest(self.digestAlgorithm, self.encapContentInfo.eContent);
+      // Calculate digest
+      return subtle.digest(self.digestAlgorithm, self.encapContentInfo.eContent)
     }).then(function (digest) {
-      // Set digest attribute
-      self.digest = digest;
-    });
-  },
-  // </editor-fold>
 
+      // Set digest attribute
+      self.digest = digest
+    })
+  }, // </editor-fold>
   /**
      * Verify the Message Digest. <br><br>
      *
@@ -658,44 +538,37 @@ extend(DataContentInfo, DigestedDataContentInfo, {
      */
   verify: function (contentInfo) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
       // Append attached
-      if (contentInfo) {
-        self.setEnclosed(contentInfo);
-      } // Check data
-
-
-      const dataToVerify = self.encapContentInfo && self.encapContentInfo.eContent;
-
-      if (!dataToVerify) {
-        throw new Error('Detached content is not found');
-      } // Calculate digest
+      if (contentInfo) {self.setEnclosed(contentInfo)}
 
+      // Check data
+      const dataToVerify = self.encapContentInfo &&
+                self.encapContentInfo.eContent
+      if (!dataToVerify) {throw new Error('Detached content is not found')}
 
-      return subtle.digest(self.digestAlgorithm, self.encapContentInfo.eContent);
+      // Calculate digest
+      return subtle.digest(self.digestAlgorithm, self.encapContentInfo.eContent)
     }).then(function (digest) {
-      if (!equalBuffers(digest, self.digest)) {
-        throw Error('Message digest is not verified');
-      } // Return content
-
-
+      if (!equalBuffers(digest, self.digest)) {throw Error('Message digest is not verified')}
+      // Return content
       return createContentInfo({
         contentType: self.encapContentInfo.eContentType,
-        content: self.encapContentInfo.eContent
-      });
-    });
-  } // </editor-fold>
+        content: self.encapContentInfo.eContent,
+      })
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * This class encapsulates a CMS object of content type digested-data.
  *
  * @memberOf GostCMS
  * @type GostCMS.DigestedDataContentInfo
  */
+GostCMS.prototype.DigestedDataContentInfo = DigestedDataContentInfo
 
-GostCMS.prototype.DigestedDataContentInfo = DigestedDataContentInfo;
 /**
  * This class encapsulates a CMS object of content type signed-data.
  *
@@ -706,7 +579,6 @@ GostCMS.prototype.DigestedDataContentInfo = DigestedDataContentInfo;
  * @extends GostCMS.DataContentInfo
  * @extends GostASN1.SignedData
  */
-
 function SignedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
 {
   DataContentInfo.call(this, contentInfo, {
@@ -714,13 +586,12 @@ function SignedDataContentInfo(contentInfo) // <editor-fold defaultstate="collap
     version: 1,
     digestAlgorithms: [],
     encapContentInfo: {
-      eContentType: 'data'
+      eContentType: 'data',
     },
-    signerInfos: []
-  });
+    signerInfos: [],
+  })
 } // </editor-fold>
 
-
 extend(DataContentInfo, SignedDataContentInfo, {
   /**
      * Add a Signer using the the IssuerAndSerialNumber as the SignerIdentifier i.e a Version1 CMSSignerInfo
@@ -736,93 +607,81 @@ extend(DataContentInfo, SignedDataContentInfo, {
      */
   addSignature: function (signerKey, signerCert, signedAttrs, unsignedAttrs) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        signerInfo,
-        dataToSign,
-        signerCertChain;
+    let self = this, signerInfo, dataToSign, signerCertChain
     return new Promise(call).then(function () {
       // Check attribures
-      if (!signerKey || !signerCert) {
-        throw new Error('Signer key or certificate is not defined');
-      } // Cert chain
-
-
+      if (!signerKey || !signerCert) {throw new Error('Signer key or certificate is not defined')}
+      // Cert chain
       if (signerCert instanceof Array) {
-        signerCertChain = signerCert;
-        signerCert = signerCertChain[0];
-      } else {
-        signerCertChain = [signerCert];
-      } // Signature algorithm provider
-
-
-      const provider = signerCert.getProvider() || providers[options.providerName];
-      const useKeyIdentifier = options.useKeyIdentifier && signerCert.extensions && signerCert.extensions.subjectKeyIdentifier; // Get enclosed data
-
-      dataToSign = self.encapContentInfo.eContent; // Prepare signer info structure
-
+        signerCertChain = signerCert
+        signerCert = signerCertChain[0]
+      } else {signerCertChain = [signerCert]}
+      // Signature algorithm provider
+      const provider = signerCert.getProvider() ||
+                providers[options.providerName]
+      const useKeyIdentifier = options.useKeyIdentifier && signerCert.extensions &&
+                signerCert.extensions.subjectKeyIdentifier
+      // Get enclosed data
+      dataToSign = self.encapContentInfo.eContent
+      // Prepare signer info structure
       signerInfo = {
         version: useKeyIdentifier ? 2 : 0,
         sid: useKeyIdentifier ? signerCert.extensions.subjectKeyIdentifier : {
           issuer: signerCert.issuer,
-          serialNumber: signerCert.serialNumber
+          serialNumber: signerCert.serialNumber,
         },
         digestAlgorithm: provider.digest,
-        signatureAlgorithm: signerCert.subjectPublicKeyInfo.algorithm
-      }; // Set an unsigned attributes
-
-      if (unsignedAttrs) {
-        signerInfo.unsignedAttrs = unsignedAttrs;
-      } // For a signed attributes calculate digest
-
-
+        signatureAlgorithm: signerCert.subjectPublicKeyInfo.algorithm,
+      }
+      // Set an unsigned attributes
+      if (unsignedAttrs) {signerInfo.unsignedAttrs = unsignedAttrs}
+      // For a signed attributes calculate digest
       if (signedAttrs) {
-        if (typeof signedAttrs !== 'object') {
-          signedAttrs = {};
-        }
-
-        return subtle.digest(signerInfo.digestAlgorithm, dataToSign);
+        if (typeof signedAttrs !== 'object') {signedAttrs = {}}
+        return subtle.digest(signerInfo.digestAlgorithm, dataToSign)
       }
     }).then(function (digest) {
       if (digest) {
         // Add standard signed attributes
-        signedAttrs.contentType = self.encapContentInfo.eContentType, signedAttrs.messageDigest = digest, signedAttrs.signingTime = new Date();
-        signerInfo.signedAttrs = signedAttrs, // Now data to sign = attributes
-        dataToSign = asn1.SignedAttributes.encode(signerInfo.signedAttrs);
-      } // Import the private key
-
+        signedAttrs.contentType = self.encapContentInfo.eContentType,
+        signedAttrs.messageDigest = digest,
+        signedAttrs.signingTime = new Date()
+        signerInfo.signedAttrs = signedAttrs,
+        // Now data to sign = attributes
+        dataToSign = asn1.SignedAttributes.encode(signerInfo.signedAttrs)
+      }
 
-      return subtle.importKey('pkcs8', asn1.PrivateKeyInfo.encode(signerKey), signerKey.privateKeyAlgorithm, false, ['sign']);
+      // Import the private key
+      return subtle.importKey('pkcs8', asn1.PrivateKeyInfo.encode(signerKey),
+        signerKey.privateKeyAlgorithm, false, ['sign'])
     }).then(function (key) {
+
       // Sign data
-      const algorithm = expand(signerInfo.signatureAlgorithm, {
-        hash: signerInfo.digestAlgorithm
-      });
-      return subtle.sign(algorithm, key, dataToSign);
+      const algorithm = expand(signerInfo.signatureAlgorithm, { hash: signerInfo.digestAlgorithm })
+      return subtle.sign(algorithm, key, dataToSign)
     }).then(function (signatureValue) {
-      signerInfo.signatureValue = signatureValue; // Add digest algorithm
+      signerInfo.signatureValue = signatureValue
 
+      // Add digest algorithm
       addUnique(self.digestAlgorithms, signerInfo.digestAlgorithm, function (algorithm1, algorithm2) {
-        return algorithm1.id === algorithm2.id;
-      }); // Add signer certificate
+        return algorithm1.id === algorithm2.id
+      })
 
+      // Add signer certificate
       if (options.autoAddCert) {
-        if (!self.certificates) {
-          self.certificates = [];
-        }
-
+        if (!self.certificates) {self.certificates = []}
         for (let i = 0, n = signerCertChain.length; i < n; i++) {
           addUnique(self.certificates, signerCertChain[i], function (cert1, cert2) {
-            return equalNames(cert1.issuer, cert2.issuer) && equalNumbers(cert1.serialNumber, cert2.serialNumber);
-          });
+            return equalNames(cert1.issuer, cert2.issuer) &&
+                            equalNumbers(cert1.serialNumber, cert2.serialNumber)
+          })
         }
-      } // Add signer info
-
-
-      self.signerInfos.push(signerInfo);
-    });
-  },
-  // </editor-fold>
+      }
 
+      // Add signer info
+      self.signerInfos.push(signerInfo)
+    })
+  }, // </editor-fold>
   /**
      * Indicates if this object has any signers i.e. checks for the absence of any SignerInfo structures.
      * CMS (RFC-2630) defines a degenerate object as one which has no signers.
@@ -831,14 +690,11 @@ extend(DataContentInfo, SignedDataContentInfo, {
      * @instance
      * @returns {boolean} True if this object has no signers; false otherwise.
      */
-  isDegenerate: {
-    // <editor-fold defaultstate="collapsed">
+  isDegenerate: { // <editor-fold defaultstate="collapsed">
     get: function () {
-      return !(this.signerInfos && this.signerInfos.length > 0);
-    } // </editor-fold>
-
+      return !(this.signerInfos && this.signerInfos.length > 0)
+    }, // </editor-fold>
   },
-
   /**
      * Returns normally if this CMS signed data object contains at least one valid signature,
      * according to the given trust policy; otherwise throws an Error.<br><br>
@@ -862,69 +718,50 @@ extend(DataContentInfo, SignedDataContentInfo, {
      */
   verify: function (trustPolicy, contentInfo) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        result;
+    let self = this, result
     return new Promise(call).then(function () {
       // Append attached
-      if (contentInfo) {
-        self.setEnclosed(contentInfo);
-      }
-
-      if (!self.signerInfos || self.signerInfos.length === 0) {
-        throw new Error('No signatures found');
-      } // Validate certificate of signers
-
-
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      if (!self.signerInfos || self.signerInfos.length === 0) {throw new Error('No signatures found')}
+      // Validate certificate of signers
       return Promise.all(self.signerInfos.map(function (signerInfo, i) {
-        const sid = signerInfo.sid,
-              selector = sid instanceof CryptoOperationData ? {
-          subjectKeyIdentifier: sid
+        const sid = signerInfo.sid, selector = sid instanceof CryptoOperationData ? {
+          subjectKeyIdentifier: sid,
         } : {
           issuer: sid.issuer,
-          serialNumber: sid.serialNumber
-        }; // Signing date
-
-        let date;
-
-        if (signerInfo.signedAttrs && signerInfo.signedAttrs.signingTime) {
-          date = signerInfo.signedAttrs.signingTime;
-        } // Use certificate trust policy validation
-
+          serialNumber: sid.serialNumber,
+        }
+        // Signing date
+        let date
+        if (signerInfo.signedAttrs && signerInfo.signedAttrs.signingTime) {date = signerInfo.signedAttrs.signingTime}
+        // Use certificate trust policy validation
+        return trustPolicy.getValidCertificate(selector,
+          self.certificates, self.crls, date).catch(function () {
+          return // Ignore error
+        })
+      }))
 
-        return trustPolicy.getValidCertificate(selector, self.certificates, self.crls, date).catch(function () {
-          return; // Ignore error
-        });
-      }));
     }).then(function (certs) {
       // Get encapsulated data
-      const verifiers = []; // Verify signatures for each signers
-
+      const verifiers = []
+      // Verify signatures for each signers
       certs.forEach(function (signerCert) {
         if (signerCert) {
           verifiers.push(self.verifySignature(signerCert).then(function (data) {
-            result = data; // Enough one valid signature
+            result = data // Enough one valid signature
           }, function () {
-            return; // Ignore error
-          }));
+            return // Ignore error
+          }))
         }
-      });
-
-      if (verifiers.length === 0) {
-        throw new Error('Valid verification path not found');
-      }
-
-      return Promise.all(verifiers);
+      })
+      if (verifiers.length === 0) {throw new Error('Valid verification path not found')}
+      return Promise.all(verifiers)
     }).then(function () {
-      if (!result) {
-        throw Error('Verification path found but no valid signature');
-      } // Return content
-
-
-      return result;
-    });
-  },
-  // </editor-fold>
-
+      if (!result) {throw Error('Verification path found but no valid signature')}
+      // Return content
+      return result
+    })
+  }, // </editor-fold>
   /**
      * Returns successfully if this CMS signed data object contains a signature which is
      * validated by the given certificate and data; otherwise throws an Error.<br><br>
@@ -941,88 +778,56 @@ extend(DataContentInfo, SignedDataContentInfo, {
      */
   verifySignature: function (signerCert, contentInfo) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        signerInfo,
-        dataToVerify,
-        dataDigest;
+    let self = this, signerInfo, dataToVerify, dataDigest
     return new Promise(call).then(function () {
       // Append attached
-      if (contentInfo) {
-        self.setEnclosed(contentInfo);
-      }
-
-      dataToVerify = self.encapContentInfo && self.encapContentInfo.eContent;
-
-      if (!dataToVerify) {
-        throw new Error('Detached content is not found');
-      } // Find signer
-
-
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      dataToVerify = self.encapContentInfo && self.encapContentInfo.eContent
+      if (!dataToVerify) {throw new Error('Detached content is not found')}
+      // Find signer
       for (let i = 0; i < self.signerInfos.length; i++) {
-        const sid = self.signerInfos[i].sid;
-
+        const sid = self.signerInfos[i].sid
         if (matchCert(sid, signerCert)) {
-          signerInfo = self.signerInfos[i];
-          break;
+          signerInfo = self.signerInfos[i]
+          break
         }
       }
-
-      if (!signerInfo) {
-        throw new Error('Signature not found for the certificate');
-      } // Choice data for verification
-
-
+      if (!signerInfo) {throw new Error('Signature not found for the certificate')}
+      // Choice data for verification
       if (signerInfo.signedAttrs) {
-        dataDigest = signerInfo.signedAttrs.messageDigest;
-
-        if (!dataDigest) {
-          throw new Error('Message digest must present in signed attributes');
-        } // To exclude implicit [0] need to reassemble signed attributes (auto on CTX object)
+        dataDigest = signerInfo.signedAttrs.messageDigest
+        if (!dataDigest) {throw new Error('Message digest must present in signed attributes')}
 
-
-        dataToVerify = signerInfo.signedAttrs.encode();
+        // To exclude implicit [0] need to reassemble signed attributes (auto on CTX object)
+        dataToVerify = signerInfo.signedAttrs.encode()
       }
-
-      if (!dataToVerify) {
-        throw new Error('Data for verification not found');
-      } // Verify signature
-
-
-      const algorithm = expand(signerInfo.signatureAlgorithm, {
-        hash: signerInfo.digestAlgorithm
-      });
-      return signerCert.verifySignature(dataToVerify, signerInfo.signatureValue, algorithm);
+      if (!dataToVerify) {throw new Error('Data for verification not found')}
+      // Verify signature
+      const algorithm = expand(signerInfo.signatureAlgorithm, { hash: signerInfo.digestAlgorithm })
+      return signerCert.verifySignature(dataToVerify, signerInfo.signatureValue, algorithm)
     }).then(function (result) {
-      if (!result) {
-        throw new Error('Signature not verified');
-      } // Verify digest
-
-
-      if (signerInfo.signedAttrs) {
-        return subtle.digest(signerInfo.digestAlgorithm, self.encapContentInfo.eContent);
-      }
+      if (!result) {throw new Error('Signature not verified')}
+      // Verify digest
+      if (signerInfo.signedAttrs) {return subtle.digest(signerInfo.digestAlgorithm, self.encapContentInfo.eContent)}
     }).then(function (digest) {
-      if (digest && !equalBuffers(digest, dataDigest)) {
-        throw new Error('Message digest not verified');
-      } // Return content
-
-
+      if (digest && !equalBuffers(digest, dataDigest)) {throw new Error('Message digest not verified')}
+      // Return content
       return createContentInfo({
         contentType: self.encapContentInfo.eContentType,
-        content: self.encapContentInfo.eContent
-      });
-    });
-  } // </editor-fold>
+        content: self.encapContentInfo.eContent,
+      })
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * This class encapsulates a CMS object of content type signed-data.
  *
  * @memberOf GostCMS
  * @type GostCMS.SignedDataContentInfo
  */
+GostCMS.prototype.SignedDataContentInfo = SignedDataContentInfo
 
-GostCMS.prototype.SignedDataContentInfo = SignedDataContentInfo;
 /**
  * This class encapsulates a CMS object of content type encrypted-data.
  *
@@ -1031,7 +836,6 @@ GostCMS.prototype.SignedDataContentInfo = SignedDataContentInfo;
  * @extends GostCMS.DataContentInfo
  * @extends GostASN1.EncryptedData
  */
-
 function EncryptedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
 {
   DataContentInfo.call(this, contentInfo, {
@@ -1039,12 +843,11 @@ function EncryptedDataContentInfo(contentInfo) // <editor-fold defaultstate="col
     version: 0,
     encryptedContentInfo: {
       contentType: 'data',
-      contentEncryptionAlgorithm: providers[options.providerName].encryption
-    }
-  });
+      contentEncryptionAlgorithm: providers[options.providerName].encryption,
+    },
+  })
 } // </editor-fold>
 
-
 extend(DataContentInfo, EncryptedDataContentInfo, {
   /**
      * Encrypt the content with given encryption algorithm, secret key or password
@@ -1058,98 +861,75 @@ extend(DataContentInfo, EncryptedDataContentInfo, {
      */
   encloseContent: function (contentInfo, contentEncryptionKey, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        encryption,
-        derivation;
+    let self = this, encryption, derivation
     return new Promise(call).then(function () {
       // Check content info
-      contentInfo = checkContentInfo(contentInfo);
-
-      if (!contentInfo.content) {
-        throw new Error('Content for encryption must be specified');
-      } // Define encryption algorithm
-
-
-      const type = typeof contentEncryptionKey === 'string' ? 'pbes' : 'encryption';
+      contentInfo = checkContentInfo(contentInfo)
+      if (!contentInfo.content) {throw new Error('Content for encryption must be specified')}
 
+      // Define encryption algorithm
+      const type = typeof contentEncryptionKey === 'string' ? 'pbes' : 'encryption'
       if (encryptionAlgorithm) {
-        const provider = providers[encryptionAlgorithm];
-        encryptionAlgorithm = provider && provider[type] || encryptionAlgorithm;
-      } else {
-        encryptionAlgorithm = providers[options.providerName][type];
-      } // Prepare content encryption key
-
-
+        const provider = providers[encryptionAlgorithm]
+        encryptionAlgorithm = (provider && provider[type]) || encryptionAlgorithm
+      } else {encryptionAlgorithm = providers[options.providerName][type]}
+      // Prepare content encryption key
       if (encryptionAlgorithm.derivation) {
         // Encrypt with password
-        derivation = expand(encryptionAlgorithm.derivation);
-        encryption = expand(encryptionAlgorithm.encryption);
-        derivation.salt = getSeed(saltSize(encryptionAlgorithm)); // Import password for key generation
-
-        let integrityKey;
-        return subtle.importKey('raw', passwordData(derivation, contentEncryptionKey), derivation, false, ['deriveKey', 'deriveBits']).then(function (key) {
-          integrityKey = key; // Derive IV
-
+        derivation = expand(encryptionAlgorithm.derivation)
+        encryption = expand(encryptionAlgorithm.encryption)
+        derivation.salt = getSeed(saltSize(encryptionAlgorithm))
+        // Import password for key generation
+        let integrityKey
+        return subtle.importKey('raw', passwordData(derivation, contentEncryptionKey),
+          derivation, false, ['deriveKey', 'deriveBits']).then(function (key) {
+          integrityKey = key
+          // Derive IV
           if (derivation.name.indexOf('PFXKDF') >= 0) {
-            derivation.diversifier = 2;
-            return subtle.deriveBits(derivation, integrityKey, 64);
+            derivation.diversifier = 2
+            return subtle.deriveBits(derivation, integrityKey, 64)
           }
         }).then(function (iv) {
-          if (iv) {
-            encryption.iv = iv;
-          } // Generate key from password
-
-
-          derivation.diversifier = 1;
-          return subtle.deriveKey(derivation, integrityKey, encryption, false, ['encrypt']);
+          if (iv) {encryption.iv = iv}
+          // Generate key from password
+          derivation.diversifier = 1
+          return subtle.deriveKey(derivation, integrityKey, encryption, false, ['encrypt'])
         }).then(function (encryptionKey) {
           // Content encryption with key
-          return encryptionKey;
-        });
-      } // Base encryption
-
-
-      encryption = expand(encryptionAlgorithm);
-
+          return encryptionKey
+        })
+      }
+      // Base encryption
+      encryption = expand(encryptionAlgorithm)
       if (contentEncryptionKey instanceof CryptoOperationData) {
         // Import key
-        return subtle.importKey('raw', contentEncryptionKey, encryption, false, ['encrypt']);
-      }
+        return subtle.importKey('raw', contentEncryptionKey, encryption, false, ['encrypt'])
+      } if (contentEncryptionKey.type === 'secret') {
+        return contentEncryptionKey
+      } throw new Error('Content encryption key must be raw data or secret key type')
 
-      if (contentEncryptionKey.type === 'secret') {
-        return contentEncryptionKey;
-      }
-
-      throw new Error('Content encryption key must be raw data or secret key type');
     }).then(function (encryptionKey) {
       // Initial vector
-      if (!encryption.iv) {
-        encryption.iv = getSeed(8);
-      }
+      if (!encryption.iv) {encryption.iv = getSeed(8)}
 
-      return subtle.encrypt(encryption, encryptionKey, contentInfo.content);
+      return subtle.encrypt(encryption, encryptionKey, contentInfo.content)
     }).then(function (encryptedContent) {
       if (encryptionAlgorithm.derivation) {
-        delete derivation.diversifier;
+        delete derivation.diversifier
         encryptionAlgorithm = expand(encryptionAlgorithm, {
           derivation: derivation,
-          encryption: encryption
-        });
-      } else {
-        encryptionAlgorithm = encryption;
-      } // Set enclosed data
-
-
+          encryption: encryption,
+        })
+      } else {encryptionAlgorithm = encryption}
+      // Set enclosed data
       self.encryptedContentInfo = {
         contentType: contentInfo.contentType,
         contentEncryptionAlgorithm: encryptionAlgorithm,
-        encryptedContent: encryptedContent
-      };
-      return self;
-    });
-  },
-  // </editor-fold>
-
+        encryptedContent: encryptedContent,
+      }
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Returns the decrypted content.
      *
@@ -1161,80 +941,63 @@ extend(DataContentInfo, EncryptedDataContentInfo, {
      */
   getEnclosed: function (decryptionKey, contentInfo) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        encryption,
-        derivation,
-        encryptedContent;
+    let self = this, encryption, derivation, encryptedContent
     return new Promise(call).then(function () {
       // Append attached
-      if (contentInfo) {
-        self.setEnclosed(contentInfo);
-      }
-
-      encryptedContent = self.encryptedContentInfo.encryptedContent;
-
-      if (!encryptedContent) {
-        throw new Error('Encrypted content must be specified');
-      }
-
-      encryption = expand(self.encryptedContentInfo.contentEncryptionAlgorithm);
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      encryptedContent = self.encryptedContentInfo.encryptedContent
+      if (!encryptedContent) {throw new Error('Encrypted content must be specified')}
 
+      encryption = expand(self.encryptedContentInfo.contentEncryptionAlgorithm)
       if (encryption.derivation) {
         // Decrypt with password
-        derivation = expand(encryption.derivation);
-        encryption = expand(encryption.encryption); // Derive encryption key from password
-
-        let integrityKey;
-        return subtle.importKey('raw', passwordData(derivation, decryptionKey), derivation, false, ['deriveKey', 'deriveBits']).then(function (key) {
-          integrityKey = key; // Derive iv for PFX
-
+        derivation = expand(encryption.derivation)
+        encryption = expand(encryption.encryption)
+        // Derive encryption key from password
+        let integrityKey
+        return subtle.importKey('raw', passwordData(derivation, decryptionKey),
+          derivation, false, ['deriveKey', 'deriveBits']).then(function (key) {
+          integrityKey = key
+          // Derive iv for PFX
           if (derivation.name.indexOf('PFXKDF') >= 0) {
-            derivation.diversifier = 2;
-            return subtle.deriveBits(derivation, integrityKey, 64);
+            derivation.diversifier = 2
+            return subtle.deriveBits(derivation, integrityKey, 64)
           }
         }).then(function (iv) {
-          if (iv) {
-            encryption.iv = iv;
-          } // Generate key from password
-
-
-          derivation.diversifier = 1;
-          return subtle.deriveKey(derivation, integrityKey, encryption, false, ['decrypt']);
-        });
-      } // Base encryption. Password should be secret key
-
-
+          if (iv) {encryption.iv = iv}
+          // Generate key from password
+          derivation.diversifier = 1
+          return subtle.deriveKey(derivation, integrityKey, encryption, false, ['decrypt'])
+        })
+      }
+      // Base encryption. Password should be secret key
       if (decryptionKey instanceof CryptoOperationData) {
         // Import key
-        return subtle.importKey('raw', decryptionKey, encryption, false, ['decrypt']);
-      }
+        return subtle.importKey('raw', decryptionKey, encryption, false, ['decrypt'])
+      } if (decryptionKey.type === 'secret') {
+        return decryptionKey
+      } throw new Error('Decryption key must be raw data or secret key type')
 
-      if (decryptionKey.type === 'secret') {
-        return decryptionKey;
-      }
-
-      throw new Error('Decryption key must be raw data or secret key type');
     }).then(function (encryptionKey) {
       // Decrypt key with encryption key
-      return subtle.decrypt(encryption, encryptionKey, encryptedContent);
+      return subtle.decrypt(encryption, encryptionKey, encryptedContent)
     }).then(function (decryptedContent) {
       // Create content info object
       return createContentInfo({
         contentType: self.encryptedContentInfo.contentType,
-        content: decryptedContent
-      });
-    });
-  } // </editor-fold>
+        content: decryptedContent,
+      })
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * This class encapsulates a CMS object of content type encrypted-data.
  *
  * @memberOf GostCMS
  * @type GostCMS.EncryptedDataContentInfo
  */
-
-GostCMS.prototype.EncryptedDataContentInfo = EncryptedDataContentInfo;
+GostCMS.prototype.EncryptedDataContentInfo = EncryptedDataContentInfo
 /**
  * This class encapsulates a CMS object of content type enveloped-data.
  *
@@ -1243,7 +1006,6 @@ GostCMS.prototype.EncryptedDataContentInfo = EncryptedDataContentInfo;
  * @extends GostCMS.DataContentInfo
  * @extends GostASN1.EnvelopedData
  */
-
 function EnvelopedDataContentInfo(contentInfo) // <editor-fold defaultstate="collapsed">
 {
   DataContentInfo.call(this, contentInfo, {
@@ -1252,12 +1014,11 @@ function EnvelopedDataContentInfo(contentInfo) // <editor-fold defaultstate="col
     recipientInfos: [],
     encryptedContentInfo: {
       contentType: 'data',
-      contentEncryptionAlgorithm: providers[options.providerName].encryption
-    }
-  });
+      contentEncryptionAlgorithm: providers[options.providerName].encryption,
+    },
+  })
 } // </editor-fold>
 
-
 extend(DataContentInfo, EnvelopedDataContentInfo, {
   /**
      * Generate content encryption key with given encryption algorithm and encrypt the content
@@ -1270,45 +1031,33 @@ extend(DataContentInfo, EnvelopedDataContentInfo, {
      */
   encloseContent: function (contentInfo, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
       // Check content info
-      contentInfo = checkContentInfo(contentInfo);
-
-      if (!contentInfo.content) {
-        throw new Error('Content for encryption must be specified');
-      } // Define encryption algorithm
-
-
+      contentInfo = checkContentInfo(contentInfo)
+      if (!contentInfo.content) {throw new Error('Content for encryption must be specified')}
+      // Define encryption algorithm
       if (encryptionAlgorithm) {
-        const provider = providers[encryptionAlgorithm];
-        encryptionAlgorithm = provider && provider.encryption || encryptionAlgorithm;
-      } else {
-        encryptionAlgorithm = providers[options.providerName].encryption;
-      } // Generate key for encryption content
-
-
-      return subtle.generateKey(encryptionAlgorithm, true, ['encrypt']);
+        const provider = providers[encryptionAlgorithm]
+        encryptionAlgorithm = (provider && provider.encryption) || encryptionAlgorithm
+      } else {encryptionAlgorithm = providers[options.providerName].encryption}
+      // Generate key for encryption content
+      return subtle.generateKey(encryptionAlgorithm, true, ['encrypt'])
     }).then(function (encryptionKey) {
       // Encrypt content
-      self.contentEncryptionKey = encryptionKey; // Initial vector
-
-      if (!encryptionAlgorithm.iv) {
-        encryptionAlgorithm.iv = getSeed(8);
-      }
-
-      return subtle.encrypt(encryptionAlgorithm, encryptionKey, contentInfo.content);
+      self.contentEncryptionKey = encryptionKey
+      // Initial vector
+      if (!encryptionAlgorithm.iv) {encryptionAlgorithm.iv = getSeed(8)}
+      return subtle.encrypt(encryptionAlgorithm, encryptionKey, contentInfo.content)
     }).then(function (encryptedContent) {
       self.encryptedContentInfo = {
         contentType: contentInfo.contentType,
         contentEncryptionAlgorithm: encryptionAlgorithm,
-        encryptedContent: encryptedContent
-      };
-      return self;
-    });
-  },
-  // </editor-fold>
-
+        encryptedContent: encryptedContent,
+      }
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Add a recipient. <br><br>
      *
@@ -1325,155 +1074,115 @@ extend(DataContentInfo, EnvelopedDataContentInfo, {
      */
   addRecipient: function (recipientCert, keyEncryptionAlgorithm, senderKey, senderCert) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        privateKey,
-        encryptionProvider,
-        derivation,
-        wrapping;
+    let self = this, privateKey, encryptionProvider, derivation, wrapping
     return new Promise(call).then(function () {
       // Check for recepient cert
-      recipientCert = new cert.X509(recipientCert);
-
-      if (keyEncryptionAlgorithm && typeof keyEncryptionAlgorithm !== 'string' && !keyEncryptionAlgorithm.algorithm) {
+      recipientCert = new cert.X509(recipientCert)
+      if (keyEncryptionAlgorithm && typeof keyEncryptionAlgorithm !== 'string' &&
+                !keyEncryptionAlgorithm.algorithm) {
         // Sender parameters
-        senderCert = senderKey;
-        senderKey = keyEncryptionAlgorithm;
-        keyEncryptionAlgorithm = undefined;
+        senderCert = senderKey
+        senderKey = keyEncryptionAlgorithm
+        keyEncryptionAlgorithm = undefined
       }
-
       if (keyEncryptionAlgorithm) {
-        encryptionProvider = providers[keyEncryptionAlgorithm];
-      } else {
-        encryptionProvider = recipientCert.getProvider();
-      } // Check for content encryption key
-
+        encryptionProvider = providers[keyEncryptionAlgorithm]
+      } else {encryptionProvider = recipientCert.getProvider()}
 
-      if (!self.contentEncryptionKey) {
-        throw new Error('The content encryption key is not assigned');
-      }
+      // Check for content encryption key
+      if (!self.contentEncryptionKey) {throw new Error('The content encryption key is not assigned')}
 
       if (senderCert) {
         // Sender certificate for agreement protocol
-        let senderCertChain;
-
+        let senderCertChain
         if (senderCert instanceof Array) {
-          senderCertChain = senderCert;
-          senderCert = senderCertChain[0];
-        } else {
-          senderCertChain = [senderCert];
-        } // Add sender certificate
-
+          senderCertChain = senderCert
+          senderCert = senderCertChain[0]
+        } else {senderCertChain = [senderCert]}
 
+        // Add sender certificate
         if (options.autoAddCert) {
-          if (!self.originatorInfo) {
-            self.originatorInfo = {
-              certs: []
-            };
-          } else if (!self.originatorInfo.certs) {
-            self.originatorInfo.certs = [];
-          }
-
+          if (!self.originatorInfo) {self.originatorInfo = { certs: [] }} else if (!self.originatorInfo.certs) {self.originatorInfo.certs = []}
           for (let i = 0, n = senderCertChain.length; i < n; i++) {
             addUnique(self.originatorInfo.certs, senderCertChain[i], function (cert1, cert2) {
-              return equalNames(cert1.issuer, cert2.issuer) && equalNumbers(cert1.serialNumber, cert2.serialNumber);
-            });
+              return equalNames(cert1.issuer, cert2.issuer) &&
+                                equalNumbers(cert1.serialNumber, cert2.serialNumber)
+            })
           }
-        } // Key Agreement
-
-
-        if (encryptionProvider) {
-          keyEncryptionAlgorithm = expand(encryptionProvider.agreement);
-        } else {
-          encryptionProvider = recipientCert.getProvider();
-        } // Certificates must have similar curve parameters
-
-
-        if (recipientCert.subjectPublicKeyInfo.algorithm.namedCurve !== senderCert.subjectPublicKeyInfo.algorithm.namedCurve) {
-          throw new Error('The sender and the recipient have different public key algorithms');
-        } // Get private sender key
-
-
-        return subtle.importKey('pkcs8', senderKey.encode(), senderKey.privateKeyAlgorithm, false, ['deriveKey']);
-      } // Key Transport
-
-
-      if (encryptionProvider) {
-        keyEncryptionAlgorithm = expand(recipientCert.subjectPublicKeyInfo.algorithm);
-      } else {
-        encryptionProvider = recipientCert.getProvider();
-      } // Generate key pair
-
-
+        }
+        // Key Agreement
+        if (encryptionProvider) {keyEncryptionAlgorithm = expand(encryptionProvider.agreement)} else {encryptionProvider = recipientCert.getProvider()}
+        // Certificates must have similar curve parameters
+        if (recipientCert.subjectPublicKeyInfo.algorithm.namedCurve !==
+                    senderCert.subjectPublicKeyInfo.algorithm.namedCurve) {throw new Error('The sender and the recipient have different public key algorithms')}
+        // Get private sender key
+        return subtle.importKey('pkcs8', senderKey.encode(), senderKey.privateKeyAlgorithm,
+          false, ['deriveKey'])
+      }
+      // Key Transport
+      if (encryptionProvider) {keyEncryptionAlgorithm = expand(recipientCert.subjectPublicKeyInfo.algorithm)} else {encryptionProvider = recipientCert.getProvider()}
+      // Generate key pair
       return subtle.generateKey(keyEncryptionAlgorithm, true, ['deriveKey']).then(function (keyPair) {
-        keyEncryptionAlgorithm['public'] = keyPair.publicKey;
-        return keyPair.privateKey;
-      });
-    }).then(function (key) {
-      privateKey = key; // Get public key from recipient certificate
+        keyEncryptionAlgorithm['public'] = keyPair.publicKey
+        return keyPair.privateKey
+      })
 
-      return subtle.importKey('spki', recipientCert.subjectPublicKeyInfo.encode(), recipientCert.subjectPublicKeyInfo.algorithm, false, ['deriveKey', 'deriveBits']);
+    }).then(function (key) {
+      privateKey = key
+      // Get public key from recipient certificate
+      return subtle.importKey('spki', recipientCert.subjectPublicKeyInfo.encode(),
+        recipientCert.subjectPublicKeyInfo.algorithm, false, ['deriveKey', 'deriveBits'])
     }).then(function (publicKey) {
       // Derivate key encryption key
-      keyEncryptionAlgorithm.ukm = getSeed(8);
-      derivation = expand(encryptionProvider.agreement, {
-        sBox: keyEncryptionAlgorithm.sBox,
-        ukm: keyEncryptionAlgorithm.ukm,
-        'public': publicKey
-      });
-      wrapping = expand(keyEncryptionAlgorithm.wrapping || encryptionProvider.wrapping, {
-        ukm: keyEncryptionAlgorithm.ukm
-      });
-      return subtle.deriveKey(derivation, privateKey, wrapping, true, ['wrapKey']);
+      keyEncryptionAlgorithm.ukm = getSeed(8)
+      derivation = expand(encryptionProvider.agreement,
+        { sBox: keyEncryptionAlgorithm.sBox, ukm: keyEncryptionAlgorithm.ukm, 'public': publicKey })
+      wrapping = expand(keyEncryptionAlgorithm.wrapping || encryptionProvider.wrapping,
+        { ukm: keyEncryptionAlgorithm.ukm })
+      return subtle.deriveKey(derivation, privateKey, wrapping, true, ['wrapKey'])
     }).then(function (wrappingKey) {
       // Wrap content encryption key
-      keyEncryptionAlgorithm.wrapping = wrapping;
-      return subtle.wrapKey('raw', self.contentEncryptionKey, wrappingKey, wrapping);
+      keyEncryptionAlgorithm.wrapping = wrapping
+      return subtle.wrapKey('raw', self.contentEncryptionKey, wrappingKey, wrapping)
     }).then(function (wrappedKey) {
       // Create recipient info
-      let recipientInfo;
-      const useKeyIdentifier = options.useKeyIdentifier && recipientCert.extensions && recipientCert.extensions.subjectKeyIdentifier,
-            rid = useKeyIdentifier ? recipientCert.extensions.subjectKeyIdentifier : {
-        issuer: recipientCert.issuer,
-        serialNumber: recipientCert.serialNumber
-      };
-
+      let recipientInfo
+      const useKeyIdentifier = options.useKeyIdentifier && recipientCert.extensions &&
+                recipientCert.extensions.subjectKeyIdentifier,
+        rid = useKeyIdentifier ? recipientCert.extensions.subjectKeyIdentifier : {
+          issuer: recipientCert.issuer,
+          serialNumber: recipientCert.serialNumber,
+        }
       if (senderCert) {
-        const spki = senderCert.subjectPublicKeyInfo;
-        recipientInfo = {
-          // KeyAgreeRecipientInfo
-          version: 3,
-          // always set to 3
+        const spki = senderCert.subjectPublicKeyInfo
+        recipientInfo = { // KeyAgreeRecipientInfo
+          version: 3, // always set to 3
           originator: {
             algorithm: spki.algorithm,
-            publicKey: spki.subjectPublicKey
+            publicKey: spki.subjectPublicKey,
           },
           ukm: keyEncryptionAlgorithm.ukm,
           keyEncryptionAlgorithm: keyEncryptionAlgorithm,
-          recipientEncryptedKeys: [{
-            // use only one recipient in domain
+          recipientEncryptedKeys: [{ // use only one recipient in domain
             rid: rid,
-            encryptedKey: asn1.GostEncryptedKey(keyEncryptionAlgorithm).encode(wrappedKey)
-          }]
-        };
+            encryptedKey: asn1.GostEncryptedKey(keyEncryptionAlgorithm).encode(wrappedKey),
+          }],
+        }
       } else {
         recipientInfo = {
-          version: 0,
-          // always set to 0 or 2
+          version: 0, // always set to 0 or 2
           rid: rid,
           keyEncryptionAlgorithm: keyEncryptionAlgorithm,
           encryptedKey: asn1.GostEncryptedKey(keyEncryptionAlgorithm).encode({
             algorithm: keyEncryptionAlgorithm,
-            sessionEncryptedKey: wrappedKey
-          })
-        };
+            sessionEncryptedKey: wrappedKey,
+          }),
+        }
       }
-
-      self.recipientInfos.push(recipientInfo);
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      self.recipientInfos.push(recipientInfo)
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Returns the decrypted content.
      *
@@ -1487,120 +1196,97 @@ extend(DataContentInfo, EnvelopedDataContentInfo, {
      */
   getEnclosed: function (recipientKey, recipientCert, contentInfo, originatorCert) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        wrappedKey,
-        encryptedContent,
-        derivation,
-        wrapping,
-        encryption;
+    let self = this, wrappedKey, encryptedContent, derivation, wrapping, encryption
     return new Promise(call).then(function () {
-      const encryptionProvider = recipientCert.getProvider(); // Append attached
-
-      if (contentInfo) {
-        self.setEnclosed(contentInfo);
-      }
-
-      encryptedContent = self.encryptedContentInfo.encryptedContent;
-
-      if (!encryptedContent) {
-        throw new Error('Encrypted content must be specified');
-      }
+      const encryptionProvider = recipientCert.getProvider()
+      // Append attached
+      if (contentInfo) {self.setEnclosed(contentInfo)}
+      encryptedContent = self.encryptedContentInfo.encryptedContent
+      if (!encryptedContent) {throw new Error('Encrypted content must be specified')}
 
-      encryption = self.encryptedContentInfo.contentEncryptionAlgorithm; // Find receiver
+      encryption = self.encryptedContentInfo.contentEncryptionAlgorithm
 
+      // Find receiver
       for (let i = 0; i < self.recipientInfos.length; i++) {
         let recipientInfo = self.recipientInfos[i],
-            algorithm = expand(recipientInfo.keyEncryptionAlgorithm);
-
+          algorithm = expand(recipientInfo.keyEncryptionAlgorithm)
         if (recipientInfo.rid) {
           if (matchCert(recipientInfo.rid, recipientCert)) {
             // Algorithm and wrapped key
-            const transportKey = asn1.GostEncryptedKey(algorithm).decode(recipientInfo.encryptedKey).object;
-            wrappedKey = transportKey.sessionEncryptedKey;
-            algorithm = expand(algorithm, transportKey.algorithm);
-            derivation = expand(encryptionProvider.agreement, {
-              ukm: algorithm.ukm,
-              sBox: algorithm.sBox
-            });
-            wrapping = expand(encryptionProvider.wrapping, algorithm.wrapping, {
-              ukm: algorithm.ukm
-            });
-            return algorithm['public'];
+            const transportKey = asn1.GostEncryptedKey(algorithm).decode(recipientInfo.encryptedKey).object
+            wrappedKey = transportKey.sessionEncryptedKey
+            algorithm = expand(algorithm, transportKey.algorithm)
+            derivation = expand(encryptionProvider.agreement, { ukm: algorithm.ukm, sBox: algorithm.sBox })
+            wrapping = expand(encryptionProvider.wrapping, algorithm.wrapping, { ukm: algorithm.ukm })
+            return algorithm['public']
           }
         } else {
-          const keys = recipientInfo.recipientEncryptedKeys;
-
+          const keys = recipientInfo.recipientEncryptedKeys
           if (keys) {
             for (let j = 0; j < keys.length; j++) {
               if (matchCert(keys[j].rid, recipientCert)) {
                 // Algorithm and wrapped key
-                algorithm = expand(encryptionProvider.agreement, algorithm, {
-                  ukm: recipientInfo.ukm
-                });
-                wrappedKey = asn1.GostEncryptedKey(algorithm).decode(keys[j].encryptedKey).object;
-                derivation = algorithm;
-                wrapping = expand(algorithm.wrapping || encryptionProvider.wrapping, {
-                  ukm: recipientInfo.ukm
-                }); // Check originator
-
-                const originator = recipientInfo.originator;
-
+                algorithm = expand(encryptionProvider.agreement, algorithm, { ukm: recipientInfo.ukm })
+                wrappedKey = asn1.GostEncryptedKey(algorithm).decode(keys[j].encryptedKey).object
+                derivation = algorithm
+                wrapping = expand(algorithm.wrapping || encryptionProvider.wrapping, { ukm: recipientInfo.ukm })
+                // Check originator
+                const originator = recipientInfo.originator
                 if (originator.algorithm) {
                   const spki = new asn1.SubjectPublicKeyInfo({
                     algorithm: originator.algorithm,
-                    subjectPublicKey: originator.publicKey
-                  });
-                  return subtle.importKey('spki', spki.encode(), spki.algorithm, false, ['deriveKey', 'deriveBits']);
+                    subjectPublicKey: originator.publicKey,
+                  })
+                  return subtle.importKey('spki', spki.encode(), spki.algorithm, false, ['deriveKey', 'deriveBits'])
+                } if (originatorCert && matchCert(originator, originatorCert)) {
+                  return importKey('pkcs', originatorCert.subjectPublicKeyInfo.encode(),
+                    originatorCert.subjectPublicKeyInfo.algorithm, false, ['deriveKey', 'deriveBits'])
                 }
-
-                if (originatorCert && matchCert(originator, originatorCert)) {
-                  return importKey('pkcs', originatorCert.subjectPublicKeyInfo.encode(), originatorCert.subjectPublicKeyInfo.algorithm, false, ['deriveKey', 'deriveBits']);
-                }
-
-                throw Error('Originator certificate not specified or not valid');
+                throw Error('Originator certificate not specified or not valid')
               }
             }
           }
         }
       }
-
-      throw new Error('Recipient not found or format not supported');
+      throw new Error('Recipient not found or format not supported')
     }).then(function (publicKey) {
-      derivation['public'] = publicKey; // Import private key
-
-      return subtle.importKey('pkcs8', recipientKey.encode(), recipientKey.privateKeyAlgorithm, false, ['deriveKey', 'deriveBits']);
+      derivation['public'] = publicKey
+      // Import private key
+      return subtle.importKey('pkcs8', recipientKey.encode(), recipientKey.privateKeyAlgorithm,
+        false, ['deriveKey', 'deriveBits'])
     }).then(function (privateKey) {
       // Derive key
-      return subtle.deriveKey(derivation, privateKey, wrapping, true, ['unwrapKey']);
+      return subtle.deriveKey(derivation, privateKey, wrapping, true, ['unwrapKey'])
     }).then(function (unwrappingKey) {
       // Unwrap key
-      return subtle.unwrapKey('raw', wrappedKey, unwrappingKey, wrapping, encryption, false, ['decrypt']);
+      return subtle.unwrapKey('raw', wrappedKey, unwrappingKey,
+        wrapping, encryption, false, ['decrypt'])
     }).then(function (encryptionKey) {
       // Decrypt content
-      return subtle.decrypt(encryption, encryptionKey, encryptedContent);
+      return subtle.decrypt(encryption, encryptionKey, encryptedContent)
     }).then(function (decryptedContent) {
       return createContentInfo({
         contentType: self.encryptedContentInfo.contentType,
-        content: decryptedContent
-      });
-    });
-  } // </editor-fold>
+        content: decryptedContent,
+      })
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * This class encapsulates a CMS object of content type enveloped-data.
  *
  * @memberOf GostCMS
  * @type GostCMS.EnvelopedDataContentInfo
  */
+GostCMS.prototype.EnvelopedDataContentInfo = EnvelopedDataContentInfo
 
-GostCMS.prototype.EnvelopedDataContentInfo = EnvelopedDataContentInfo;
 /**
  * Implements the Cryptographic Message Syntax as specified in RFC-2630.
  *
  * @memberOf gostCrypto
  * @type GostCMS
  */
+gostCrypto.cms = new GostCMS()
 
-gostCrypto.cms = new GostCMS();
-module.exports = GostCMS;
\ No newline at end of file
+module.exports = GostCMS
diff --git a/node_modules/gost-crypto/lib/gostCert.js b/node_modules/gost-crypto/lib/gostCert.js
index b7be1e2..9b33091 100644
--- a/node_modules/gost-crypto/lib/gostCert.js
+++ b/node_modules/gost-crypto/lib/gostCert.js
@@ -39,42 +39,44 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const gostCrypto = require('./gostCrypto');
+
+const gostCrypto = require('./gostCrypto')
+
 /*
  * Common algorithms
  *
- */
-// <editor-fold defaultstate="collapsed">
-
-
-const Promise = global.Promise;
-const Object = global.Object;
-const CryptoOperationData = global.ArrayBuffer;
-const Date = global.Date; // Crypto subtle
+ */ // <editor-fold defaultstate="collapsed">
+const Promise = global.Promise
+const Object = global.Object
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
 
-const subtle = gostCrypto.subtle; // Coding
+// Crypto subtle
+const subtle = gostCrypto.subtle
 
-const coding = gostCrypto.coding; // ASN.1 syntax
+// Coding
+const coding = gostCrypto.coding
 
-const asn1 = gostCrypto.asn1; // Providers
+// ASN.1 syntax
+const asn1 = gostCrypto.asn1
 
-const providers = gostCrypto.security.providers; // Expand javascript object
+// Providers
+const providers = gostCrypto.security.providers
 
+// Expand javascript object
 function expand(r) {
   for (let i = 1, n = arguments.length; i < n; i++) {
-    const item = arguments[i];
-
+    const item = arguments[i]
     if (typeof item === 'object') {
       for (const name in item) {
-        if (item.hasOwnProperty(name)) {
-          r[name] = item[name];
-        }
+        if (item.hasOwnProperty(name)) {r[name] = item[name]}
       }
     }
   }
+  return r
+}
 
-  return r;
-} // // Extend javascript class
+// // Extend javascript class
 // function extend(Class) {
 //     var F = function () {
 //     };
@@ -84,231 +86,183 @@ function expand(r) {
 //         args.push(arguments[i]);
 //     return expand.apply(this, args);
 // }
-// Today date + n days
-
 
+// Today date + n days
 function today(n) {
-  const date = new Date();
-  date.setHours(0, 0, 0, 0);
-
-  if (n) {
-    date.setDate(date.getDate() + n);
-  }
-
-  return date;
-} // Self resolver
-
+  const date = new Date()
+  date.setHours(0, 0, 0, 0)
+  if (n) {date.setDate(date.getDate() + n)}
+  return date
+}
 
+// Self resolver
 function call(callback) {
   try {
-    callback();
-  } catch (e) {}
-} // Serial number
-
+    callback()
+  } catch (e) {
+  }
+}
 
+// Serial number
 function genSerialNumber() {
-  const seed = new Uint8Array(4);
-  gostCrypto.getRandomValues(seed);
-  seed[0] = seed[0] & 0x7f;
-  return coding.Int16.encode(seed);
-} // True if equal numbers
-
+  const seed = new Uint8Array(4)
+  gostCrypto.getRandomValues(seed)
+  seed[0] = seed[0] & 0x7f
+  return coding.Int16.encode(seed)
+}
 
-const equalNumbers = function () {
+// True if equal numbers
+const equalNumbers = (function () {
   // Convert number to bigendian hex string
   const hex = function (s) {
-    const t = typeof s;
-    return t === 'undefined' || s === '' ? '0' : t === 'number' || s instanceof Number ? s.toString(16).toLowerCase() : s.replace('0x', '').toLowerCase();
-  }; // Zero left padding
-
-
+    const t = typeof s
+    return t === 'undefined' || s === '' ? '0' :
+      t === 'number' || s instanceof Number ? s.toString(16).toLowerCase() :
+        s.replace('0x', '').toLowerCase()
+  }
+  // Zero left padding
   const lpad = function (s, size) {
-    return (new Array(size + 1).join('0') + s).slice(-size);
-  };
-
+    return (new Array(size + 1).join('0') + s).slice(-size)
+  }
   return function (s1, s2) {
-    s1 = hex(s1);
-    s2 = hex(s2);
-    const len = Math.max(s1.length, s2.length);
-    return lpad(s1, len) === lpad(s2, len);
-  };
-}(); // Check equal names
-
+    s1 = hex(s1)
+    s2 = hex(s2)
+    const len = Math.max(s1.length, s2.length)
+    return lpad(s1, len) === lpad(s2, len)
+  }
+})()
 
+// Check equal names
 function equalNames(name1, name2) {
   for (var key in name1) {
-    if (name1[key] !== name2[key]) {
-      return false;
-    }
+    if (name1[key] !== name2[key]) {return false}
   }
-
   for (var key in name2) {
-    if (name1[key] !== name2[key]) {
-      return false;
-    }
+    if (name1[key] !== name2[key]) {return false}
   }
+  return true
+}
 
-  return true;
-} // Check the buffers to equal
-
-
+// Check the buffers to equal
 function equalBuffers(r1, r2) {
   const s1 = new Uint8Array(r1),
-        s2 = new Uint8Array(r2);
-
-  if (s1.length !== s2.length) {
-    return false;
-  }
-
+    s2 = new Uint8Array(r2)
+  if (s1.length !== s2.length) {return false}
   for (let i = 0, n = s1.length; i < n; i++) {
-    if (s1[i] !== s2[i]) {
-      return false;
-    }
+    if (s1[i] !== s2[i]) {return false}
   }
+  return true
+}
 
-  return true;
-} // Match certificate
-
-
+// Match certificate
 function matchCertificate(cert, selector) {
-  const skid = cert.extensions && cert.extensions.subjectKeyIdentifier;
-  return cert && selector && (!selector.issuer || equalNames(cert.issuer, selector.issuer)) && (!selector.serialNumber || equalNumbers(cert.serialNumber, selector.serialNumber)) && (!selector.subjectKeyIdentifier || equalBuffers(skid, selector.subjectKeyIdentifier)) && (!selector.subject || equalNames(cert.subject, selector.subject)) && (!selector.date || cert.notBefore.getTime() <= selector.date.getTime() && cert.notAfter.getTime() > selector.date.getTime());
-} // Create authority certificate selector
-
+  const skid = cert.extensions && cert.extensions.subjectKeyIdentifier
+  return (cert && selector &&
+        (!selector.issuer || equalNames(cert.issuer, selector.issuer)) &&
+        (!selector.serialNumber || equalNumbers(cert.serialNumber, selector.serialNumber)) &&
+        (!selector.subjectKeyIdentifier || equalBuffers(skid, selector.subjectKeyIdentifier)) &&
+        (!selector.subject || equalNames(cert.subject, selector.subject)) &&
+        (!selector.date || (cert.notBefore.getTime() <= selector.date.getTime() &&
+            cert.notAfter.getTime() > selector.date.getTime())))
+}
 
+// Create authority certificate selector
 function authoritySelector(cert, extensions, date) {
-  const selector = {
-    subject: cert.issuer,
-    date: date
-  },
-        akid = extensions && extensions.authorityKeyIdentifier;
-
+  const selector = { subject: cert.issuer, date: date },
+    akid = extensions && extensions.authorityKeyIdentifier
   if (akid) {
-    selector.subjectKeyIdentifier = akid.keyIdentifier;
-
-    if (akid.authorityCertIssuer && akid.authorityCertIssuer[0] && akid.authorityCertSerialNumber) {
-      selector.issuer = akid.authorityCertIssuer[0];
-      selector.serialNumber = akid.authorityCertSerialNumber;
+    selector.subjectKeyIdentifier = akid.keyIdentifier
+    if (akid.authorityCertIssuer && akid.authorityCertIssuer[0] &&
+            akid.authorityCertSerialNumber) {
+      selector.issuer = akid.authorityCertIssuer[0]
+      selector.serialNumber = akid.authorityCertSerialNumber
     }
   }
+  return selector
+}
 
-  return selector;
-} // Find certificates
-
-
+// Find certificates
 function selectCertificates(certs, selector) {
-  const result = [];
-
+  const result = []
   for (let i = 0, n = certs.length; i < n; i++) {
-    if (matchCertificate(certs[i], selector)) {
-      result.push(certs[i]);
-    }
+    if (matchCertificate(certs[i], selector)) {result.push(certs[i])}
   }
+  return result
+}
 
-  return result;
-} // Match CRL
-
-
+// Match CRL
 function matchCRL(crl, selector) {
-  return (!selector.issuer || equalNames(crl.issuer, selector.issuer)) && (!selector.date || crl.thisUpdate.getTime() < selector.date.getTime());
-} // Find certificates
-
+  return ((!selector.issuer || equalNames(crl.issuer, selector.issuer)) &&
+        (!selector.date || (crl.thisUpdate.getTime() < selector.date.getTime())))
+}
 
+// Find certificates
 function selectCRLs(crls, selector) {
-  const result = [];
-
+  const result = []
   for (let i = 0, n = crls.length; i < n; i++) {
-    if (matchCRL(crls[i], selector)) {
-      result.push(crls[i]);
-    }
+    if (matchCRL(crls[i], selector)) {result.push(crls[i])}
   }
+  return result
+}
 
-  return result;
-} // Define provider for key algorithm
-
-
+// Define provider for key algorithm
 function keyProvider(algorithm) {
-  const id = algorithm.id;
-
+  const id = algorithm.id
   for (const name in providers) {
-    const provider = providers[name];
-
-    if (provider.publicKey.id === id) {
-      return provider;
-    }
+    const provider = providers[name]
+    if (provider.publicKey.id === id) {return provider}
   }
 }
 
 function defineProperty(object, name, descriptor, enumerable) {
-  if (typeof descriptor !== 'object') {
-    descriptor = {
-      value: descriptor
-    };
-  }
-
-  if (enumerable !== undefined) {
-    descriptor.enumerable = enumerable;
-  }
-
-  Object.defineProperty(object, name, descriptor);
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
 }
 
 function defineProperties(object, properties, enumerable) {
-  for (const name in properties) {
-    defineProperty(object, name, properties[name], enumerable);
-  }
-} // Extend javascript class
-
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
+}
 
+// Extend javascript class
 function extend(Super, Class, propertiesObject, propertiesClass) {
   // If constructor not defined
   if (typeof Class !== 'function') {
-    propertiesClass = propertiesObject;
-    propertiesObject = Class;
-
+    propertiesClass = propertiesObject
+    propertiesObject = Class
     Class = function () {
-      Super.apply(this, arguments);
-    };
-  } // Create prototype properties
-
-
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
   Class.prototype = Object.create(Super.prototype, {
     constructor: {
-      value: Class
+      value: Class,
     },
     superclass: {
-      value: Super.prototype
-    }
-  });
-
-  if (propertiesObject) {
-    defineProperties(Class.prototype, propertiesObject, true);
-  } // Inherites super class properties
-
-
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject, true)}
+  // Inherites super class properties
   if (Super !== Object) {
-    for (const name in Super) {
-      Class[name] = Super[name];
-    }
-  }
-
-  Class.super = Super;
-
-  if (propertiesClass) {
-    defineProperties(Class, propertiesClass, true);
+    for (const name in Super) {Class[name] = Super[name]}
   }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
 
-  return Class;
-} // </editor-fold>
+// </editor-fold>
 
 /**
  * Provides facilities for handling certificates, CRLs, etc.
  *
  * @class GostCert
  */
+function GostCert() {
+}
 
-
-function GostCert() {}
 /**
  * Certificate templates
  * <ul>
@@ -330,23 +284,20 @@ function GostCert() {}
  * @memberOf GostCert
  * @instance
  */
-
-
-const options = {
-  // <editor-fold defaultstate="collapsed">
+const options = { // <editor-fold defaultstate="collapsed">
   providerName: 'CP-01',
-  subject: {
-    countryName: 'RU',
-    commonName: 'Anonymous'
-  },
-  caKeyUsage: ['digitalSignature', 'nonRepudiation', 'keyEncipherment', 'dataEncipherment', 'keyAgreement', 'keyCertSign', 'cRLSign'],
-  caExtKeyUsage: ['serverAuth', 'clientAuth', 'codeSigning', 'emailProtection', 'ipsecEndSystem', 'ipsecTunnel', 'ipsecUser', 'timeStamping', 'OCSPSigning'],
+  subject: { countryName: 'RU', commonName: 'Anonymous' },
+  caKeyUsage: ['digitalSignature', 'nonRepudiation', 'keyEncipherment',
+    'dataEncipherment', 'keyAgreement', 'keyCertSign', 'cRLSign'],
+  caExtKeyUsage: ['serverAuth', 'clientAuth', 'codeSigning', 'emailProtection', 'ipsecEndSystem',
+    'ipsecTunnel', 'ipsecUser', 'timeStamping', 'OCSPSigning'],
   userKeyUsage: ['digitalSignature', 'nonRepudiation', 'keyEncipherment', 'dataEncipherment', 'keyAgreement'],
   userExtKeyUsage: ['clientAuth', 'emailProtection'],
-  days: 7305 // </editor-fold>
+  days: 7305, // </editor-fold>
+}
+
+GostCert.prototype.options = options
 
-};
-GostCert.prototype.options = options;
 /**
  * This class encapsulates X.509 Version 3 certificates.<br><br>
  *
@@ -356,45 +307,39 @@ GostCert.prototype.options = options;
  * @extends GostASN1.Certificate
  * @param {(FormatedData|GostASN1.Certificate)} cert The certificate
  */
-
 const X509 = function (cert) // <editor-fold defaultstate="collapsed">
 {
   try {
     // Try to use decode X.509 certificate
-    asn1.Certificate.call(this, cert, true);
+    asn1.Certificate.call(this, cert, true)
   } catch (e) {
     try {
       // Try to decode certification request
-      cert = new asn1.CertificationRequest(cert, true);
-    } catch (e) {} // Create new certificate structure
-
-
-    cert = cert || {};
+      cert = new asn1.CertificationRequest(cert, true)
+    } catch (e) {
+    }
+    // Create new certificate structure
+    cert = cert || {}
     asn1.Certificate.call(this, {
       version: 2,
       serialNumber: cert.serialNumber || genSerialNumber(),
-      signature: cert.signature || {
-        id: 'noSignature'
-      },
+      signature: cert.signature || { id: 'noSignature' },
       issuer: cert.subject || options.subject,
       notBefore: cert.notBefore || today(),
-      notAfter: cert.notAfter || today(cert.days || options.days),
+      notAfter: cert.notAfter ||
+                today(cert.days || options.days),
       subject: cert.subject || options.subject,
       subjectPublicKeyInfo: cert.subjectPublicKeyInfo || {
-        algorithm: {
-          id: 'noSignature'
-        },
-        subjectPublicKey: new CryptoOperationData(0)
+        algorithm: { id: 'noSignature' },
+        subjectPublicKey: new CryptoOperationData(0),
       },
-      extensions: cert.attributes && (cert.attributes.extensionRequest || cert.attributes.msCertExtensions) || cert.extensions,
-      signatureAlgorithm: {
-        id: 'noSignature'
-      },
-      signatureValue: new CryptoOperationData(0)
-    });
+      extensions: (cert.attributes && (cert.attributes.extensionRequest ||
+                cert.attributes.msCertExtensions)) || cert.extensions,
+      signatureAlgorithm: { id: 'noSignature' },
+      signatureValue: new CryptoOperationData(0),
+    })
   }
-}; // </editor-fold>
-
+} // </editor-fold>
 
 extend(asn1.Certificate, X509, {
   /**
@@ -410,102 +355,81 @@ extend(asn1.Certificate, X509, {
      */
   sign: function (issuerPrivateKey, issuerCertificate) // <editor-fold defaultstate="collapsed">
   {
-    const self = this,
-          spki = self.subjectPublicKeyInfo;
-    return new Promise(call).then(function () {
-      // Need generated key
-      if (!spki || !spki.algorithm || spki.algorithm === 'noSignature') {
-        throw new Error('Key pair was not generated for the certificate');
-      } // Check issuer private key
 
+    const self = this, spki = self.subjectPublicKeyInfo
+    return new Promise(call).then(function () {
 
-      if (!issuerPrivateKey) {
-        throw new Error('The private key of the issuer is not defined');
-      } // Certificate can be self signed
-
+      // Need generated key
+      if (!spki || !spki.algorithm || spki.algorithm === 'noSignature') {throw new Error('Key pair was not generated for the certificate')}
+      // Check issuer private key
+      if (!issuerPrivateKey) {throw new Error('The private key of the issuer is not defined')}
 
-      issuerCertificate = issuerCertificate || self; // Calculate subject key indentifier
+      // Certificate can be self signed
+      issuerCertificate = issuerCertificate || self
 
-      return subtle.digest('SHA-1', spki.subjectPublicKey);
+      // Calculate subject key indentifier
+      return subtle.digest('SHA-1', spki.subjectPublicKey)
     }).then(function (digest) {
-      // Signature algorithm
-      const provider = issuerCertificate.getProvider() || providers[options.providerName];
-
-      if (!self.signature || self.signature.id === 'noSignature') {
-        self.signature = provider.signature;
-      }
-
-      self.signatureAlgorithm = self.signature; // Set issuer
-
-      self.issuer = issuerCertificate.subject; // Set default extensions
-
-      if (!self.extensions) {
-        self.extensions = {};
-      }
 
-      const exts = self.extensions,
-            ae = issuerCertificate.extensions;
-
-      if (self === issuerCertificate) {
-        // Self-signed CA certificate
+      // Signature algorithm
+      const provider = issuerCertificate.getProvider() || providers[options.providerName]
+      if (!self.signature || self.signature.id === 'noSignature') {self.signature = provider.signature}
+      self.signatureAlgorithm = self.signature
+
+      // Set issuer
+      self.issuer = issuerCertificate.subject
+      // Set default extensions
+      if (!self.extensions) {self.extensions = {}}
+      const exts = self.extensions, ae = issuerCertificate.extensions
+      if (self === issuerCertificate) { // Self-signed CA certificate
         // Set key usage
-        exts.keyUsage = exts.keyUsage || options.caKeyUsage;
-        exts.extKeyUsage = exts.extKeyUsage || options.caExtKeyUsage; // Set basic constraints
-
-        exts.basicConstraints = exts.basicConstraints || {
-          cA: true
-        };
+        exts.keyUsage = exts.keyUsage || options.caKeyUsage
+        exts.extKeyUsage = exts.extKeyUsage || options.caExtKeyUsage
+        // Set basic constraints
+        exts.basicConstraints = exts.basicConstraints || { cA: true }
       } else {
         // Check key usage and validity
-        if (!issuerCertificate.checkUsage('keyCertSign', self.notBefore)) {
-          throw new Error('The issuer\'s certificate is not valid for signing a certificate');
-        } // Set key usage
-
-
-        exts.keyUsage = exts.keyUsage || options.userKeyUsage;
-        exts.extKeyUsage = exts.extKeyUsage || options.userExtKeyUsage; // Set basic constraints
+        if (!issuerCertificate.checkUsage('keyCertSign', self.notBefore)) {throw new Error('The issuer\'s certificate is not valid for signing a certificate')}
 
+        // Set key usage
+        exts.keyUsage = exts.keyUsage || options.userKeyUsage
+        exts.extKeyUsage = exts.extKeyUsage || options.userExtKeyUsage
+        // Set basic constraints
         exts.basicConstraints = exts.basicConstraints || {
-          cA: exts.keyUsage.indexOf('keyCertSign') >= 0
-        }; // Check path length constraint
-
+          cA: exts.keyUsage.indexOf('keyCertSign') >= 0,
+        }
+        // Check path length constraint
         if (exts.basicConstraints.cA) {
-          const pathLen = ae && ae.basicConstraints && ae.pathLenConstraint;
-
+          const pathLen = ae && ae.basicConstraints && ae.pathLenConstraint
           if (pathLen !== undefined) {
-            if (pathLen > 0) {
-              exts.basicConstraints.pathLenConstraint = pathLen - 1;
-            } else {
-              throw new Error('Path length constraint exceeded');
-            }
+            if (pathLen > 0) {exts.basicConstraints.pathLenConstraint = pathLen - 1} else {throw new Error('Path length constraint exceeded')}
           }
         }
-      } // Subject key identifier 160 bit from public key hash
-
-
-      exts.subjectKeyIdentifier = digest; // Authority key identifier
-
+      }
+      // Subject key identifier 160 bit from public key hash
+      exts.subjectKeyIdentifier = digest
+      // Authority key identifier
       if (ae && ae.subjectKeyIdentifier) {
         exts.authorityKeyIdentifier = {
           keyIdentifier: ae.subjectKeyIdentifier,
           authorityCertIssuer: [issuerCertificate.issuer],
-          authorityCertSerialNumber: issuerCertificate.serialNumber
-        };
-      } // Import the private key
-
+          authorityCertSerialNumber: issuerCertificate.serialNumber,
+        }
+      }
 
-      return subtle.importKey('pkcs8', issuerPrivateKey.encode(), issuerPrivateKey.privateKeyAlgorithm, false, ['sign']);
+      // Import the private key
+      return subtle.importKey('pkcs8', issuerPrivateKey.encode(), issuerPrivateKey.privateKeyAlgorithm, false, ['sign'])
     }).then(function (key) {
+
       // Sign certificate
-      return subtle.sign(self.signatureAlgorithm, key, self.tbsCertificate.encode());
+      return subtle.sign(self.signatureAlgorithm, key, self.tbsCertificate.encode())
     }).then(function (signatureValue) {
       // Siganture value
-      self.signatureValue = signatureValue;
-      return self;
-    });
-  },
-  // </editor-fold>
+      self.signatureValue = signatureValue
 
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Generate key pair for certificate
      *
@@ -516,38 +440,28 @@ extend(asn1.Certificate, X509, {
      */
   generate: function (keyAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        privateKey,
-        provider;
-
-    if (keyAlgorithm) {
-      provider = providers[keyAlgorithm];
-    } else {
-      provider = this.getProvider() || providers[options.providerName];
-    }
-
-    if (provider) {
-      keyAlgorithm = expand(provider.publicKey, {
-        privateKey: provider.privateKey
-      });
-    }
+    let self = this, privateKey, provider
+    if (keyAlgorithm) {provider = providers[keyAlgorithm]} else {provider = this.getProvider() || providers[options.providerName]}
+    if (provider) {keyAlgorithm = expand(provider.publicKey, { privateKey: provider.privateKey })}
 
     return new Promise(call).then(function () {
+
       // Generate key pair
-      return subtle.generateKey(keyAlgorithm, 'true', ['sign', 'verify']);
+      return subtle.generateKey(keyAlgorithm, 'true', ['sign', 'verify'])
     }).then(function (keyPair) {
-      privateKey = keyPair.privateKey; // Export public key
+      privateKey = keyPair.privateKey
 
-      return subtle.exportKey('spki', keyPair.publicKey);
+      // Export public key
+      return subtle.exportKey('spki', keyPair.publicKey)
     }).then(function (spki) {
-      self.subjectPublicKeyInfo = new asn1.SubjectPublicKeyInfo(spki);
-      return subtle.exportKey('pkcs8', privateKey);
+      self.subjectPublicKeyInfo = new asn1.SubjectPublicKeyInfo(spki)
+
+      return subtle.exportKey('pkcs8', privateKey)
     }).then(function (pkcs8) {
-      return new asn1.PrivateKeyInfo(pkcs8);
-    });
-  },
-  // </editor-fold>
 
+      return new asn1.PrivateKeyInfo(pkcs8)
+    })
+  }, // </editor-fold>
   /**
      * Gets the public key.
      *
@@ -558,11 +472,10 @@ extend(asn1.Certificate, X509, {
   getPublicKey: function () // <editor-fold defaultstate="collapsed">
   {
     const spki = this.subjectPublicKeyInfo,
-          keyUsages = spki.algorithm.id === 'rsaEncryption' ? ['verify'] : ['verify', 'deriveKey', 'deriveBits'];
-    return subtle.importKey('spki', spki.encode(), spki.algorithm, 'false', keyUsages);
-  },
-  // </editor-fold>
-
+      keyUsages = (spki.algorithm.id === 'rsaEncryption') ? ['verify'] :
+        ['verify', 'deriveKey', 'deriveBits']
+    return subtle.importKey('spki', spki.encode(), spki.algorithm, 'false', keyUsages)
+  }, // </editor-fold>
   /**
      * Get appropriate crypto provider for public key
      *
@@ -572,10 +485,8 @@ extend(asn1.Certificate, X509, {
      */
   getProvider: function () // <editor-fold defaultstate="collapsed">
   {
-    return keyProvider(this.subjectPublicKeyInfo.algorithm);
-  },
-  // </editor-fold>
-
+    return keyProvider(this.subjectPublicKeyInfo.algorithm)
+  }, // </editor-fold>
   /**
      * Verifies this certificate.<br><br>
      *
@@ -601,67 +512,42 @@ extend(asn1.Certificate, X509, {
      */
   verify: function (issuerCertificate, issuerCRL, date) // <editor-fold defaultstate="collapsed">
   {
-    const self = this,
-          exts = self.extensions;
+    const self = this, exts = self.extensions
     return new Promise(call).then(function () {
       // Current date
-      date = date || today();
-
-      if (self.notBefore.getTime() > date.getTime() || self.notAfter.getTime() <= date.getTime()) {
-        throw new Error('The certificate has not yet started or expired');
-      } // A unrecognized critical extensions
-
-
+      date = date || today()
+      if (self.notBefore.getTime() > date.getTime() ||
+                self.notAfter.getTime() <= date.getTime()) {throw new Error('The certificate has not yet started or expired')}
+      // A unrecognized critical extensions
       for (const name in exts) {
-        const value = exts[name];
-
-        if (value.critical && ['authorityKeyIdentifier', 'subjectKeyIdentifier', 'keyUsage', 'certificatePolicies', 'policyMappings', 'basicConstraints', 'nameConstraints', 'policyConstraints', 'extKeyUsage'].indexOf(name) < 0) {
-          throw new Error(`The critical extension '${name}' is unrecognized`);
-        }
-      } // The certificate can be self-signed
-
-
-      const selector = authoritySelector(self, exts, self.notBefore);
-
-      if (!issuerCertificate && matchCertificate(self, selector)) {
-        issuerCertificate = self;
-      } // Check issuer
-
-
+        const value = exts[name]
+        if (value.critical &&
+                    ['authorityKeyIdentifier', 'subjectKeyIdentifier', 'keyUsage', 'certificatePolicies',
+                      'policyMappings', 'basicConstraints', 'nameConstraints', 'policyConstraints',
+                      'extKeyUsage'].indexOf(name) < 0) {throw new Error(`The critical extension '${ name }' is unrecognized`)}
+      }
+      // The certificate can be self-signed
+      const selector = authoritySelector(self, exts, self.notBefore)
+      if (!issuerCertificate && matchCertificate(self, selector)) {issuerCertificate = self}
+      // Check issuer
       if (issuerCertificate) {
-        if (!matchCertificate(issuerCertificate, selector) || !issuerCertificate.checkUsage('keyCertSign', self.notBefore)) {
-          throw new Error('The issuer\'s certificate is not valid');
-        } // Check certificate signature
-
-
-        return issuerCertificate.verifySignature(self.tbsCertificate.encode(), self.signatureValue, self.signatureAlgorithm);
+        if (!matchCertificate(issuerCertificate, selector) ||
+                    !issuerCertificate.checkUsage('keyCertSign', self.notBefore)) {throw new Error('The issuer\'s certificate is not valid')}
+        // Check certificate signature
+        return issuerCertificate.verifySignature(self.tbsCertificate.encode(),
+          self.signatureValue, self.signatureAlgorithm)
       }
-
-      return true;
+      return true
     }).then(function (result) {
-      if (!result) {
-        throw new Error('The certificate has invalid signature');
-      } // Check CRL
-
-
+      if (!result) {throw new Error('The certificate has invalid signature')}
+      // Check CRL
       if (issuerCRL) {
-        if (!matchCRL(issuerCRL, {
-          issuer: self.issuer,
-          date: date
-        })) {
-          throw new Error('The issuer\'s CRL is not valid');
-        }
-
-        if (issuerCRL.isRevoked(self.serialNumber)) {
-          throw new Error('The certificate is revoked');
-        }
+        if (!matchCRL(issuerCRL, { issuer: self.issuer, date: date })) {throw new Error('The issuer\'s CRL is not valid')}
+        if (issuerCRL.isRevoked(self.serialNumber)) {throw new Error('The certificate is revoked')}
       }
-
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Verify a signature made with this certificate's public key.
      *
@@ -675,11 +561,9 @@ extend(asn1.Certificate, X509, {
   verifySignature: function (data, signature, algorithm) // <editor-fold defaultstate="collapsed">
   {
     return this.getPublicKey().then(function (publicKey) {
-      return subtle.verify(algorithm, publicKey, signature, data);
-    });
-  },
-  // </editor-fold>
-
+      return subtle.verify(algorithm, publicKey, signature, data)
+    })
+  }, // </editor-fold>
   /**
      * Check key usage and date validation
      *
@@ -691,21 +575,22 @@ extend(asn1.Certificate, X509, {
      */
   checkUsage: function (operation, date) // <editor-fold defaultstate="collapsed">
   {
-    const self = this,
-          exts = self.extensions;
-    date = date || today();
-    return self.notBefore.getTime() <= date.getTime() && self.notAfter.getTime() > date.getTime() && (!exts || !(['keyCertSign', 'cRLSign'].indexOf(operation) > 0 && exts.basicConstraints && !exts.basicConstraints.cA || exts.keyUsage && exts.keyUsage.indexOf(operation) < 0 && exts.extKeyUsage && exts.extKeyUsage.indexOf(operation) < 0));
-  } // </editor-fold>
+    const self = this, exts = self.extensions
+    date = date || today()
+    return (self.notBefore.getTime() <= date.getTime() && self.notAfter.getTime() > date.getTime()) &&
+            (!exts || !((['keyCertSign', 'cRLSign'].indexOf(operation) > 0 && exts.basicConstraints && !exts.basicConstraints.cA) ||
+                ((exts.keyUsage && exts.keyUsage.indexOf(operation) < 0) && (exts.extKeyUsage && exts.extKeyUsage.indexOf(operation) < 0))))
+  }, // </editor-fold>
+})
 
-});
 /**
  * This class encapsulates X.509 Version 3 certificates.
  *
  * @memberOf GostCert
  * @type GostCert.X509
  */
+GostCert.prototype.X509 = X509
 
-GostCert.prototype.X509 = X509;
 /**
  * This class encapsulates a X.509 certificate revocation list (CRL) of RevokedCertificate objects.<br><br>
  *
@@ -716,25 +601,15 @@ GostCert.prototype.X509 = X509;
  * @extends GostASN1.CertificateList
  * @param {(FormatedData|GostASN1.CertificateList)} crl
  */
-
 var CRL = function (crl) // <editor-fold defaultstate="collapsed">
 {
   // Call super
-  CRL.super.call(this, crl); // Initialize defaults
-
-  if (!this.version) {
-    this.version = 1;
-  }
-
-  if (!this.revokedCertificates) {
-    this.revokedCertificates = [];
-  }
-
-  if (!this.thisUpdate) {
-    this.thisUpdate = today();
-  }
-}; // </editor-fold>
-
+  CRL.super.call(this, crl)
+  // Initialize defaults
+  if (!this.version) {this.version = 1}
+  if (!this.revokedCertificates) {this.revokedCertificates = []}
+  if (!this.thisUpdate) {this.thisUpdate = today()}
+} // </editor-fold>
 
 extend(asn1.CertificateList, CRL, {
   /**
@@ -751,70 +626,52 @@ extend(asn1.CertificateList, CRL, {
      */
   sign: function (issuerPrivateKey, issuerCertificate) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+
+    const self = this
     return new Promise(call).then(function () {
       // Check issuer private key
-      if (!issuerPrivateKey) {
-        throw new Error('The issuer\'s private key is not defined');
-      } // Check issuer certificate
-
-
-      if (!issuerCertificate) {
-        throw new Error('The issuer\'s certificate is not defined');
-      } // Check issuer name
-
-
-      if (!self.issuer) {
-        self.issuer = issuerCertificate.issuer;
-      } else if (!equalNames(self.issuer, issuerCertificate.issuer)) {
-        throw new Error('The CRL prototype and authority certificate have different issuers');
-      } // Check key usage and validity
-
-
-      if (!issuerCertificate.checkUsage('cRLSign', self.thisUpdate)) {
-        throw new Error('The issuer\'s certificate is not valid for signing a CRL');
-      } // Signature algorithm
-
-
-      const provider = issuerCertificate.getProvider() || providers[options.providerName];
-
-      if (!self.signature) {
-        self.signature = provider.signature;
-      }
-
-      self.signatureAlgorithm = self.signature; // Set issuer
-
-      self.issuer = issuerCertificate.subject; // Set default extensions
-
-      if (!self.crlExtensions) {
-        self.crlExtensions = {};
-      }
+      if (!issuerPrivateKey) {throw new Error('The issuer\'s private key is not defined')}
+      // Check issuer certificate
+      if (!issuerCertificate) {throw new Error('The issuer\'s certificate is not defined')}
+      // Check issuer name
+      if (!self.issuer) {self.issuer = issuerCertificate.issuer} else if (!equalNames(self.issuer, issuerCertificate.issuer)) {throw new Error('The CRL prototype and authority certificate have different issuers')}
+      // Check key usage and validity
+      if (!issuerCertificate.checkUsage('cRLSign', self.thisUpdate)) {throw new Error('The issuer\'s certificate is not valid for signing a CRL')}
 
+      // Signature algorithm
+      const provider = issuerCertificate.getProvider() || providers[options.providerName]
+      if (!self.signature) {self.signature = provider.signature}
+      self.signatureAlgorithm = self.signature
+
+      // Set issuer
+      self.issuer = issuerCertificate.subject
+      // Set default extensions
+      if (!self.crlExtensions) {self.crlExtensions = {}}
       const exts = self.crlExtensions,
-            ae = issuerCertificate.extensions;
-
+        ae = issuerCertificate.extensions
       if (ae && ae.subjectKeyIdentifier) {
         exts.authorityKeyIdentifier = {
           keyIdentifier: ae.subjectKeyIdentifier,
           authorityCertIssuer: [issuerCertificate.issuer],
-          authorityCertSerialNumber: issuerCertificate.serialNumber
-        };
+          authorityCertSerialNumber: issuerCertificate.serialNumber,
+        }
       }
+      exts.cRLNumber = exts.cRLNumber || 0
 
-      exts.cRLNumber = exts.cRLNumber || 0; // Import the private key
-
-      return subtle.importKey('pkcs8', issuerPrivateKey.encode(), issuerPrivateKey.privateKeyAlgorithm, false, ['sign']);
+      // Import the private key
+      return subtle.importKey('pkcs8', issuerPrivateKey.encode(),
+        issuerPrivateKey.privateKeyAlgorithm, false, ['sign'])
     }).then(function (key) {
+
       // Sign CRL
-      return subtle.sign(self.signatureAlgorithm, key, self.tbsCertList.encode());
+      return subtle.sign(self.signatureAlgorithm, key, self.tbsCertList.encode())
     }).then(function (signatureValue) {
-      // Siganture value
-      self.signatureValue = signatureValue;
-      return self;
-    });
-  },
-  // </editor-fold>
 
+      // Siganture value
+      self.signatureValue = signatureValue
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Verify the CRL. Checks the date and signature if issuer's certifiate has been defined.
      *
@@ -826,39 +683,25 @@ extend(asn1.CertificateList, CRL, {
      */
   verify: function (issuerCertificate, date) // <editor-fold defaultstate="collapsed">
   {
-    const self = this,
-          exts = self.crlExtensions;
+    const self = this, exts = self.crlExtensions
     return new Promise(call).then(function () {
       // Current date
-      date = date || today();
-
-      if (!self.thisUpdate.getTime() > date.getTime()) {
-        throw new Error('The CRL has not yet started');
-      } // Check issuer
-
-
+      date = date || today()
+      if (!self.thisUpdate.getTime() > date.getTime()) {throw new Error('The CRL has not yet started')}
+      // Check issuer
       if (issuerCertificate) {
-        if (!matchCertificate(issuerCertificate, authoritySelector(self, exts, self.thisUpdate)) || !issuerCertificate.checkUsage('cRLSign', self.thisUpdate)) {
-          throw new Error('The issuer\'s certificate is not valid');
-        }
-
-        if (!self.signatureValue || !self.signatureAlgorithm) {
-          throw new Error('The has no signature');
-        } // Check CRL signature
-
-
-        return issuerCertificate.verifySignature(self.tbsCertList.encode(), self.signatureValue, self.signatureAlgorithm);
+        if (!matchCertificate(issuerCertificate, authoritySelector(self, exts, self.thisUpdate)) ||
+                    !issuerCertificate.checkUsage('cRLSign', self.thisUpdate)) {throw new Error('The issuer\'s certificate is not valid')}
+        if (!self.signatureValue || !self.signatureAlgorithm) {throw new Error('The has no signature')}
+        // Check CRL signature
+        return issuerCertificate.verifySignature(self.tbsCertList.encode(),
+          self.signatureValue, self.signatureAlgorithm)
       }
     }).then(function (result) {
-      if (!result) {
-        throw new Error('The CRL has invalid signature');
-      }
-
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      if (!result) {throw new Error('The CRL has invalid signature')}
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Checks whether this certificate serial number is on the list.
      *
@@ -870,28 +713,25 @@ extend(asn1.CertificateList, CRL, {
      */
   isRevoked: function (serialNumber, date) // <editor-fold defaultstate="collapsed">
   {
-    const rc = this.revokedCertificates;
-    date = date || today();
-
+    const rc = this.revokedCertificates
+    date = date || today()
     for (let i = 0; i < rc.length; i++) {
       // Check date and serial number
-      if (date.getTime() >= rc[i].revocationDate.getTime() && equalNumbers(rc[i].userCertificate, serialNumber)) {
-        return true;
-      }
+      if (date.getTime() >= rc[i].revocationDate.getTime() &&
+                equalNumbers(rc[i].userCertificate, serialNumber)) {return true}
     }
+    return false
+  }, // </editor-fold>
+})
 
-    return false;
-  } // </editor-fold>
-
-});
 /**
  * This class encapsulates a X.509 certificate revocation list (CRL) of RevokedCertificate objects.
  *
  * @memberOf GostCert
  * @type GostCert.CRL
  */
+GostCert.prototype.CRL = CRL
 
-GostCert.prototype.CRL = CRL;
 /**
  * A class that encapsulates a DER-encoded PKCS #10 certificate request. The request contains
  * the subject's name and public key, and it is signed with the subject's private key.
@@ -904,39 +744,33 @@ GostCert.prototype.CRL = CRL;
  * @extends GostASN1.CertificationRequest
  * @param {(FormatedData|GostASN1.CertificationRequest)} req
  */
-
 function Request(req) // <editor-fold defaultstate="collapsed">
 {
   try {
     // Try to use encode
-    asn1.CertificationRequest.call(this, req, true);
+    asn1.CertificationRequest.call(this, req, true)
   } catch (e) {
     // Create new certificate structure
-    req = req || {};
+    req = req || {}
     asn1.CertificationRequest.call(this, {
       version: 0,
       subject: req.subject || options.subject,
       subjectPublicKeyInfo: req.subjectPublicKeyInfo || {
-        algorithm: {
-          id: 'noSignature'
-        },
-        subjectPublicKey: new CryptoOperationData(0)
+        algorithm: { id: 'noSignature' },
+        subjectPublicKey: new CryptoOperationData(0),
       },
       attributes: req.attributes || {
         extensionRequest: {
           keyUsage: options.userKeyUsage,
-          extKeyUsage: options.userExtKeyUsage
-        }
-      },
-      signatureAlgorithm: {
-        id: 'noSignature'
+          extKeyUsage: options.userExtKeyUsage,
+        },
       },
-      signatureValue: new CryptoOperationData(0)
-    });
+      signatureAlgorithm: { id: 'noSignature' },
+      signatureValue: new CryptoOperationData(0),
+    })
   }
 } // </editor-fold>
 
-
 extend(asn1.CertificationRequest, Request, {
   /**
      * Generate key pair and sign request
@@ -948,42 +782,33 @@ extend(asn1.CertificationRequest, Request, {
      */
   generate: function (keyAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        privateKey,
-        provider;
-
-    if (keyAlgorithm) {
-      provider = providers[keyAlgorithm];
-    } else {
-      provider = this.getProvider() || providers[options.providerName];
-    }
-
-    if (provider) {
-      keyAlgorithm = expand(provider.publicKey, {
-        privateKey: provider.privateKey
-      });
-    }
+    let self = this, privateKey, provider
+    if (keyAlgorithm) {provider = providers[keyAlgorithm]} else {provider = this.getProvider() || providers[options.providerName]}
+    if (provider) {keyAlgorithm = expand(provider.publicKey, { privateKey: provider.privateKey })}
 
     return new Promise(call).then(function () {
+
       // Generate key pair
-      return subtle.generateKey(keyAlgorithm, 'true', ['sign', 'verify']);
+      return subtle.generateKey(keyAlgorithm, 'true', ['sign', 'verify'])
     }).then(function (keyPair) {
-      privateKey = keyPair.privateKey; // Export public key
+      privateKey = keyPair.privateKey
 
-      return subtle.exportKey('spki', keyPair.publicKey);
+      // Export public key
+      return subtle.exportKey('spki', keyPair.publicKey)
     }).then(function (spki) {
-      self.subjectPublicKeyInfo = new asn1.SubjectPublicKeyInfo(spki);
-      return subtle.exportKey('pkcs8', privateKey);
+      self.subjectPublicKeyInfo = new asn1.SubjectPublicKeyInfo(spki)
+
+      return subtle.exportKey('pkcs8', privateKey)
     }).then(function (pkcs8) {
-      privateKey = new asn1.PrivateKeyInfo(pkcs8); // Sign request
+      privateKey = new asn1.PrivateKeyInfo(pkcs8)
 
-      return self.sign(privateKey);
+      // Sign request
+      return self.sign(privateKey)
     }).then(function () {
-      return privateKey;
-    });
-  },
-  // </editor-fold>
 
+      return privateKey
+    })
+  }, // </editor-fold>
   /**
      * Get appropriate crypto provider for public key
      *
@@ -993,10 +818,8 @@ extend(asn1.CertificationRequest, Request, {
      */
   getProvider: function () // <editor-fold defaultstate="collapsed">
   {
-    return keyProvider(this.subjectPublicKeyInfo.algorithm);
-  },
-  // </editor-fold>
-
+    return keyProvider(this.subjectPublicKeyInfo.algorithm)
+  }, // </editor-fold>
   /**
      * Generate the contents of this request and sign it.<br><br>
      *
@@ -1007,35 +830,33 @@ extend(asn1.CertificationRequest, Request, {
      */
   sign: function (privateKey) // <editor-fold defaultstate="collapsed">
   {
-    const self = this,
-          spki = self.subjectPublicKeyInfo;
-    return new Promise(call).then(function () {
-      // Need generated key
-      if (!spki || !spki.algorithm || spki.algorithm === 'noSignature') {
-        throw new Error('Key pair was not generated for the certificate');
-      } // Check issuer private key
 
+    const self = this, spki = self.subjectPublicKeyInfo
+    return new Promise(call).then(function () {
 
-      if (!privateKey) {
-        throw new Error('The private key is not defined');
-      } // Signature algorithm
-
+      // Need generated key
+      if (!spki || !spki.algorithm || spki.algorithm === 'noSignature') {throw new Error('Key pair was not generated for the certificate')}
+      // Check issuer private key
+      if (!privateKey) {throw new Error('The private key is not defined')}
 
-      const provider = keyProvider(spki.algorithm) || providers[options.providerName];
-      self.signatureAlgorithm = provider.signature; // Import the private key
+      // Signature algorithm
+      const provider = keyProvider(spki.algorithm) || providers[options.providerName]
+      self.signatureAlgorithm = provider.signature
 
-      return subtle.importKey('pkcs8', privateKey.encode(), privateKey.privateKeyAlgorithm, false, ['sign']);
+      // Import the private key
+      return subtle.importKey('pkcs8', privateKey.encode(),
+        privateKey.privateKeyAlgorithm, false, ['sign'])
     }).then(function (key) {
+
       // Sign the certification request
-      return subtle.sign(self.signatureAlgorithm, key, self.requestInfo.encode());
+      return subtle.sign(self.signatureAlgorithm, key, self.requestInfo.encode())
     }).then(function (signatureValue) {
-      // Siganture value
-      self.signatureValue = signatureValue;
-      return self;
-    });
-  },
-  // </editor-fold>
 
+      // Siganture value
+      self.signatureValue = signatureValue
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Verify the Certification Request. Checks the signature on the public key in the request.
      *
@@ -1045,32 +866,31 @@ extend(asn1.CertificationRequest, Request, {
      */
   verify: function () // <editor-fold defaultstate="collapsed">
   {
-    const self = this,
-          spki = self.subjectPublicKeyInfo;
+    const self = this, spki = self.subjectPublicKeyInfo
     return new Promise(call).then(function () {
+
       // Import key
-      return subtle.importKey('spki', spki.encode(), spki.algorithm, 'false', ['verify']);
+      return subtle.importKey('spki', spki.encode(), spki.algorithm, 'false', ['verify'])
     }).then(function (publicKey) {
+
       // Verify signature
-      return subtle.verify(self.signatureAlgorithm, publicKey, self.signatureValue, self.requestInfo.encode());
+      return subtle.verify(self.signatureAlgorithm, publicKey, self.signatureValue,
+        self.requestInfo.encode())
     }).then(function (result) {
-      if (!result) {
-        throw new Error('The certification request has invalid signature');
-      }
+      if (!result) {throw new Error('The certification request has invalid signature')}
+      return self
+    })
+  }, // </editor-fold>
+})
 
-      return self;
-    });
-  } // </editor-fold>
-
-});
 /**
  * A class that encapsulates a DER-encoded PKCS #10 certificate request.
  *
  * @memberOf GostCert
  * @type GostCert.Request
  */
+GostCert.prototype.Request = Request
 
-GostCert.prototype.Request = Request;
 /**
  * A class for retrieving Certificates and CRLs from a repository.<br><br>
  *
@@ -1084,14 +904,12 @@ GostCert.prototype.Request = Request;
  * @param {GostCert.X509[]} certificates Certificates
  * @param {GostCert.CRL[]} crls CLRs
  */
-
 function CertStore(certificates, crls) // <editor-fold defaultstate="collapsed">
 {
-  this.certificates = certificates || [];
-  this.crls = crls || [];
+  this.certificates = certificates || []
+  this.crls = crls || []
 } // </editor-fold>
 
-
 extend(Object, CertStore, {
   /**
      * Returns a Array of Certificates that match the specified selector.
@@ -1103,10 +921,8 @@ extend(Object, CertStore, {
      */
   getCertificates: function (selector) // <editor-fold defaultstate="collapsed">
   {
-    return selectCertificates(this.certificates, selector);
-  },
-  // </editor-fold>
-
+    return selectCertificates(this.certificates, selector)
+  }, // </editor-fold>
   /**
      * Returns a Collection of CRLs that match the specified selector.
      *
@@ -1117,10 +933,8 @@ extend(Object, CertStore, {
      */
   getCRLs: function (selector) // <editor-fold defaultstate="collapsed">
   {
-    return selectCRLs(this.certificates, selector);
-  },
-  // </editor-fold>
-
+    return selectCRLs(this.certificates, selector)
+  }, // </editor-fold>
   /**
      * Loads this CertStore from the given PKCS#7 formated input stream.
      *
@@ -1132,21 +946,11 @@ extend(Object, CertStore, {
   load: function (store) // <editor-fold defaultstate="collapsed">
   {
     const info = new asn1.ContentInfo(store),
-          certs = info.certificates,
-          crls = info.crls;
-
-    for (var i = 0; i < certs.length; i++) {
-      this.certificates.push(new X509(certs[i]));
-    }
-
-    for (var i = 0; i < crls.length; i++) {
-      this.crls.push(new CRL(crls[i]));
-    }
-
-    return this;
-  },
-  // </editor-fold>
-
+      certs = info.certificates, crls = info.crls
+    for (var i = 0; i < certs.length; i++) {this.certificates.push(new X509(certs[i]))}
+    for (var i = 0; i < crls.length; i++) {this.crls.push(new CRL(crls[i]))}
+    return this
+  }, // </editor-fold>
   /**
      * Stores this CertStore to the given output stream in PKCS#7 format.
      *
@@ -1160,37 +964,33 @@ extend(Object, CertStore, {
       contentType: 'signedData',
       version: 0,
       digestAlgorithms: [],
-      encapContentInfo: {
-        contentType: 'data'
-      },
+      encapContentInfo: { contentType: 'data' },
       certificates: this.certs,
       crls: this.crls,
-      signerInfos: []
-    });
-  } // </editor-fold>
+      signerInfos: [],
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * A class for retrieving Certificates and CRLs from a repository.
  *
  * @memberOf GostCert
  * @type GostCert.Request
  */
+GostCert.prototype.CertStore = CertStore
 
-GostCert.prototype.CertStore = CertStore;
 /**
  * A class for building and validating certification paths (also known as certificate chains).
  *
  * @class GostCert.CertPath
  * @param {GostCert.CertStore} certStore
  */
-
 function CertPath(certStore) // <editor-fold defaultstate="collapsed">
 {
-  this.certStore = certStore;
+  this.certStore = certStore
 } // </editor-fold>
 
-
 extend(Object, CertPath, {
   /**
      * Attempts to build a certification path using the specified algorithm parameter set.
@@ -1203,75 +1003,54 @@ extend(Object, CertPath, {
      */
   build: function (certificate, date) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
       // Build certification path
-      let current = new X509(certificate),
-          certPath = [],
-          success = false,
-          verifiers = [];
-
+      let current = new X509(certificate), certPath = [], success = false, verifiers = []
       while (current) {
-        let foundCRLs = [],
-            founds = [];
-        certPath.push(current);
-
+        let foundCRLs = [], founds = []
+        certPath.push(current)
         if (!success) {
           // Select issuer CRL
-          foundCRLs = self.certStore.getCRLs({
-            issuer: current.issuer,
-            date: date
-          }); // Create issuer's selection criteria
-
-          const selector = authoritySelector(current, current.extensions, current.notBefore); // Self-signed certificate?
-
-          if (!matchCertificate(current, selector)) // Select issuer form trusted CA global.list
-            {
-              founds = self.certStore.getCertificates(selector);
-            } else {
-            success = true;
-          }
-        } // Add verification tasks
-
-
+          foundCRLs = self.certStore.getCRLs({ issuer: current.issuer, date: date })
+          // Create issuer's selection criteria
+          const selector = authoritySelector(current, current.extensions,
+            current.notBefore)
+          // Self-signed certificate?
+          if (!matchCertificate(current, selector))
+          // Select issuer form trusted CA global.list
+          {founds = self.certStore.getCertificates(selector)} else {success = true}
+        }
+        // Add verification tasks
         const next = founds.length > 0 && new X509(founds[0]),
-              crl = foundCRLs.length > 0 && new CRL(foundCRLs[0]); // Verify CRLs
-
-        if (crl) {
-          verifiers.push(crl.verify(next, date));
-        } // Verify the certificate
+          crl = foundCRLs.length > 0 && new CRL(foundCRLs[0])
+        // Verify CRLs
+        if (crl) {verifiers.push(crl.verify(next, date))}
 
-
-        verifiers.push(current.verify(next, crl, date));
-        current = next;
+        // Verify the certificate
+        verifiers.push(current.verify(next, crl, date))
+        current = next
       }
-
-      if (!success) {
-        throw new Error('global.certificate is not found');
-      } // Verify all certificates in path
-
-
+      if (!success) {throw new Error('global.certificate is not found')}
+      // Verify all certificates in path
       return Promise.all(verifiers).then(function (results) {
         for (let i = 0; i < results; i++) {
-          if (!results[i]) {
-            throw new Error('Certification path is not validated');
-          }
+          if (!results[i]) {throw new Error('Certification path is not validated')}
         }
+        return certPath
+      })
+    })
+  }, // </editor-fold>
+})
 
-        return certPath;
-      });
-    });
-  } // </editor-fold>
-
-});
 /**
  * A class for building and validating certification paths (also known as certificate chains).
  *
  * @memberOf GostCert
  * @type GostCert.CertPath
  */
+GostCert.prototype.CertPath = CertPath
 
-GostCert.prototype.CertPath = CertPath;
 /**
  * A generic interface for implementing a particular certificate verification
  * scheme, such as constructing and verifying
@@ -1279,8 +1058,8 @@ GostCert.prototype.CertPath = CertPath;
  *
  * @class GostCert.CertificateTrustPolicy
  */
-
-function CertificateTrustPolicy() {}
+function CertificateTrustPolicy() {
+}
 
 extend(Object, CertificateTrustPolicy, {
   /**
@@ -1298,16 +1077,18 @@ extend(Object, CertificateTrustPolicy, {
      * @param {GostCert.CRL[]} crls CLRs
      * @returns {Promise} Promise to return valid {@link GostCert.X509}
      */
-  getValidCertificate: function (selector, certificates, crls) {}
-});
+  getValidCertificate: function (selector, certificates, crls) {
+  },
+})
+
 /**
  * A generic interface for implementing a particular certificate verification
  *
  * @memberOf GostCert
  * @type GostCert.CertificateTrustPolicy
  */
+GostCert.prototype.CertificateTrustPolicy = CertificateTrustPolicy
 
-GostCert.prototype.CertificateTrustPolicy = CertificateTrustPolicy;
 /**
  * A certificate trust policy based on a set of trusted global.CAs.<br><br>
  *
@@ -1330,15 +1111,13 @@ GostCert.prototype.CertificateTrustPolicy = CertificateTrustPolicy;
  * @param {boolean} requireCRL
  * @param {boolean} requireCA
  */
-
 function TrustedCAPolicy(trustedCACerts, requireCRL, requireCA) // <editor-fold defaultstate="collapsed">
 {
-  this.trustedCACerts = trustedCACerts || [];
-  this.requireCRL = requireCRL || false;
-  this.requireCA = requireCA || true;
+  this.trustedCACerts = trustedCACerts || []
+  this.requireCRL = requireCRL || false
+  this.requireCA = requireCA || true
 } // </editor-fold>
 
-
 extend(CertificateTrustPolicy, TrustedCAPolicy, {
   /**
      * Returns a certificate, known to be valid (according to criteria dependent
@@ -1358,130 +1137,85 @@ extend(CertificateTrustPolicy, TrustedCAPolicy, {
      */
   getValidCertificate: function (selector, certificates, crls, date) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        certPath;
+    let self = this, certPath
     return new Promise(call).then(function () {
-      certificates = certificates || [];
-      crls = crls || []; // Get certificates from the trusted list
-
-      let certs = selectCertificates(self.trustedCACerts, selector);
-
-      if (certs.length > 0) {
-        return new X509(certs[0]);
-      } // Get certificates from the list
-
-
-      certs = selectCertificates(certificates, selector);
-
-      if (certs.length === 0) {
-        return;
-      } // Build certification path
-
-
-      let current = new X509(certs[0]),
-          success = false,
-          verifiers = [];
-      certPath = [];
-
+      certificates = certificates || []
+      crls = crls || []
+      // Get certificates from the trusted list
+      let certs = selectCertificates(self.trustedCACerts, selector)
+      if (certs.length > 0) {return new X509(certs[0])}
+      // Get certificates from the list
+      certs = selectCertificates(certificates, selector)
+      if (certs.length === 0) {return}
+      // Build certification path
+      let current = new X509(certs[0]), success = false, verifiers = []
+      certPath = []
       while (current) {
-        let foundCRLs = [],
-            founds = [];
-        certPath.push(current);
-
+        let foundCRLs = [], founds = []
+        certPath.push(current)
         if (!success) {
           // Select issuer CRL
-          foundCRLs = selectCRLs(crls, {
-            issuer: current.issuer,
-            date: date
-          });
-
-          if (foundCRLs.length === 0 && self.requireCRL) {
-            return;
-          } // The issuer\'s CRL is not found
+          foundCRLs = selectCRLs(crls, { issuer: current.issuer, date: date })
+          if (foundCRLs.length === 0 && self.requireCRL) {return} // The issuer\'s CRL is not found
           // Create issuer's selection criteria
-
-
-          selector = authoritySelector(current, current.extensions, current.notBefore); // Select issuer form trusted CA global.list
-
-          founds = selectCertificates(self.trustedCACerts, selector);
-
+          selector = authoritySelector(current, current.extensions,
+            current.notBefore)
+          // Select issuer form trusted CA global.list
+          founds = selectCertificates(self.trustedCACerts, selector)
           if (founds.length === 0) {
             // Non-trusted self-signed certificate?
             if (!matchCertificate(current, selector)) {
               // Select issuer from certificate list
-              founds = selectCertificates(certificates, selector);
-
+              founds = selectCertificates(certificates, selector)
               if (founds.length > 0) {
                 // Check basic contrains and CA flag
-                const exts = founds[0].extensions;
-
+                const exts = founds[0].extensions
                 if (self.requireCA) {
-                  if (!exts || !exts.basicConstraints || !exts.basicConstraints.cA) {
-                    return;
-                  } // The issuer\'s certificate is not valid
+                  if (!exts || !exts.basicConstraints || !exts.basicConstraints.cA) {return} // The issuer\'s certificate is not valid
                   // Check path length limit
-
-
-                  if (exts.basicConstraints.pathLenConstraint !== undefined && exts.basicConstraints.pathLenConstraint < certPath.length - 1) {
-                    return;
-                  } // The issuer\'s certificate path length constraint exceeded
-
+                  if (exts.basicConstraints.pathLenConstraint !== undefined &&
+                                        exts.basicConstraints.pathLenConstraint < certPath.length - 1) {return} // The issuer\'s certificate path length constraint exceeded
                 }
-              } else {
-                return;
-              } // Certification path is not built
-
+              } else {return} // Certification path is not built
             }
-          } else {
-            success = true;
-          }
-        } // Add verification tasks
-
-
+          } else {success = true}
+        }
+        // Add verification tasks
         const next = founds.length > 0 && new X509(founds[0]),
-              crl = foundCRLs.length > 0 && new CRL(foundCRLs[0]); // Verify CRLs
-
-        if (crl) {
-          verifiers.push(crl.verify(next, date));
-        } // Verify the certificate
+          crl = foundCRLs.length > 0 && new CRL(foundCRLs[0])
+        // Verify CRLs
+        if (crl) {verifiers.push(crl.verify(next, date))}
 
-
-        verifiers.push(current.verify(next, crl, date));
-        current = next;
+        // Verify the certificate
+        verifiers.push(current.verify(next, crl, date))
+        current = next
       }
-
-      if (!success) {
-        throw new Error('Trusted global.certificate is not found');
-      } // Verify all certificates in path
-
-
+      if (!success) {throw new Error('Trusted global.certificate is not found')}
+      // Verify all certificates in path
       return Promise.all(verifiers).then(function (results) {
         for (let i = 0; i < results; i++) {
-          if (!results[i]) {
-            throw new Error('Certification path is not validated');
-          }
+          if (!results[i]) {throw new Error('Certification path is not validated')}
         }
+        return certPath[0]
+      })
+    })
+  }, // </editor-fold>
+})
 
-        return certPath[0];
-      });
-    });
-  } // </editor-fold>
-
-});
 /**
  * A certificate trust policy based on a set of trusted global.CAs.
  *
  * @memberOf GostCert
  * @type GostCert.TrustedCAPolicy
  */
+GostCert.prototype.TrustedCAPolicy = TrustedCAPolicy
 
-GostCert.prototype.TrustedCAPolicy = TrustedCAPolicy;
 /**
  * Provides facilities for handling certificates, CRLs, etc.
  *
  * @memberOf gostCrypto
  * @type GostCert
  */
+gostCrypto.cert = new GostCert()
 
-gostCrypto.cert = new GostCert();
-module.exports = GostCert;
\ No newline at end of file
+module.exports = GostCert
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostCipher.js b/node_modules/gost-crypto/lib/gostCipher.js
index 5fd2e60..c29f93b 100644
--- a/node_modules/gost-crypto/lib/gostCipher.js
+++ b/node_modules/gost-crypto/lib/gostCipher.js
@@ -29,263 +29,329 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const GostRandom = require('./gostRandom');
+
+const GostRandom = require('./gostRandom')
+
 /*
  * Initial parameters and common algortithms of GOST 28147-89
  *
  * http://tools.ietf.org/html/rfc5830
  *
- */
-// <editor-fold defaultstate="collapsed">
-
+ */ // <editor-fold defaultstate="collapsed">
 
-const rootcrypto = global.crypto || global.msCrypto;
-const CryptoOperationData = global.ArrayBuffer;
+const rootcrypto = global.crypto || global.msCrypto
+const CryptoOperationData = global.ArrayBuffer
 const SyntaxError = global.SyntaxError || global.Error,
-      DataError = global.DataError || global.Error,
-      NotSupportedError = global.NotSupportedError || global.Error;
+  DataError = global.DataError || global.Error,
+  NotSupportedError = global.NotSupportedError || global.Error
 /*
  * Check supported
  * This implementation support only Little Endian arhitecture
  */
 
-const littleEndian = function () {
-  const buffer = new CryptoOperationData(2);
-  new DataView(buffer).setInt16(0, 256, true);
-  return new Int16Array(buffer)[0] === 256;
-}(); // Default initial vector
+const littleEndian = (function () {
+  const buffer = new CryptoOperationData(2)
+  new DataView(buffer).setInt16(0, 256, true)
+  return new Int16Array(buffer)[0] === 256
+})()
 
+// Default initial vector
+const defaultIV = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
 
-const defaultIV = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]); // Predefined sBox collection
-
+// Predefined sBox collection
 const sBoxes = {
-  'E-TEST': [0x4, 0x2, 0xF, 0x5, 0x9, 0x1, 0x0, 0x8, 0xE, 0x3, 0xB, 0xC, 0xD, 0x7, 0xA, 0x6, 0xC, 0x9, 0xF, 0xE, 0x8, 0x1, 0x3, 0xA, 0x2, 0x7, 0x4, 0xD, 0x6, 0x0, 0xB, 0x5, 0xD, 0x8, 0xE, 0xC, 0x7, 0x3, 0x9, 0xA, 0x1, 0x5, 0x2, 0x4, 0x6, 0xF, 0x0, 0xB, 0xE, 0x9, 0xB, 0x2, 0x5, 0xF, 0x7, 0x1, 0x0, 0xD, 0xC, 0x6, 0xA, 0x4, 0x3, 0x8, 0x3, 0xE, 0x5, 0x9, 0x6, 0x8, 0x0, 0xD, 0xA, 0xB, 0x7, 0xC, 0x2, 0x1, 0xF, 0x4, 0x8, 0xF, 0x6, 0xB, 0x1, 0x9, 0xC, 0x5, 0xD, 0x3, 0x7, 0xA, 0x0, 0xE, 0x2, 0x4, 0x9, 0xB, 0xC, 0x0, 0x3, 0x6, 0x7, 0x5, 0x4, 0x8, 0xE, 0xF, 0x1, 0xA, 0x2, 0xD, 0xC, 0x6, 0x5, 0x2, 0xB, 0x0, 0x9, 0xD, 0x3, 0xE, 0x7, 0xA, 0xF, 0x4, 0x1, 0x8],
-  'E-A': [0x9, 0x6, 0x3, 0x2, 0x8, 0xB, 0x1, 0x7, 0xA, 0x4, 0xE, 0xF, 0xC, 0x0, 0xD, 0x5, 0x3, 0x7, 0xE, 0x9, 0x8, 0xA, 0xF, 0x0, 0x5, 0x2, 0x6, 0xC, 0xB, 0x4, 0xD, 0x1, 0xE, 0x4, 0x6, 0x2, 0xB, 0x3, 0xD, 0x8, 0xC, 0xF, 0x5, 0xA, 0x0, 0x7, 0x1, 0x9, 0xE, 0x7, 0xA, 0xC, 0xD, 0x1, 0x3, 0x9, 0x0, 0x2, 0xB, 0x4, 0xF, 0x8, 0x5, 0x6, 0xB, 0x5, 0x1, 0x9, 0x8, 0xD, 0xF, 0x0, 0xE, 0x4, 0x2, 0x3, 0xC, 0x7, 0xA, 0x6, 0x3, 0xA, 0xD, 0xC, 0x1, 0x2, 0x0, 0xB, 0x7, 0x5, 0x9, 0x4, 0x8, 0xF, 0xE, 0x6, 0x1, 0xD, 0x2, 0x9, 0x7, 0xA, 0x6, 0x0, 0x8, 0xC, 0x4, 0x5, 0xF, 0x3, 0xB, 0xE, 0xB, 0xA, 0xF, 0x5, 0x0, 0xC, 0xE, 0x8, 0x6, 0x2, 0x3, 0x9, 0x1, 0x7, 0xD, 0x4],
-  'E-B': [0x8, 0x4, 0xB, 0x1, 0x3, 0x5, 0x0, 0x9, 0x2, 0xE, 0xA, 0xC, 0xD, 0x6, 0x7, 0xF, 0x0, 0x1, 0x2, 0xA, 0x4, 0xD, 0x5, 0xC, 0x9, 0x7, 0x3, 0xF, 0xB, 0x8, 0x6, 0xE, 0xE, 0xC, 0x0, 0xA, 0x9, 0x2, 0xD, 0xB, 0x7, 0x5, 0x8, 0xF, 0x3, 0x6, 0x1, 0x4, 0x7, 0x5, 0x0, 0xD, 0xB, 0x6, 0x1, 0x2, 0x3, 0xA, 0xC, 0xF, 0x4, 0xE, 0x9, 0x8, 0x2, 0x7, 0xC, 0xF, 0x9, 0x5, 0xA, 0xB, 0x1, 0x4, 0x0, 0xD, 0x6, 0x8, 0xE, 0x3, 0x8, 0x3, 0x2, 0x6, 0x4, 0xD, 0xE, 0xB, 0xC, 0x1, 0x7, 0xF, 0xA, 0x0, 0x9, 0x5, 0x5, 0x2, 0xA, 0xB, 0x9, 0x1, 0xC, 0x3, 0x7, 0x4, 0xD, 0x0, 0x6, 0xF, 0x8, 0xE, 0x0, 0x4, 0xB, 0xE, 0x8, 0x3, 0x7, 0x1, 0xA, 0x2, 0x9, 0x6, 0xF, 0xD, 0x5, 0xC],
-  'E-C': [0x1, 0xB, 0xC, 0x2, 0x9, 0xD, 0x0, 0xF, 0x4, 0x5, 0x8, 0xE, 0xA, 0x7, 0x6, 0x3, 0x0, 0x1, 0x7, 0xD, 0xB, 0x4, 0x5, 0x2, 0x8, 0xE, 0xF, 0xC, 0x9, 0xA, 0x6, 0x3, 0x8, 0x2, 0x5, 0x0, 0x4, 0x9, 0xF, 0xA, 0x3, 0x7, 0xC, 0xD, 0x6, 0xE, 0x1, 0xB, 0x3, 0x6, 0x0, 0x1, 0x5, 0xD, 0xA, 0x8, 0xB, 0x2, 0x9, 0x7, 0xE, 0xF, 0xC, 0x4, 0x8, 0xD, 0xB, 0x0, 0x4, 0x5, 0x1, 0x2, 0x9, 0x3, 0xC, 0xE, 0x6, 0xF, 0xA, 0x7, 0xC, 0x9, 0xB, 0x1, 0x8, 0xE, 0x2, 0x4, 0x7, 0x3, 0x6, 0x5, 0xA, 0x0, 0xF, 0xD, 0xA, 0x9, 0x6, 0x8, 0xD, 0xE, 0x2, 0x0, 0xF, 0x3, 0x5, 0xB, 0x4, 0x1, 0xC, 0x7, 0x7, 0x4, 0x0, 0x5, 0xA, 0x2, 0xF, 0xE, 0xC, 0x6, 0x1, 0xB, 0xD, 0x9, 0x3, 0x8],
-  'E-D': [0xF, 0xC, 0x2, 0xA, 0x6, 0x4, 0x5, 0x0, 0x7, 0x9, 0xE, 0xD, 0x1, 0xB, 0x8, 0x3, 0xB, 0x6, 0x3, 0x4, 0xC, 0xF, 0xE, 0x2, 0x7, 0xD, 0x8, 0x0, 0x5, 0xA, 0x9, 0x1, 0x1, 0xC, 0xB, 0x0, 0xF, 0xE, 0x6, 0x5, 0xA, 0xD, 0x4, 0x8, 0x9, 0x3, 0x7, 0x2, 0x1, 0x5, 0xE, 0xC, 0xA, 0x7, 0x0, 0xD, 0x6, 0x2, 0xB, 0x4, 0x9, 0x3, 0xF, 0x8, 0x0, 0xC, 0x8, 0x9, 0xD, 0x2, 0xA, 0xB, 0x7, 0x3, 0x6, 0x5, 0x4, 0xE, 0xF, 0x1, 0x8, 0x0, 0xF, 0x3, 0x2, 0x5, 0xE, 0xB, 0x1, 0xA, 0x4, 0x7, 0xC, 0x9, 0xD, 0x6, 0x3, 0x0, 0x6, 0xF, 0x1, 0xE, 0x9, 0x2, 0xD, 0x8, 0xC, 0x4, 0xB, 0xA, 0x5, 0x7, 0x1, 0xA, 0x6, 0x8, 0xF, 0xB, 0x0, 0x4, 0xC, 0x3, 0x5, 0x9, 0x7, 0xD, 0x2, 0xE],
-  'E-SC': [0x3, 0x6, 0x1, 0x0, 0x5, 0x7, 0xd, 0x9, 0x4, 0xb, 0x8, 0xc, 0xe, 0xf, 0x2, 0xa, 0x7, 0x1, 0x5, 0x2, 0x8, 0xb, 0x9, 0xc, 0xd, 0x0, 0x3, 0xa, 0xf, 0xe, 0x4, 0x6, 0xf, 0x1, 0x4, 0x6, 0xc, 0x8, 0x9, 0x2, 0xe, 0x3, 0x7, 0xa, 0xb, 0xd, 0x5, 0x0, 0x3, 0x4, 0xf, 0xc, 0x5, 0x9, 0xe, 0x0, 0x6, 0x8, 0x7, 0xa, 0x1, 0xb, 0xd, 0x2, 0x6, 0x9, 0x0, 0x7, 0xb, 0x8, 0x4, 0xc, 0x2, 0xe, 0xa, 0xf, 0x1, 0xd, 0x5, 0x3, 0x6, 0x1, 0x2, 0xf, 0x0, 0xb, 0x9, 0xc, 0x7, 0xd, 0xa, 0x5, 0x8, 0x4, 0xe, 0x3, 0x0, 0x2, 0xe, 0xc, 0x9, 0x1, 0x4, 0x7, 0x3, 0xf, 0x6, 0x8, 0xa, 0xd, 0xb, 0x5, 0x5, 0x2, 0xb, 0x8, 0x4, 0xc, 0x7, 0x1, 0xa, 0x6, 0xe, 0x0, 0x9, 0x3, 0xd, 0xf],
+  'E-TEST': [
+    0x4, 0x2, 0xF, 0x5, 0x9, 0x1, 0x0, 0x8, 0xE, 0x3, 0xB, 0xC, 0xD, 0x7, 0xA, 0x6,
+    0xC, 0x9, 0xF, 0xE, 0x8, 0x1, 0x3, 0xA, 0x2, 0x7, 0x4, 0xD, 0x6, 0x0, 0xB, 0x5,
+    0xD, 0x8, 0xE, 0xC, 0x7, 0x3, 0x9, 0xA, 0x1, 0x5, 0x2, 0x4, 0x6, 0xF, 0x0, 0xB,
+    0xE, 0x9, 0xB, 0x2, 0x5, 0xF, 0x7, 0x1, 0x0, 0xD, 0xC, 0x6, 0xA, 0x4, 0x3, 0x8,
+    0x3, 0xE, 0x5, 0x9, 0x6, 0x8, 0x0, 0xD, 0xA, 0xB, 0x7, 0xC, 0x2, 0x1, 0xF, 0x4,
+    0x8, 0xF, 0x6, 0xB, 0x1, 0x9, 0xC, 0x5, 0xD, 0x3, 0x7, 0xA, 0x0, 0xE, 0x2, 0x4,
+    0x9, 0xB, 0xC, 0x0, 0x3, 0x6, 0x7, 0x5, 0x4, 0x8, 0xE, 0xF, 0x1, 0xA, 0x2, 0xD,
+    0xC, 0x6, 0x5, 0x2, 0xB, 0x0, 0x9, 0xD, 0x3, 0xE, 0x7, 0xA, 0xF, 0x4, 0x1, 0x8,
+  ],
+  'E-A': [
+    0x9, 0x6, 0x3, 0x2, 0x8, 0xB, 0x1, 0x7, 0xA, 0x4, 0xE, 0xF, 0xC, 0x0, 0xD, 0x5,
+    0x3, 0x7, 0xE, 0x9, 0x8, 0xA, 0xF, 0x0, 0x5, 0x2, 0x6, 0xC, 0xB, 0x4, 0xD, 0x1,
+    0xE, 0x4, 0x6, 0x2, 0xB, 0x3, 0xD, 0x8, 0xC, 0xF, 0x5, 0xA, 0x0, 0x7, 0x1, 0x9,
+    0xE, 0x7, 0xA, 0xC, 0xD, 0x1, 0x3, 0x9, 0x0, 0x2, 0xB, 0x4, 0xF, 0x8, 0x5, 0x6,
+    0xB, 0x5, 0x1, 0x9, 0x8, 0xD, 0xF, 0x0, 0xE, 0x4, 0x2, 0x3, 0xC, 0x7, 0xA, 0x6,
+    0x3, 0xA, 0xD, 0xC, 0x1, 0x2, 0x0, 0xB, 0x7, 0x5, 0x9, 0x4, 0x8, 0xF, 0xE, 0x6,
+    0x1, 0xD, 0x2, 0x9, 0x7, 0xA, 0x6, 0x0, 0x8, 0xC, 0x4, 0x5, 0xF, 0x3, 0xB, 0xE,
+    0xB, 0xA, 0xF, 0x5, 0x0, 0xC, 0xE, 0x8, 0x6, 0x2, 0x3, 0x9, 0x1, 0x7, 0xD, 0x4,
+  ],
+  'E-B': [
+    0x8, 0x4, 0xB, 0x1, 0x3, 0x5, 0x0, 0x9, 0x2, 0xE, 0xA, 0xC, 0xD, 0x6, 0x7, 0xF,
+    0x0, 0x1, 0x2, 0xA, 0x4, 0xD, 0x5, 0xC, 0x9, 0x7, 0x3, 0xF, 0xB, 0x8, 0x6, 0xE,
+    0xE, 0xC, 0x0, 0xA, 0x9, 0x2, 0xD, 0xB, 0x7, 0x5, 0x8, 0xF, 0x3, 0x6, 0x1, 0x4,
+    0x7, 0x5, 0x0, 0xD, 0xB, 0x6, 0x1, 0x2, 0x3, 0xA, 0xC, 0xF, 0x4, 0xE, 0x9, 0x8,
+    0x2, 0x7, 0xC, 0xF, 0x9, 0x5, 0xA, 0xB, 0x1, 0x4, 0x0, 0xD, 0x6, 0x8, 0xE, 0x3,
+    0x8, 0x3, 0x2, 0x6, 0x4, 0xD, 0xE, 0xB, 0xC, 0x1, 0x7, 0xF, 0xA, 0x0, 0x9, 0x5,
+    0x5, 0x2, 0xA, 0xB, 0x9, 0x1, 0xC, 0x3, 0x7, 0x4, 0xD, 0x0, 0x6, 0xF, 0x8, 0xE,
+    0x0, 0x4, 0xB, 0xE, 0x8, 0x3, 0x7, 0x1, 0xA, 0x2, 0x9, 0x6, 0xF, 0xD, 0x5, 0xC,
+  ],
+  'E-C': [
+    0x1, 0xB, 0xC, 0x2, 0x9, 0xD, 0x0, 0xF, 0x4, 0x5, 0x8, 0xE, 0xA, 0x7, 0x6, 0x3,
+    0x0, 0x1, 0x7, 0xD, 0xB, 0x4, 0x5, 0x2, 0x8, 0xE, 0xF, 0xC, 0x9, 0xA, 0x6, 0x3,
+    0x8, 0x2, 0x5, 0x0, 0x4, 0x9, 0xF, 0xA, 0x3, 0x7, 0xC, 0xD, 0x6, 0xE, 0x1, 0xB,
+    0x3, 0x6, 0x0, 0x1, 0x5, 0xD, 0xA, 0x8, 0xB, 0x2, 0x9, 0x7, 0xE, 0xF, 0xC, 0x4,
+    0x8, 0xD, 0xB, 0x0, 0x4, 0x5, 0x1, 0x2, 0x9, 0x3, 0xC, 0xE, 0x6, 0xF, 0xA, 0x7,
+    0xC, 0x9, 0xB, 0x1, 0x8, 0xE, 0x2, 0x4, 0x7, 0x3, 0x6, 0x5, 0xA, 0x0, 0xF, 0xD,
+    0xA, 0x9, 0x6, 0x8, 0xD, 0xE, 0x2, 0x0, 0xF, 0x3, 0x5, 0xB, 0x4, 0x1, 0xC, 0x7,
+    0x7, 0x4, 0x0, 0x5, 0xA, 0x2, 0xF, 0xE, 0xC, 0x6, 0x1, 0xB, 0xD, 0x9, 0x3, 0x8,
+  ],
+  'E-D': [
+    0xF, 0xC, 0x2, 0xA, 0x6, 0x4, 0x5, 0x0, 0x7, 0x9, 0xE, 0xD, 0x1, 0xB, 0x8, 0x3,
+    0xB, 0x6, 0x3, 0x4, 0xC, 0xF, 0xE, 0x2, 0x7, 0xD, 0x8, 0x0, 0x5, 0xA, 0x9, 0x1,
+    0x1, 0xC, 0xB, 0x0, 0xF, 0xE, 0x6, 0x5, 0xA, 0xD, 0x4, 0x8, 0x9, 0x3, 0x7, 0x2,
+    0x1, 0x5, 0xE, 0xC, 0xA, 0x7, 0x0, 0xD, 0x6, 0x2, 0xB, 0x4, 0x9, 0x3, 0xF, 0x8,
+    0x0, 0xC, 0x8, 0x9, 0xD, 0x2, 0xA, 0xB, 0x7, 0x3, 0x6, 0x5, 0x4, 0xE, 0xF, 0x1,
+    0x8, 0x0, 0xF, 0x3, 0x2, 0x5, 0xE, 0xB, 0x1, 0xA, 0x4, 0x7, 0xC, 0x9, 0xD, 0x6,
+    0x3, 0x0, 0x6, 0xF, 0x1, 0xE, 0x9, 0x2, 0xD, 0x8, 0xC, 0x4, 0xB, 0xA, 0x5, 0x7,
+    0x1, 0xA, 0x6, 0x8, 0xF, 0xB, 0x0, 0x4, 0xC, 0x3, 0x5, 0x9, 0x7, 0xD, 0x2, 0xE,
+  ],
+  'E-SC': [
+    0x3, 0x6, 0x1, 0x0, 0x5, 0x7, 0xd, 0x9, 0x4, 0xb, 0x8, 0xc, 0xe, 0xf, 0x2, 0xa,
+    0x7, 0x1, 0x5, 0x2, 0x8, 0xb, 0x9, 0xc, 0xd, 0x0, 0x3, 0xa, 0xf, 0xe, 0x4, 0x6,
+    0xf, 0x1, 0x4, 0x6, 0xc, 0x8, 0x9, 0x2, 0xe, 0x3, 0x7, 0xa, 0xb, 0xd, 0x5, 0x0,
+    0x3, 0x4, 0xf, 0xc, 0x5, 0x9, 0xe, 0x0, 0x6, 0x8, 0x7, 0xa, 0x1, 0xb, 0xd, 0x2,
+    0x6, 0x9, 0x0, 0x7, 0xb, 0x8, 0x4, 0xc, 0x2, 0xe, 0xa, 0xf, 0x1, 0xd, 0x5, 0x3,
+    0x6, 0x1, 0x2, 0xf, 0x0, 0xb, 0x9, 0xc, 0x7, 0xd, 0xa, 0x5, 0x8, 0x4, 0xe, 0x3,
+    0x0, 0x2, 0xe, 0xc, 0x9, 0x1, 0x4, 0x7, 0x3, 0xf, 0x6, 0x8, 0xa, 0xd, 0xb, 0x5,
+    0x5, 0x2, 0xb, 0x8, 0x4, 0xc, 0x7, 0x1, 0xa, 0x6, 0xe, 0x0, 0x9, 0x3, 0xd, 0xf,
+  ],
   'E-Z': [// This is default S-box in according to draft of new standard
-  0xc, 0x4, 0x6, 0x2, 0xa, 0x5, 0xb, 0x9, 0xe, 0x8, 0xd, 0x7, 0x0, 0x3, 0xf, 0x1, 0x6, 0x8, 0x2, 0x3, 0x9, 0xa, 0x5, 0xc, 0x1, 0xe, 0x4, 0x7, 0xb, 0xd, 0x0, 0xf, 0xb, 0x3, 0x5, 0x8, 0x2, 0xf, 0xa, 0xd, 0xe, 0x1, 0x7, 0x4, 0xc, 0x9, 0x6, 0x0, 0xc, 0x8, 0x2, 0x1, 0xd, 0x4, 0xf, 0x6, 0x7, 0x0, 0xa, 0x5, 0x3, 0xe, 0x9, 0xb, 0x7, 0xf, 0x5, 0xa, 0x8, 0x1, 0x6, 0xd, 0x0, 0x9, 0x3, 0xe, 0xb, 0x4, 0x2, 0xc, 0x5, 0xd, 0xf, 0x6, 0x9, 0x2, 0xc, 0xa, 0xb, 0x7, 0x8, 0x1, 0x4, 0x3, 0xe, 0x0, 0x8, 0xe, 0x2, 0x5, 0x6, 0x9, 0x1, 0xc, 0xf, 0x4, 0xb, 0x0, 0xd, 0xa, 0x3, 0x7, 0x1, 0x7, 0xe, 0xd, 0x0, 0x5, 0x8, 0x3, 0x4, 0xf, 0xa, 0x6, 0x9, 0xc, 0xb, 0x2],
+    0xc, 0x4, 0x6, 0x2, 0xa, 0x5, 0xb, 0x9, 0xe, 0x8, 0xd, 0x7, 0x0, 0x3, 0xf, 0x1,
+    0x6, 0x8, 0x2, 0x3, 0x9, 0xa, 0x5, 0xc, 0x1, 0xe, 0x4, 0x7, 0xb, 0xd, 0x0, 0xf,
+    0xb, 0x3, 0x5, 0x8, 0x2, 0xf, 0xa, 0xd, 0xe, 0x1, 0x7, 0x4, 0xc, 0x9, 0x6, 0x0,
+    0xc, 0x8, 0x2, 0x1, 0xd, 0x4, 0xf, 0x6, 0x7, 0x0, 0xa, 0x5, 0x3, 0xe, 0x9, 0xb,
+    0x7, 0xf, 0x5, 0xa, 0x8, 0x1, 0x6, 0xd, 0x0, 0x9, 0x3, 0xe, 0xb, 0x4, 0x2, 0xc,
+    0x5, 0xd, 0xf, 0x6, 0x9, 0x2, 0xc, 0xa, 0xb, 0x7, 0x8, 0x1, 0x4, 0x3, 0xe, 0x0,
+    0x8, 0xe, 0x2, 0x5, 0x6, 0x9, 0x1, 0xc, 0xf, 0x4, 0xb, 0x0, 0xd, 0xa, 0x3, 0x7,
+    0x1, 0x7, 0xe, 0xd, 0x0, 0x5, 0x8, 0x3, 0x4, 0xf, 0xa, 0x6, 0x9, 0xc, 0xb, 0x2,
+  ],
   //S-box for digest
-  'D-TEST': [0x4, 0xA, 0x9, 0x2, 0xD, 0x8, 0x0, 0xE, 0x6, 0xB, 0x1, 0xC, 0x7, 0xF, 0x5, 0x3, 0xE, 0xB, 0x4, 0xC, 0x6, 0xD, 0xF, 0xA, 0x2, 0x3, 0x8, 0x1, 0x0, 0x7, 0x5, 0x9, 0x5, 0x8, 0x1, 0xD, 0xA, 0x3, 0x4, 0x2, 0xE, 0xF, 0xC, 0x7, 0x6, 0x0, 0x9, 0xB, 0x7, 0xD, 0xA, 0x1, 0x0, 0x8, 0x9, 0xF, 0xE, 0x4, 0x6, 0xC, 0xB, 0x2, 0x5, 0x3, 0x6, 0xC, 0x7, 0x1, 0x5, 0xF, 0xD, 0x8, 0x4, 0xA, 0x9, 0xE, 0x0, 0x3, 0xB, 0x2, 0x4, 0xB, 0xA, 0x0, 0x7, 0x2, 0x1, 0xD, 0x3, 0x6, 0x8, 0x5, 0x9, 0xC, 0xF, 0xE, 0xD, 0xB, 0x4, 0x1, 0x3, 0xF, 0x5, 0x9, 0x0, 0xA, 0xE, 0x7, 0x6, 0x8, 0x2, 0xC, 0x1, 0xF, 0xD, 0x0, 0x5, 0x7, 0xA, 0x4, 0x9, 0x2, 0x3, 0xE, 0x6, 0xB, 0x8, 0xC],
-  'D-A': [0xA, 0x4, 0x5, 0x6, 0x8, 0x1, 0x3, 0x7, 0xD, 0xC, 0xE, 0x0, 0x9, 0x2, 0xB, 0xF, 0x5, 0xF, 0x4, 0x0, 0x2, 0xD, 0xB, 0x9, 0x1, 0x7, 0x6, 0x3, 0xC, 0xE, 0xA, 0x8, 0x7, 0xF, 0xC, 0xE, 0x9, 0x4, 0x1, 0x0, 0x3, 0xB, 0x5, 0x2, 0x6, 0xA, 0x8, 0xD, 0x4, 0xA, 0x7, 0xC, 0x0, 0xF, 0x2, 0x8, 0xE, 0x1, 0x6, 0x5, 0xD, 0xB, 0x9, 0x3, 0x7, 0x6, 0x4, 0xB, 0x9, 0xC, 0x2, 0xA, 0x1, 0x8, 0x0, 0xE, 0xF, 0xD, 0x3, 0x5, 0x7, 0x6, 0x2, 0x4, 0xD, 0x9, 0xF, 0x0, 0xA, 0x1, 0x5, 0xB, 0x8, 0xE, 0xC, 0x3, 0xD, 0xE, 0x4, 0x1, 0x7, 0x0, 0x5, 0xA, 0x3, 0xC, 0x8, 0xF, 0x6, 0x2, 0x9, 0xB, 0x1, 0x3, 0xA, 0x9, 0x5, 0xB, 0x4, 0xF, 0x8, 0x6, 0x7, 0xE, 0xD, 0x0, 0x2, 0xC],
-  'D-SC': [0xb, 0xd, 0x7, 0x0, 0x5, 0x4, 0x1, 0xf, 0x9, 0xe, 0x6, 0xa, 0x3, 0xc, 0x8, 0x2, 0x1, 0x2, 0x7, 0x9, 0xd, 0xb, 0xf, 0x8, 0xe, 0xc, 0x4, 0x0, 0x5, 0x6, 0xa, 0x3, 0x5, 0x1, 0xd, 0x3, 0xf, 0x6, 0xc, 0x7, 0x9, 0x8, 0xb, 0x2, 0x4, 0xe, 0x0, 0xa, 0xd, 0x1, 0xb, 0x4, 0x9, 0xc, 0xe, 0x0, 0x7, 0x5, 0x8, 0xf, 0x6, 0x2, 0xa, 0x3, 0x2, 0xd, 0xa, 0xf, 0x9, 0xb, 0x3, 0x7, 0x8, 0xc, 0x5, 0xe, 0x6, 0x0, 0x1, 0x4, 0x0, 0x4, 0x6, 0xc, 0x5, 0x3, 0x8, 0xd, 0xa, 0xb, 0xf, 0x2, 0x1, 0x9, 0x7, 0xe, 0x1, 0x3, 0xc, 0x8, 0xa, 0x6, 0xb, 0x0, 0x2, 0xe, 0x7, 0x9, 0xf, 0x4, 0x5, 0xd, 0xa, 0xb, 0x6, 0x0, 0x1, 0x3, 0x4, 0x7, 0xe, 0xd, 0x5, 0xf, 0x8, 0x2, 0x9, 0xc]
-};
-const C = new Uint8Array([0x69, 0x00, 0x72, 0x22, 0x64, 0xC9, 0x04, 0x23, 0x8D, 0x3A, 0xDB, 0x96, 0x46, 0xE9, 0x2A, 0xC4, 0x18, 0xFE, 0xAC, 0x94, 0x00, 0xED, 0x07, 0x12, 0xC0, 0x86, 0xDC, 0xC2, 0xEF, 0x4C, 0xA9, 0x2B]);
+  'D-TEST': [
+    0x4, 0xA, 0x9, 0x2, 0xD, 0x8, 0x0, 0xE, 0x6, 0xB, 0x1, 0xC, 0x7, 0xF, 0x5, 0x3,
+    0xE, 0xB, 0x4, 0xC, 0x6, 0xD, 0xF, 0xA, 0x2, 0x3, 0x8, 0x1, 0x0, 0x7, 0x5, 0x9,
+    0x5, 0x8, 0x1, 0xD, 0xA, 0x3, 0x4, 0x2, 0xE, 0xF, 0xC, 0x7, 0x6, 0x0, 0x9, 0xB,
+    0x7, 0xD, 0xA, 0x1, 0x0, 0x8, 0x9, 0xF, 0xE, 0x4, 0x6, 0xC, 0xB, 0x2, 0x5, 0x3,
+    0x6, 0xC, 0x7, 0x1, 0x5, 0xF, 0xD, 0x8, 0x4, 0xA, 0x9, 0xE, 0x0, 0x3, 0xB, 0x2,
+    0x4, 0xB, 0xA, 0x0, 0x7, 0x2, 0x1, 0xD, 0x3, 0x6, 0x8, 0x5, 0x9, 0xC, 0xF, 0xE,
+    0xD, 0xB, 0x4, 0x1, 0x3, 0xF, 0x5, 0x9, 0x0, 0xA, 0xE, 0x7, 0x6, 0x8, 0x2, 0xC,
+    0x1, 0xF, 0xD, 0x0, 0x5, 0x7, 0xA, 0x4, 0x9, 0x2, 0x3, 0xE, 0x6, 0xB, 0x8, 0xC,
+  ],
+  'D-A': [
+    0xA, 0x4, 0x5, 0x6, 0x8, 0x1, 0x3, 0x7, 0xD, 0xC, 0xE, 0x0, 0x9, 0x2, 0xB, 0xF,
+    0x5, 0xF, 0x4, 0x0, 0x2, 0xD, 0xB, 0x9, 0x1, 0x7, 0x6, 0x3, 0xC, 0xE, 0xA, 0x8,
+    0x7, 0xF, 0xC, 0xE, 0x9, 0x4, 0x1, 0x0, 0x3, 0xB, 0x5, 0x2, 0x6, 0xA, 0x8, 0xD,
+    0x4, 0xA, 0x7, 0xC, 0x0, 0xF, 0x2, 0x8, 0xE, 0x1, 0x6, 0x5, 0xD, 0xB, 0x9, 0x3,
+    0x7, 0x6, 0x4, 0xB, 0x9, 0xC, 0x2, 0xA, 0x1, 0x8, 0x0, 0xE, 0xF, 0xD, 0x3, 0x5,
+    0x7, 0x6, 0x2, 0x4, 0xD, 0x9, 0xF, 0x0, 0xA, 0x1, 0x5, 0xB, 0x8, 0xE, 0xC, 0x3,
+    0xD, 0xE, 0x4, 0x1, 0x7, 0x0, 0x5, 0xA, 0x3, 0xC, 0x8, 0xF, 0x6, 0x2, 0x9, 0xB,
+    0x1, 0x3, 0xA, 0x9, 0x5, 0xB, 0x4, 0xF, 0x8, 0x6, 0x7, 0xE, 0xD, 0x0, 0x2, 0xC,
+  ],
+  'D-SC': [
+    0xb, 0xd, 0x7, 0x0, 0x5, 0x4, 0x1, 0xf, 0x9, 0xe, 0x6, 0xa, 0x3, 0xc, 0x8, 0x2,
+    0x1, 0x2, 0x7, 0x9, 0xd, 0xb, 0xf, 0x8, 0xe, 0xc, 0x4, 0x0, 0x5, 0x6, 0xa, 0x3,
+    0x5, 0x1, 0xd, 0x3, 0xf, 0x6, 0xc, 0x7, 0x9, 0x8, 0xb, 0x2, 0x4, 0xe, 0x0, 0xa,
+    0xd, 0x1, 0xb, 0x4, 0x9, 0xc, 0xe, 0x0, 0x7, 0x5, 0x8, 0xf, 0x6, 0x2, 0xa, 0x3,
+    0x2, 0xd, 0xa, 0xf, 0x9, 0xb, 0x3, 0x7, 0x8, 0xc, 0x5, 0xe, 0x6, 0x0, 0x1, 0x4,
+    0x0, 0x4, 0x6, 0xc, 0x5, 0x3, 0x8, 0xd, 0xa, 0xb, 0xf, 0x2, 0x1, 0x9, 0x7, 0xe,
+    0x1, 0x3, 0xc, 0x8, 0xa, 0x6, 0xb, 0x0, 0x2, 0xe, 0x7, 0x9, 0xf, 0x4, 0x5, 0xd,
+    0xa, 0xb, 0x6, 0x0, 0x1, 0x3, 0x4, 0x7, 0xe, 0xd, 0x5, 0xf, 0x8, 0x2, 0x9, 0xc,
+  ],
+}
+
+const C = new Uint8Array([
+  0x69, 0x00, 0x72, 0x22, 0x64, 0xC9, 0x04, 0x23,
+  0x8D, 0x3A, 0xDB, 0x96, 0x46, 0xE9, 0x2A, 0xC4,
+  0x18, 0xFE, 0xAC, 0x94, 0x00, 0xED, 0x07, 0x12,
+  0xC0, 0x86, 0xDC, 0xC2, 0xEF, 0x4C, 0xA9, 0x2B,
+])
 
 function signed(x) {
-  return x >= 0x80000000 ? x - 0x100000000 : x;
+  return x >= 0x80000000 ? x - 0x100000000 : x
 }
 
 function unsigned(x) {
-  return x < 0 ? x + 0x100000000 : x;
-} // Set random values into Uint8Arry
-// Random generator
-
+  return x < 0 ? x + 0x100000000 : x
+}
 
+// Set random values into Uint8Arry
+// Random generator
 function randomSeed(e) {
-  const randomSource = GostRandom ? new GostRandom() : rootcrypto;
-
-  if (randomSource.getRandomValues) {
-    randomSource.getRandomValues(e);
-  } else {
-    throw new NotSupportedError('Random generator not found');
-  }
-} // Get buffer
-
+  const randomSource = GostRandom ? new (GostRandom) : rootcrypto
+  if (randomSource.getRandomValues) {randomSource.getRandomValues(e)} else {throw new NotSupportedError('Random generator not found')}
+}
 
+// Get buffer
 function buffer(d) {
-  if (d instanceof CryptoOperationData) {
-    return d;
-  }
-
+  if (d instanceof CryptoOperationData) {return d}
   if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
-    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ? d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer;
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
   }
+  throw new DataError('CryptoOperationData required')
+}
 
-  throw new DataError('CryptoOperationData required');
-} // Get byte array
-
-
+// Get byte array
 function byteArray(d) {
-  return new Uint8Array(buffer(d));
-} // Clone byte array
-
+  return new Uint8Array(buffer(d))
+}
 
+// Clone byte array
 function cloneArray(d) {
-  return new Uint8Array(byteArray(d));
-} // Get int32 array
+  return new Uint8Array(byteArray(d))
+}
 
 
+// Get int32 array
 function intArray(d) {
-  return new Int32Array(buffer(d));
-} // Swap bytes for version 2015
-
+  return new Int32Array(buffer(d))
+}
 
+// Swap bytes for version 2015
 function swap32(b) {
-  return (b & 0xff) << 24 | (b & 0xff00) << 8 | b >> 8 & 0xff00 | b >> 24 & 0xff;
-} // </editor-fold>
+  return ((b & 0xff) << 24)
+        | ((b & 0xff00) << 8)
+        | ((b >> 8) & 0xff00)
+        | ((b >> 24) & 0xff)
+}
+
+// </editor-fold>
 
 /*
  * Initial parameters and common algortithms of GOST R 34.12-15
  * Algorithm "Kuznechik" 128bit
  *
- */
-// <editor-fold defaultstate="collapsed">
-// Default initial vector
+ */ // <editor-fold defaultstate="collapsed">
 
+// Default initial vector
+const defaultIV128 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
 
-const defaultIV128 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // Mult table for R function
+// Mult table for R function
+const multTable = (function () {
 
-const multTable = function () {
   // Multiply two numbers in the GF(2^8) finite field defined
   // by the polynomial x^8 + x^7 + x^6 + x + 1 = 0 */
   function gmul(a, b) {
-    let p = 0,
-        counter,
-        carry;
-
+    let p = 0, counter, carry
     for (counter = 0; counter < 8; counter++) {
-      if (b & 1) {
-        p ^= a;
-      }
-
-      carry = a & 0x80; // detect if x^8 term is about to be generated
-
-      a = a << 1 & 0xff;
-
-      if (carry) {
-        a ^= 0xc3;
-      } // replace x^8 with x^7 + x^6 + x + 1
-
-
-      b >>= 1;
+      if (b & 1) {p ^= a}
+      carry = a & 0x80 // detect if x^8 term is about to be generated
+      a = (a << 1) & 0xff
+      if (carry) {a ^= 0xc3} // replace x^8 with x^7 + x^6 + x + 1
+      b >>= 1
     }
+    return p & 0xff
+  }
 
-    return p & 0xff;
-  } // It is required only this values for R function
+  // It is required only this values for R function
   //       0   1   2    3    4    5    6    7
-
-
-  const x = [1, 16, 32, 133, 148, 192, 194, 251];
-  const m = [];
-
+  const x = [1, 16, 32, 133, 148, 192, 194, 251]
+  const m = []
   for (let i = 0; i < 8; i++) {
-    m[i] = [];
-
-    for (let j = 0; j < 256; j++) {
-      m[i][j] = gmul(x[i], j);
-    }
+    m[i] = []
+    for (let j = 0; j < 256; j++) {m[i][j] = gmul(x[i], j)}
   }
+  return m
+})()
 
-  return m;
-}(); // 148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148, 1
-
-
-const kB = [4, 2, 3, 1, 6, 5, 0, 7, 0, 5, 6, 1, 3, 2, 4, 0]; // R - function
+// 148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148, 1
+const kB = [4, 2, 3, 1, 6, 5, 0, 7, 0, 5, 6, 1, 3, 2, 4, 0]
 
+// R - function
 function funcR(d) {
-  let sum = 0;
-
-  for (var i = 0; i < 16; i++) {
-    sum ^= multTable[kB[i]][d[i]];
-  }
-
-  for (var i = 16; i > 0; --i) {
-    d[i] = d[i - 1];
-  }
+  let sum = 0
+  for (var i = 0; i < 16; i++) {sum ^= multTable[kB[i]][d[i]]}
 
-  d[0] = sum;
+  for (var i = 16; i > 0; --i) {d[i] = d[i - 1]}
+  d[0] = sum
 }
 
 function funcReverseR(d) {
-  const tmp = d[0];
-
-  for (var i = 0; i < 15; i++) {
-    d[i] = d[i + 1];
-  }
-
-  d[15] = tmp;
-  let sum = 0;
-
-  for (i = 0; i < 16; i++) {
-    sum ^= multTable[kB[i]][d[i]];
-  }
-
-  d[15] = sum;
-} // Nonlinear transformation
+  const tmp = d[0]
+  for (var i = 0; i < 15; i++) {d[i] = d[i + 1]}
+  d[15] = tmp
 
+  let sum = 0
+  for (i = 0; i < 16; i++) {sum ^= multTable[kB[i]][d[i]]}
+  d[15] = sum
+}
 
-const kPi = [252, 238, 221, 17, 207, 110, 49, 22, 251, 196, 250, 218, 35, 197, 4, 77, 233, 119, 240, 219, 147, 46, 153, 186, 23, 54, 241, 187, 20, 205, 95, 193, 249, 24, 101, 90, 226, 92, 239, 33, 129, 28, 60, 66, 139, 1, 142, 79, 5, 132, 2, 174, 227, 106, 143, 160, 6, 11, 237, 152, 127, 212, 211, 31, 235, 52, 44, 81, 234, 200, 72, 171, 242, 42, 104, 162, 253, 58, 206, 204, 181, 112, 14, 86, 8, 12, 118, 18, 191, 114, 19, 71, 156, 183, 93, 135, 21, 161, 150, 41, 16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177, 50, 117, 25, 61, 255, 53, 138, 126, 109, 84, 198, 128, 195, 189, 13, 87, 223, 245, 36, 169, 62, 168, 67, 201, 215, 121, 214, 246, 124, 34, 185, 3, 224, 15, 236, 222, 122, 148, 176, 188, 220, 232, 40, 80, 78, 51, 10, 74, 167, 151, 96, 115, 30, 0, 98, 68, 26, 184, 56, 130, 100, 159, 38, 65, 173, 69, 70, 146, 39, 94, 85, 47, 140, 163, 165, 125, 105, 213, 149, 59, 7, 88, 179, 64, 134, 172, 29, 247, 48, 55, 107, 228, 136, 217, 231, 137, 225, 27, 131, 73, 76, 63, 248, 254, 141, 83, 170, 144, 202, 216, 133, 97, 32, 113, 103, 164, 45, 43, 9, 91, 203, 155, 37, 208, 190, 229, 108, 82, 89, 166, 116, 210, 230, 244, 180, 192, 209, 102, 175, 194, 57, 75, 99, 182];
-
-const kReversePi = function () {
-  const m = [];
-
-  for (let i = 0, n = kPi.length; i < n; i++) {
-    m[kPi[i]] = i;
-  }
-
-  return m;
-}();
+// Nonlinear transformation
+const kPi = [
+  252, 238, 221, 17, 207, 110, 49, 22, 251, 196, 250, 218, 35, 197, 4, 77,
+  233, 119, 240, 219, 147, 46, 153, 186, 23, 54, 241, 187, 20, 205, 95, 193,
+  249, 24, 101, 90, 226, 92, 239, 33, 129, 28, 60, 66, 139, 1, 142, 79,
+  5, 132, 2, 174, 227, 106, 143, 160, 6, 11, 237, 152, 127, 212, 211, 31,
+  235, 52, 44, 81, 234, 200, 72, 171, 242, 42, 104, 162, 253, 58, 206, 204,
+  181, 112, 14, 86, 8, 12, 118, 18, 191, 114, 19, 71, 156, 183, 93, 135,
+  21, 161, 150, 41, 16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177,
+  50, 117, 25, 61, 255, 53, 138, 126, 109, 84, 198, 128, 195, 189, 13, 87,
+  223, 245, 36, 169, 62, 168, 67, 201, 215, 121, 214, 246, 124, 34, 185, 3,
+  224, 15, 236, 222, 122, 148, 176, 188, 220, 232, 40, 80, 78, 51, 10, 74,
+  167, 151, 96, 115, 30, 0, 98, 68, 26, 184, 56, 130, 100, 159, 38, 65,
+  173, 69, 70, 146, 39, 94, 85, 47, 140, 163, 165, 125, 105, 213, 149, 59,
+  7, 88, 179, 64, 134, 172, 29, 247, 48, 55, 107, 228, 136, 217, 231, 137,
+  225, 27, 131, 73, 76, 63, 248, 254, 141, 83, 170, 144, 202, 216, 133, 97,
+  32, 113, 103, 164, 45, 43, 9, 91, 203, 155, 37, 208, 190, 229, 108, 82,
+  89, 166, 116, 210, 230, 244, 180, 192, 209, 102, 175, 194, 57, 75, 99, 182,
+]
+
+const kReversePi = (function () {
+  const m = []
+  for (let i = 0, n = kPi.length; i < n; i++) {m[kPi[i]] = i}
+  return m
+})()
 
 function funcS(d) {
-  for (let i = 0; i < 16; ++i) {
-    d[i] = kPi[d[i]];
-  }
+  for (let i = 0; i < 16; ++i) {d[i] = kPi[d[i]]}
 }
 
 function funcReverseS(d) {
-  for (let i = 0; i < 16; ++i) {
-    d[i] = kReversePi[d[i]];
-  }
+  for (let i = 0; i < 16; ++i) {d[i] = kReversePi[d[i]]}
 }
 
 function funcX(a, b) {
-  for (let i = 0; i < 16; ++i) {
-    a[i] ^= b[i];
-  }
+  for (let i = 0; i < 16; ++i) {a[i] ^= b[i]}
 }
 
 function funcL(d) {
-  for (let i = 0; i < 16; ++i) {
-    funcR(d);
-  }
+  for (let i = 0; i < 16; ++i) {funcR(d)}
 }
 
 function funcReverseL(d) {
-  for (let i = 0; i < 16; ++i) {
-    funcReverseR(d);
-  }
+  for (let i = 0; i < 16; ++i) {funcReverseR(d)}
 }
 
 function funcLSX(a, b) {
-  funcX(a, b);
-  funcS(a);
-  funcL(a);
+  funcX(a, b)
+  funcS(a)
+  funcL(a)
 }
 
 function funcReverseLSX(a, b) {
-  funcX(a, b);
-  funcReverseL(a);
-  funcReverseS(a);
+  funcX(a, b)
+  funcReverseL(a)
+  funcReverseS(a)
 }
 
 function funcF(inputKey, inputKeySecond, iterationConst) {
-  const tmp = new Uint8Array(inputKey);
-  funcLSX(inputKey, iterationConst);
-  funcX(inputKey, inputKeySecond);
-  inputKeySecond.set(tmp);
+  const tmp = new Uint8Array(inputKey)
+  funcLSX(inputKey, iterationConst)
+  funcX(inputKey, inputKeySecond)
+  inputKeySecond.set(tmp)
 }
 
 function funcC(number, d) {
-  for (let i = 0; i < 15; i++) {
-    d[i] = 0;
-  }
+  for (let i = 0; i < 15; i++) {d[i] = 0}
+  d[15] = number
+  funcL(d)
+}
 
-  d[15] = number;
-  funcL(d);
-} // </editor-fold>
+// </editor-fold>
 
 /**
  * Key schedule for GOST R 34.12-15 128bits
@@ -297,26 +363,20 @@ function funcC(number, d) {
  * @param {type} k
  * @returns {Uint8Array}
  */
-
-
 function keySchedule128(k) // <editor-fold defaultstate="collapsed">
 {
-  const keys = new Uint8Array(160),
-        c = new Uint8Array(16);
-  keys.set(byteArray(k));
-
+  const keys = new Uint8Array(160), c = new Uint8Array(16)
+  keys.set(byteArray(k))
   for (let j = 0; j < 4; j++) {
-    const j0 = 32 * j,
-          j1 = 32 * (j + 1);
-    keys.set(new Uint8Array(keys.buffer, j0, 32), j1);
-
+    const j0 = 32 * j, j1 = 32 * (j + 1)
+    keys.set(new Uint8Array(keys.buffer, j0, 32), j1)
     for (let i = 1; i < 9; i++) {
-      funcC(j * 8 + i, c);
-      funcF(new Uint8Array(keys.buffer, j1, 16), new Uint8Array(keys.buffer, j1 + 16, 16), c);
+      funcC(j * 8 + i, c)
+      funcF(new Uint8Array(keys.buffer, j1, 16),
+        new Uint8Array(keys.buffer, j1 + 16, 16), c)
     }
   }
-
-  return keys;
+  return keys
 } // </editor-fold>
 
 /**
@@ -331,25 +391,18 @@ function keySchedule128(k) // <editor-fold defaultstate="collapsed">
  * @param {number} ofs Offsec
  * @param {number} e true - decrypt
  */
-
-
 function process128(k, d, ofs, e) // <editor-fold defaultstate="collapsed">
 {
-  ofs = ofs || d.byteOffset;
-  const r = new Uint8Array(d.buffer, ofs, 16);
-
+  ofs = ofs || d.byteOffset
+  const r = new Uint8Array(d.buffer, ofs, 16)
   if (e) {
-    for (var i = 0; i < 9; i++) {
-      funcReverseLSX(r, new Uint8Array(k.buffer, (9 - i) * 16, 16));
-    }
+    for (var i = 0; i < 9; i++) {funcReverseLSX(r, new Uint8Array(k.buffer, (9 - i) * 16, 16))}
 
-    funcX(r, new Uint8Array(k.buffer, 0, 16));
+    funcX(r, new Uint8Array(k.buffer, 0, 16))
   } else {
-    for (var i = 0; i < 9; i++) {
-      funcLSX(r, new Uint8Array(k.buffer, 16 * i, 16));
-    }
+    for (var i = 0; i < 9; i++) {funcLSX(r, new Uint8Array(k.buffer, 16 * i, 16))}
 
-    funcX(r, new Uint8Array(k.buffer, 16 * 9, 16));
+    funcX(r, new Uint8Array(k.buffer, 16 * 9, 16))
   }
 } // </editor-fold>
 
@@ -364,23 +417,24 @@ function process128(k, d, ofs, e) // <editor-fold defaultstate="collapsed">
  * @param {Int32Array} m 2x32 bits cipher block
  * @param {Int32Array} k 32 bits key[i]
  */
-
-
 function round(S, m, k) // <editor-fold defaultstate="collapsed">
 {
-  let cm = m[0] + k & 0xffffffff;
-  let om = S[0 + (cm >> 0 * 4 & 0xF)] << 0 * 4;
-  om |= S[16 + (cm >> 1 * 4 & 0xF)] << 1 * 4;
-  om |= S[32 + (cm >> 2 * 4 & 0xF)] << 2 * 4;
-  om |= S[48 + (cm >> 3 * 4 & 0xF)] << 3 * 4;
-  om |= S[64 + (cm >> 4 * 4 & 0xF)] << 4 * 4;
-  om |= S[80 + (cm >> 5 * 4 & 0xF)] << 5 * 4;
-  om |= S[96 + (cm >> 6 * 4 & 0xF)] << 6 * 4;
-  om |= S[112 + (cm >> 7 * 4 & 0xF)] << 7 * 4;
-  cm = om << 11 | om >>> 32 - 11;
-  cm ^= m[1];
-  m[1] = m[0];
-  m[0] = cm;
+  let cm = (m[0] + k) & 0xffffffff
+
+  let om = S[0 + ((cm >> (0 * 4)) & 0xF)] << (0 * 4)
+  om |= S[16 + ((cm >> (1 * 4)) & 0xF)] << (1 * 4)
+  om |= S[32 + ((cm >> (2 * 4)) & 0xF)] << (2 * 4)
+  om |= S[48 + ((cm >> (3 * 4)) & 0xF)] << (3 * 4)
+  om |= S[64 + ((cm >> (4 * 4)) & 0xF)] << (4 * 4)
+  om |= S[80 + ((cm >> (5 * 4)) & 0xF)] << (5 * 4)
+  om |= S[96 + ((cm >> (6 * 4)) & 0xF)] << (6 * 4)
+  om |= S[112 + ((cm >> (7 * 4)) & 0xF)] << (7 * 4)
+  cm = om << 11 | om >>> (32 - 11)
+
+  cm ^= m[1]
+  m[1] = m[0]
+  m[0] = cm
+
 } // </editor-fold>
 
 /**
@@ -394,21 +448,17 @@ function round(S, m, k) // <editor-fold defaultstate="collapsed">
  * @param d {Int32Array} 8x8 bits cipher block
  * @param ofs {number} offset
  */
-
-
 function process89(k, d, ofs) // <editor-fold defaultstate="collapsed">
 {
-  ofs = ofs || d.byteOffset;
+  ofs = ofs || d.byteOffset
   const s = this.sBox,
-        m = new Int32Array(d.buffer, ofs, 2);
+    m = new Int32Array(d.buffer, ofs, 2)
 
-  for (let i = 0; i < 32; i++) {
-    round(s, m, k[i]);
-  }
+  for (let i = 0; i < 32; i++) {round(s, m, k[i])}
 
-  const r = m[0];
-  m[0] = m[1];
-  m[1] = r;
+  const r = m[0]
+  m[0] = m[1]
+  m[1] = r
 } // </editor-fold>
 
 /**
@@ -422,23 +472,19 @@ function process89(k, d, ofs) // <editor-fold defaultstate="collapsed">
  * @param d {Int32Array} 8x8 bits cipher block
  * @param ofs {number} offset
  */
-
-
 function process15(k, d, ofs) // <editor-fold defaultstate="collapsed">
 {
-  ofs = ofs || d.byteOffset;
+  ofs = ofs || d.byteOffset
   const s = this.sBox,
-        m = new Int32Array(d.buffer, ofs, 2),
-        r = swap32(m[0]);
-  m[0] = swap32(m[1]);
-  m[1] = r;
+    m = new Int32Array(d.buffer, ofs, 2),
+    r = swap32(m[0])
+  m[0] = swap32(m[1])
+  m[1] = r
 
-  for (let i = 0; i < 32; i++) {
-    round(s, m, k[i]);
-  }
+  for (let i = 0; i < 32; i++) {round(s, m, k[i])}
 
-  m[0] = swap32(m[0]);
-  m[1] = swap32(m[1]);
+  m[0] = swap32(m[0])
+  m[1] = swap32(m[1])
 } // </editor-fold>
 
 /**
@@ -452,40 +498,26 @@ function process15(k, d, ofs) // <editor-fold defaultstate="collapsed">
  * @param e {boolean}  true - decrypt
  * @returns {Int32Array} keyScheduled 32-bit key
  */
-
-
 function keySchedule89(k, e) // <editor-fold defaultstate="collapsed">
 {
   const sch = new Int32Array(32),
-        key = new Int32Array(buffer(k));
+    key = new Int32Array(buffer(k))
 
-  for (var i = 0; i < 8; i++) {
-    sch[i] = key[i];
-  }
+  for (var i = 0; i < 8; i++) {sch[i] = key[i]}
 
   if (e) {
-    for (var i = 0; i < 8; i++) {
-      sch[i + 8] = sch[7 - i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[7 - i]}
 
-    for (var i = 0; i < 8; i++) {
-      sch[i + 16] = sch[7 - i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[7 - i]}
   } else {
-    for (var i = 0; i < 8; i++) {
-      sch[i + 8] = sch[i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[i]}
 
-    for (var i = 0; i < 8; i++) {
-      sch[i + 16] = sch[i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[i]}
   }
 
-  for (var i = 0; i < 8; i++) {
-    sch[i + 24] = sch[7 - i];
-  }
+  for (var i = 0; i < 8; i++) {sch[i + 24] = sch[7 - i]}
 
-  return sch;
+  return sch
 } // </editor-fold>
 
 /**
@@ -499,40 +531,26 @@ function keySchedule89(k, e) // <editor-fold defaultstate="collapsed">
  * @param e {boolean}  true - decrypt
  * @returns {Int32Array} keyScheduled 32-bit key
  */
-
-
 function keySchedule15(k, e) // <editor-fold defaultstate="collapsed">
 {
   const sch = new Int32Array(32),
-        key = new Int32Array(buffer(k));
+    key = new Int32Array(buffer(k))
 
-  for (var i = 0; i < 8; i++) {
-    sch[i] = swap32(key[i]);
-  }
+  for (var i = 0; i < 8; i++) {sch[i] = swap32(key[i])}
 
   if (e) {
-    for (var i = 0; i < 8; i++) {
-      sch[i + 8] = sch[7 - i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[7 - i]}
 
-    for (var i = 0; i < 8; i++) {
-      sch[i + 16] = sch[7 - i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[7 - i]}
   } else {
-    for (var i = 0; i < 8; i++) {
-      sch[i + 8] = sch[i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 8] = sch[i]}
 
-    for (var i = 0; i < 8; i++) {
-      sch[i + 16] = sch[i];
-    }
+    for (var i = 0; i < 8; i++) {sch[i + 16] = sch[i]}
   }
 
-  for (var i = 0; i < 8; i++) {
-    sch[i + 24] = sch[7 - i];
-  }
+  for (var i = 0; i < 8; i++) {sch[i + 24] = sch[7 - i]}
 
-  return sch;
+  return sch
 } // </editor-fold>
 
 /**
@@ -547,39 +565,45 @@ function keySchedule15(k, e) // <editor-fold defaultstate="collapsed">
  * @param {Uint8Array} k
  * @returns {Uint16Array}
  */
-
-
-const keyScheduleRC2 = function () // <editor-fold defaultstate="collapsed">
+const keyScheduleRC2 = (function () // <editor-fold defaultstate="collapsed">
 {
   // an array of "random" bytes based on the digits of PI = 3.14159...
-  const PITABLE = new Uint8Array([0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d, 0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2, 0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32, 0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82, 0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc, 0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26, 0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03, 0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7, 0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a, 0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec, 0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39, 0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31, 0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9, 0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9, 0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e, 0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad]);
+  const PITABLE = new Uint8Array([
+    0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
+    0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
+    0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
+    0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
+    0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
+    0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
+    0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
+    0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
+    0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
+    0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
+    0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
+    0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
+    0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
+    0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
+    0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
+    0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad,
+  ])
+
   return function (k) {
     const key = new Uint8Array(buffer(k)),
-          T = Math.min(key.length, 128),
-          T1 = this.effectiveLength,
-          T8 = Math.floor((T1 + 7) / 8),
-          TM = 0xff % Math.pow(2, 8 + T1 - 8 * T8);
-    const L = new Uint8Array(128),
-          K = new Uint16Array(L.buffer);
-
-    for (var i = 0; i < T; i++) {
-      L[i] = key[i];
-    }
-
-    for (var i = T; i < 128; i++) {
-      L[i] = PITABLE[(L[i - 1] + L[i - T]) % 256];
-    }
-
-    L[128 - T8] = PITABLE[L[128 - T8] & TM];
-
-    for (var i = 127 - T8; i >= 0; --i) {
-      L[i] = PITABLE[L[i + 1] ^ L[i + T8]];
-    }
-
-    return K;
-  };
+      T = Math.min(key.length, 128),
+      T1 = this.effectiveLength,
+      T8 = Math.floor((T1 + 7) / 8),
+      TM = 0xff % Math.pow(2, 8 + T1 - 8 * T8)
+
+    const L = new Uint8Array(128), K = new Uint16Array(L.buffer)
+    for (var i = 0; i < T; i++) {L[i] = key[i]}
+    for (var i = T; i < 128; i++) {L[i] = PITABLE[(L[i - 1] + L[i - T]) % 256]}
+    L[128 - T8] = PITABLE[L[128 - T8] & TM]
+    for (var i = 127 - T8; i >= 0; --i) {L[i] = PITABLE[L[i + 1] ^ L[i + T8]]}
+    return K
+  }
 } // </editor-fold>
-();
+)()
+
 /**
  * RC2 encrypt/decrypt process
  *
@@ -594,83 +618,74 @@ const keyScheduleRC2 = function () // <editor-fold defaultstate="collapsed">
  * @param {number} ofs Offsec
  * @param {number} e true - decrypt
  */
-
-
-const processRC2 = function () // <editor-fold defaultstate="collapsed">
+const processRC2 = (function () // <editor-fold defaultstate="collapsed">
 {
-  let K,
-      j,
-      R = new Uint16Array(4),
-      s = new Uint16Array([1, 2, 3, 5]),
-      reverse;
+  let K, j, R = new Uint16Array(4),
+    s = new Uint16Array([1, 2, 3, 5]), reverse
 
   function rol(R, s) {
-    return (R << s | R >>> 16 - s) & 0xffff;
+    return (R << s | R >>> (16 - s)) & 0xffff
   }
 
   function ror(R, s) {
-    return (R >>> s | R << 16 - s) & 0xffff;
+    return (R >>> s | R << (16 - s)) & 0xffff
   }
 
   function mix(i) {
     if (reverse) {
-      R[i] = ror(R[i], s[i]);
-      R[i] = R[i] - K[j] - (R[(i + 3) % 4] & R[(i + 2) % 4]) - (~R[(i + 3) % 4] & R[(i + 1) % 4]);
-      j = j - 1;
+      R[i] = ror(R[i], s[i])
+      R[i] = R[i] - K[j] - (R[(i + 3) % 4] & R[(i + 2) % 4]) - ((~R[(i + 3) % 4]) & R[(i + 1) % 4])
+      j = j - 1
     } else {
-      R[i] = R[i] + K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
-      j = j + 1;
-      R[i] = rol(R[i], s[i]);
+      R[i] = R[i] + K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + ((~R[(i + 3) % 4]) & R[(i + 1) % 4])
+      j = j + 1
+      R[i] = rol(R[i], s[i])
     }
   }
 
   function mash(i) {
     if (reverse) {
-      R[i] = R[i] - K[R[(i + 3) % 4] & 63];
+      R[i] = R[i] - K[R[(i + 3) % 4] & 63]
     } else {
-      R[i] = R[i] + K[R[(i + 3) % 4] & 63];
+      R[i] = R[i] + K[R[(i + 3) % 4] & 63]
     }
   }
 
   function perform(method, count) {
-    count = count || 1;
-
+    count = count || 1
     for (let j = 0; j < count; j++) {
       if (reverse) {
-        for (var i = 3; i >= 0; --i) {
-          method(i);
-        }
+        for (var i = 3; i >= 0; --i) {method(i)}
       } else {
-        for (var i = 0; i < 4; i++) {
-          method(i);
-        }
+        for (var i = 0; i < 4; i++) {method(i)}
       }
     }
   }
 
   return function (k, d, ofs, e) {
-    reverse = e; //  1. Initialize words R[0], ..., R[3] to contain the 64-bit
+    reverse = e
+    //  1. Initialize words R[0], ..., R[3] to contain the 64-bit
     //     ciphertext value.
-
-    R = new Uint16Array(d.buffer, ofs || d.byteOffset, 4); //  2. Expand the key, so that words K[0], ..., K[63] become
+    R = new Uint16Array(d.buffer, ofs || d.byteOffset, 4)
+    //  2. Expand the key, so that words K[0], ..., K[63] become
     //     defined.
-
-    K = k; //  3. Initialize j to zero (enc) j to 63 (dec).
-
-    j = e ? 63 : 0; //  4. Perform five mixing rounds.
-
-    perform(mix, 5); //  5. Perform one mashing round.
-
-    perform(mash); //  6. Perform six mixing rounds.
-
-    perform(mix, 6); //  7. Perform one mashing round.
-
-    perform(mash); //  8. Perform five mixing rounds.
-
-    perform(mix, 5);
-  };
+    K = k
+    //  3. Initialize j to zero (enc) j to 63 (dec).
+    j = e ? 63 : 0
+    //  4. Perform five mixing rounds.
+    perform(mix, 5)
+    //  5. Perform one mashing round.
+    perform(mash)
+    //  6. Perform six mixing rounds.
+    perform(mix, 6)
+    //  7. Perform one mashing round.
+    perform(mash)
+    //  8. Perform five mixing rounds.
+    perform(mix, 5)
+  }
 } // </editor-fold>
-();
+)()
+
 /**
  * Algorithm name GOST 28147-ECB<br><br>
  *
@@ -683,20 +698,16 @@ const processRC2 = function () // <editor-fold defaultstate="collapsed">
  * @param d {CryptoOperationData} 8 bits message
  * @return {CryptoOperationData} result
  */
-
-
 function encryptECB(k, d) // <editor-fold defaultstate="collapsed">
 {
   const p = this.pad(byteArray(d)),
-        n = this.blockSize,
-        b = p.byteLength / n,
-        key = this.keySchedule(k);
+    n = this.blockSize,
+    b = p.byteLength / n,
+    key = this.keySchedule(k)
 
-  for (let i = 0; i < b; i++) {
-    this.process(key, p, n * i);
-  }
+  for (let i = 0; i < b; i++) {this.process(key, p, n * i)}
 
-  return p.buffer;
+  return p.buffer
 } // </editor-fold>
 
 /**
@@ -712,20 +723,16 @@ function encryptECB(k, d) // <editor-fold defaultstate="collapsed">
  * @param d {CryptoOperationData} 8 bits message
  * @return {CryptoOperationData} result
  */
-
-
 function decryptECB(k, d) // <editor-fold defaultstate="collapsed">
 {
   const p = cloneArray(d),
-        n = this.blockSize,
-        b = p.byteLength / n,
-        key = this.keySchedule(k, 1);
+    n = this.blockSize,
+    b = p.byteLength / n,
+    key = this.keySchedule(k, 1)
 
-  for (let i = 0; i < b; i++) {
-    this.process(key, p, n * i, 1);
-  }
+  for (let i = 0; i < b; i++) {this.process(key, p, n * i, 1)}
 
-  return this.unpad(p).buffer;
+  return this.unpad(p).buffer
 } // </editor-fold>
 
 /**
@@ -743,51 +750,37 @@ function decryptECB(k, d) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv initial vector
  * @return {CryptoOperationData} result
  */
-
-
 function encryptCFB(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const s = new Uint8Array(iv || this.iv),
-        c = cloneArray(d),
-        m = s.length,
-        t = new Uint8Array(m),
-        b = this.shiftBits >> 3,
-        cb = c.length,
-        r = cb % b,
-        q = (cb - r) / b,
-        key = this.keySchedule(k);
+    c = cloneArray(d),
+    m = s.length,
+    t = new Uint8Array(m),
+    b = this.shiftBits >> 3,
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k)
 
   for (var i = 0; i < q; i++) {
-    for (var j = 0; j < m; j++) {
-      t[j] = s[j];
-    }
 
-    this.process(key, s);
+    for (var j = 0; j < m; j++) {t[j] = s[j]}
 
-    for (var j = 0; j < b; j++) {
-      c[i * b + j] ^= s[j];
-    }
+    this.process(key, s)
 
-    for (var j = 0; j < m - b; j++) {
-      s[j] = t[b + j];
-    }
+    for (var j = 0; j < b; j++) {c[i * b + j] ^= s[j]}
 
-    for (var j = 0; j < b; j++) {
-      s[m - b + j] = c[i * b + j];
-    }
+    for (var j = 0; j < m - b; j++) {s[j] = t[b + j]}
 
-    k = this.keyMeshing(k, s, i, key);
+    for (var j = 0; j < b; j++) {s[m - b + j] = c[i * b + j]}
+
+    k = this.keyMeshing(k, s, i, key)
   }
 
   if (r > 0) {
-    this.process(key, s);
+    this.process(key, s)
 
-    for (var i = 0; i < r; i++) {
-      c[q * b + i] ^= s[i];
-    }
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
   }
-
-  return c.buffer;
+  return c.buffer
 } // </editor-fold>
 
 /**
@@ -805,52 +798,40 @@ function encryptCFB(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv initial vector
  * @return {CryptoOperationData} result
  */
-
-
 function decryptCFB(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const s = new Uint8Array(iv || this.iv),
-        c = cloneArray(d),
-        m = s.length,
-        t = new Uint8Array(m),
-        b = this.shiftBits >> 3,
-        cb = c.length,
-        r = cb % b,
-        q = (cb - r) / b,
-        key = this.keySchedule(k);
+    c = cloneArray(d),
+    m = s.length,
+    t = new Uint8Array(m),
+    b = this.shiftBits >> 3,
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k)
 
   for (var i = 0; i < q; i++) {
-    for (var j = 0; j < m; j++) {
-      t[j] = s[j];
-    }
 
-    this.process(key, s);
+    for (var j = 0; j < m; j++) {t[j] = s[j]}
+
+    this.process(key, s)
 
     for (var j = 0; j < b; j++) {
-      t[j] = c[i * b + j];
-      c[i * b + j] ^= s[j];
+      t[j] = c[i * b + j]
+      c[i * b + j] ^= s[j]
     }
 
-    for (var j = 0; j < m - b; j++) {
-      s[j] = t[b + j];
-    }
+    for (var j = 0; j < m - b; j++) {s[j] = t[b + j]}
 
-    for (var j = 0; j < b; j++) {
-      s[m - b + j] = t[j];
-    }
+    for (var j = 0; j < b; j++) {s[m - b + j] = t[j]}
 
-    k = this.keyMeshing(k, s, i, key);
+    k = this.keyMeshing(k, s, i, key)
   }
 
   if (r > 0) {
-    this.process(key, s);
+    this.process(key, s)
 
-    for (var i = 0; i < r; i++) {
-      c[q * b + i] ^= s[i];
-    }
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
   }
-
-  return c.buffer;
+  return c.buffer
 } // </editor-fold>
 
 /**
@@ -868,7 +849,6 @@ function decryptCFB(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv 8x8 optional bits initial vector
  * @return {CryptoOperationData} result
  */
-
 /**
  * Algorithm name GOST 28147-OFB<br><br>
  *
@@ -884,56 +864,40 @@ function decryptCFB(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv initial vector
  * @return {CryptoOperationData} result
  */
-
-
 function processOFB(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const s = new Uint8Array(iv || this.iv),
-        c = cloneArray(d),
-        m = s.length,
-        t = new Uint8Array(m),
-        b = this.shiftBits >> 3,
-        p = new Uint8Array(b),
-        cb = c.length,
-        r = cb % b,
-        q = (cb - r) / b,
-        key = this.keySchedule(k);
+    c = cloneArray(d),
+    m = s.length,
+    t = new Uint8Array(m),
+    b = this.shiftBits >> 3,
+    p = new Uint8Array(b),
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k)
 
   for (var i = 0; i < q; i++) {
-    for (var j = 0; j < m; j++) {
-      t[j] = s[j];
-    }
 
-    this.process(key, s);
+    for (var j = 0; j < m; j++) {t[j] = s[j]}
 
-    for (var j = 0; j < b; j++) {
-      p[j] = s[j];
-    }
+    this.process(key, s)
 
-    for (var j = 0; j < b; j++) {
-      c[i * b + j] ^= s[j];
-    }
+    for (var j = 0; j < b; j++) {p[j] = s[j]}
 
-    for (var j = 0; j < m - b; j++) {
-      s[j] = t[b + j];
-    }
+    for (var j = 0; j < b; j++) {c[i * b + j] ^= s[j]}
 
-    for (var j = 0; j < b; j++) {
-      s[m - b + j] = p[j];
-    }
+    for (var j = 0; j < m - b; j++) {s[j] = t[b + j]}
+
+    for (var j = 0; j < b; j++) {s[m - b + j] = p[j]}
 
-    k = this.keyMeshing(k, s, i, key);
+    k = this.keyMeshing(k, s, i, key)
   }
 
   if (r > 0) {
-    this.process(key, s);
+    this.process(key, s)
 
-    for (var i = 0; i < r; i++) {
-      c[q * b + i] ^= s[i];
-    }
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
   }
-
-  return c.buffer;
+  return c.buffer
 } // </editor-fold>
 
 /**
@@ -950,7 +914,6 @@ function processOFB(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv 8x8 optional bits initial vector
  * @return {CryptoOperationData} result
  */
-
 /**
  * Algorithm name GOST 28147-CTR<br><br>
  *
@@ -965,109 +928,84 @@ function processOFB(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv initial vector
  * @return {CryptoOperationData} result
  */
-
-
 function processCTR89(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const s = new Uint8Array(iv || this.iv),
-        c = cloneArray(d),
-        b = this.blockSize,
-        t = new Int8Array(b),
-        cb = c.length,
-        r = cb % b,
-        q = (cb - r) / b,
-        key = this.keySchedule(k),
-        syn = new Int32Array(s.buffer);
-  this.process(key, s);
+    c = cloneArray(d),
+    b = this.blockSize,
+    t = new Int8Array(b),
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    key = this.keySchedule(k),
+    syn = new Int32Array(s.buffer)
 
-  for (var i = 0; i < q; i++) {
-    syn[0] = syn[0] + 0x1010101 & 0xffffffff; // syn[1] = signed(unsigned((syn[1] + 0x1010104) & 0xffffffff) % 0xffffffff);
+  this.process(key, s)
 
-    var tmp = unsigned(syn[1]) + 0x1010104; // Special thanks to Ilya Matveychikov
+  for (var i = 0; i < q; i++) {
+    syn[0] = (syn[0] + 0x1010101) & 0xffffffff
+    // syn[1] = signed(unsigned((syn[1] + 0x1010104) & 0xffffffff) % 0xffffffff);
+    var tmp = unsigned(syn[1]) + 0x1010104 // Special thanks to Ilya Matveychikov
+    syn[1] = signed(tmp < 0x100000000 ? tmp : tmp - 0xffffffff)
 
-    syn[1] = signed(tmp < 0x100000000 ? tmp : tmp - 0xffffffff);
+    for (var j = 0; j < b; j++) {t[j] = s[j]}
 
-    for (var j = 0; j < b; j++) {
-      t[j] = s[j];
-    }
+    this.process(key, syn)
 
-    this.process(key, syn);
+    for (var j = 0; j < b; j++) {c[i * b + j] ^= s[j]}
 
-    for (var j = 0; j < b; j++) {
-      c[i * b + j] ^= s[j];
-    }
+    for (var j = 0; j < b; j++) {s[j] = t[j]}
 
-    for (var j = 0; j < b; j++) {
-      s[j] = t[j];
-    }
-
-    k = this.keyMeshing(k, s, i, key);
+    k = this.keyMeshing(k, s, i, key)
   }
-
   if (r > 0) {
-    syn[0] = syn[0] + 0x1010101 & 0xffffffff; // syn[1] = signed(unsigned((syn[1] + 0x1010104) & 0xffffffff) % 0xffffffff);
+    syn[0] = (syn[0] + 0x1010101) & 0xffffffff
+    // syn[1] = signed(unsigned((syn[1] + 0x1010104) & 0xffffffff) % 0xffffffff);
+    var tmp = unsigned(syn[1]) + 0x1010104 // Special thanks to Ilya Matveychikov
+    syn[1] = signed(tmp < 0x100000000 ? tmp : tmp - 0xffffffff)
 
-    var tmp = unsigned(syn[1]) + 0x1010104; // Special thanks to Ilya Matveychikov
+    this.process(key, syn)
 
-    syn[1] = signed(tmp < 0x100000000 ? tmp : tmp - 0xffffffff);
-    this.process(key, syn);
-
-    for (var i = 0; i < r; i++) {
-      c[q * b + i] ^= s[i];
-    }
+    for (var i = 0; i < r; i++) {c[q * b + i] ^= s[i]}
   }
-
-  return c.buffer;
+  return c.buffer
 } // </editor-fold>
 
-
 function processCTR15(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const c = cloneArray(d),
-        n = this.blockSize,
-        b = this.shiftBits >> 3,
-        cb = c.length,
-        r = cb % b,
-        q = (cb - r) / b,
-        s = new Uint8Array(n),
-        t = new Int32Array(n),
-        key = this.keySchedule(k);
-  s.set(iv || this.iv);
-
+    n = this.blockSize,
+    b = this.shiftBits >> 3,
+    cb = c.length, r = cb % b, q = (cb - r) / b,
+    s = new Uint8Array(n),
+    t = new Int32Array(n),
+    key = this.keySchedule(k)
+
+  s.set(iv || this.iv)
   for (let i = 0; i < q; i++) {
-    for (var j = 0; j < n; j++) {
-      t[j] = s[j];
-    }
 
-    this.process(key, s);
+    for (var j = 0; j < n; j++) {t[j] = s[j]}
 
-    for (var j = 0; j < b; j++) {
-      c[b * i + j] ^= s[j];
-    }
+    this.process(key, s)
 
-    for (var j = 0; j < n; j++) {
-      s[j] = t[j];
-    }
+    for (var j = 0; j < b; j++) {c[b * i + j] ^= s[j]}
+
+    for (var j = 0; j < n; j++) {s[j] = t[j]}
 
     for (var j = n - 1; i >= 0; --i) {
       if (s[j] > 0xfe) {
-        s[j] -= 0xfe;
+        s[j] -= 0xfe
       } else {
-        s[j]++;
-        break;
+        s[j]++
+        break
       }
     }
   }
 
   if (r > 0) {
-    this.process(key, s);
-
-    for (var j = 0; j < r; j++) {
-      c[b * q + j] ^= s[j];
-    }
+    this.process(key, s)
+    for (var j = 0; j < r; j++) {c[b * q + j] ^= s[j]}
   }
 
-  return c.buffer;
+  return c.buffer
 } // </editor-fold>
 
 /**
@@ -1085,41 +1023,32 @@ function processCTR15(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv initial vector
  * @return {CryptoOperationData} result
  */
-
-
 function encryptCBC(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const s = new Uint8Array(iv || this.iv),
-        n = this.blockSize,
-        m = s.length,
-        c = this.pad(byteArray(d)),
-        key = this.keySchedule(k);
+    n = this.blockSize,
+    m = s.length,
+    c = this.pad(byteArray(d)),
+    key = this.keySchedule(k)
 
   for (let i = 0, b = c.length / n; i < b; i++) {
-    for (var j = 0; j < n; j++) {
-      s[j] ^= c[i * n + j];
-    }
 
-    this.process(key, s);
+    for (var j = 0; j < n; j++) {s[j] ^= c[i * n + j]}
 
-    for (var j = 0; j < n; j++) {
-      c[i * n + j] = s[j];
-    }
+    this.process(key, s)
+
+    for (var j = 0; j < n; j++) {c[i * n + j] = s[j]}
 
     if (m !== n) {
-      for (var j = 0; j < m - n; j++) {
-        s[j] = s[n + j];
-      }
+      for (var j = 0; j < m - n; j++) {s[j] = s[n + j]}
 
-      for (var j = 0; j < n; j++) {
-        s[j + m - n] = c[i * n + j];
-      }
+      for (var j = 0; j < n; j++) {s[j + m - n] = c[i * n + j]}
     }
 
-    k = this.keyMeshing(k, s, i, key);
+    k = this.keyMeshing(k, s, i, key)
   }
 
-  return c.buffer;
+  return c.buffer
 } // </editor-fold>
 
 /**
@@ -1137,42 +1066,33 @@ function encryptCBC(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv initial vector
  * @return {CryptoOperationData} result
  */
-
-
 function decryptCBC(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const s = new Uint8Array(iv || this.iv),
-        n = this.blockSize,
-        m = s.length,
-        c = cloneArray(d),
-        next = new Uint8Array(n),
-        key = this.keySchedule(k, 1);
+    n = this.blockSize,
+    m = s.length,
+    c = cloneArray(d),
+    next = new Uint8Array(n),
+    key = this.keySchedule(k, 1)
 
   for (let i = 0, b = c.length / n; i < b; i++) {
-    for (var j = 0; j < n; j++) {
-      next[j] = c[i * n + j];
-    }
 
-    this.process(key, c, i * n, 1);
+    for (var j = 0; j < n; j++) {next[j] = c[i * n + j]}
 
-    for (var j = 0; j < n; j++) {
-      c[i * n + j] ^= s[j];
-    }
+    this.process(key, c, i * n, 1)
+
+    for (var j = 0; j < n; j++) {c[i * n + j] ^= s[j]}
 
     if (m !== n) {
-      for (var j = 0; j < m - n; j++) {
-        s[j] = s[n + j];
-      }
+      for (var j = 0; j < m - n; j++) {s[j] = s[n + j]}
     }
 
-    for (var j = 0; j < n; j++) {
-      s[j + m - n] = next[j];
-    }
+    for (var j = 0; j < n; j++) {s[j + m - n] = next[j]}
 
-    k = this.keyMeshing(k, s, i, key, 1);
+    k = this.keyMeshing(k, s, i, key, 1)
   }
 
-  return this.unpad(c).buffer;
+  return this.unpad(c).buffer
 } // </editor-fold>
 
 /**
@@ -1184,15 +1104,15 @@ function decryptCBC(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @return {CryptoOperationData} result
  */
 
-
 function generateKey() // <editor-fold defaultstate="collapsed">
 {
   // Simple generate 256 bit random seed
-  const k = new Uint8Array(this.keySize);
-  randomSeed(k);
-  return k.buffer;
+  const k = new Uint8Array(this.keySize)
+  randomSeed(k)
+  return k.buffer
 } // </editor-fold>
 
+
 /**
  * makeIMIT (K, D) is the 32-bit result of the GOST 28147/GOST R 34.13 in
  * "imitovstavka" (MAC) mode, used with D as plaintext, K as key and IV
@@ -1208,80 +1128,60 @@ function generateKey() // <editor-fold defaultstate="collapsed">
  * @param {Uint8Array} d 8 bits array with data
  * @return {Uint8Array} result
  */
-
-
 function processMAC89(key, s, d) // <editor-fold defaultstate="collapsed">
 {
   const c = zeroPad.call(this, byteArray(d)),
-        n = this.blockSize,
-        q = c.length / n,
-        sBox = this.sBox,
-        sum = new Int32Array(s.buffer);
+    n = this.blockSize,
+    q = c.length / n,
+    sBox = this.sBox,
+    sum = new Int32Array(s.buffer)
 
   for (let i = 0; i < q; i++) {
-    for (var j = 0; j < n; j++) {
-      s[j] ^= c[i * n + j];
-    }
+
+    for (var j = 0; j < n; j++) {s[j] ^= c[i * n + j]}
 
     for (var j = 0; j < 16; j++) // 1-16 steps
-    {
-      round(sBox, sum, key[j]);
-    }
+    {round(sBox, sum, key[j])}
   }
 } // </editor-fold>
 
-
 function processKeyMAC15(s) // <editor-fold defaultstate="collapsed">
 {
-  let t = 0,
-      n = s.length;
-
+  let t = 0, n = s.length
   for (let i = n - 1; i >= 0; --i) {
-    const t1 = s[i] >>> 7;
-    s[i] = s[i] << 1 & 0xff | t;
-    t = t1;
+    const t1 = s[i] >>> 7
+    s[i] = (s[i] << 1) & 0xff | t
+    t = t1
   }
-
   if (t !== 0) {
-    if (n === 16) {
-      s[15] ^= 0x87;
-    } else {
-      s[7] ^= 0x1b;
-    }
+    if (n === 16) {s[15] ^= 0x87} else {s[7] ^= 0x1b}
   }
 } // </editor-fold>
 
-
 function processMAC15(key, s, d) // <editor-fold defaultstate="collapsed">
 {
   let n = this.blockSize,
-      sBox = this.sBox,
-      c = byteArray(d),
-      r = new Uint8Array(n); // R
-
-  this.process(key, r); // K1
-
-  processKeyMAC15(r);
-
+    sBox = this.sBox, c = byteArray(d),
+    r = new Uint8Array(n)
+    // R
+  this.process(key, r)
+  // K1
+  processKeyMAC15(r)
   if (d.byteLength % n !== 0) {
-    c = bitPad.call(this, byteArray(d)); // K2
-
-    processKeyMAC15(r);
+    c = bitPad.call(this, byteArray(d))
+    // K2
+    processKeyMAC15(r)
   }
 
   for (let i = 0, q = c.length / n; i < q; i++) {
-    for (var j = 0; j < n; j++) {
-      s[j] ^= c[i * n + j];
-    }
 
-    if (i === q - 1) {
-      // Last block
-      for (var j = 0; j < n; j++) {
-        s[j] ^= r[j];
-      }
+    for (var j = 0; j < n; j++) {s[j] ^= c[i * n + j]}
+
+    if (i === q - 1) {// Last block
+      for (var j = 0; j < n; j++) {s[j] ^= r[j]}
     }
 
-    this.process(key, s);
+    this.process(key, s)
   }
 } // </editor-fold>
 
@@ -1299,18 +1199,17 @@ function processMAC15(key, s, d) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv initial vector
  * @return {CryptoOperationData} result
  */
-
-
 function signMAC(k, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const key = this.keySchedule(k),
-        s = new Uint8Array(iv || this.iv),
-        m = Math.ceil(this.macLength >> 3) || this.blockSize >> 1;
-  this.processMAC(key, s, d);
-  const mac = new Uint8Array(m); // mac size
+    s = new Uint8Array(iv || this.iv),
+    m = Math.ceil(this.macLength >> 3) || this.blockSize >> 1
 
-  mac.set(new Uint8Array(s.buffer, 0, m));
-  return mac.buffer;
+  this.processMAC(key, s, d)
+
+  const mac = new Uint8Array(m) // mac size
+  mac.set(new Uint8Array(s.buffer, 0, m))
+  return mac.buffer
 } // </editor-fold>
 
 /**
@@ -1328,24 +1227,15 @@ function signMAC(k, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} iv 8x8 optional bits initial vector
  * @return {boolen} MAC verified = true
  */
-
-
 function verifyMAC(k, m, d, iv) // <editor-fold defaultstate="collapsed">
 {
   const mac = new Uint8Array(signMAC.call(this, k, d, iv)),
-        test = byteArray(m);
-
-  if (mac.length !== test.length) {
-    return false;
-  }
-
+    test = byteArray(m)
+  if (mac.length !== test.length) {return false}
   for (let i = 0, n = mac.length; i < n; i++) {
-    if (mac[i] !== test[i]) {
-      return false;
-    }
+    if (mac[i] !== test[i]) {return false}
   }
-
-  return true;
+  return true
 } // </editor-fold>
 
 /**
@@ -1365,31 +1255,24 @@ function verifyMAC(k, m, d, iv) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} cek Content encryption key
  * @returns {CryptoOperationData} Encrypted cek
  */
-
-
 function wrapKeyGOST(kek, cek) // <editor-fold defaultstate="collapsed">
 {
-  const n = this.blockSize,
-        k = this.keySize,
-        len = k + (n >> 1); // 1) For a unique symmetric KEK, generate 8 octets at random and call
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) For a unique symmetric KEK, generate 8 octets at random and call
   // the result UKM.  For a KEK, produced by VKO GOST R 34.10-2001, use
   // the UKM that was used for key derivation.
-
-  if (!this.ukm) {
-    throw new DataError('UKM must be defined');
-  }
-
-  const ukm = new Uint8Array(this.ukm); // 2) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK, CEK).
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
+  const ukm = new Uint8Array(this.ukm)
+  // 2) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK, CEK).
   // Call the result CEK_MAC.
-
-  const mac = signMAC.call(this, kek, cek, ukm); // 3) Encrypt the CEK in ECB mode using the KEK.  Call the ciphertext CEK_ENC.
-
-  const enc = encryptECB.call(this, kek, cek); // 4) The wrapped content-encryption key is (UKM | CEK_ENC | CEK_MAC).
-
-  const r = new Uint8Array(len);
-  r.set(new Uint8Array(enc), 0);
-  r.set(new Uint8Array(mac), k);
-  return r.buffer;
+  const mac = signMAC.call(this, kek, cek, ukm)
+  // 3) Encrypt the CEK in ECB mode using the KEK.  Call the ciphertext CEK_ENC.
+  const enc = encryptECB.call(this, kek, cek)
+  // 4) The wrapped content-encryption key is (UKM | CEK_ENC | CEK_MAC).
+  const r = new Uint8Array(len)
+  r.set(new Uint8Array(enc), 0)
+  r.set(new Uint8Array(mac), k)
+  return r.buffer
 } // </editor-fold>
 
 /**
@@ -1405,41 +1288,26 @@ function wrapKeyGOST(kek, cek) // <editor-fold defaultstate="collapsed">
  * @param {type} data Content encryption key
  * @return {CryptoOperationData} result
  */
-
-
 function unwrapKeyGOST(kek, data) // <editor-fold defaultstate="collapsed">
 {
-  const n = this.blockSize,
-        k = this.keySize,
-        len = k + (n >> 1); // 1) If the wrapped content-encryption key is not 44 octets, then error.
-
-  const d = buffer(data);
-
-  if (d.byteLength !== len) {
-    throw new DataError(`Wrapping key size must be ${len} bytes`);
-  } // 2) Decompose the wrapped content-encryption key into UKM, CEK_ENC, and CEK_MAC.
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) If the wrapped content-encryption key is not 44 octets, then error.
+  const d = buffer(data)
+  if (d.byteLength !== len) {throw new DataError(`Wrapping key size must be ${ len } bytes`)}
+  // 2) Decompose the wrapped content-encryption key into UKM, CEK_ENC, and CEK_MAC.
   // UKM is the most significant (first) 8 octets. CEK_ENC is next 32 octets,
   // and CEK_MAC is the least significant (last) 4 octets.
-
-
-  if (!this.ukm) {
-    throw new DataError('UKM must be defined');
-  }
-
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
   const ukm = new Uint8Array(this.ukm),
-        enc = new Uint8Array(d, 0, k),
-        mac = new Uint8Array(d, k, n >> 1); // 3) Decrypt CEK_ENC in ECB mode using the KEK.  Call the output CEK.
-
-  const cek = decryptECB.call(this, kek, enc); // 4) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK, CEK),
+    enc = new Uint8Array(d, 0, k),
+    mac = new Uint8Array(d, k, n >> 1)
+    // 3) Decrypt CEK_ENC in ECB mode using the KEK.  Call the output CEK.
+  const cek = decryptECB.call(this, kek, enc)
+  // 4) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK, CEK),
   // compare the result with CEK_MAC.  If they are not equal, then error.
-
-  const check = verifyMAC.call(this, kek, mac, cek, ukm);
-
-  if (!check) {
-    throw new DataError('Error verify MAC of wrapping key');
-  }
-
-  return cek;
+  const check = verifyMAC.call(this, kek, mac, cek, ukm)
+  if (!check) {throw new DataError('Error verify MAC of wrapping key')}
+  return cek
 } // </editor-fold>
 
 /**
@@ -1457,51 +1325,41 @@ function unwrapKeyGOST(kek, data) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} ukm Random generated value
  * @returns {CryptoOperationData} Diversified kek
  */
-
-
 function diversifyKEK(kek, ukm) // <editor-fold defaultstate="collapsed">
 {
-  const n = this.blockSize; // 1) Let K[0] = K;
+  const n = this.blockSize
 
-  let k = intArray(kek); // 2) UKM is split into components a[i,j]:
+  // 1) Let K[0] = K;
+  let k = intArray(kek)
+  // 2) UKM is split into components a[i,j]:
   //    UKM = a[0]|..|a[7] (a[i] - byte, a[i,0]..a[i,7] - it’s bits)
-
-  const a = [];
-
+  const a = []
   for (var i = 0; i < n; i++) {
-    a[i] = [];
-
+    a[i] = []
     for (var j = 0; j < 8; j++) {
-      a[i][j] = ukm[i] >>> j & 0x1;
+      a[i][j] = (ukm[i] >>> j) & 0x1
     }
-  } // 3) Let i be 0.
+  }
+  // 3) Let i be 0.
   // 4) K[1]..K[8] are calculated by repeating the following algorithm
   //    eight times:
-
-
   for (var i = 0; i < n; i++) {
     //     A) K[i] is split into components k[i,j]:
     //        K[i] = k[i,0]|k[i,1]|..|k[i,7] (k[i,j] - 32-bit integer)
     //     B) Vector S[i] is calculated:
     //        S[i] = ((a[i,0]*k[i,0] + ... + a[i,7]*k[i,7]) mod 2^32) |
     //         (((~a[i,0])*k[i,0] + ... + (~a[i,7])*k[i,7]) mod 2^32);
-    const s = new Int32Array(2);
-
+    const s = new Int32Array(2)
     for (var j = 0; j < 8; j++) {
-      if (a[i][j]) {
-        s[0] = s[0] + k[j] & 0xffffffff;
-      } else {
-        s[1] = s[1] + k[j] & 0xffffffff;
-      }
-    } //     C) K[i+1] = encryptCFB (S[i], K[i], K[i])
-
-
-    const iv = new Uint8Array(s.buffer);
-    k = new Int32Array(encryptCFB.call(this, k, k, iv)); //     D) i = i + 1
-  } // 5) Let K(UKM) be K[8].
-
-
-  return k;
+      if (a[i][j]) {s[0] = (s[0] + k[j]) & 0xffffffff} else {s[1] = (s[1] + k[j]) & 0xffffffff}
+    }
+    //     C) K[i+1] = encryptCFB (S[i], K[i], K[i])
+    const iv = new Uint8Array(s.buffer)
+    k = new Int32Array(encryptCFB.call(this, k, k, iv))
+    //     D) i = i + 1
+  }
+  // 5) Let K(UKM) be K[8].
+  return k
 } // </editor-fold>
 
 /**
@@ -1519,36 +1377,29 @@ function diversifyKEK(kek, ukm) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} cek Content encryption key
  * @returns {CryptoOperationData} Encrypted cek
  */
-
-
 function wrapKeyCP(kek, cek) // <editor-fold defaultstate="collapsed">
 {
-  const n = this.blockSize,
-        k = this.keySize,
-        len = k + (n >> 1); // 1) For a unique symmetric KEK or a KEK produced by VKO GOST R
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) For a unique symmetric KEK or a KEK produced by VKO GOST R
   // 34.10-94, generate 8 octets at random.  Call the result UKM.  For
   // a KEK, produced by VKO GOST R 34.10-2001, use the UKM that was
   // used for key derivation.
-
-  if (!this.ukm) {
-    throw new DataError('UKM must be defined');
-  }
-
-  const ukm = new Uint8Array(this.ukm); // 2) Diversify KEK, using the CryptoPro KEK Diversification Algorithm,
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
+  const ukm = new Uint8Array(this.ukm)
+  // 2) Diversify KEK, using the CryptoPro KEK Diversification Algorithm,
   // described in Section 6.5.  Call the result KEK(UKM).
-
-  const dek = diversifyKEK.call(this, kek, ukm); // 3) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK(UKM),
+  const dek = diversifyKEK.call(this, kek, ukm)
+  // 3) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK(UKM),
   // CEK).  Call the result CEK_MAC.
-
-  const mac = signMAC.call(this, dek, cek, ukm); // 4) Encrypt CEK in ECB mode using KEK(UKM).  Call the ciphertext
+  const mac = signMAC.call(this, dek, cek, ukm)
+  // 4) Encrypt CEK in ECB mode using KEK(UKM).  Call the ciphertext
   // CEK_ENC.
-
-  const enc = encryptECB.call(this, dek, cek); // 5) The wrapped content-encryption key is (UKM | CEK_ENC | CEK_MAC).
-
-  const r = new Uint8Array(len);
-  r.set(new Uint8Array(enc), 0);
-  r.set(new Uint8Array(mac), k);
-  return r.buffer;
+  const enc = encryptECB.call(this, dek, cek)
+  // 5) The wrapped content-encryption key is (UKM | CEK_ENC | CEK_MAC).
+  const r = new Uint8Array(len)
+  r.set(new Uint8Array(enc), 0)
+  r.set(new Uint8Array(mac), k)
+  return r.buffer
 } // </editor-fold>
 
 /**
@@ -1564,46 +1415,31 @@ function wrapKeyCP(kek, cek) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} data Encrypted content encryption keu
  * @return {CryptoOperationData} result Decrypted content encryption keu
  */
-
-
 function unwrapKeyCP(kek, data) // <editor-fold defaultstate="collapsed">
 {
-  const n = this.blockSize,
-        k = this.keySize,
-        len = k + (n >> 1); // 1) If the wrapped content-encryption key is not 44 octets, then error.
-
-  const d = buffer(data);
-
-  if (d.byteLength !== len) {
-    throw new DataError(`Wrapping key size must be ${len} bytes`);
-  } // 2) Decompose the wrapped content-encryption key into UKM, CEK_ENC,
+  const n = this.blockSize, k = this.keySize, len = k + (n >> 1)
+  // 1) If the wrapped content-encryption key is not 44 octets, then error.
+  const d = buffer(data)
+  if (d.byteLength !== len) {throw new DataError(`Wrapping key size must be ${ len } bytes`)}
+  // 2) Decompose the wrapped content-encryption key into UKM, CEK_ENC,
   // and CEK_MAC.  UKM is the most significant (first) 8 octets.
   // CEK_ENC is next 32 octets, and CEK_MAC is the least significant
   // (last) 4 octets.
-
-
-  if (!this.ukm) {
-    throw new DataError('UKM must be defined');
-  }
-
+  if (!this.ukm) {throw new DataError('UKM must be defined')}
   const ukm = new Uint8Array(this.ukm),
-        enc = new Uint8Array(d, 0, k),
-        mac = new Uint8Array(d, k, n >> 1); // 3) Diversify KEK using the CryptoPro KEK Diversification Algorithm,
-  // described in section 6.5.  Call the result KEK(UKM).
-
-  const dek = diversifyKEK.call(this, kek, ukm); // 4) Decrypt CEK_ENC in ECB mode using KEK(UKM).  Call the output CEK.
-
-  const cek = decryptECB.call(this, dek, enc); // 5) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK(UKM),
+    enc = new Uint8Array(d, 0, k),
+    mac = new Uint8Array(d, k, n >> 1)
+    // 3) Diversify KEK using the CryptoPro KEK Diversification Algorithm,
+    // described in section 6.5.  Call the result KEK(UKM).
+  const dek = diversifyKEK.call(this, kek, ukm)
+  // 4) Decrypt CEK_ENC in ECB mode using KEK(UKM).  Call the output CEK.
+  const cek = decryptECB.call(this, dek, enc)
+  // 5) Compute a 4-byte checksum value, GOST 28147IMIT (UKM, KEK(UKM),
   // CEK), compare the result with CEK_MAC.  If they are not equal,
   // then it is an error.
-
-  const check = verifyMAC.call(this, dek, mac, cek, ukm);
-
-  if (!check) {
-    throw new DataError('Error verify MAC of wrapping key');
-  }
-
-  return cek;
+  const check = verifyMAC.call(this, dek, mac, cek, ukm)
+  if (!check) {throw new DataError('Error verify MAC of wrapping key')}
+  return cek
 } // </editor-fold>
 
 /**
@@ -1633,57 +1469,33 @@ function unwrapKeyCP(kek, data) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} ukm - random vector for packing - 32 bytes * (count of masks - 1)
  * @returns {CryptoOperationData} packed master key - concatination of mk.db3 + masks.db3
  */
-
-
 function packKeySC(unpacked, ukm) // <editor-fold defaultstate="collapsed">
 {
-  const m = this.blockSize >> 1,
-        k = this.keySize;
-  let mcount = 8;
-  const key = new Uint8Array(buffer(unpacked));
-
-  if (key.byteLength !== k) {
-    throw new DataError(`Wrong cleartext size ${key.byteLength} bytes`);
-  } // Check or generate UKM
-
-
-  ukm = ukm || this.ukm;
-
+  const m = this.blockSize >> 1, k = this.keySize
+  let mcount = 8
+  const key = new Uint8Array(buffer(unpacked))
+  if (key.byteLength !== k) {throw new DataError(`Wrong cleartext size ${ key.byteLength } bytes`)}
+  // Check or generate UKM
+  ukm = ukm || this.ukm
   if (ukm) {
-    ukm = new Uint8Array(buffer(ukm));
-
-    if (ukm.byteLength > 0 && ukm.byteLength % k === 0) {
-      mcount = ukm.byteLength / k + 1;
-    } else {
-      throw new DataError(`Wrong rand size ${ukm.byteLength} bytes`);
-    }
-  } else {
-    randomSeed(ukm = new Uint8Array((mcount - 1) * k));
-  } // Output array
-
-
-  const d = new Uint8Array(mcount * k + m + 2),
-        b = d.buffer; // Calculate MAC
-
-  const zero32 = new Uint8Array(k);
-  const mac = signMAC.call(this, key, zero32);
-  d[0] = 0x22; // Magic code
-
-  d[1] = mcount; // Count of masks
-
-  d.set(new Uint8Array(mac), 2);
-  d.set(ukm, k + m + 2);
-
+    ukm = new Uint8Array(buffer(ukm))
+    if (ukm.byteLength > 0 && ukm.byteLength % k === 0) {mcount = ukm.byteLength / k + 1} else {throw new DataError(`Wrong rand size ${ ukm.byteLength } bytes`)}
+  } else {randomSeed(ukm = new Uint8Array((mcount - 1) * k))}
+  // Output array
+  const d = new Uint8Array(mcount * k + m + 2), b = d.buffer
+  // Calculate MAC
+  const zero32 = new Uint8Array(k)
+  const mac = signMAC.call(this, key, zero32)
+  d[0] = 0x22 // Magic code
+  d[1] = mcount // Count of masks
+  d.set(new Uint8Array(mac), 2)
+  d.set(ukm, k + m + 2)
   for (let i = 1; i < mcount; i++) {
-    const mask = new Uint8Array(b, 2 + m + k * i);
-
-    for (let j = 0; j < k; j++) {
-      key[j] ^= mask[j];
-    }
+    const mask = new Uint8Array(b, 2 + m + k * i)
+    for (let j = 0; j < k; j++) {key[j] ^= mask[j]}
   }
-
-  d.set(key, m + 2);
-  return d.buffer;
+  d.set(key, m + 2)
+  return d.buffer
 } // </editor-fold>
 
 /**
@@ -1698,57 +1510,35 @@ function packKeySC(unpacked, ukm) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} packed - concatination of mk.db3 + masks.db3
  * @returns {CryptoOperationData} unpacked master key
  */
-
-
 function unpackKeySC(packed) // <editor-fold defaultstate="collapsed">
 {
-  const m = this.blockSize >> 1,
-        k = this.keySize;
-  const b = buffer(packed); // Unpack master key
-
-  const magic = new Uint8Array(b, 0, 1)[0];
-
-  if (magic !== 0x22) {
-    throw new DataError('Invalid magic number');
-  }
-
-  const mcount = new Uint8Array(b, 1, 1)[0];
-  const mac = new Uint8Array(b, 2, m); // MAC for summarized mask
+  const m = this.blockSize >> 1, k = this.keySize
+  const b = buffer(packed)
+  // Unpack master key
+  const magic = new Uint8Array(b, 0, 1)[0]
+  if (magic !== 0x22) {throw new DataError('Invalid magic number')}
+  const mcount = new Uint8Array(b, 1, 1)[0]
+  const mac = new Uint8Array(b, 2, m) // MAC for summarized mask
   // Compute packKey xor summing for all masks
-
-  const key = new Uint8Array(k);
-
+  const key = new Uint8Array(k)
   for (var i = 0; i < mcount; i++) {
-    const mask = new Uint8Array(b, 2 + m + k * i, k);
-
-    for (let j = 0; j < k; j++) {
-      key[j] ^= mask[j];
-    }
-  } // Test MAC for packKey with default sBox on zero 32 bytes array
-
-
-  const zero32 = new Uint8Array(k);
-  let test = verifyMAC.call(this, key, mac, zero32);
-
+    const mask = new Uint8Array(b, 2 + m + k * i, k)
+    for (let j = 0; j < k; j++) {key[j] ^= mask[j]}
+  }
+  // Test MAC for packKey with default sBox on zero 32 bytes array
+  const zero32 = new Uint8Array(k)
+  let test = verifyMAC.call(this, key, mac, zero32)
   if (!test) {
     // Try to use different sBoxes
-    const names = ['E-A', 'E-B', 'E-C', 'E-D', 'E-SC'];
-
+    const names = ['E-A', 'E-B', 'E-C', 'E-D', 'E-SC']
     for (var i = 0, n = names.length; i < n; i++) {
-      this.sBox = sBoxes[names[i]];
-      test = verifyMAC.call(this, key, mac, zero32);
-
-      if (test) {
-        break;
-      }
+      this.sBox = sBoxes[names[i]]
+      test = verifyMAC.call(this, key, mac, zero32)
+      if (test) {break}
     }
   }
-
-  if (!test) {
-    throw new DataError('Invalid main key MAC');
-  }
-
-  return key.buffer;
+  if (!test) {throw new DataError('Invalid main key MAC')}
+  return key.buffer
 } // </editor-fold>
 
 /**
@@ -1763,25 +1553,18 @@ function unpackKeySC(packed) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} cek - key for wrapping
  * @returns {CryptoOperationData} wrapped key - file kek.opq
  */
-
-
 function wrapKeySC(kek, cek) // <editor-fold defaultstate="collapsed">
 {
-  const m = this.blockSize >> 1,
-        n = this.keySize;
-  let k = buffer(kek);
-  const c = buffer(cek);
-
-  if (k.byteLength !== n) {
-    k = unpackKeySC.call(this, k);
-  }
-
-  const enc = encryptECB.call(this, k, c);
-  const mac = signMAC.call(this, k, c);
-  const d = new Uint8Array(m + n);
-  d.set(new Uint8Array(enc), 0);
-  d.set(new Uint8Array(mac), n);
-  return d.buffer;
+  const m = this.blockSize >> 1, n = this.keySize
+  let k = buffer(kek)
+  const c = buffer(cek)
+  if (k.byteLength !== n) {k = unpackKeySC.call(this, k)}
+  const enc = encryptECB.call(this, k, c)
+  const mac = signMAC.call(this, k, c)
+  const d = new Uint8Array(m + n)
+  d.set(new Uint8Array(enc), 0)
+  d.set(new Uint8Array(mac), n)
+  return d.buffer
 } // </editor-fold>
 
 /**
@@ -1796,30 +1579,17 @@ function wrapKeySC(kek, cek) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} cek - wrapping key - file kek.opq
  * @return {CryptoOperationData} result
  */
-
-
 function unwrapKeySC(kek, cek) // <editor-fold defaultstate="collapsed">
 {
-  const m = this.blockSize >> 1,
-        n = this.keySize;
-  let k = buffer(kek);
-  const c = buffer(cek);
-
-  if (k.byteLength !== n) {
-    k = unpackKeySC.call(this, k);
-  }
-
-  const enc = new Uint8Array(c, 0, n); // Encrypted kek
-
-  const mac = new Uint8Array(c, n, m); // MAC for clear kek
-
-  const d = decryptECB.call(this, k, enc);
-
-  if (!verifyMAC.call(this, k, mac, d)) {
-    throw new DataError('Invalid key MAC');
-  }
-
-  return d;
+  const m = this.blockSize >> 1, n = this.keySize
+  let k = buffer(kek)
+  const c = buffer(cek)
+  if (k.byteLength !== n) {k = unpackKeySC.call(this, k)}
+  const enc = new Uint8Array(c, 0, n) // Encrypted kek
+  const mac = new Uint8Array(c, n, m) // MAC for clear kek
+  const d = decryptECB.call(this, k, enc)
+  if (!verifyMAC.call(this, k, mac, d)) {throw new DataError('Invalid key MAC')}
+  return d
 } // </editor-fold>
 
 /**
@@ -1832,32 +1602,23 @@ function unwrapKeySC(kek, cek) // <editor-fold defaultstate="collapsed">
  * @instance
  * @return {CryptoOperationData} result
  */
-
-
 function generateWrappingKeySC() // <editor-fold defaultstate="collapsed">
 {
-  return packKeySC.call(this, generateKey.call(this));
+  return packKeySC.call(this, generateKey.call(this))
 } // </editor-fold>
 
-
 function maskKey(mask, key, inverse, keySize) // <editor-fold defaultstate="collapsed">
 {
   const k = keySize / 4,
-        m32 = new Int32Array(buffer(mask)),
-        k32 = new Int32Array(buffer(key)),
-        r32 = new Int32Array(k);
-
+    m32 = new Int32Array(buffer(mask)),
+    k32 = new Int32Array(buffer(key)),
+    r32 = new Int32Array(k)
   if (inverse) {
-    for (var i = 0; i < k; i++) {
-      r32[i] = k32[i] + m32[i] & 0xffffffff;
-    }
+    for (var i = 0; i < k; i++) {r32[i] = (k32[i] + m32[i]) & 0xffffffff}
   } else {
-    for (var i = 0; i < k; i++) {
-      r32[i] = k32[i] - m32[i] & 0xffffffff;
-    }
+    for (var i = 0; i < k; i++) {r32[i] = (k32[i] - m32[i]) & 0xffffffff}
   }
-
-  return r32.buffer;
+  return r32.buffer
 } // </editor-fold>
 
 /**
@@ -1872,11 +1633,9 @@ function maskKey(mask, key, inverse, keySize) // <editor-fold defaultstate="coll
  * @param {CryptoOperationData} key The key
  * @returns {CryptoOperationData} The masked key
  */
-
-
 function wrapKeyMask(mask, key) // <editor-fold defaultstate="collapsed">
 {
-  return maskKey(mask, key, this.procreator === 'VN', this.keySize);
+  return maskKey(mask, key, this.procreator === 'VN', this.keySize)
 } // </editor-fold>
 
 /**
@@ -1891,11 +1650,9 @@ function wrapKeyMask(mask, key) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} key The masked key
  * @return {CryptoOperationData} result The key
  */
-
-
 function unwrapKeyMask(mask, key) // <editor-fold defaultstate="collapsed">
 {
-  return maskKey(mask, key, this.procreator !== 'VN', this.keySize);
+  return maskKey(mask, key, this.procreator !== 'VN', this.keySize)
 } // </editor-fold>
 
 /**
@@ -1914,21 +1671,17 @@ function unwrapKeyMask(mask, key) // <editor-fold defaultstate="collapsed">
  * @param {boolean} e true - decrypt
  * @returns CryptoOperationData next 8x8 bit key
  */
-
-
 function keyMeshingCP(k, s, i, key, e) // <editor-fold defaultstate="collapsed">
 {
-  if ((i + 1) * this.blockSize % 1024 === 0) {
-    // every 1024 octets
+  if ((i + 1) * this.blockSize % 1024 === 0) { // every 1024 octets
     // K[i+1] = decryptECB (K[i], C);
-    k = decryptECB.call(this, k, C); // IV0[i+1] = encryptECB (K[i+1],IVn[i])
-
-    s.set(new Uint8Array(encryptECB.call(this, k, s))); // restore key schedule
-
-    key.set(this.keySchedule(k, e));
+    k = decryptECB.call(this, k, C)
+    // IV0[i+1] = encryptECB (K[i+1],IVn[i])
+    s.set(new Uint8Array(encryptECB.call(this, k, s)))
+    // restore key schedule
+    key.set(this.keySchedule(k, e))
   }
-
-  return k;
+  return k
 } // </editor-fold>
 
 /**
@@ -1940,11 +1693,9 @@ function keyMeshingCP(k, s, i, key, e) // <editor-fold defaultstate="collapsed">
  * @private
  * @param {(Uint8Array|CryptoOperationData)} k 8x8 bit key
  */
-
-
 function noKeyMeshing(k) // <editor-fold defaultstate="collapsed">
 {
-  return k;
+  return k
 } // </editor-fold>
 
 /**
@@ -1959,11 +1710,9 @@ function noKeyMeshing(k) // <editor-fold defaultstate="collapsed">
  * @param {Uint8Array} d array with source data
  * @returns {Uint8Array} result
  */
-
-
 function noPad(d) // <editor-fold defaultstate="collapsed">
 {
-  return new Uint8Array(d);
+  return new Uint8Array(d)
 } // </editor-fold>
 
 /**
@@ -1980,45 +1729,31 @@ function noPad(d) // <editor-fold defaultstate="collapsed">
  * @param {Uint8Array} d array with source data
  * @returns {Uint8Array} result
  */
-
-
 function pkcs5Pad(d) // <editor-fold defaultstate="collapsed">
 {
   const n = d.byteLength,
-        nb = this.blockSize,
-        q = nb - n % nb,
-        m = Math.ceil((n + 1) / nb) * nb,
-        r = new Uint8Array(m);
-  r.set(d);
-
-  for (let i = n; i < m; i++) {
-    r[i] = q;
-  }
-
-  return r;
+    nb = this.blockSize,
+    q = nb - n % nb,
+    m = Math.ceil((n + 1) / nb) * nb,
+    r = new Uint8Array(m)
+  r.set(d)
+  for (let i = n; i < m; i++) {r[i] = q}
+  return r
 } // </editor-fold>
 
-
 function pkcs5Unpad(d) // <editor-fold defaultstate="collapsed">
 {
   const m = d.byteLength,
-        nb = this.blockSize,
-        q = d[m - 1],
-        n = m - q;
-
-  if (q > nb) {
-    throw DataError('Invalid padding');
-  }
-
-  const r = new Uint8Array(n);
-
-  if (n > 0) {
-    r.set(new Uint8Array(d.buffer, 0, n));
-  }
-
-  return r;
+    nb = this.blockSize,
+    q = d[m - 1],
+    n = m - q
+  if (q > nb) {throw DataError('Invalid padding')}
+  const r = new Uint8Array(n)
+  if (n > 0) {r.set(new Uint8Array(d.buffer, 0, n))}
+  return r
 } // </editor-fold>
 
+
 /**
  * Algorithm name GOST 28147-ZeroPadding<br><br>
  *
@@ -2031,23 +1766,18 @@ function pkcs5Unpad(d) // <editor-fold defaultstate="collapsed">
  * @param {Uint8Array} d array with source data
  * @returns {Uint8Array} result
  */
-
-
 function zeroPad(d) // <editor-fold defaultstate="collapsed">
 {
   const n = d.byteLength,
-        nb = this.blockSize,
-        m = Math.ceil(n / nb) * nb,
-        r = new Uint8Array(m);
-  r.set(d);
-
-  for (let i = n; i < m; i++) {
-    r[i] = 0;
-  }
-
-  return r;
+    nb = this.blockSize,
+    m = Math.ceil(n / nb) * nb,
+    r = new Uint8Array(m)
+  r.set(d)
+  for (let i = n; i < m; i++) {r[i] = 0}
+  return r
 } // </editor-fold>
 
+
 /**
  * Algorithm name GOST 28147-BitPadding<br><br>
  *
@@ -2061,46 +1791,28 @@ function zeroPad(d) // <editor-fold defaultstate="collapsed">
  * @param {Uint8Array} d array with source data
  * @returns {Uint8Array} result
  */
-
-
 function bitPad(d) // <editor-fold defaultstate="collapsed">
 {
   const n = d.byteLength,
-        nb = this.blockSize,
-        m = Math.ceil((n + 1) / nb) * nb,
-        r = new Uint8Array(m);
-  r.set(d);
-  r[n] = 1;
-
-  for (let i = n + 1; i < m; i++) {
-    r[i] = 0;
-  }
-
-  return r;
+    nb = this.blockSize,
+    m = Math.ceil((n + 1) / nb) * nb,
+    r = new Uint8Array(m)
+  r.set(d)
+  r[n] = 1
+  for (let i = n + 1; i < m; i++) {r[i] = 0}
+  return r
 } // </editor-fold>
 
-
 function bitUnpad(d) // <editor-fold defaultstate="collapsed">
 {
   let m = d.byteLength,
-      n = m;
-
-  while (n > 1 && d[n - 1] === 0) {
-    n--;
-  }
-
-  if (d[n - 1] !== 1) {
-    throw DataError('Invalid padding');
-  }
-
-  n--;
-  const r = new Uint8Array(n);
-
-  if (n > 0) {
-    r.set(new Uint8Array(d.buffer, 0, n));
-  }
-
-  return r;
+    n = m
+  while (n > 1 && d[n - 1] === 0) {n--}
+  if (d[n - 1] !== 1) {throw DataError('Invalid padding')}
+  n--
+  const r = new Uint8Array(n)
+  if (n > 0) {r.set(new Uint8Array(d.buffer, 0, n))}
+  return r
 } // </editor-fold>
 
 /**
@@ -2116,19 +1828,16 @@ function bitUnpad(d) // <editor-fold defaultstate="collapsed">
  * @param {Uint8Array} d array with source data
  * @returns {Uint8Array} result
  */
-
-
 function randomPad(d) // <editor-fold defaultstate="collapsed">
 {
   const n = d.byteLength,
-        nb = this.blockSize,
-        q = nb - n % nb,
-        m = Math.ceil(n / nb) * nb,
-        r = new Uint8Array(m),
-        e = new Uint8Array(r.buffer, n, q);
-  r.set(d);
-  randomSeed(e);
-  return r;
+    nb = this.blockSize,
+    q = nb - n % nb,
+    m = Math.ceil(n / nb) * nb,
+    r = new Uint8Array(m), e = new Uint8Array(r.buffer, n, q)
+  r.set(d)
+  randomSeed(e)
+  return r
 } // </editor-fold>
 
 /**
@@ -2229,234 +1938,189 @@ function randomPad(d) // <editor-fold defaultstate="collapsed">
  * @class GostCipher
  * @param {AlgorithmIndentifier} algorithm WebCryptoAPI algorithm identifier
  */
-
-
 function GostCipher(algorithm) // <editor-fold defaultstate="collapsed">
 {
   // Check little endian support
-  if (!littleEndian) {
-    throw new NotSupportedError('Big endian platform not supported');
-  }
-
-  algorithm = algorithm || {};
-  this.keySize = 32;
-  this.blockLength = algorithm.length || 64;
-  this.blockSize = this.blockLength >> 3;
-  this.name = `${(algorithm.name || (algorithm.version === 1 ? 'RC2' : algorithm.version === 1989 ? 'GOST 28147' : 'GOST R 34.12')) + (algorithm.version > 4 ? `-${(algorithm.version || 1989) % 100}` : '')}-${this.blockLength === 64 ? '' : `${this.blockLength}-`}${algorithm.mode === 'MAC' ? `MAC-${algorithm.macLength || this.blockLength >> 1}` : algorithm.mode === 'KW' || algorithm.keyWrapping ? `${(algorithm.keyWrapping || 'NO') !== 'NO' ? algorithm.keyWrapping : ''}KW` : (algorithm.block || 'ECB') + ((algorithm.block === 'CFB' || algorithm.block === 'OFB' || algorithm.block === 'CTR' && algorithm.version === 2015) && algorithm.shiftBits && algorithm.shiftBits !== this.blockLength ? `-${algorithm.shiftBits}` : '') + (algorithm.padding ? `-${algorithm.padding || (algorithm.block === 'CTR' || algorithm.block === 'CFB' || algorithm.block === 'OFB' ? 'NO' : 'ZERO')}PADDING` : '') + ((algorithm.keyMeshing || 'NO') !== 'NO' ? '-CPKEYMESHING' : '')}${algorithm.procreator ? `/${algorithm.procreator}` : ''}${typeof algorithm.sBox === 'string' ? `/${algorithm.sBox}` : ''}`; // Algorithm procreator
-
-  this.procreator = algorithm.procreator;
+  if (!littleEndian) {throw new NotSupportedError('Big endian platform not supported')}
+  algorithm = algorithm || {}
+  this.keySize = 32
+  this.blockLength = algorithm.length || 64
+  this.blockSize = this.blockLength >> 3
+
+  this.name = `${(algorithm.name || (algorithm.version === 1 ? 'RC2' :
+    algorithm.version === 1989 ? 'GOST 28147' : 'GOST R 34.12')) +
+        (algorithm.version > 4 ? `-${ (algorithm.version || 1989) % 100}` : '') }-${
+    this.blockLength === 64 ? '' : `${this.blockLength }-`
+  }${(algorithm.mode === 'MAC') ? `MAC-${ algorithm.macLength || this.blockLength >> 1}` :
+    (algorithm.mode === 'KW' || algorithm.keyWrapping) ?
+      `${(algorithm.keyWrapping || 'NO') !== 'NO' ? algorithm.keyWrapping : '' }KW` :
+      (algorithm.block || 'ECB') + ((algorithm.block === 'CFB' || algorithm.block === 'OFB' ||
+                    (algorithm.block === 'CTR' && algorithm.version === 2015)) &&
+                    algorithm.shiftBits && algorithm.shiftBits !== this.blockLength ? `-${ algorithm.shiftBits}` : '') +
+                (algorithm.padding ? `-${ algorithm.padding || (algorithm.block === 'CTR' ||
+                    algorithm.block === 'CFB' || algorithm.block === 'OFB' ? 'NO' : 'ZERO') }PADDING` : '') +
+                ((algorithm.keyMeshing || 'NO') !== 'NO' ? '-CPKEYMESHING' : '')
+  }${algorithm.procreator ? `/${ algorithm.procreator}` : ''
+  }${typeof algorithm.sBox === 'string' ? `/${ algorithm.sBox}` : ''}`
+
+  // Algorithm procreator
+  this.procreator = algorithm.procreator
 
   switch (algorithm.version || 1989) {
     case 1:
-      this.process = processRC2;
-      this.keySchedule = keyScheduleRC2;
-      this.blockLength = 64;
-      this.effectiveLength = algorithm.length || 32;
-      this.keySize = 8 * Math.ceil(this.effectiveLength / 8); // Max 128
-
-      this.blockSize = this.blockLength >> 3;
-      break;
-
+      this.process = processRC2
+      this.keySchedule = keyScheduleRC2
+      this.blockLength = 64
+      this.effectiveLength = algorithm.length || 32
+      this.keySize = 8 * Math.ceil(this.effectiveLength / 8) // Max 128
+      this.blockSize = this.blockLength >> 3
+      break
     case 2015:
-      this.version = 2015;
-
+      this.version = 2015
       if (this.blockLength === 64) {
-        this.process = process15;
-        this.keySchedule = keySchedule15;
+        this.process = process15
+        this.keySchedule = keySchedule15
       } else if (this.blockLength === 128) {
-        this.process = process128;
-        this.keySchedule = keySchedule128;
-      } else {
-        throw new DataError('Invalid block length');
-      }
-
-      this.processMAC = processMAC15;
-      break;
-
+        this.process = process128
+        this.keySchedule = keySchedule128
+      } else {throw new DataError('Invalid block length')}
+      this.processMAC = processMAC15
+      break
     case 1989:
-      this.version = 1989;
-      this.process = process89;
-      this.processMAC = processMAC89;
-      this.keySchedule = keySchedule89;
-
-      if (this.blockLength !== 64) {
-        throw new DataError('Invalid block length');
-      }
-
-      break;
-
+      this.version = 1989
+      this.process = process89
+      this.processMAC = processMAC89
+      this.keySchedule = keySchedule89
+      if (this.blockLength !== 64) {throw new DataError('Invalid block length')}
+      break
     default:
-      throw new NotSupportedError(`Algorithm version ${algorithm.version} not supported`);
+      throw new NotSupportedError(`Algorithm version ${ algorithm.version } not supported`)
   }
 
-  switch (algorithm.mode || algorithm.keyWrapping && 'KW' || 'ES') {
+  switch (algorithm.mode || (algorithm.keyWrapping && 'KW') || 'ES') {
+
     case 'ES':
       switch (algorithm.block || 'ECB') {
         case 'ECB':
-          this.encrypt = encryptECB;
-          this.decrypt = decryptECB;
-          break;
-
+          this.encrypt = encryptECB
+          this.decrypt = decryptECB
+          break
         case 'CTR':
           if (this.version === 1989) {
-            this.encrypt = processCTR89;
-            this.decrypt = processCTR89;
+            this.encrypt = processCTR89
+            this.decrypt = processCTR89
           } else {
-            this.encrypt = processCTR15;
-            this.decrypt = processCTR15;
-            this.shiftBits = algorithm.shiftBits || this.blockLength;
+            this.encrypt = processCTR15
+            this.decrypt = processCTR15
+            this.shiftBits = algorithm.shiftBits || this.blockLength
           }
-
-          break;
-
+          break
         case 'CBC':
-          this.encrypt = encryptCBC;
-          this.decrypt = decryptCBC;
-          break;
-
+          this.encrypt = encryptCBC
+          this.decrypt = decryptCBC
+          break
         case 'CFB':
-          this.encrypt = encryptCFB;
-          this.decrypt = decryptCFB;
-          this.shiftBits = algorithm.shiftBits || this.blockLength;
-          break;
-
+          this.encrypt = encryptCFB
+          this.decrypt = decryptCFB
+          this.shiftBits = algorithm.shiftBits || this.blockLength
+          break
         case 'OFB':
-          this.encrypt = processOFB;
-          this.decrypt = processOFB;
-          this.shiftBits = algorithm.shiftBits || this.blockLength;
-          break;
-
+          this.encrypt = processOFB
+          this.decrypt = processOFB
+          this.shiftBits = algorithm.shiftBits || this.blockLength
+          break
         default:
-          throw new NotSupportedError(`Block mode ${algorithm.block} not supported`);
+          throw new NotSupportedError(`Block mode ${ algorithm.block } not supported`)
       }
-
       switch (algorithm.keyMeshing) {
         case 'CP':
-          this.keyMeshing = keyMeshingCP;
-          break;
-
+          this.keyMeshing = keyMeshingCP
+          break
         default:
-          this.keyMeshing = noKeyMeshing;
+          this.keyMeshing = noKeyMeshing
       }
-
       if (this.encrypt === encryptECB || this.encrypt === encryptCBC) {
         switch (algorithm.padding) {
           case 'PKCS5P':
-            this.pad = pkcs5Pad;
-            this.unpad = pkcs5Unpad;
-            break;
-
+            this.pad = pkcs5Pad
+            this.unpad = pkcs5Unpad
+            break
           case 'RANDOM':
-            this.pad = randomPad;
-            this.unpad = noPad;
-            break;
-
+            this.pad = randomPad
+            this.unpad = noPad
+            break
           case 'BIT':
-            this.pad = bitPad;
-            this.unpad = bitUnpad;
-            break;
-
+            this.pad = bitPad
+            this.unpad = bitUnpad
+            break
           default:
-            this.pad = zeroPad;
-            this.unpad = noPad;
+            this.pad = zeroPad
+            this.unpad = noPad
         }
       } else {
-        this.pad = noPad;
-        this.unpad = noPad;
+        this.pad = noPad
+        this.unpad = noPad
       }
-
-      this.generateKey = generateKey;
-      break;
-
+      this.generateKey = generateKey
+      break
     case 'MAC':
-      this.sign = signMAC;
-      this.verify = verifyMAC;
-      this.generateKey = generateKey;
-      this.macLength = algorithm.macLength || this.blockLength >> 1;
-      this.pad = noPad;
-      this.unpad = noPad;
-      this.keyMeshing = noKeyMeshing;
-      break;
-
+      this.sign = signMAC
+      this.verify = verifyMAC
+      this.generateKey = generateKey
+      this.macLength = algorithm.macLength || (this.blockLength >> 1)
+      this.pad = noPad
+      this.unpad = noPad
+      this.keyMeshing = noKeyMeshing
+      break
     case 'KW':
-      this.pad = noPad;
-      this.unpad = noPad;
-      this.keyMeshing = noKeyMeshing;
-
+      this.pad = noPad
+      this.unpad = noPad
+      this.keyMeshing = noKeyMeshing
       switch (algorithm.keyWrapping) {
         case 'CP':
-          this.wrapKey = wrapKeyCP;
-          this.unwrapKey = unwrapKeyCP;
-          this.generateKey = generateKey;
-          this.shiftBits = algorithm.shiftBits || this.blockLength;
-          break;
-
+          this.wrapKey = wrapKeyCP
+          this.unwrapKey = unwrapKeyCP
+          this.generateKey = generateKey
+          this.shiftBits = algorithm.shiftBits || this.blockLength
+          break
         case 'SC':
-          this.wrapKey = wrapKeySC;
-          this.unwrapKey = unwrapKeySC;
-          this.generateKey = generateWrappingKeySC;
-          break;
-
+          this.wrapKey = wrapKeySC
+          this.unwrapKey = unwrapKeySC
+          this.generateKey = generateWrappingKeySC
+          break
         default:
-          this.wrapKey = wrapKeyGOST;
-          this.unwrapKey = unwrapKeyGOST;
-          this.generateKey = generateKey;
+          this.wrapKey = wrapKeyGOST
+          this.unwrapKey = unwrapKeyGOST
+          this.generateKey = generateKey
       }
-
-      break;
-
+      break
     case 'MASK':
-      this.wrapKey = wrapKeyMask;
-      this.unwrapKey = unwrapKeyMask;
-      this.generateKey = generateKey;
-      break;
-
+      this.wrapKey = wrapKeyMask
+      this.unwrapKey = unwrapKeyMask
+      this.generateKey = generateKey
+      break
     default:
-      throw new NotSupportedError(`Mode ${algorithm.mode} not supported`);
-  } // Define sBox parameter
-
-
-  let sBox = algorithm.sBox,
-      sBoxName;
-
-  if (!sBox) {
-    sBox = this.version === 2015 ? sBoxes['E-Z'] : this.procreator === 'SC' ? sBoxes['E-SC'] : sBoxes['E-A'];
-  } else if (typeof sBox === 'string') {
-    sBoxName = sBox.toUpperCase();
-    sBox = sBoxes[sBoxName];
-
-    if (!sBox) {
-      throw new SyntaxError(`Unknown sBox name: ${algorithm.sBox}`);
-    }
-  } else if (!sBox.length || sBox.length !== sBoxes['E-Z'].length) {
-    throw new SyntaxError(`Length of sBox must be ${sBoxes['E-Z'].length}`);
-  }
-
-  this.sBox = sBox; // Initial vector
-
+      throw new NotSupportedError(`Mode ${ algorithm.mode } not supported`)
+  }
+
+  // Define sBox parameter
+  let sBox = algorithm.sBox, sBoxName
+  if (!sBox) {sBox = this.version === 2015 ? sBoxes['E-Z'] : this.procreator === 'SC' ? sBoxes['E-SC'] : sBoxes['E-A']} else if (typeof sBox === 'string') {
+    sBoxName = sBox.toUpperCase()
+    sBox = sBoxes[sBoxName]
+    if (!sBox) {throw new SyntaxError(`Unknown sBox name: ${ algorithm.sBox}`)}
+  } else if (!sBox.length || sBox.length !== sBoxes['E-Z'].length) {throw new SyntaxError(`Length of sBox must be ${ sBoxes['E-Z'].length}`)}
+  this.sBox = sBox
+  // Initial vector
   if (algorithm.iv) {
-    this.iv = new Uint8Array(algorithm.iv);
-
-    if (this.iv.byteLength !== this.blockSize && this.version === 1989) {
-      throw new SyntaxError(`Length of iv must be ${this.blockLength} bits`);
-    } else if (this.iv.byteLength !== this.blockSize >> 1 && this.encrypt === processCTR15) {
-      throw new SyntaxError(`Length of iv must be ${this.blockLength}` >> `${1} bits`);
-    } else if (this.iv.byteLength % this.blockSize !== 0 && this.encrypt !== processCTR15) {
-      throw new SyntaxError(`Length of iv must be a multiple of ${this.blockLength} bits`);
-    }
-  } else {
-    this.iv = this.blockLength === 128 ? defaultIV128 : defaultIV;
-  } // User key material
-
-
+    this.iv = new Uint8Array(algorithm.iv)
+    if (this.iv.byteLength !== this.blockSize && this.version === 1989) {throw new SyntaxError(`Length of iv must be ${ this.blockLength } bits`)} else if (this.iv.byteLength !== this.blockSize >> 1 && this.encrypt === processCTR15) {throw new SyntaxError(`Length of iv must be ${ this.blockLength}` >> `${1 } bits`)} else if (this.iv.byteLength % this.blockSize !== 0 && this.encrypt !== processCTR15) {throw new SyntaxError(`Length of iv must be a multiple of ${ this.blockLength } bits`)}
+  } else {this.iv = this.blockLength === 128 ? defaultIV128 : defaultIV}
+  // User key material
   if (algorithm.ukm) {
-    this.ukm = new Uint8Array(algorithm.ukm);
-
-    if (this.ukm.byteLength * 8 !== this.blockLength) {
-      throw new SyntaxError(`Length of ukm must be ${this.blockLength} bits`);
-    }
+    this.ukm = new Uint8Array(algorithm.ukm)
+    if (this.ukm.byteLength * 8 !== this.blockLength) {throw new SyntaxError(`Length of ukm must be ${ this.blockLength } bits`)}
   }
 } // </editor-fold>
 
-
-module.exports = GostCipher;
\ No newline at end of file
+module.exports = GostCipher
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostCoding.js b/node_modules/gost-crypto/lib/gostCoding.js
index d7a06c1..da693f7 100644
--- a/node_modules/gost-crypto/lib/gostCoding.js
+++ b/node_modules/gost-crypto/lib/gostCoding.js
@@ -29,44 +29,37 @@
  * Of THIS SOfTWARE, EVEN If ADVISED Of THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const gostCrypto = require('./gostCrypto');
+
+const gostCrypto = require('./gostCrypto')
+
 /**
  * The Coding interface provides string converting methods: Base64, Hex,
  * Int16, Chars, BER and PEM
  * @class GostCoding
  *
- */
-// <editor-fold defaultstate="collapsed">
-
-
-const DataError = global.DataError || global.Error;
-const CryptoOperationData = global.ArrayBuffer;
-const Date = global.Date;
+ */ // <editor-fold defaultstate="collapsed">
+const DataError = global.DataError || global.Error
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
 
 function buffer(d) {
-  if (d instanceof CryptoOperationData) {
-    return d;
-  }
-
+  if (d instanceof CryptoOperationData) {return d}
   if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
-    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ? d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer;
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
   }
-
-  throw new DataError('CryptoOperationData required');
+  throw new DataError('CryptoOperationData required')
 } // </editor-fold>
 
+function GostCoding() {
+}
 
-function GostCoding() {}
 /**
  * BASE64 conversion
  *
  * @class GostCoding.Base64
  */
-
-
-const Base64 = {
-  // <editor-fold defaultstate="collapsed">
-
+const Base64 = { // <editor-fold defaultstate="collapsed">
   /**
      * Base64.decode convert BASE64 string s to CryptoOperationData
      *
@@ -75,29 +68,32 @@ const Base64 = {
      * @returns {CryptoOperationData} Binary decoded data
      */
   decode: function (s) {
-    s = s.replace(/[^A-Za-z0-9\+\/]/g, '');
+    s = s.replace(/[^A-Za-z0-9\+\/]/g, '')
     const n = s.length,
-          k = n * 3 + 1 >> 2,
-          r = new Uint8Array(k);
+      k = n * 3 + 1 >> 2, r = new Uint8Array(k)
 
     for (var m3, m4, u24 = 0, j = 0, i = 0; i < n; i++) {
-      m4 = i & 3;
-      let c = s.charCodeAt(i);
-      c = c > 64 && c < 91 ? c - 65 : c > 96 && c < 123 ? c - 71 : c > 47 && c < 58 ? c + 4 : c === 43 ? 62 : c === 47 ? 63 : 0;
-      u24 |= c << 18 - 6 * m4;
+      m4 = i & 3
+      let c = s.charCodeAt(i)
+
+      c = c > 64 && c < 91 ?
+        c - 65 : c > 96 && c < 123 ?
+          c - 71 : c > 47 && c < 58 ?
+            c + 4 : c === 43 ?
+              62 : c === 47 ?
+                63 : 0
 
+      u24 |= c << 18 - 6 * m4
       if (m4 === 3 || n - i === 1) {
-        for (m3 = 0; m3 < 3 && j < k; m3++, j++) {
-          r[j] = u24 >>> (16 >>> m3 & 24) & 255;
+        for (m3 = 0; m3 < 3 && j < k; m3++ , j++) {
+          r[j] = u24 >>> (16 >>> m3 & 24) & 255
         }
+        u24 = 0
 
-        u24 = 0;
       }
     }
-
-    return r.buffer;
+    return r.buffer
   },
-
   /**
      * Base64.encode(data) convert CryptoOperationData data to BASE64 string
      *
@@ -106,35 +102,26 @@ const Base64 = {
      * @returns {String} BASE64 encoded data
      */
   encode: function (data) {
-    const slen = 8,
-          d = new Uint8Array(buffer(data));
-    let m3 = 2,
-        s = '';
-
+    const slen = 8, d = new Uint8Array(buffer(data))
+    let m3 = 2, s = ''
     for (let n = d.length, u24 = 0, i = 0; i < n; i++) {
-      m3 = i % 3;
-
-      if (i > 0 && i * 4 / 3 % (12 * slen) === 0) {
-        s += '\r\n';
-      }
-
-      u24 |= d[i] << (16 >>> m3 & 24);
-
+      m3 = i % 3
+      if (i > 0 && (i * 4 / 3) % (12 * slen) === 0) {s += '\r\n'}
+      u24 |= d[i] << (16 >>> m3 & 24)
       if (m3 === 2 || n - i === 1) {
         for (let j = 18; j >= 0; j -= 6) {
-          let c = u24 >>> j & 63;
-          c = c < 26 ? c + 65 : c < 52 ? c + 71 : c < 62 ? c - 4 : c === 62 ? 43 : c === 63 ? 47 : 65;
-          s += String.fromCharCode(c);
+          let c = u24 >>> j & 63
+          c = c < 26 ? c + 65 : c < 52 ? c + 71 : c < 62 ? c - 4 :
+            c === 62 ? 43 : c === 63 ? 47 : 65
+          s += String.fromCharCode(c)
         }
-
-        u24 = 0;
+        u24 = 0
       }
     }
+    return s.substr(0, s.length - 2 + m3) + (m3 === 2 ? '' : m3 === 1 ? '=' : '==')
+  }, // </editor-fold>
+}
 
-    return s.substr(0, s.length - 2 + m3) + (m3 === 2 ? '' : m3 === 1 ? '=' : '==');
-  } // </editor-fold>
-
-};
 /**
  * BASE64 conversion
  *
@@ -142,87 +129,30 @@ const Base64 = {
  * @insnance
  * @type GostCoding.Base64
  */
+GostCoding.prototype.Base64 = Base64
 
-GostCoding.prototype.Base64 = Base64;
 /**
  * Text string conversion <br>
  * Methods support charsets: ascii, win1251, utf8, utf16 (ucs2, unicode), utf32 (ucs4)
  *
  * @class GostCoding.Chars
  */
+const Chars = (function () { // <editor-fold defaultstate="collapsed">
 
-const Chars = function () {
-  // <editor-fold defaultstate="collapsed">
   const _win1251_ = {
-    0x402: 0x80,
-    0x403: 0x81,
-    0x201A: 0x82,
-    0x453: 0x83,
-    0x201E: 0x84,
-    0x2026: 0x85,
-    0x2020: 0x86,
-    0x2021: 0x87,
-    0x20AC: 0x88,
-    0x2030: 0x89,
-    0x409: 0x8A,
-    0x2039: 0x8B,
-    0x40A: 0x8C,
-    0x40C: 0x8D,
-    0x40B: 0x8E,
-    0x40f: 0x8f,
-    0x452: 0x90,
-    0x2018: 0x91,
-    0x2019: 0x92,
-    0x201C: 0x93,
-    0x201D: 0x94,
-    0x2022: 0x95,
-    0x2013: 0x96,
-    0x2014: 0x97,
-    0x2122: 0x99,
-    0x459: 0x9A,
-    0x203A: 0x9B,
-    0x45A: 0x9C,
-    0x45C: 0x9D,
-    0x45B: 0x9E,
-    0x45f: 0x9f,
-    0xA0: 0xA0,
-    0x40E: 0xA1,
-    0x45E: 0xA2,
-    0x408: 0xA3,
-    0xA4: 0xA4,
-    0x490: 0xA5,
-    0xA6: 0xA6,
-    0xA7: 0xA7,
-    0x401: 0xA8,
-    0xA9: 0xA9,
-    0x404: 0xAA,
-    0xAB: 0xAB,
-    0xAC: 0xAC,
-    0xAD: 0xAD,
-    0xAE: 0xAE,
-    0x407: 0xAf,
-    0xB0: 0xB0,
-    0xB1: 0xB1,
-    0x406: 0xB2,
-    0x456: 0xB3,
-    0x491: 0xB4,
-    0xB5: 0xB5,
-    0xB6: 0xB6,
-    0xB7: 0xB7,
-    0x451: 0xB8,
-    0x2116: 0xB9,
-    0x454: 0xBA,
-    0xBB: 0xBB,
-    0x458: 0xBC,
-    0x405: 0xBD,
-    0x455: 0xBE,
-    0x457: 0xBf
-  };
-  const _win1251back_ = {};
-
+    0x402: 0x80, 0x403: 0x81, 0x201A: 0x82, 0x453: 0x83, 0x201E: 0x84, 0x2026: 0x85, 0x2020: 0x86, 0x2021: 0x87,
+    0x20AC: 0x88, 0x2030: 0x89, 0x409: 0x8A, 0x2039: 0x8B, 0x40A: 0x8C, 0x40C: 0x8D, 0x40B: 0x8E, 0x40f: 0x8f,
+    0x452: 0x90, 0x2018: 0x91, 0x2019: 0x92, 0x201C: 0x93, 0x201D: 0x94, 0x2022: 0x95, 0x2013: 0x96, 0x2014: 0x97,
+    0x2122: 0x99, 0x459: 0x9A, 0x203A: 0x9B, 0x45A: 0x9C, 0x45C: 0x9D, 0x45B: 0x9E, 0x45f: 0x9f,
+    0xA0: 0xA0, 0x40E: 0xA1, 0x45E: 0xA2, 0x408: 0xA3, 0xA4: 0xA4, 0x490: 0xA5, 0xA6: 0xA6, 0xA7: 0xA7,
+    0x401: 0xA8, 0xA9: 0xA9, 0x404: 0xAA, 0xAB: 0xAB, 0xAC: 0xAC, 0xAD: 0xAD, 0xAE: 0xAE, 0x407: 0xAf,
+    0xB0: 0xB0, 0xB1: 0xB1, 0x406: 0xB2, 0x456: 0xB3, 0x491: 0xB4, 0xB5: 0xB5, 0xB6: 0xB6, 0xB7: 0xB7,
+    0x451: 0xB8, 0x2116: 0xB9, 0x454: 0xBA, 0xBB: 0xBB, 0x458: 0xBC, 0x405: 0xBD, 0x455: 0xBE, 0x457: 0xBf,
+  }
+  const _win1251back_ = {}
   for (const from in _win1251_) {
-    const to = _win1251_[from];
-    _win1251back_[to] = from;
+    const to = _win1251_[from]
+    _win1251back_[to] = from
   }
 
   return {
@@ -235,78 +165,67 @@ const Chars = function () {
          * @returns {CryptoOperationData} Decoded binary data
          */
     decode: function (s, charset) {
-      charset = (charset || 'win1251').toLowerCase().replace('-', '');
-      const r = [];
-
+      charset = (charset || 'win1251').toLowerCase().replace('-', '')
+      const r = []
       for (let i = 0, j = s.length; i < j; i++) {
-        let c = s.charCodeAt(i);
-
+        let c = s.charCodeAt(i)
         if (charset === 'utf8') {
           if (c < 0x80) {
-            r.push(c);
+            r.push(c)
           } else if (c < 0x800) {
-            r.push(0xc0 + (c >>> 6));
-            r.push(0x80 + (c & 63));
+            r.push(0xc0 + (c >>> 6))
+            r.push(0x80 + (c & 63))
           } else if (c < 0x10000) {
-            r.push(0xe0 + (c >>> 12));
-            r.push(0x80 + (c >>> 6 & 63));
-            r.push(0x80 + (c & 63));
+            r.push(0xe0 + (c >>> 12))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
           } else if (c < 0x200000) {
-            r.push(0xf0 + (c >>> 18));
-            r.push(0x80 + (c >>> 12 & 63));
-            r.push(0x80 + (c >>> 6 & 63));
-            r.push(0x80 + (c & 63));
+            r.push(0xf0 + (c >>> 18))
+            r.push(0x80 + (c >>> 12 & 63))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
           } else if (c < 0x4000000) {
-            r.push(0xf8 + (c >>> 24));
-            r.push(0x80 + (c >>> 18 & 63));
-            r.push(0x80 + (c >>> 12 & 63));
-            r.push(0x80 + (c >>> 6 & 63));
-            r.push(0x80 + (c & 63));
+            r.push(0xf8 + (c >>> 24))
+            r.push(0x80 + (c >>> 18 & 63))
+            r.push(0x80 + (c >>> 12 & 63))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
           } else {
-            r.push(0xfc + (c >>> 30));
-            r.push(0x80 + (c >>> 24 & 63));
-            r.push(0x80 + (c >>> 18 & 63));
-            r.push(0x80 + (c >>> 12 & 63));
-            r.push(0x80 + (c >>> 6 & 63));
-            r.push(0x80 + (c & 63));
+            r.push(0xfc + (c >>> 30))
+            r.push(0x80 + (c >>> 24 & 63))
+            r.push(0x80 + (c >>> 18 & 63))
+            r.push(0x80 + (c >>> 12 & 63))
+            r.push(0x80 + (c >>> 6 & 63))
+            r.push(0x80 + (c & 63))
           }
         } else if (charset === 'unicode' || charset === 'ucs2' || charset === 'utf16') {
-          if (c < 0xD800 || c >= 0xE000 && c <= 0x10000) {
-            r.push(c >>> 8);
-            r.push(c & 0xff);
+          if (c < 0xD800 || (c >= 0xE000 && c <= 0x10000)) {
+            r.push(c >>> 8)
+            r.push(c & 0xff)
           } else if (c >= 0x10000 && c < 0x110000) {
-            c -= 0x10000;
-            const first = ((0xffc00 & c) >> 10) + 0xD800;
-            const second = (0x3ff & c) + 0xDC00;
-            r.push(first >>> 8);
-            r.push(first & 0xff);
-            r.push(second >>> 8);
-            r.push(second & 0xff);
+            c -= 0x10000
+            const first = ((0xffc00 & c) >> 10) + 0xD800
+            const second = (0x3ff & c) + 0xDC00
+            r.push(first >>> 8)
+            r.push(first & 0xff)
+            r.push(second >>> 8)
+            r.push(second & 0xff)
           }
         } else if (charset === 'utf32' || charset === 'ucs4') {
-          r.push(c >>> 24 & 0xff);
-          r.push(c >>> 16 & 0xff);
-          r.push(c >>> 8 & 0xff);
-          r.push(c & 0xff);
+          r.push(c >>> 24 & 0xff)
+          r.push(c >>> 16 & 0xff)
+          r.push(c >>> 8 & 0xff)
+          r.push(c & 0xff)
         } else if (charset === 'win1251') {
           if (c >= 0x80) {
             if (c >= 0x410 && c < 0x450) // А..Яа..я
-              {
-                c -= 0x350;
-              } else {
-              c = _win1251_[c] || 0;
-            }
+            {c -= 0x350} else {c = _win1251_[c] || 0}
           }
-
-          r.push(c);
-        } else {
-          r.push(c & 0xff);
-        }
+          r.push(c)
+        } else {r.push(c & 0xff)}
       }
-
-      return new Uint8Array(r).buffer;
+      return new Uint8Array(r).buffer
     },
-
     /**
          * Chars.encode(data, charset) convert CryptoOperationData data to string with defined charset
          *
@@ -316,52 +235,48 @@ const Chars = function () {
          * @returns {string} Encoded javascript string
          */
     encode: function (data, charset) {
-      charset = (charset || 'win1251').toLowerCase().replace('-', '');
-      const r = [],
-            d = new Uint8Array(buffer(data));
-
+      charset = (charset || 'win1251').toLowerCase().replace('-', '')
+      const r = [], d = new Uint8Array(buffer(data))
       for (let i = 0, n = d.length; i < n; i++) {
-        let c = d[i];
-
+        let c = d[i]
         if (charset === 'utf8') {
           c = c >= 0xfc && c < 0xfe && i + 5 < n ? // six bytes
-          (c - 0xfc) * 1073741824 + (d[++i] - 0x80 << 24) + (d[++i] - 0x80 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80 : c >> 0xf8 && c < 0xfc && i + 4 < n ? // five bytes
-          (c - 0xf8 << 24) + (d[++i] - 0x80 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80 : c >> 0xf0 && c < 0xf8 && i + 3 < n ? // four bytes
-          (c - 0xf0 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80 : c >= 0xe0 && c < 0xf0 && i + 2 < n ? // three bytes
-          (c - 0xe0 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80 : c >= 0xc0 && c < 0xe0 && i + 1 < n ? // two bytes
-          (c - 0xc0 << 6) + d[++i] - 0x80 : c; // one byte
+            (c - 0xfc) * 1073741824 + (d[++i] - 0x80 << 24) + (d[++i] - 0x80 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+            : c >> 0xf8 && c < 0xfc && i + 4 < n ? // five bytes
+              (c - 0xf8 << 24) + (d[++i] - 0x80 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+              : c >> 0xf0 && c < 0xf8 && i + 3 < n ? // four bytes
+                (c - 0xf0 << 18) + (d[++i] - 0x80 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+                : c >= 0xe0 && c < 0xf0 && i + 2 < n ? // three bytes
+                  (c - 0xe0 << 12) + (d[++i] - 0x80 << 6) + d[++i] - 0x80
+                  : c >= 0xc0 && c < 0xe0 && i + 1 < n ? // two bytes
+                    (c - 0xc0 << 6) + d[++i] - 0x80
+                    : c // one byte
         } else if (charset === 'unicode' || charset === 'ucs2' || charset === 'utf16') {
-          c = (c << 8) + d[++i];
-
+          c = (c << 8) + d[++i]
           if (c >= 0xD800 && c < 0xE000) {
-            const first = c - 0xD800 << 10;
-            c = d[++i];
-            c = (c << 8) + d[++i];
-            const second = c - 0xDC00;
-            c = first + second + 0x10000;
+            const first = (c - 0xD800) << 10
+            c = d[++i]
+            c = (c << 8) + d[++i]
+            const second = c - 0xDC00
+            c = first + second + 0x10000
           }
         } else if (charset === 'utf32' || charset === 'ucs4') {
-          c = (c << 8) + d[++i];
-          c = (c << 8) + d[++i];
-          c = (c << 8) + d[++i];
+          c = (c << 8) + d[++i]
+          c = (c << 8) + d[++i]
+          c = (c << 8) + d[++i]
         } else if (charset === 'win1251') {
           if (c >= 0x80) {
-            if (c >= 0xC0 && c < 0x100) {
-              c += 0x350;
-            } // А..Яа..я
-            else {
-                c = _win1251back_[c] || 0;
-              }
+            if (c >= 0xC0 && c < 0x100) {c += 0x350} // А..Яа..я
+            else {c = _win1251back_[c] || 0}
           }
         }
-
-        r.push(String.fromCharCode(c));
+        r.push(String.fromCharCode(c))
       }
+      return r.join('')
+    },
+  } // </editor-fold>
+})()
 
-      return r.join('');
-    }
-  }; // </editor-fold>
-}();
 /**
  * Text string conversion
  *
@@ -369,18 +284,14 @@ const Chars = function () {
  * @insnance
  * @type GostCoding.Chars
  */
+GostCoding.prototype.Chars = Chars
 
-
-GostCoding.prototype.Chars = Chars;
 /**
  * HEX conversion
  *
  * @class GostCoding.Hex
  */
-
-const Hex = {
-  // <editor-fold defaultstate="collapsed">
-
+const Hex = { // <editor-fold defaultstate="collapsed">
   /**
      * Hex.decode(s, endean) convert HEX string s to CryptoOperationData in endean mode
      *
@@ -390,24 +301,17 @@ const Hex = {
      * @returns {CryptoOperationData} Decoded binary data
      */
   decode: function (s, endean) {
-    s = s.replace(/[^A-fa-f0-9]/g, '');
-    const n = Math.ceil(s.length / 2),
-          r = new Uint8Array(n);
-    s = (s.length % 2 > 0 ? '0' : '') + s;
-
-    if (endean && (typeof endean !== 'string' || endean.toLowerCase().indexOf('little') < 0)) {
-      for (var i = 0; i < n; i++) {
-        r[i] = parseInt(s.substr((n - i - 1) * 2, 2), 16);
-      }
+    s = s.replace(/[^A-fa-f0-9]/g, '')
+    const n = Math.ceil(s.length / 2), r = new Uint8Array(n)
+    s = (s.length % 2 > 0 ? '0' : '') + s
+    if (endean && ((typeof endean !== 'string') ||
+            (endean.toLowerCase().indexOf('little') < 0))) {
+      for (var i = 0; i < n; i++) {r[i] = parseInt(s.substr((n - i - 1) * 2, 2), 16)}
     } else {
-      for (var i = 0; i < n; i++) {
-        r[i] = parseInt(s.substr(i * 2, 2), 16);
-      }
+      for (var i = 0; i < n; i++) {r[i] = parseInt(s.substr(i * 2, 2), 16)}
     }
-
-    return r.buffer;
+    return r.buffer
   },
-
   /**
      * Hex.encode(data, endean) convert CryptoOperationData data to HEX string in endean mode
      *
@@ -417,42 +321,38 @@ const Hex = {
      * @returns {string} Hex decoded string
      */
   encode: function (data, endean) {
-    const s = [],
-          d = new Uint8Array(buffer(data)),
-          n = d.length;
-
-    if (endean && (typeof endean !== 'string' || endean.toLowerCase().indexOf('little') < 0)) {
+    const s = [], d = new Uint8Array(buffer(data)), n = d.length
+    if (endean && ((typeof endean !== 'string') ||
+            (endean.toLowerCase().indexOf('little') < 0))) {
       for (var i = 0; i < n; i++) {
-        const j = n - i - 1;
-        s[j] = (j > 0 && j % 32 === 0 ? '\r\n' : '') + `00${d[i].toString(16)}`.slice(-2);
+        const j = n - i - 1
+        s[j] = (j > 0 && j % 32 === 0 ? '\r\n' : '') +
+                    (`00${ d[i].toString(16)}`).slice(-2)
       }
     } else {
       for (var i = 0; i < n; i++) {
-        s[i] = (i > 0 && i % 32 === 0 ? '\r\n' : '') + `00${d[i].toString(16)}`.slice(-2);
+        s[i] = (i > 0 && i % 32 === 0 ? '\r\n' : '') +
+                    (`00${ d[i].toString(16)}`).slice(-2)
       }
     }
+    return s.join('')
+  }, // </editor-fold>
+}
 
-    return s.join('');
-  } // </editor-fold>
-
-};
 /**
  *  HEX conversion
  * @memberOf GostCoding
  * @insnance
  * @type GostCoding.Hex
  */
+GostCoding.prototype.Hex = Hex
 
-GostCoding.prototype.Hex = Hex;
 /**
  * String hex-encoded integer conversion
  *
  * @class GostCoding.Int16
  */
-
-const Int16 = {
-  // <editor-fold defaultstate="collapsed">
-
+const Int16 = { // <editor-fold defaultstate="collapsed">
   /**
      * Int16.decode(s) convert hex big insteger s to CryptoOperationData
      *
@@ -461,52 +361,34 @@ const Int16 = {
      * @returns {CryptoOperationData} Decoded binary data
      */
   decode: function (s) {
-    s = (s || '').replace(/[^\-A-fa-f0-9]/g, '');
-
-    if (s.length === 0) {
-      s = '0';
-    } // Signature
-
-
-    let neg = false;
-
+    s = (s || '').replace(/[^\-A-fa-f0-9]/g, '')
+    if (s.length === 0) {s = '0'}
+    // Signature
+    let neg = false
     if (s.charAt(0) === '-') {
-      neg = true;
-      s = s.substring(1);
-    } // Align 2 chars
-
-
-    while (s.charAt(0) === '0' && s.length > 1) {
-      s = s.substring(1);
+      neg = true
+      s = s.substring(1)
     }
-
-    s = (s.length % 2 > 0 ? '0' : '') + s; // Padding for singanuture
+    // Align 2 chars
+    while (s.charAt(0) === '0' && s.length > 1) {s = s.substring(1)}
+    s = (s.length % 2 > 0 ? '0' : '') + s
+    // Padding for singanuture
     // '800000' - 'ffffff' - for positive
     // '800001' - 'ffffff' - for negative
-
-    if (!neg && !/^[0-7]/.test(s) || neg && !/^[0-7]|8[0]+$/.test(s)) {
-      s = `00${s}`;
-    } // Convert hex
-
-
-    let n = s.length / 2,
-        r = new Uint8Array(n),
-        t = 0;
-
+    if ((!neg && !/^[0-7]/.test(s)) ||
+            (neg && !/^[0-7]|8[0]+$/.test(s))) {s = `00${ s}`}
+    // Convert hex
+    let n = s.length / 2, r = new Uint8Array(n), t = 0
     for (let i = n - 1; i >= 0; --i) {
-      let c = parseInt(s.substr(i * 2, 2), 16);
-
-      if (neg && c + t > 0) {
-        c = 256 - c - t;
-        t = 1;
+      let c = parseInt(s.substr(i * 2, 2), 16)
+      if (neg && (c + t > 0)) {
+        c = 256 - c - t
+        t = 1
       }
-
-      r[i] = c;
+      r[i] = c
     }
-
-    return r.buffer;
+    return r.buffer
   },
-
   /**
      * Int16.encode(data) convert CryptoOperationData data to big integer hex string
      *
@@ -515,859 +397,559 @@ const Int16 = {
      * @returns {string} Int16 encoded string
      */
   encode: function (data) {
-    const d = new Uint8Array(buffer(data)),
-          n = d.length;
-
-    if (d.length === 0) {
-      return '0x00';
-    }
-
-    let s = [],
-        neg = d[0] > 0x7f,
-        t = 0;
-
+    const d = new Uint8Array(buffer(data)), n = d.length
+    if (d.length === 0) {return '0x00'}
+    let s = [], neg = d[0] > 0x7f, t = 0
     for (let i = n - 1; i >= 0; --i) {
-      let v = d[i];
-
-      if (neg && v + t > 0) {
-        v = 256 - v - t;
-        t = 1;
+      let v = d[i]
+      if (neg && (v + t > 0)) {
+        v = 256 - v - t
+        t = 1
       }
-
-      s[i] = `00${v.toString(16)}`.slice(-2);
+      s[i] = (`00${ v.toString(16)}`).slice(-2)
     }
+    s = s.join('')
+    while (s.charAt(0) === '0') {s = s.substring(1)}
+    return `${neg ? '-' : '' }0x${ s}`
+  }, // </editor-fold>
+}
 
-    s = s.join('');
-
-    while (s.charAt(0) === '0') {
-      s = s.substring(1);
-    }
-
-    return `${neg ? '-' : ''}0x${s}`;
-  } // </editor-fold>
-
-};
 /**
  * String hex-encoded integer conversion
  * @memberOf GostCoding
  * @insnance
  * @type GostCoding.Int16
  */
+GostCoding.prototype.Int16 = Int16
 
-GostCoding.prototype.Int16 = Int16;
 /**
  * BER, DER, CER conversion
  *
  * @class GostCoding.BER
  */
+const BER = (function () { // <editor-fold defaultstate="collapsed">
 
-const BER = function () {
-  // <editor-fold defaultstate="collapsed">
   // Predefenition block
   function encodeBER(source, format, onlyContent) {
     // Correct primitive type
-    let object = source.object;
-
-    if (object === undefined) {
-      object = source;
-    } // Determinate tagClass
+    let object = source.object
+    if (object === undefined) {object = source}
 
+    // Determinate tagClass
+    const tagClass = source.tagClass = source.tagClass || 0 // Universial default
 
-    const tagClass = source.tagClass = source.tagClass || 0; // Universial default
     // Determinate tagNumber. Use only for Universal class
-
     if (tagClass === 0) {
-      var tagNumber = source.tagNumber;
-
+      var tagNumber = source.tagNumber
       if (typeof tagNumber === 'undefined') {
         if (typeof object === 'string') {
           if (object === '') // NULL
-            {
-              tagNumber = 0x05;
-            } else if (/^\-?0x[0-9a-fA-F]+$/.test(object)) // INTEGER
-            {
-              tagNumber = 0x02;
-            } else if (/^(\d+\.)+\d+$/.test(object)) // OID
-            {
-              tagNumber = 0x06;
-            } else if (/^[01]+$/.test(object)) // BIT STRING
-            {
-              tagNumber = 0x03;
-            } else if (/^(true|false)$/.test(object)) // BOOLEAN
-            {
-              tagNumber = 0x01;
-            } else if (/^[0-9a-fA-F]+$/.test(object)) // OCTET STRING
-            {
-              tagNumber = 0x04;
-            } else {
-            tagNumber = 0x13;
-          } // Printable string (later can be changed to UTF8String)
-
-        } else if (typeof object === 'number') {
-          // INTEGER
-          tagNumber = 0x02;
-        } else if (typeof object === 'boolean') {
-          // BOOLEAN
-          tagNumber = 0x01;
-        } else if (object instanceof Array) {
-          // SEQUENCE
-          tagNumber = 0x10;
-        } else if (object instanceof Date) {
-          // GeneralizedTime
-          tagNumber = 0x18;
-        } else if (object instanceof CryptoOperationData || object && object.buffer instanceof CryptoOperationData) {
-          tagNumber = 0x04;
-        } else {
-          throw new DataError(`Unrecognized type for ${object}`);
-        }
+          {tagNumber = 0x05} else if (/^\-?0x[0-9a-fA-F]+$/.test(object)) // INTEGER
+          {tagNumber = 0x02} else if (/^(\d+\.)+\d+$/.test(object)) // OID
+          {tagNumber = 0x06} else if (/^[01]+$/.test(object)) // BIT STRING
+          {tagNumber = 0x03} else if (/^(true|false)$/.test(object)) // BOOLEAN
+          {tagNumber = 0x01} else if (/^[0-9a-fA-F]+$/.test(object)) // OCTET STRING
+          {tagNumber = 0x04} else {tagNumber = 0x13} // Printable string (later can be changed to UTF8String)
+        } else if (typeof object === 'number') { // INTEGER
+          tagNumber = 0x02
+        } else if (typeof object === 'boolean') { // BOOLEAN
+          tagNumber = 0x01
+        } else if (object instanceof Array) { // SEQUENCE
+          tagNumber = 0x10
+        } else if (object instanceof Date) { // GeneralizedTime
+          tagNumber = 0x18
+        } else if (object instanceof CryptoOperationData || (object && object.buffer instanceof CryptoOperationData)) {
+          tagNumber = 0x04
+        } else {throw new DataError(`Unrecognized type for ${ object}`)}
       }
-    } // Determinate constructed
-
-
-    let tagConstructed = source.tagConstructed;
-
-    if (typeof tagConstructed === 'undefined') {
-      tagConstructed = source.tagConstructed = object instanceof Array;
-    } // Create content
-
-
-    let content;
+    }
 
-    if (object instanceof CryptoOperationData || object && object.buffer instanceof CryptoOperationData) {
-      // Direct
-      content = new Uint8Array(buffer(object));
+    // Determinate constructed
+    let tagConstructed = source.tagConstructed
+    if (typeof tagConstructed === 'undefined') {tagConstructed = source.tagConstructed = object instanceof Array}
 
-      if (tagNumber === 0x03) {
-        // BITSTRING
+    // Create content
+    let content
+    if (object instanceof CryptoOperationData || (object && object.buffer instanceof CryptoOperationData)) { // Direct
+      content = new Uint8Array(buffer(object))
+      if (tagNumber === 0x03) { // BITSTRING
         // Set unused bits
-        var a = new Uint8Array(buffer(content));
-        content = new Uint8Array(a.length + 1);
-        content[0] = 0; // No unused bits
-
-        content.set(a, 1);
+        var a = new Uint8Array(buffer(content))
+        content = new Uint8Array(a.length + 1)
+        content[0] = 0 // No unused bits
+        content.set(a, 1)
       }
-    } else if (tagConstructed) {
-      // Sub items coding
+    } else if (tagConstructed) { // Sub items coding
       if (object instanceof Array) {
-        var bytelen = 0,
-            ba = [],
-            offset = 0;
-
+        var bytelen = 0, ba = [], offset = 0
         for (var i = 0, n = object.length; i < n; i++) {
-          ba[i] = encodeBER(object[i], format);
-          bytelen += ba[i].length;
+          ba[i] = encodeBER(object[i], format)
+          bytelen += ba[i].length
         }
-
         if (tagNumber === 0x11) {
-          ba.sort(function (a, b) {
-            // Sort order for SET components
+          ba.sort(function (a, b) { // Sort order for SET components
             for (let i = 0, n = Math.min(a.length, b.length); i < n; i++) {
-              const r = a[i] - b[i];
-
-              if (r !== 0) {
-                return r;
-              }
+              const r = a[i] - b[i]
+              if (r !== 0) {return r}
             }
-
-            return a.length - b.length;
-          });
+            return a.length - b.length
+          })
         }
-
-        if (format === 'CER') {
-          // final for CER 00 00
-          ba[n] = new Uint8Array(2);
-          bytelen += 2;
+        if (format === 'CER') { // final for CER 00 00
+          ba[n] = new Uint8Array(2)
+          bytelen += 2
         }
-
-        content = new Uint8Array(bytelen);
-
+        content = new Uint8Array(bytelen)
         for (var i = 0, n = ba.length; i < n; i++) {
-          content.set(ba[i], offset);
-          offset = offset + ba[i].length;
+          content.set(ba[i], offset)
+          offset = offset + ba[i].length
         }
-      } else {
-        throw new DataError('Constracted block can\'t be primitive');
-      }
+      } else {throw new DataError('Constracted block can\'t be primitive')}
     } else {
       switch (tagNumber) {
         // 0x00: // EOC
-        case 0x01:
-          // BOOLEAN
-          content = new Uint8Array(1);
-          content[0] = object ? 0xff : 0;
-          break;
-
+        case 0x01: // BOOLEAN
+          content = new Uint8Array(1)
+          content[0] = object ? 0xff : 0
+          break
         case 0x02: // INTEGER
-
-        case 0x0a:
-          // ENUMIRATED
-          content = Int16.decode(typeof object === 'number' ? object.toString(16) : object);
-          break;
-
-        case 0x03:
-          // BIT STRING
+        case 0x0a: // ENUMIRATED
+          content = Int16.decode(
+            typeof object === 'number' ? object.toString(16) : object)
+          break
+        case 0x03: // BIT STRING
           if (typeof object === 'string') {
-            const unusedBits = 7 - (object.length + 7) % 8;
-            var n = Math.ceil(object.length / 8);
-            content = new Uint8Array(n + 1);
-            content[0] = unusedBits;
-
+            const unusedBits = 7 - (object.length + 7) % 8
+            var n = Math.ceil(object.length / 8)
+            content = new Uint8Array(n + 1)
+            content[0] = unusedBits
             for (var i = 0; i < n; i++) {
-              let c = 0;
-
+              let c = 0
               for (var j = 0; j < 8; j++) {
-                var k = i * 8 + j;
-                c = (c << 1) + (k < object.length ? object.charAt(k) === '1' ? 1 : 0 : 0);
+                var k = i * 8 + j
+                c = (c << 1) + (k < object.length ? (object.charAt(k) === '1' ? 1 : 0) : 0)
               }
-
-              content[i + 1] = c;
+              content[i + 1] = c
             }
           }
-
-          break;
-
+          break
         case 0x04:
-          content = Hex.decode(typeof object === 'number' ? object.toString(16) : object);
-          break;
-        // case 0x05: // NULL
-
-        case 0x06:
-          // OBJECT IDENTIFIER
-          var a = object.match(/\d+/g),
-              r = [];
-
+          content = Hex.decode(
+            typeof object === 'number' ? object.toString(16) : object)
+          break
+          // case 0x05: // NULL
+        case 0x06: // OBJECT IDENTIFIER
+          var a = object.match(/\d+/g), r = []
           for (var i = 1; i < a.length; i++) {
-            var n = +a[i],
-                r1 = [];
-
-            if (i === 1) {
-              n = n + a[0] * 40;
-            }
-
+            var n = +a[i], r1 = []
+            if (i === 1) {n = n + a[0] * 40}
             do {
-              r1.push(n & 0x7F);
-              n = n >>> 7;
-            } while (n); // reverse order
-
-
-            for (j = r1.length - 1; j >= 0; --j) {
-              r.push(r1[j] + (j === 0 ? 0x00 : 0x80));
-            }
+              r1.push(n & 0x7F)
+              n = n >>> 7
+            } while (n)
+            // reverse order
+            for (j = r1.length - 1; j >= 0; --j) {r.push(r1[j] + (j === 0 ? 0x00 : 0x80))}
           }
-
-          content = new Uint8Array(r);
-          break;
-        // case 0x07: // ObjectDescriptor
-        // case 0x08: // EXTERNAL
-        // case 0x09: // REAL
-        // case 0x0A: // ENUMERATED
-        // case 0x0B: // EMBEDDED PDV
-
-        case 0x0C:
-          // UTF8String
-          content = Chars.decode(object, 'utf8');
-          break;
-        // case 0x10: // SEQUENCE
-        // case 0x11: // SET
-
+          content = new Uint8Array(r)
+          break
+          // case 0x07: // ObjectDescriptor
+          // case 0x08: // EXTERNAL
+          // case 0x09: // REAL
+          // case 0x0A: // ENUMERATED
+          // case 0x0B: // EMBEDDED PDV
+        case 0x0C: // UTF8String
+          content = Chars.decode(object, 'utf8')
+          break
+          // case 0x10: // SEQUENCE
+          // case 0x11: // SET
         case 0x12: // NumericString
-
         case 0x16: // IA5String // ASCII
-
         case 0x13: // PrintableString // ASCII subset
-
         case 0x14: // TeletexString // aka T61String
-
         case 0x15: // VideotexString
-
         case 0x19: // GraphicString
-
         case 0x1A: // VisibleString // ASCII subset
-
-        case 0x1B:
-          // GeneralString
+        case 0x1B: // GeneralString
           // Reflect on character encoding
           for (var i = 0, n = object.length; i < n; i++) {
-            if (object.charCodeAt(i) > 255) {
-              tagNumber = 0x0C;
-            }
+            if (object.charCodeAt(i) > 255) {tagNumber = 0x0C}
           }
-
-          if (tagNumber === 0x0C) {
-            content = Chars.decode(object, 'utf8');
-          } else {
-            content = Chars.decode(object, 'ascii');
-          }
-
-          break;
-
+          if (tagNumber === 0x0C) {content = Chars.decode(object, 'utf8')} else {content = Chars.decode(object, 'ascii')}
+          break
         case 0x17: // UTCTime
-
-        case 0x18:
-          // GeneralizedTime
-          var result = object.original;
-
+        case 0x18: // GeneralizedTime
+          var result = object.original
           if (!result) {
-            const date = new Date(object);
-            date.setMinutes(date.getMinutes() + date.getTimezoneOffset()); // to UTC
-
-            let ms = tagNumber === 0x18 ? date.getMilliseconds().toString() : ''; // Milliseconds, remove trailing zeros
-
-            while (ms.length > 0 && ms.charAt(ms.length - 1) === '0') {
-              ms = ms.substring(0, ms.length - 1);
-            }
-
-            if (ms.length > 0) {
-              ms = `.${ms}`;
-            }
-
-            result = `${(tagNumber === 0x17 ? date.getYear().toString().slice(-2) : date.getFullYear().toString()) + `00${date.getMonth() + 1}`.slice(-2) + `00${date.getDate()}`.slice(-2) + `00${date.getHours()}`.slice(-2) + `00${date.getMinutes()}`.slice(-2) + `00${date.getSeconds()}`.slice(-2) + ms}Z`;
+            const date = new Date(object)
+            date.setMinutes(date.getMinutes() + date.getTimezoneOffset()) // to UTC
+            let ms = tagNumber === 0x18 ? date.getMilliseconds().toString() : '' // Milliseconds, remove trailing zeros
+            while (ms.length > 0 && ms.charAt(ms.length - 1) === '0') {ms = ms.substring(0, ms.length - 1)}
+            if (ms.length > 0) {ms = `.${ ms}`}
+            result = `${(tagNumber === 0x17 ? date.getYear().toString().slice(-2) : date.getFullYear().toString()) +
+                            (`00${ date.getMonth() + 1}`).slice(-2) +
+                            (`00${ date.getDate()}`).slice(-2) +
+                            (`00${ date.getHours()}`).slice(-2) +
+                            (`00${ date.getMinutes()}`).slice(-2) +
+                            (`00${ date.getSeconds()}`).slice(-2) + ms }Z`
           }
-
-          content = Chars.decode(result, 'ascii');
-          break;
-
-        case 0x1C:
-          // UniversalString
-          content = Chars.decode(object, 'utf32');
-          break;
-
-        case 0x1E:
-          // BMPString
-          content = Chars.decode(object, 'utf16');
-          break;
+          content = Chars.decode(result, 'ascii')
+          break
+        case 0x1C: // UniversalString
+          content = Chars.decode(object, 'utf32')
+          break
+        case 0x1E: // BMPString
+          content = Chars.decode(object, 'utf16')
+          break
       }
     }
 
-    if (!content) {
-      content = new Uint8Array(0);
-    }
-
-    if (content instanceof CryptoOperationData) {
-      content = new Uint8Array(content);
-    }
+    if (!content) {content = new Uint8Array(0)}
+    if (content instanceof CryptoOperationData) {content = new Uint8Array(content)}
 
     if (!tagConstructed && format === 'CER') {
       // Encoding CER-form for string types
-      var k;
-
+      var k
       switch (tagNumber) {
-        case 0x03:
-          // BIT_STRING
-          k = 1;
-        // ingnore unused bit for bit string
-
+        case 0x03: // BIT_STRING
+          k = 1 // ingnore unused bit for bit string
         case 0x04: // OCTET_STRING
-
         case 0x0C: // UTF8String
-
         case 0x12: // NumericString
-
         case 0x13: // PrintableString
-
         case 0x14: // TeletexString
-
         case 0x15: // VideotexString
-
         case 0x16: // IA5String
-
         case 0x19: // GraphicString
-
         case 0x1A: // VisibleString
-
         case 0x1B: // GeneralString
-
         case 0x1C: // UniversalString
-
-        case 0x1E:
-          // BMPString
-          k = k || 0; // Split content on 1000 octet len parts
-
-          var size = 1000;
-          var bytelen = 0,
-              ba = [],
-              offset = 0;
-
+        case 0x1E: // BMPString
+          k = k || 0
+          // Split content on 1000 octet len parts
+          var size = 1000
+          var bytelen = 0, ba = [], offset = 0
           for (var i = k, n = content.length; i < n; i += size - k) {
             ba[i] = encodeBER({
               object: new Unit8Array(content.buffer, i, Math.min(size - k, n - i)),
               tagNumber: tagNumber,
               tagClass: 0,
-              tagConstructed: false
-            }, format);
-            bytelen += ba[i].length;
+              tagConstructed: false,
+            }, format)
+            bytelen += ba[i].length
           }
-
-          ba[n] = new Uint8Array(2); // final for CER 00 00
-
-          bytelen += 2;
-          content = new Uint8Array(bytelen);
-
+          ba[n] = new Uint8Array(2) // final for CER 00 00
+          bytelen += 2
+          content = new Uint8Array(bytelen)
           for (var i = 0, n = ba.length; i < n; i++) {
-            content.set(ba[i], offset);
-            offset = offset + ba[i].length;
+            content.set(ba[i], offset)
+            offset = offset + ba[i].length
           }
-
       }
-    } // Restore tagNumber for all classes
-
-
-    if (tagClass === 0) {
-      source.tagNumber = tagNumber;
-    } else {
-      source.tagNumber = tagNumber = source.tagNumber || 0;
     }
 
-    source.content = content;
-
-    if (onlyContent) {
-      return content;
-    } // Create header
-    // tagNumber
-
-
-    let ha = [],
-        first = tagClass === 3 ? 0xC0 : tagClass === 2 ? 0x80 : tagClass === 1 ? 0x40 : 0x00;
+    // Restore tagNumber for all classes
+    if (tagClass === 0) {source.tagNumber = tagNumber} else {source.tagNumber = tagNumber = source.tagNumber || 0}
+    source.content = content
 
-    if (tagConstructed) {
-      first |= 0x20;
-    }
+    if (onlyContent) {return content}
 
+    // Create header
+    // tagNumber
+    let ha = [], first = tagClass === 3 ? 0xC0 : tagClass === 2 ? 0x80 :
+      tagClass === 1 ? 0x40 : 0x00
+    if (tagConstructed) {first |= 0x20}
     if (tagNumber < 0x1F) {
-      first |= tagNumber & 0x1F;
-      ha.push(first);
+      first |= tagNumber & 0x1F
+      ha.push(first)
     } else {
-      first |= 0x1F;
-      ha.push(first);
-      var n = tagNumber,
-          ha1 = [];
-
+      first |= 0x1F
+      ha.push(first)
+      var n = tagNumber, ha1 = []
       do {
-        ha1.push(n & 0x7F);
-        n = n >>> 7;
-      } while (n); // reverse order
-
-
-      for (var j = ha1.length - 1; j >= 0; --j) {
-        ha.push(ha1[j] + (j === 0 ? 0x00 : 0x80));
-      }
-    } // Length
-
-
+        ha1.push(n & 0x7F)
+        n = n >>> 7
+      } while (n)
+      // reverse order
+      for (var j = ha1.length - 1; j >= 0; --j) {ha.push(ha1[j] + (j === 0 ? 0x00 : 0x80))}
+    }
+    // Length
     if (tagConstructed && format === 'CER') {
-      ha.push(0x80);
+      ha.push(0x80)
     } else {
-      const len = content.length;
-
+      const len = content.length
       if (len > 0x7F) {
-        let l2 = len,
-            ha2 = [];
-
+        let l2 = len, ha2 = []
         do {
-          ha2.push(l2 & 0xff);
-          l2 = l2 >>> 8;
-        } while (l2);
-
-        ha.push(ha2.length + 0x80); // reverse order
-
-        for (var j = ha2.length - 1; j >= 0; --j) {
-          ha.push(ha2[j]);
-        }
+          ha2.push(l2 & 0xff)
+          l2 = l2 >>> 8
+        } while (l2)
+        ha.push(ha2.length + 0x80) // reverse order
+        for (var j = ha2.length - 1; j >= 0; --j) {ha.push(ha2[j])}
       } else {
         // simple len
-        ha.push(len);
+        ha.push(len)
       }
     }
+    const header = source.header = new Uint8Array(ha)
 
-    const header = source.header = new Uint8Array(ha); // Result - complete buffer
-
-    const block = new Uint8Array(header.length + content.length);
-    block.set(header, 0);
-    block.set(content, header.length);
-    return block;
+    // Result - complete buffer
+    const block = new Uint8Array(header.length + content.length)
+    block.set(header, 0)
+    block.set(content, header.length)
+    return block
   }
 
   function decodeBER(source, offset) {
+
     // start pos
-    let pos = offset || 0,
-        start = pos;
-    let tagNumber, tagClass, tagConstructed, content, header, buffer, sub, len;
+    let pos = offset || 0, start = pos
+    let tagNumber, tagClass, tagConstructed,
+      content, header, buffer, sub, len
 
     if (source.object) {
       // Ready from source
-      tagNumber = source.tagNumber;
-      tagClass = source.tagClass;
-      tagConstructed = source.tagConstructed;
-      content = source.content;
-      header = source.header;
-      buffer = source.object instanceof CryptoOperationData ? new Uint8Array(source.object) : null;
-      sub = source.object instanceof Array ? source.object : null;
-      len = buffer && buffer.length || null;
+      tagNumber = source.tagNumber
+      tagClass = source.tagClass
+      tagConstructed = source.tagConstructed
+      content = source.content
+      header = source.header
+      buffer = source.object instanceof CryptoOperationData ?
+        new Uint8Array(source.object) : null
+      sub = source.object instanceof Array ? source.object : null
+      len = buffer && buffer.length || null
     } else {
       // Decode header
-      const d = source; // Read tag
-
-      let buf = d[pos++];
-      tagNumber = buf & 0x1f;
-      tagClass = buf >> 6;
-      tagConstructed = (buf & 0x20) !== 0;
-
-      if (tagNumber === 0x1f) {
-        // long tag
-        tagNumber = 0;
-
+      const d = source
+
+      // Read tag
+      let buf = d[pos++]
+      tagNumber = buf & 0x1f
+      tagClass = buf >> 6
+      tagConstructed = (buf & 0x20) !== 0
+      if (tagNumber === 0x1f) { // long tag
+        tagNumber = 0
         do {
-          if (tagNumber > 0x1fffffffffff80) {
-            throw new DataError(`Convertor not supported tag number more then (2^53 - 1) at position ${offset}`);
-          }
-
-          buf = d[pos++];
-          tagNumber = (tagNumber << 7) + (buf & 0x7f);
-        } while (buf & 0x80);
-      } // Read len
-
-
-      buf = d[pos++];
-      len = buf & 0x7f;
+          if (tagNumber > 0x1fffffffffff80) {throw new DataError(`Convertor not supported tag number more then (2^53 - 1) at position ${ offset}`)}
+          buf = d[pos++]
+          tagNumber = (tagNumber << 7) + (buf & 0x7f)
+        } while (buf & 0x80)
+      }
 
+      // Read len
+      buf = d[pos++]
+      len = buf & 0x7f
       if (len !== buf) {
         if (len > 6) // no reason to use Int10, as it would be a huge buffer anyways
-          {
-            throw new DataError(`Length over 48 bits not supported at position ${offset}`);
-          }
-
-        if (len === 0) {
-          len = null;
-        } // undefined
+        {throw new DataError(`Length over 48 bits not supported at position ${ offset}`)}
+        if (len === 0) {len = null} // undefined
         else {
-            buf = 0;
-
-            for (var i = 0; i < len; ++i) {
-              buf = (buf << 8) + d[pos++];
-            }
-
-            len = buf;
-          }
+          buf = 0
+          for (var i = 0; i < len; ++i) {buf = (buf << 8) + d[pos++]}
+          len = buf
+        }
       }
 
-      start = pos;
-      sub = null;
+      start = pos
+      sub = null
 
       if (tagConstructed) {
         // must have valid content
-        sub = [];
-
+        sub = []
         if (len !== null) {
           // definite length
-          const end = start + len;
-
+          const end = start + len
           while (pos < end) {
-            var s = decodeBER(d, pos);
-            sub.push(s);
-            pos += s.header.length + s.content.length;
-          }
-
-          if (pos !== end) {
-            throw new DataError(`Content size is not correct for container starting at offset ${start}`);
+            var s = decodeBER(d, pos)
+            sub.push(s)
+            pos += s.header.length + s.content.length
           }
+          if (pos !== end) {throw new DataError(`Content size is not correct for container starting at offset ${ start}`)}
         } else {
           // undefined length
           try {
-            for (;;) {
-              var s = decodeBER(d, pos);
-              pos += s.header.length + s.content.length;
-
-              if (s.tagClass === 0x00 && s.tagNumber === 0x00) {
-                break;
-              }
-
-              sub.push(s);
+            for (; ;) {
+              var s = decodeBER(d, pos)
+              pos += s.header.length + s.content.length
+              if (s.tagClass === 0x00 && s.tagNumber === 0x00) {break}
+              sub.push(s)
             }
-
-            len = pos - start;
+            len = pos - start
           } catch (e) {
-            throw new DataError(`Exception ${e} while decoding undefined length content at offset ${start}`);
+            throw new DataError(`Exception ${ e } while decoding undefined length content at offset ${ start}`)
           }
         }
-      } // Header and content
-
-
-      header = new Uint8Array(d.buffer, offset, start - offset);
-      content = new Uint8Array(d.buffer, start, len);
-      buffer = content;
-    } // Constructed types - check for string concationation
+      }
 
+      // Header and content
+      header = new Uint8Array(d.buffer, offset, start - offset)
+      content = new Uint8Array(d.buffer, start, len)
+      buffer = content
+    }
 
+    // Constructed types - check for string concationation
     if (sub !== null && tagClass === 0) {
-      let k;
-
+      let k
       switch (tagNumber) {
-        case 0x03:
-          // BIT_STRING
-          k = 1;
-        // ingnore unused bit for bit string
-
+        case 0x03: // BIT_STRING
+          k = 1 // ingnore unused bit for bit string
         case 0x04: // OCTET_STRING
-
         case 0x0C: // UTF8String
-
         case 0x12: // NumericString
-
         case 0x13: // PrintableString
-
         case 0x14: // TeletexString
-
         case 0x15: // VideotexString
-
         case 0x16: // IA5String
-
         case 0x19: // GraphicString
-
         case 0x1A: // VisibleString
-
         case 0x1B: // GeneralString
-
         case 0x1C: // UniversalString
-
-        case 0x1E:
-          // BMPString
-          k = k || 0; // Concatination
-
-          if (sub.length === 0) {
-            throw new DataError(`No constructed encoding content of string type at offset ${start}`);
-          }
-
-          len = k;
-
+        case 0x1E: // BMPString
+          k = k || 0
+          // Concatination
+          if (sub.length === 0) {throw new DataError(`No constructed encoding content of string type at offset ${ start}`)}
+          len = k
           for (var i = 0, n = sub.length; i < n; i++) {
-            var s = sub[i];
-
-            if (s.tagClass !== tagClass || s.tagNumber !== tagNumber || s.tagConstructed) {
-              throw new DataError(`Invalid constructed encoding of string type at offset ${start}`);
-            }
-
-            len += s.content.length - k;
+            var s = sub[i]
+            if (s.tagClass !== tagClass || s.tagNumber !== tagNumber || s.tagConstructed) {throw new DataError(`Invalid constructed encoding of string type at offset ${ start}`)}
+            len += s.content.length - k
           }
-
-          buffer = new Uint8Array(len);
-
+          buffer = new Uint8Array(len)
           for (var i = 0, n = sub.length, j = k; i < n; i++) {
-            var s = sub[i];
-
-            if (k > 0) {
-              buffer.set(s.content.subarray(1), j);
-            } else {
-              buffer.set(s.content, j);
-            }
-
-            j += s.content.length - k;
+            var s = sub[i]
+            if (k > 0) {buffer.set(s.content.subarray(1), j)} else {buffer.set(s.content, j)}
+            j += s.content.length - k
           }
-
-          tagConstructed = false; // follow not required
-
-          sub = null;
-          break;
+          tagConstructed = false // follow not required
+          sub = null
+          break
       }
-    } // Primitive types
-
-
-    let object = '';
-
+    }
+    // Primitive types
+    let object = ''
     if (sub === null) {
-      if (len === null) {
-        throw new DataError(`Invalid tag with undefined length at offset ${start}`);
-      }
+      if (len === null) {throw new DataError(`Invalid tag with undefined length at offset ${ start}`)}
 
       if (tagClass === 0) {
         switch (tagNumber) {
-          case 0x01:
-            // BOOLEAN
-            object = buffer[0] !== 0;
-            break;
-
+          case 0x01: // BOOLEAN
+            object = buffer[0] !== 0
+            break
           case 0x02: // INTEGER
-
-          case 0x0a:
-            // ENUMIRATED
+          case 0x0a: // ENUMIRATED
             if (len > 6) {
-              object = Int16.encode(buffer);
+              object = Int16.encode(buffer)
             } else {
-              var v = buffer[0];
-
-              if (buffer[0] > 0x7f) {
-                v = v - 256;
-              }
-
-              for (var i = 1; i < len; i++) {
-                v = v * 256 + buffer[i];
-              }
-
-              object = v;
+              var v = buffer[0]
+              if (buffer[0] > 0x7f) {v = v - 256}
+              for (var i = 1; i < len; i++) {v = v * 256 + buffer[i]}
+              object = v
             }
-
-            break;
-
-          case 0x03:
-            // BIT_STRING
-            if (len > 5) {
-              // Content buffer
-              object = new Uint8Array(buffer.subarray(1)).buffer;
-            } else {
-              // Max bit mask only for 32 bit
+            break
+          case 0x03: // BIT_STRING
+            if (len > 5) { // Content buffer
+              object = new Uint8Array(buffer.subarray(1)).buffer
+            } else { // Max bit mask only for 32 bit
               var unusedBit = buffer[0],
-                  skip = unusedBit,
-                  s = [];
-
+                skip = unusedBit, s = []
               for (var i = len - 1; i >= 1; --i) {
-                const b = buffer[i];
-
-                for (var j = skip; j < 8; ++j) {
-                  s.push(b >> j & 1 ? '1' : '0');
-                }
-
-                skip = 0;
+                const b = buffer[i]
+                for (var j = skip; j < 8; ++j) {s.push((b >> j) & 1 ? '1' : '0')}
+                skip = 0
               }
-
-              object = s.reverse().join('');
+              object = s.reverse().join('')
             }
-
-            break;
-
-          case 0x04:
-            // OCTET_STRING
-            object = new Uint8Array(buffer).buffer;
-            break;
-          //  case 0x05: // NULL
-
-          case 0x06:
-            // OBJECT_IDENTIFIER
+            break
+          case 0x04: // OCTET_STRING
+            object = new Uint8Array(buffer).buffer
+            break
+            //  case 0x05: // NULL
+          case 0x06: // OBJECT_IDENTIFIER
             var s = '',
-                n = 0,
-                bits = 0;
-
+              n = 0,
+              bits = 0
             for (var i = 0; i < len; ++i) {
-              var v = buffer[i];
-              n = (n << 7) + (v & 0x7F);
-              bits += 7;
-
-              if (!(v & 0x80)) {
-                // finished
+              var v = buffer[i]
+              n = (n << 7) + (v & 0x7F)
+              bits += 7
+              if (!(v & 0x80)) { // finished
                 if (s === '') {
-                  var m = n < 80 ? n < 40 ? 0 : 1 : 2;
-                  s = `${m}.${n - m * 40}`;
-                } else {
-                  s += `.${n.toString()}`;
-                }
-
-                n = 0;
-                bits = 0;
+                  var m = n < 80 ? n < 40 ? 0 : 1 : 2
+                  s = `${m }.${ n - m * 40}`
+                } else {s += `.${ n.toString()}`}
+                n = 0
+                bits = 0
               }
             }
-
-            if (bits > 0) {
-              throw new DataError(`Incompleted OID at offset ${start}`);
-            }
-
-            object = s;
-            break;
-          //case 0x07: // ObjectDescriptor
-          //case 0x08: // EXTERNAL
-          //case 0x09: // REAL
-          //case 0x0A: // ENUMERATED
-          //case 0x0B: // EMBEDDED_PDV
-
+            if (bits > 0) {throw new DataError(`Incompleted OID at offset ${ start}`)}
+            object = s
+            break
+            //case 0x07: // ObjectDescriptor
+            //case 0x08: // EXTERNAL
+            //case 0x09: // REAL
+            //case 0x0A: // ENUMERATED
+            //case 0x0B: // EMBEDDED_PDV
           case 0x10: // SEQUENCE
-
-          case 0x11:
-            // SET
-            object = [];
-            break;
-
-          case 0x0C:
-            // UTF8String
-            object = Chars.encode(buffer, 'utf8');
-            break;
-
+          case 0x11: // SET
+            object = []
+            break
+          case 0x0C: // UTF8String
+            object = Chars.encode(buffer, 'utf8')
+            break
           case 0x12: // NumericString
-
           case 0x13: // PrintableString
-
           case 0x14: // TeletexString
-
           case 0x15: // VideotexString
-
           case 0x16: // IA5String
-
           case 0x19: // GraphicString
-
           case 0x1A: // VisibleString
-
-          case 0x1B:
-            // GeneralString
-            object = Chars.encode(buffer, 'ascii');
-            break;
-
-          case 0x1C:
-            // UniversalString
-            object = Chars.encode(buffer, 'utf32');
-            break;
-
-          case 0x1E:
-            // BMPString
-            object = Chars.encode(buffer, 'utf16');
-            break;
-
+          case 0x1B: // GeneralString
+            object = Chars.encode(buffer, 'ascii')
+            break
+          case 0x1C: // UniversalString
+            object = Chars.encode(buffer, 'utf32')
+            break
+          case 0x1E: // BMPString
+            object = Chars.encode(buffer, 'utf16')
+            break
           case 0x17: // UTCTime
-
-          case 0x18:
-            // GeneralizedTime
-            var shortYear = tagNumber === 0x17;
+          case 0x18: // GeneralizedTime
+            var shortYear = tagNumber === 0x17
             var s = Chars.encode(buffer, 'ascii'),
-                m = (shortYear ? /^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/ : /^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/).exec(s);
-
-            if (!m) {
-              throw new DataError(`Unrecognized time format "${s}" at offset ${start}`);
-            }
-
+              m = (shortYear ?
+                /^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/ :
+                /^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/).exec(s)
+            if (!m) {throw new DataError(`Unrecognized time format "${ s }" at offset ${ start}`)}
             if (shortYear) {
               // Where YY is greater than or equal to 50, the year SHALL be interpreted as 19YY; and
               // Where YY is less than 50, the year SHALL be interpreted as 20YY
-              m[1] = +m[1];
-              m[1] += m[1] < 50 ? 2000 : 1900;
+              m[1] = +m[1]
+              m[1] += (m[1] < 50) ? 2000 : 1900
             }
-
             var dt = new Date(m[1], +m[2] - 1, +m[3], +(m[4] || '0'), +(m[5] || '0'), +(m[6] || '0'), +(m[7] || '0')),
-                tz = dt.getTimezoneOffset();
-
+              tz = dt.getTimezoneOffset()
             if (m[8] || tagNumber === 0x17) {
               if (m[8].toUpperCase() !== 'Z' && m[9]) {
-                tz = tz + parseInt(m[9]);
+                tz = tz + parseInt(m[9])
               }
-
-              dt.setMinutes(dt.getMinutes() - tz);
+              dt.setMinutes(dt.getMinutes() - tz)
             }
-
-            dt.original = s;
-            object = dt;
-            break;
+            dt.original = s
+            object = dt
+            break
         }
       } else // OCTET_STRING
-        {
-          object = new Uint8Array(buffer).buffer;
-        }
-    } else {
-      object = sub;
-    } // result
-
+      {object = new Uint8Array(buffer).buffer}
+    } else {object = sub}
 
+    // result
     return {
       tagConstructed: tagConstructed,
       tagClass: tagClass,
       tagNumber: tagNumber,
       header: header,
       content: content,
-      object: object
-    };
+      object: object,
+    }
   }
 
   return {
@@ -1403,9 +985,8 @@ const BER = function () {
          * @returns {CryptoOperationData} BER encoded data
          */
     encode: function (object, format, onlyContent) {
-      return encodeBER(object, format, onlyContent).buffer;
+      return encodeBER(object, format, onlyContent).buffer
     },
-
     /**
          * BER.encode(data) convert ASN.1 format CryptoOperationData data to javascript object<br><br>
          *
@@ -1427,27 +1008,24 @@ const BER = function () {
          * @returns {Object} Javascript object with result of decoding
          */
     decode: function (data) {
-      return decodeBER(data.object ? data : new Uint8Array(buffer(data)), 0);
-    }
-  }; // </editor-fold>
-}();
+      return decodeBER(data.object ? data : new Uint8Array(buffer(data)), 0)
+    },
+  } // </editor-fold>
+})()
+
 /**
  * BER, DER, CER conversion
  * @memberOf GostCoding
  * @insnance
  * @type GostCoding.BER
  */
+GostCoding.prototype.BER = BER
 
-
-GostCoding.prototype.BER = BER;
 /**
  * PEM conversion
  * @class GostCoding.PEM
  */
-
-const PEM = {
-  // <editor-fold defaultstate="collapsed">
-
+const PEM = { // <editor-fold defaultstate="collapsed">
   /**
      * PEM.encode(data, name) encode CryptoOperationData to PEM format with name label
      *
@@ -1457,9 +1035,10 @@ const PEM = {
      * @returns {string} Encoded object
      */
   encode: function (data, name) {
-    return (name ? `-----BEGIN ${name.toUpperCase()}-----\r\n` : '') + Base64.encode(data instanceof CryptoOperationData ? data : BER.encode(data)) + (name ? `\r\n-----END ${name.toUpperCase()}-----` : '');
+    return (name ? `-----BEGIN ${ name.toUpperCase() }-----\r\n` : '') +
+            Base64.encode(data instanceof CryptoOperationData ? data : BER.encode(data)) +
+            (name ? `\r\n-----END ${ name.toUpperCase() }-----` : '')
   },
-
   /**
      * PEM.decode(s, name, deep) decode PEM format s labeled name to CryptoOperationData or javascript object in according to deep parameter
      *
@@ -1473,48 +1052,39 @@ const PEM = {
   decode: function (s, name, deep, index) {
     // Try clear base64
     let re1 = /([A-Za-z0-9\+\/\s\=]+)/g,
-        valid = re1.exec(s);
-
-    if (valid[1].length !== s.length) {
-      valid = false;
-    }
-
+      valid = re1.exec(s)
+    if (valid[1].length !== s.length) {valid = false}
     if (!valid && name) {
       // Try with the name
-      const re2 = new RegExp(`-----\\s?BEGIN ${name.toUpperCase()}-----([A-Za-z0-9\\+\\/\\s\\=]+)-----\\s?END ${name.toUpperCase()}-----`, 'g');
-      valid = re2.exec(s);
+      const re2 = new RegExp(
+        `-----\\s?BEGIN ${ name.toUpperCase()
+        }-----([A-Za-z0-9\\+\\/\\s\\=]+)-----\\s?END ${
+          name.toUpperCase() }-----`, 'g')
+      valid = re2.exec(s)
     }
-
     if (!valid) {
       // Try with some name
-      const re3 = new RegExp('-----\\s?BEGIN [A-Z0-9\\s]+' + '-----([A-Za-z0-9\\+\\/\\s\\=]+)-----\\s?END ' + '[A-Z0-9\\s]+-----', 'g');
-      valid = re3.exec(s);
+      const re3 = new RegExp(
+        '-----\\s?BEGIN [A-Z0-9\\s]+' +
+                '-----([A-Za-z0-9\\+\\/\\s\\=]+)-----\\s?END ' +
+                '[A-Z0-9\\s]+-----', 'g')
+      valid = re3.exec(s)
     }
+    const r = valid && valid[1 + (index || 0)]
+    if (!r) {throw new DataError('Not valid PEM format')}
+    let out = Base64.decode(r)
+    if (deep) {out = BER.decode(out)}
+    return out
+  }, // </editor-fold>
+}
 
-    const r = valid && valid[1 + (index || 0)];
-
-    if (!r) {
-      throw new DataError('Not valid PEM format');
-    }
-
-    let out = Base64.decode(r);
-
-    if (deep) {
-      out = BER.decode(out);
-    }
-
-    return out;
-  } // </editor-fold>
-
-};
 /**
  * PEM conversion
  * @memberOf GostCoding
  * @insnance
  * @type GostCoding.PEM
  */
-
-GostCoding.prototype.PEM = PEM;
+GostCoding.prototype.PEM = PEM
 
 if (gostCrypto) {
   /**
@@ -1523,7 +1093,7 @@ if (gostCrypto) {
      * @memberOf gostCrypto
      * @type GostCoding
      */
-  gostCrypto.coding = new GostCoding();
+  gostCrypto.coding = new GostCoding()
 }
 
-module.exports = GostCoding;
\ No newline at end of file
+module.exports = GostCoding
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostCrypto.js b/node_modules/gost-crypto/lib/gostCrypto.js
index 83fcf6f..ebdf493 100644
--- a/node_modules/gost-crypto/lib/gostCrypto.js
+++ b/node_modules/gost-crypto/lib/gostCrypto.js
@@ -29,555 +29,442 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const GostRandom = require('./gostRandom');
+
+const GostRandom = require('./gostRandom')
+
 /*
  * Algorithm normalization
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
+const rootcrypto = global.crypto || global.msCrypto
 
-const rootcrypto = global.crypto || global.msCrypto;
 const SyntaxError = global.SyntaxError || global.Error,
-      DataError = global.DataError || global.Error,
-      NotSupportedError = global.NotSupportedError || global.Error,
-      OperationError = global.OperationError || global.Error,
-      InvalidStateError = global.InvalidAccessError || global.Error,
-      InvalidAccessError = global.InvalidAccessError || global.Error; // Normalize algorithm
+  DataError = global.DataError || global.Error,
+  NotSupportedError = global.NotSupportedError || global.Error,
+  OperationError = global.OperationError || global.Error,
+  InvalidStateError = global.InvalidAccessError || global.Error,
+  InvalidAccessError = global.InvalidAccessError || global.Error
 
+// Normalize algorithm
 function normalize(algorithm, method) {
-  if (typeof algorithm === 'string' || algorithm instanceof String) {
-    algorithm = {
-      name: algorithm
-    };
-  }
-
-  let name = algorithm.name;
-
-  if (!name) {
-    throw new SyntaxError('Algorithm name not defined');
-  } // Extract algorithm modes from name
-
-
-  var modes = name.split('/'),
-      modes = modes[0].split('-').concat(modes.slice(1)); // Normalize the name with default modes
-
-  let na = {};
-  name = modes[0].replace(/[\.\s]/g, '');
-  modes = modes.slice(1);
-
+  if (typeof algorithm === 'string' || algorithm instanceof String) {algorithm = { name: algorithm }}
+  let name = algorithm.name
+  if (!name) {throw new SyntaxError('Algorithm name not defined')}
+  // Extract algorithm modes from name
+  var modes = name.split('/'), modes = modes[0].split('-').concat(modes.slice(1))
+  // Normalize the name with default modes
+  let na = {}
+  name = modes[0].replace(/[\.\s]/g, '')
+  modes = modes.slice(1)
   if (name.indexOf('28147') >= 0) {
     na = {
       name: 'GOST 28147',
       version: 1989,
-      mode: (algorithm.mode || ( // ES, MAC, KW
-      method === 'sign' || method === 'verify' ? 'MAC' : method === 'wrapKey' || method === 'unwrapKey' ? 'KW' : 'ES')).toUpperCase(),
-      length: algorithm.length || 64
-    };
+      mode: (algorithm.mode || (// ES, MAC, KW
+        (method === 'sign' || method === 'verify') ? 'MAC' :
+          (method === 'wrapKey' || method === 'unwrapKey') ? 'KW' : 'ES')).toUpperCase(),
+      length: algorithm.length || 64,
+    }
   } else if (name.indexOf('3412') >= 0) {
     na = {
       name: 'GOST R 34.12',
       version: 2015,
-      mode: (algorithm.mode || ( // ES, MAC, KW
-      method === 'sign' || method === 'verify' ? 'MAC' : method === 'wrapKey' || method === 'unwrapKey' ? 'KW' : 'ES')).toUpperCase(),
-      length: algorithm.length || 64 // 128
-
-    };
+      mode: (algorithm.mode || (// ES, MAC, KW
+        (method === 'sign' || method === 'verify') ? 'MAC' :
+          (method === 'wrapKey' || method === 'unwrapKey') ? 'KW' : 'ES')).toUpperCase(),
+      length: algorithm.length || 64, // 128
+    }
   } else if (name.indexOf('3411') >= 0) {
     na = {
       name: 'GOST R 34.11',
-      version: 2012,
-      // 1994
-      mode: (algorithm.mode || ( // HASH, KDF, HMAC, PBKDF2, PFXKDF, CPKDF
-      method === 'deriveKey' || method === 'deriveBits' ? 'KDF' : method === 'sign' || method === 'verify' ? 'HMAC' : 'HASH')).toUpperCase(),
-      length: algorithm.length || 256 // 512
-
-    };
+      version: 2012, // 1994
+      mode: (algorithm.mode || (// HASH, KDF, HMAC, PBKDF2, PFXKDF, CPKDF
+        (method === 'deriveKey' || method === 'deriveBits') ? 'KDF' :
+          (method === 'sign' || method === 'verify') ? 'HMAC' : 'HASH')).toUpperCase(),
+      length: algorithm.length || 256, // 512
+    }
   } else if (name.indexOf('3410') >= 0) {
     na = {
       name: 'GOST R 34.10',
-      version: 2012,
-      // 1994, 2001
-      mode: (algorithm.mode || ( // SIGN, DH, MASK
-      method === 'deriveKey' || method === 'deriveBits' ? 'DH' : 'SIGN')).toUpperCase(),
-      length: algorithm.length || 256 // 512
-
-    };
+      version: 2012, // 1994, 2001
+      mode: (algorithm.mode || (// SIGN, DH, MASK
+        (method === 'deriveKey' || method === 'deriveBits') ? 'DH' : 'SIGN')).toUpperCase(),
+      length: algorithm.length || 256, // 512
+    }
   } else if (name.indexOf('SHA') >= 0) {
     na = {
       name: 'SHA',
-      version: (algorithm.length || 160) === 160 ? 1 : 2,
-      // 1, 2
-      mode: (algorithm.mode || ( // HASH, KDF, HMAC, PBKDF2, PFXKDF
-      method === 'deriveKey' || method === 'deriveBits' ? 'KDF' : method === 'sign' || method === 'verify' ? 'HMAC' : 'HASH')).toUpperCase(),
-      length: algorithm.length || 160
-    };
+      version: (algorithm.length || 160) === 160 ? 1 : 2, // 1, 2
+      mode: (algorithm.mode || (// HASH, KDF, HMAC, PBKDF2, PFXKDF
+        (method === 'deriveKey' || method === 'deriveBits') ? 'KDF' :
+          (method === 'sign' || method === 'verify') ? 'HMAC' : 'HASH')).toUpperCase(),
+      length: algorithm.length || 160,
+    }
   } else if (name.indexOf('RC2') >= 0) {
     na = {
       name: 'RC2',
       version: 1,
-      mode: (algorithm.mode || ( // ES, MAC, KW
-      method === 'sign' || method === 'verify' ? 'MAC' : method === 'wrapKey' || method === 'unwrapKey' ? 'KW' : 'ES')).toUpperCase(),
-      length: algorithm.length || 32 // 1 - 1024
-
-    };
+      mode: (algorithm.mode || (// ES, MAC, KW
+        (method === 'sign' || method === 'verify') ? 'MAC' :
+          (method === 'wrapKey' || method === 'unwrapKey') ? 'KW' : 'ES')).toUpperCase(),
+      length: algorithm.length || 32, // 1 - 1024
+    }
   } else if (name.indexOf('PBKDF2') >= 0) {
-    na = normalize(algorithm.hash, 'digest');
-    na.mode = 'PBKDF2';
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'PBKDF2'
   } else if (name.indexOf('PFXKDF') >= 0) {
-    na = normalize(algorithm.hash, 'digest');
-    na.mode = 'PFXKDF';
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'PFXKDF'
   } else if (name.indexOf('CPKDF') >= 0) {
-    na = normalize(algorithm.hash, 'digest');
-    na.mode = 'CPKDF';
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'CPKDF'
   } else if (name.indexOf('HMAC') >= 0) {
-    na = normalize(algorithm.hash, 'digest');
-    na.mode = 'HMAC';
-  } else {
-    throw new NotSupportedError('Algorithm not supported');
-  } // Compile modes
-
+    na = normalize(algorithm.hash, 'digest')
+    na.mode = 'HMAC'
+  } else {throw new NotSupportedError('Algorithm not supported')}
 
+  // Compile modes
   modes.forEach(function (mode) {
-    mode = mode.toUpperCase();
-
+    mode = mode.toUpperCase()
     if (/^[0-9]+$/.test(mode)) {
-      if (['8', '16', '32'].indexOf(mode) >= 0 || na.length === '128' && mode === '64') {
-        // Shift bits
-        if (na.mode === 'ES') {
-          na.shiftBits = parseInt(mode);
-        } else if (na.mode === 'MAC') {
-          na.macLength = parseInt(mode);
-        } else {
-          throw new NotSupportedError(`Algorithm ${na.name} mode ${mode} not supported`);
-        }
-      } else if (['89', '94', '01', '12', '15', '1989', '1994', '2001', '2012', '2015'].indexOf(mode) >= 0) {
-        // GOST Year
-        let version = parseInt(mode);
-        version = version < 1900 ? version < 80 ? 2000 + version : 1900 + version : version;
-        na.version = version;
-      } else if (['1'].indexOf(mode) >= 0 && na.name === 'SHA') {
-        // SHA-1
-        na.version = 1;
-        na.length = 160;
-      } else if (['256', '384', '512'].indexOf(mode) >= 0 && na.name === 'SHA') {
-        // SHA-2
-        na.version = 2;
-        na.length = parseInt(mode);
-      } else if (['40', '128'].indexOf(mode) >= 0 && na.name === 'RC2') {
-        // RC2
-        na.version = 1;
-        na.length = parseInt(mode); // key size
+      if ((['8', '16', '32'].indexOf(mode) >= 0) || (na.length === '128' && mode === '64')) { // Shift bits
+        if (na.mode === 'ES') {na.shiftBits = parseInt(mode)} else if (na.mode === 'MAC') {na.macLength = parseInt(mode)} else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
+      } else if (['89', '94', '01', '12', '15', '1989', '1994', '2001', '2012', '2015'].indexOf(mode) >= 0) { // GOST Year
+        let version = parseInt(mode)
+        version = version < 1900 ? (version < 80 ? 2000 + version : 1900 + version) : version
+        na.version = version
+      } else if (['1'].indexOf(mode) >= 0 && na.name === 'SHA') { // SHA-1
+        na.version = 1
+        na.length = 160
+      } else if (['256', '384', '512'].indexOf(mode) >= 0 && na.name === 'SHA') { // SHA-2
+        na.version = 2
+        na.length = parseInt(mode)
+      } else if (['40', '128'].indexOf(mode) >= 0 && na.name === 'RC2') { // RC2
+        na.version = 1
+        na.length = parseInt(mode) // key size
       } else if (['64', '128', '256', '512'].indexOf(mode) >= 0) // block size
-        {
-          na.length = parseInt(mode);
-        } else if (['1000', '2000'].indexOf(mode) >= 0) // Iterations
-        {
-          na.iterations = parseInt(mode);
-        } // Named Paramsets
-
+      {na.length = parseInt(mode)} else if (['1000', '2000'].indexOf(mode) >= 0) // Iterations
+      {na.iterations = parseInt(mode)}
+      // Named Paramsets
     } else if (['E-TEST', 'E-A', 'E-B', 'E-C', 'E-D', 'E-SC', 'E-Z', 'D-TEST', 'D-A', 'D-SC'].indexOf(mode) >= 0) {
-      na.sBox = mode;
+      na.sBox = mode
     } else if (['S-TEST', 'S-A', 'S-B', 'S-C', 'S-D', 'X-A', 'X-B', 'X-C'].indexOf(mode) >= 0) {
-      na.namedParam = mode;
-    } else if (['S-256-TEST', 'S-256-A', 'S-256-B', 'S-256-C', 'P-256', 'T-512-TEST', 'T-512-A', 'T-512-B', 'X-256-A', 'X-256-B', 'T-256-TEST', 'T-256-A', 'T-256-B', 'S-256-B', 'T-256-C', 'S-256-C'].indexOf(mode) >= 0) {
-      na.namedCurve = mode;
+      na.namedParam = mode
+    } else if (['S-256-TEST', 'S-256-A', 'S-256-B', 'S-256-C', 'P-256', 'T-512-TEST', 'T-512-A',
+      'T-512-B', 'X-256-A', 'X-256-B', 'T-256-TEST', 'T-256-A', 'T-256-B', 'S-256-B', 'T-256-C', 'S-256-C'].indexOf(mode) >= 0) {
+      na.namedCurve = mode
     } else if (['SC', 'CP', 'VN'].indexOf(mode) >= 0) {
-      na.procreator = mode; // Encription GOST 28147 or GOST R 34.12
+      na.procreator = mode
+
+      // Encription GOST 28147 or GOST R 34.12
     } else if (na.name === 'GOST 28147' || na.name === 'GOST R 34.12' || na.name === 'RC2') {
       if (['ES', 'MAC', 'KW', 'MASK'].indexOf(mode) >= 0) {
-        na.mode = mode;
+        na.mode = mode
       } else if (['ECB', 'CFB', 'OFB', 'CTR', 'CBC'].indexOf(mode) >= 0) {
-        na.mode = 'ES';
-        na.block = mode;
+        na.mode = 'ES'
+        na.block = mode
       } else if (['CPKW', 'NOKW', 'SCKW'].indexOf(mode) >= 0) {
-        na.mode = 'KW';
-        na.keyWrapping = mode.replace('KW', '');
+        na.mode = 'KW'
+        na.keyWrapping = mode.replace('KW', '')
       } else if (['ZEROPADDING', 'PKCS5PADDING', 'NOPADDING', 'RANDOMPADDING', 'BITPADDING'].indexOf(mode) >= 0) {
-        na.padding = mode.replace('PADDING', '');
+        na.padding = mode.replace('PADDING', '')
       } else if (['NOKM', 'CPKM'].indexOf(mode) >= 0) {
-        na.keyMeshing = mode.replace('KM', '');
-      } else {
-        throw new NotSupportedError(`Algorithm ${na.name} mode ${mode} not supported`);
-      } // Digesting GOST 34.11
+        na.keyMeshing = mode.replace('KM', '')
+      } else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
 
+      // Digesting GOST 34.11
     } else if (na.name === 'GOST R 34.11' || na.name === 'SHA') {
-      if (['HASH', 'KDF', 'HMAC', 'PBKDF2', 'PFXKDF', 'CPKDF'].indexOf(mode) >= 0) {
-        na.mode = mode;
-      } else {
-        throw new NotSupportedError(`Algorithm ${na.name} mode ${mode} not supported`);
-      } // Signing GOST 34.10
+      if (['HASH', 'KDF', 'HMAC', 'PBKDF2', 'PFXKDF', 'CPKDF'].indexOf(mode) >= 0) {na.mode = mode} else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
 
+      // Signing GOST 34.10
     } else if (na.name === 'GOST R 34.10') {
-      const hash = mode.replace(/[\.\s]/g, '');
-
-      if (hash.indexOf('GOST') >= 0 && hash.indexOf('3411') >= 0) {
-        na.hash = mode;
-      } else if (['SIGN', 'DH', 'MASK'].indexOf(mode)) {
-        na.mode = mode;
-      } else {
-        throw new NotSupportedError(`Algorithm ${na.name} mode ${mode} not supported`);
-      }
+      const hash = mode.replace(/[\.\s]/g, '')
+      if (hash.indexOf('GOST') >= 0 && hash.indexOf('3411') >= 0) {na.hash = mode} else if (['SIGN', 'DH', 'MASK'].indexOf(mode)) {na.mode = mode} else {throw new NotSupportedError(`Algorithm ${ na.name } mode ${ mode } not supported`)}
     }
-  }); // Procreator
+  })
 
-  na.procreator = algorithm.procreator || na.procreator || 'CP'; // Key size
+  // Procreator
+  na.procreator = algorithm.procreator || na.procreator || 'CP'
 
+  // Key size
   switch (na.name) {
     case 'GOST R 34.10':
-      na.keySize = na.length / (na.version === 1994 ? 4 : 8);
-      break;
-
+      na.keySize = na.length / (na.version === 1994 ? 4 : 8)
+      break
     case 'GOST R 34.11':
-      na.keySize = 32;
-      break;
-
+      na.keySize = 32
+      break
     case 'GOST 28147':
     case 'GOST R 34.12':
-      na.keySize = 32;
-      break;
-
+      na.keySize = 32
+      break
     case 'RC2':
-      na.keySize = Math.ceil(na.length / 8);
-      break;
-
+      na.keySize = Math.ceil(na.length / 8)
+      break
     case 'SHA':
-      na.keySize = na.length / 8;
-      break;
-  } // Encrypt additional modes
-
+      na.keySize = na.length / 8
+      break
+  }
 
+  // Encrypt additional modes
   if (na.mode === 'ES') {
-    if (algorithm.block) {
-      na.block = algorithm.block;
-    } // ECB, CFB, OFB, CTR, CBC
-
-
-    if (na.block) {
-      na.block = na.block.toUpperCase();
-    }
-
-    if (algorithm.padding) {
-      na.padding = algorithm.padding;
-    } // NO, ZERO, PKCS5, RANDOM, BIT
-
-
-    if (na.padding) {
-      na.padding = na.padding.toUpperCase();
-    }
-
-    if (algorithm.shiftBits) {
-      na.shiftBits = algorithm.shiftBits;
-    } // 8, 16, 32, 64
-
-
-    if (algorithm.keyMeshing) {
-      na.keyMeshing = algorithm.keyMeshing;
-    } // NO, CP
-
-
-    if (na.keyMeshing) {
-      na.keyMeshing = na.keyMeshing.toUpperCase();
-    } // Default values
-
-
+    if (algorithm.block) {na.block = algorithm.block} // ECB, CFB, OFB, CTR, CBC
+    if (na.block) {na.block = na.block.toUpperCase()}
+    if (algorithm.padding) {na.padding = algorithm.padding} // NO, ZERO, PKCS5, RANDOM, BIT
+    if (na.padding) {na.padding = na.padding.toUpperCase()}
+    if (algorithm.shiftBits) {na.shiftBits = algorithm.shiftBits} // 8, 16, 32, 64
+    if (algorithm.keyMeshing) {na.keyMeshing = algorithm.keyMeshing} // NO, CP
+    if (na.keyMeshing) {na.keyMeshing = na.keyMeshing.toUpperCase()}
+    // Default values
     if (method !== 'importKey' && method !== 'generateKey') {
-      na.block = na.block || 'ECB';
-      na.padding = na.padding || (na.block === 'CBC' || na.block === 'ECB' ? 'ZERO' : 'NO');
-
-      if (na.block === 'CFB' || na.block === 'OFB') {
-        na.shiftBits = na.shiftBits || na.length;
-      }
-
-      na.keyMeshing = na.keyMeshing || 'NO';
+      na.block = na.block || 'ECB'
+      na.padding = na.padding || (na.block === 'CBC' || na.block === 'ECB' ? 'ZERO' : 'NO')
+      if (na.block === 'CFB' || na.block === 'OFB') {na.shiftBits = na.shiftBits || na.length}
+      na.keyMeshing = na.keyMeshing || 'NO'
     }
   }
-
   if (na.mode === 'KW') {
-    if (algorithm.keyWrapping) {
-      na.keyWrapping = algorithm.keyWrapping;
-    } // NO, CP, SC
-
-
-    if (na.keyWrapping) {
-      na.keyWrapping = na.keyWrapping.toUpperCase();
-    }
-
-    if (method !== 'importKey' && method !== 'generateKey') {
-      na.keyWrapping = na.keyWrapping || 'NO';
-    }
-  } // Paramsets
-
+    if (algorithm.keyWrapping) {na.keyWrapping = algorithm.keyWrapping} // NO, CP, SC
+    if (na.keyWrapping) {na.keyWrapping = na.keyWrapping.toUpperCase()}
+    if (method !== 'importKey' && method !== 'generateKey') {na.keyWrapping = na.keyWrapping || 'NO'}
+  }
 
+  // Paramsets
   ['sBox', 'namedParam', 'namedCurve', 'curve', 'param', 'modulusLength'].forEach(function (name) {
-    algorithm[name] && (na[name] = algorithm[name]);
-  }); // Default values
-
+    algorithm[name] && (na[name] = algorithm[name])
+  })
+  // Default values
   if (method !== 'importKey' && method !== 'generateKey') {
     if (na.name === 'GOST 28147') {
-      na.sBox = na.sBox || (na.procreator === 'SC' ? 'E-SC' : 'E-A'); // 'E-A', 'E-B', 'E-C', 'E-D', 'E-SC'
+      na.sBox = na.sBox || (na.procreator === 'SC' ? 'E-SC' : 'E-A') // 'E-A', 'E-B', 'E-C', 'E-D', 'E-SC'
     } else if (na.name === 'GOST R 34.12' && na.length === 64) {
-      na.sBox = 'E-Z';
+      na.sBox = 'E-Z'
     } else if (na.name === 'GOST R 34.11' && na.version === 1994) {
-      na.sBox = na.sBox || (na.procreator === 'SC' ? 'D-SC' : 'D-A'); // 'D-SC'
+      na.sBox = na.sBox || (na.procreator === 'SC' ? 'D-SC' : 'D-A') // 'D-SC'
     } else if (na.name === 'GOST R 34.10' && na.version === 1994) {
-      na.namedParam = na.namedParam || (na.mode === 'DH' ? 'X-A' : 'S-A'); // 'S-B', 'S-C', 'S-D', 'X-B', 'X-C'
+      na.namedParam = na.namedParam || (na.mode === 'DH' ? 'X-A' : 'S-A') // 'S-B', 'S-C', 'S-D', 'X-B', 'X-C'
     } else if (na.name === 'GOST R 34.10' && na.version === 2001) {
-      na.namedCurve = na.namedCurve || (na.length === 256 ? na.procreator === 'SC' ? 'P-256' : na.mode === 'DH' ? 'X-256-A' : 'S-256-A' : // 'S-256-B', 'S-256-C', 'X-256-B', 'T-256-A', 'T-256-B', 'T-256-C', 'P-256'
-      na.mode === 'T-512-A'); // 'T-512-B', 'T-512-C'
+      na.namedCurve = na.namedCurve || (na.length === 256 ?
+        na.procreator === 'SC' ? 'P-256' : (na.mode === 'DH' ? 'X-256-A' : 'S-256-A') : // 'S-256-B', 'S-256-C', 'X-256-B', 'T-256-A', 'T-256-B', 'T-256-C', 'P-256'
+        na.mode === 'T-512-A') // 'T-512-B', 'T-512-C'
     } else if (na.name === 'GOST R 34.10' && na.version === 2012) {
-      na.namedCurve = na.namedCurve || (na.length === 256 ? na.procreator === 'SC' ? 'P-256' : na.mode === 'DH' ? 'X-256-A' : 'S-256-A' : // 'S-256-B', 'S-256-C', 'X-256-B', 'T-256-A', 'T-256-B', 'T-256-C', 'P-256'
-      na.mode === 'T-512-A'); // 'T-512-B', 'T-512-C'
+      na.namedCurve = na.namedCurve || (na.length === 256 ?
+        na.procreator === 'SC' ? 'P-256' : (na.mode === 'DH' ? 'X-256-A' : 'S-256-A') : // 'S-256-B', 'S-256-C', 'X-256-B', 'T-256-A', 'T-256-B', 'T-256-C', 'P-256'
+        na.mode === 'T-512-A') // 'T-512-B', 'T-512-C'
     }
-  } // Vectors
-
+  }
 
+  // Vectors
   switch (na.mode) {
     case 'DH':
-      algorithm.ukm && (na.ukm = algorithm.ukm);
-      algorithm['public'] && (na['public'] = algorithm['public']);
-      break;
-
+      algorithm.ukm && (na.ukm = algorithm.ukm)
+      algorithm['public'] && (na['public'] = algorithm['public'])
+      break
     case 'SIGN':
     case 'KW':
-      algorithm.ukm && (na.ukm = algorithm.ukm);
-      break;
-
+      algorithm.ukm && (na.ukm = algorithm.ukm)
+      break
     case 'ES':
     case 'MAC':
-      algorithm.iv && (na.iv = algorithm.iv);
-      break;
-
+      algorithm.iv && (na.iv = algorithm.iv)
+      break
     case 'KDF':
-      algorithm.label && (na.label = algorithm.label);
-      algorithm.contex && (na.context = algorithm.contex);
-      break;
-
+      algorithm.label && (na.label = algorithm.label)
+      algorithm.contex && (na.context = algorithm.contex)
+      break
     case 'PBKDF2':
-      algorithm.salt && (na.salt = algorithm.salt);
-      algorithm.iterations && (na.iterations = algorithm.iterations);
-      algorithm.diversifier && (na.diversifier = algorithm.diversifier);
-      break;
-
+      algorithm.salt && (na.salt = algorithm.salt)
+      algorithm.iterations && (na.iterations = algorithm.iterations)
+      algorithm.diversifier && (na.diversifier = algorithm.diversifier)
+      break
     case 'PFXKDF':
-      algorithm.salt && (na.salt = algorithm.salt);
-      algorithm.iterations && (na.iterations = algorithm.iterations);
-      algorithm.diversifier && (na.diversifier = algorithm.diversifier);
-      break;
-
+      algorithm.salt && (na.salt = algorithm.salt)
+      algorithm.iterations && (na.iterations = algorithm.iterations)
+      algorithm.diversifier && (na.diversifier = algorithm.diversifier)
+      break
     case 'CPKDF':
-      algorithm.salt && (na.salt = algorithm.salt);
-      algorithm.iterations && (na.iterations = algorithm.iterations);
-      break;
-  } // Verification method and modes
-
-
-  if (method && (na.mode !== 'ES' && na.mode !== 'SIGN' && na.mode !== 'MAC' && na.mode !== 'HMAC' && na.mode !== 'KW' && na.mode !== 'DH' && na.mode !== 'MASK' && method === 'generateKey' || na.mode !== 'ES' && (method === 'encrypt' || method === 'decrypt') || na.mode !== 'SIGN' && na.mode !== 'MAC' && na.mode !== 'HMAC' && (method === 'sign' || method === 'verify') || na.mode !== 'HASH' && method === 'digest' || na.mode !== 'KW' && na.mode !== 'MASK' && (method === 'wrapKey' || method === 'unwrapKey') || na.mode !== 'DH' && na.mode !== 'PBKDF2' && na.mode !== 'PFXKDF' && na.mode !== 'CPKDF' && na.mode !== 'KDF' && (method === 'deriveKey' || method === 'deriveBits'))) {
-    throw new NotSupportedError(`Algorithm mode ${na.mode} not valid for method ${method}`);
-  } // Normalize hash algorithm
-
-
-  algorithm.hash && (na.hash = algorithm.hash);
+      algorithm.salt && (na.salt = algorithm.salt)
+      algorithm.iterations && (na.iterations = algorithm.iterations)
+      break
+  }
 
+  // Verification method and modes
+  if (method && (
+    ((na.mode !== 'ES' && na.mode !== 'SIGN' && na.mode !== 'MAC' &&
+            na.mode !== 'HMAC' && na.mode !== 'KW' && na.mode !== 'DH'
+            && na.mode !== 'MASK') &&
+            (method === 'generateKey')) ||
+        ((na.mode !== 'ES') &&
+            (method === 'encrypt' || method === 'decrypt')) ||
+        ((na.mode !== 'SIGN' && na.mode !== 'MAC' && na.mode !== 'HMAC') &&
+            (method === 'sign' || method === 'verify')) ||
+        ((na.mode !== 'HASH') &&
+            (method === 'digest')) ||
+        ((na.mode !== 'KW' && na.mode !== 'MASK') &&
+            (method === 'wrapKey' || method === 'unwrapKey')) ||
+        ((na.mode !== 'DH' && na.mode !== 'PBKDF2' && na.mode !== 'PFXKDF' &&
+            na.mode !== 'CPKDF' && na.mode !== 'KDF') &&
+            (method === 'deriveKey' || method === 'deriveBits')))) {throw new NotSupportedError(`Algorithm mode ${ na.mode } not valid for method ${ method}`)}
+
+  // Normalize hash algorithm
+  algorithm.hash && (na.hash = algorithm.hash)
   if (na.hash) {
-    if ((typeof na.hash === 'string' || na.hash instanceof String) && na.procreator) {
-      na.hash = `${na.hash}/${na.procreator}`;
-    }
-
-    na.hash = normalize(na.hash, 'digest');
-  } // Algorithm object identirifer
-
-
-  algorithm.id && (na.id = algorithm.id);
-  return na;
-} // Check for possibility use native crypto.subtle
-
-
-function checkNative(algorithm) {
-  if (!rootcrypto || !rootcrypto.subtle || !algorithm) {
-    return false;
-  } // Prepare name
-
-
-  var name = typeof algorithm === 'string' || algorithm instanceof String ? name = algorithm : algorithm.name;
-
-  if (!name) {
-    return false;
+    if ((typeof na.hash === 'string' || na.hash instanceof String)
+            && na.procreator) {na.hash = `${na.hash }/${ na.procreator}`}
+    na.hash = normalize(na.hash, 'digest')
   }
 
-  name = name.toUpperCase(); // Digest algorithm for key derivation
-
-  if ((name.indexOf('KDF') >= 0 || name.indexOf('HMAC') >= 0) && algorithm.hash) {
-    return checkNative(algorithm.hash);
-  } // True if no supported names
+  // Algorithm object identirifer
+  algorithm.id && (na.id = algorithm.id)
 
+  return na
+}
 
-  return name.indexOf('GOST') === -1 && name.indexOf('SHA-1') === -1 && name.indexOf('RC2') === -1 && name.indexOf('?DES') === -1;
-} // </editor-fold>
+// Check for possibility use native crypto.subtle
+function checkNative(algorithm) {
+  if (!rootcrypto || !rootcrypto.subtle || !algorithm) {return false}
+  // Prepare name
+  var name = (typeof algorithm === 'string' || algorithm instanceof String) ?
+    name = algorithm : algorithm.name
+  if (!name) {return false}
+  name = name.toUpperCase()
+  // Digest algorithm for key derivation
+  if ((name.indexOf('KDF') >= 0 || name.indexOf('HMAC') >= 0) && algorithm.hash) {return checkNative(algorithm.hash)}
+  // True if no supported names
+  return name.indexOf('GOST') === -1 &&
+        name.indexOf('SHA-1') === -1 &&
+        name.indexOf('RC2') === -1 &&
+        name.indexOf('?DES') === -1
+}
+// </editor-fold>
 
 /*
  * Key conversion methods
  *
- */
-// <editor-fold defaultstate="collapsed">
-// Check key parameter
-
+ */ // <editor-fold defaultstate="collapsed">
 
+// Check key parameter
 function checkKey(key, method) {
-  if (!key.algorithm) {
-    throw new SyntaxError('Key algorithm not defined');
-  }
+  if (!key.algorithm) {throw new SyntaxError('Key algorithm not defined')}
 
-  if (!key.algorithm.name) {
-    throw new SyntaxError('Key algorithm name not defined');
-  }
+  if (!key.algorithm.name) {throw new SyntaxError('Key algorithm name not defined')}
 
   const name = key.algorithm.name,
-        gostCipher = name === 'GOST 28147' || name === 'GOST R 34.12' || name === 'RC2',
-        gostDigest = name === 'GOST R 34.11' || name === 'SHA',
-        gostSign = name === 'GOST R 34.10';
+    gostCipher = name === 'GOST 28147' || name === 'GOST R 34.12' || name === 'RC2',
+    gostDigest = name === 'GOST R 34.11' || name === 'SHA',
+    gostSign = name === 'GOST R 34.10'
 
-  if (!gostCipher && !gostSign && !gostDigest) {
-    throw new NotSupportedError(`Key algorithm ${name} is unsupproted`);
-  }
+  if (!gostCipher && !gostSign && !gostDigest) {throw new NotSupportedError(`Key algorithm ${ name } is unsupproted`)}
 
-  if (!key.type) {
-    throw new SyntaxError('Key type not defined');
-  }
+  if (!key.type) {throw new SyntaxError('Key type not defined')}
 
-  if ((gostCipher || gostDigest) && key.type !== 'secret' || gostSign && !(key.type === 'public' || key.type === 'private')) {
-    throw new DataError(`Key type ${key.type} is not valid for algorithm ${name}`);
-  }
+  if (((gostCipher || gostDigest) && key.type !== 'secret') ||
+        (gostSign && !(key.type === 'public' || key.type === 'private'))) {throw new DataError(`Key type ${ key.type } is not valid for algorithm ${ name}`)}
 
-  if (!key.usages || !key.usages.indexOf) {
-    throw new SyntaxError('Key usages not defined');
-  }
+  if (!key.usages || !key.usages.indexOf) {throw new SyntaxError('Key usages not defined')}
 
   for (let i = 0, n = key.usages.length; i < n; i++) {
-    const md = key.usages[i];
-
-    if ((md === 'encrypt' || md === 'decrypt') && key.type !== 'secret' || md === 'sign' && key.type === 'public' || md === 'verify' && key.type === 'private') {
-      throw new InvalidStateError(`Key type ${key.type} is not valid for ${md}`);
-    }
+    const md = key.usages[i]
+    if (((md === 'encrypt' || md === 'decrypt') && key.type !== 'secret') ||
+            (md === 'sign' && key.type === 'public') ||
+            (md === 'verify' && key.type === 'private')) {throw new InvalidStateError(`Key type ${ key.type } is not valid for ${ md}`)}
   }
 
   if (method) {
-    if (key.usages.indexOf(method) === -1) {
-      throw new InvalidAccessError(`Key usages is not contain method ${method}`);
-    }
+    if (key.usages.indexOf(method) === -1) {throw new InvalidAccessError(`Key usages is not contain method ${ method}`)}
   }
 
-  if (!key.buffer) {
-    throw new SyntaxError('Key buffer is not defined');
-  }
-
-  const size = key.buffer.byteLength * 8,
-        keySize = 8 * key.algorithm.keySize;
-
-  if (key.type === 'secret' && size !== (keySize || 256) && (key.usages.indexOf('encrypt') >= 0 || key.usages.indexOf('decrypt') >= 0) || key.type === 'private' && !(size === 256 || size === 512) || key.type === 'public' && !(size === 512 || size === 1024)) {
-    throw new SyntaxError(`Key buffer has wrong size ${size} bit`);
-  }
-} // Extract key and enrich cipher algorithm
+  if (!key.buffer) {throw new SyntaxError('Key buffer is not defined')}
 
+  const size = key.buffer.byteLength * 8, keySize = 8 * key.algorithm.keySize
+  if ((key.type === 'secret' && size !== (keySize || 256) &&
+        (key.usages.indexOf('encrypt') >= 0 || key.usages.indexOf('decrypt') >= 0)) ||
+        (key.type === 'private' && !(size === 256 || size === 512)) ||
+        (key.type === 'public' && !(size === 512 || size === 1024))) {throw new SyntaxError(`Key buffer has wrong size ${ size } bit`)}
+}
 
+// Extract key and enrich cipher algorithm
 function extractKey(method, algorithm, key) {
-  checkKey(key, method);
-
+  checkKey(key, method)
   if (algorithm) {
-    let params;
-
+    let params
     switch (algorithm.mode) {
       case 'ES':
-        params = ['sBox', 'keyMeshing', 'padding', 'block'];
-        break;
-
+        params = ['sBox', 'keyMeshing', 'padding', 'block']
+        break
       case 'SIGN':
-        params = ['namedCurve', 'namedParam', 'sBox', 'curve', 'param', 'modulusLength'];
-        break;
-
+        params = ['namedCurve', 'namedParam', 'sBox', 'curve', 'param', 'modulusLength']
+        break
       case 'MAC':
-        params = ['sBox'];
-        break;
-
+        params = ['sBox']
+        break
       case 'KW':
-        params = ['keyWrapping', 'ukm'];
-        break;
-
+        params = ['keyWrapping', 'ukm']
+        break
       case 'DH':
-        params = ['namedCurve', 'namedParam', 'sBox', 'ukm', 'curve', 'param', 'modulusLength'];
-        break;
-
+        params = ['namedCurve', 'namedParam', 'sBox', 'ukm', 'curve', 'param', 'modulusLength']
+        break
       case 'KDF':
-        params = ['context', 'label'];
-        break;
-
+        params = ['context', 'label']
+        break
       case 'PBKDF2':
-        params = ['sBox', 'iterations', 'salt'];
-        break;
-
+        params = ['sBox', 'iterations', 'salt']
+        break
       case 'PFXKDF':
-        params = ['sBox', 'iterations', 'salt', 'diversifier'];
-        break;
-
+        params = ['sBox', 'iterations', 'salt', 'diversifier']
+        break
       case 'CPKDF':
-        params = ['sBox', 'salt'];
-        break;
+        params = ['sBox', 'salt']
+        break
     }
-
     if (params) {
       params.forEach(function (name) {
-        key.algorithm[name] && (algorithm[name] = key.algorithm[name]);
-      });
+        key.algorithm[name] && (algorithm[name] = key.algorithm[name])
+      })
     }
   }
+  return key.buffer
+}
 
-  return key.buffer;
-} // Make key definition
-
-
+// Make key definition
 function convertKey(algorithm, extractable, keyUsages, keyData, keyType) {
   const key = {
     type: keyType || (algorithm.name === 'GOST R 34.10' ? 'private' : 'secret'),
     extractable: extractable || 'false',
     algorithm: algorithm,
     usages: keyUsages || [],
-    buffer: keyData
-  };
-  checkKey(key);
-  return key;
+    buffer: keyData,
+  }
+  checkKey(key)
+  return key
 }
 
 function convertKeyPair(publicAlgorithm, privateAlgorithm, extractable, keyUsages, publicBuffer, privateBuffer) {
-  if (!keyUsages || !keyUsages.indexOf) {
-    throw new SyntaxError('Key usages not defined');
-  }
+
+  if (!keyUsages || !keyUsages.indexOf) {throw new SyntaxError('Key usages not defined')}
 
   const publicUsages = keyUsages.filter(function (value) {
-    return value !== 'sign';
-  });
+    return value !== 'sign'
+  })
   const privateUsages = keyUsages.filter(function (value) {
-    return value !== 'verify';
-  });
+    return value !== 'verify'
+  })
+
   return {
     publicKey: convertKey(publicAlgorithm, extractable, publicUsages, publicBuffer, 'public'),
-    privateKey: convertKey(privateAlgorithm, extractable, privateUsages, privateBuffer, 'private')
-  };
-} // Swap bytes in buffer
-
-
-function swapBytes(src) {
-  if (src instanceof CryptoOperationData) {
-    src = new Uint8Array(src);
-  }
-
-  const dst = new Uint8Array(src.length);
-
-  for (let i = 0, n = src.length; i < n; i++) {
-    dst[n - i - 1] = src[i];
+    privateKey: convertKey(privateAlgorithm, extractable, privateUsages, privateBuffer, 'private'),
   }
+}
 
-  return dst.buffer;
-} // </editor-fold>
+// Swap bytes in buffer
+function swapBytes(src) {
+  if (src instanceof CryptoOperationData) {src = new Uint8Array(src)}
+  const dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
+}
+// </editor-fold>
 
 /**
  * Promise stub object (not fulfill specification, only for internal use)
@@ -595,59 +482,55 @@ function swapBytes(src) {
  * @param {function} executor Function object with two arguments resolve and reject.
  * The first argument fulfills the promise, the second argument rejects it.
  * We can call these functions, once our operation is completed.
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+if (!global.Promise) {
 
+  global.Promise = (function () {
 
-if (!global.Promise) {
-  global.Promise = function () {
     function mswrap(value) {
       if (value && value.oncomplete === null && value.onerror === null) {
         return new Promise(function (resolve, reject) {
           value.oncomplete = function () {
-            resolve(value.result);
-          };
-
+            resolve(value.result)
+          }
           value.onerror = function () {
-            reject(new OperationError(value.toString()));
-          };
-        });
-      }
-
-      return value;
+            reject(new OperationError(value.toString()))
+          }
+        })
+      } return value
     }
 
     function Promise(executor) {
-      let state = 'pending',
-          result,
-          resolveQueue = [],
-          rejectQueue = [];
+
+      let state = 'pending', result,
+        resolveQueue = [], rejectQueue = []
 
       function call(callback) {
         try {
-          callback();
-        } catch (e) {}
+          callback()
+        } catch (e) {
+        }
       }
 
       try {
         executor(function (value) {
           if (state === 'pending') {
-            state = 'fulfilled';
-            result = value;
-            resolveQueue.forEach(call);
+            state = 'fulfilled'
+            result = value
+            resolveQueue.forEach(call)
           }
         }, function (reason) {
           if (state === 'pending') {
-            state = 'rejected';
-            result = reason;
-            rejectQueue.forEach(call);
+            state = 'rejected'
+            result = reason
+            rejectQueue.forEach(call)
           }
-        });
+        })
       } catch (error) {
         if (state === 'pending') {
-          state = 'rejected';
-          result = error;
-          rejectQueue.forEach(call);
+          state = 'rejected'
+          result = error
+          rejectQueue.forEach(call)
         }
       }
       /**
@@ -661,58 +544,54 @@ if (!global.Promise) {
              * @param {function} onRejected A Function called when the Promise is rejected. This function has one argument, the rejection reason.
              * @returns {Promise}
              */
-
-
       this.then = function (onFulfilled, onRejected) {
+
         return new Promise(function (resolve, reject) {
-          function asyncOnFulfilled() {
-            let value;
 
+          function asyncOnFulfilled() {
+            let value
             try {
-              value = onFulfilled ? onFulfilled(result) : result;
+              value = onFulfilled ? onFulfilled(result) : result
             } catch (error) {
-              reject(error);
-              return;
+              reject(error)
+              return
             }
-
-            value = mswrap(value);
-
+            value = mswrap(value)
             if (value && value.then && value.then.call) {
-              value.then(resolve, reject);
+              value.then(resolve, reject)
             } else {
-              resolve(value);
+              resolve(value)
             }
           }
 
           function asyncOnRejected() {
-            let reason;
-
+            let reason
             try {
-              reason = onRejected ? onRejected(result) : result;
+              reason = onRejected ? onRejected(result) : result
             } catch (error) {
-              reject(error);
-              return;
+              reject(error)
+              return
             }
-
-            reason = mswrap(reason);
-
+            reason = mswrap(reason)
             if (reason && reason.then && reason.then.call) {
-              reason.then(resolve, reject);
+              reason.then(resolve, reject)
             } else {
-              reject(reason);
+              reject(reason)
             }
           }
 
           if (state === 'fulfilled') {
-            asyncOnFulfilled();
+            asyncOnFulfilled()
           } else if (state === 'rejected') {
-            asyncOnRejected();
+            asyncOnRejected()
           } else {
-            resolveQueue.push(asyncOnFulfilled);
-            rejectQueue.push(asyncOnRejected);
+            resolveQueue.push(asyncOnFulfilled)
+            rejectQueue.push(asyncOnRejected)
           }
-        });
-      };
+
+        })
+
+      }
       /**
              * The catch() method returns a Promise and deals with rejected cases only.
              * It behaves the same as calling Promise.prototype.then(undefined, onRejected).
@@ -723,12 +602,11 @@ if (!global.Promise) {
              * @param {function} onRejected A Function called when the Promise is rejected. This function has one argument, the rejection reason.
              * @returns {Promise}
              */
-
-
       this['catch'] = function (onRejected) {
-        return this.then(undefined, onRejected);
-      };
+        return this.then(undefined, onRejected)
+      }
     }
+
     /**
          * The Promise.all(iterable) method returns a promise that resolves when all
          * of the promises in the iterable argument have resolved.<br><br>
@@ -745,174 +623,141 @@ if (!global.Promise) {
          * @param {KeyUsages} promises Array with promises.
          * @returns {Promise}
          */
-
-
     Promise.all = function (promises) {
       return new Promise(function (resolve, reject) {
-        let result = [],
-            count = 0;
-
+        let result = [], count = 0
         function asyncResolve(k) {
-          count++;
+          count++
           return function (data) {
-            result[k] = data;
-            count--;
-
-            if (count === 0) {
-              resolve(result);
-            }
-          };
+            result[k] = data
+            count--
+            if (count === 0) {resolve(result)}
+          }
         }
 
         function asyncReject(reason) {
-          if (count > 0) {
-            reject(reason);
-          }
-
-          count = 0;
+          if (count > 0) {reject(reason)}
+          count = 0
         }
 
         for (let i = 0, n = promises.length; i < n; i++) {
-          const data = promises[i];
-
-          if (data.then && data.then.call) {
-            data.then(asyncResolve(i), asyncReject);
-          } else {
-            result[i] = data;
-          }
+          const data = promises[i]
+          if (data.then && data.then.call) {data.then(asyncResolve(i), asyncReject)} else {result[i] = data}
         }
 
-        if (count === 0) {
-          resolve(result);
-        }
-      });
-    };
+        if (count === 0) {resolve(result)}
+      })
+    }
 
-    return Promise;
-  }();
+    return Promise
+  })()
 } // </editor-fold>
 
 /*
  * Worker executor
  *
- */
-// <editor-fold defaultstate="collapsed">
-
-
-let baseUrl = '',
-    nameSuffix = ''; // Try to define from DOM model
+ */ // <editor-fold defaultstate="collapsed">
 
+let baseUrl = '', nameSuffix = ''
+// Try to define from DOM model
 if (typeof document !== 'undefined') {
   (function () {
-    const regs = /^(.*)gostCrypto(.*)\.js$/i;
-    const list = document.querySelectorAll('script');
-
+    const regs = /^(.*)gostCrypto(.*)\.js$/i
+    const list = document.querySelectorAll('script')
     for (let i = 0, n = list.length; i < n; i++) {
-      const value = list[i].getAttribute('src');
-      const test = regs.exec(value);
-
+      const value = list[i].getAttribute('src')
+      const test = regs.exec(value)
       if (test) {
-        baseUrl = test[1];
-        nameSuffix = test[2];
+        baseUrl = test[1]
+        nameSuffix = test[2]
       }
     }
-  })();
-} // Create Worker
+  })()
+}
 
 
-let worker,
-    tasks = [],
-    sequence = 0; // Worker will create only for first child process and
+// Create Worker
+let worker, tasks = [], sequence = 0
+// Worker will create only for first child process and
 // Gost implementation libraries not yet loaded
-
 if (!global.importScripts && !global.gostEngine) {
+
   try {
-    worker = new Worker(global.__PUBLIC__URL__ || `//${location.host}/gostEngineWorker.js`); // if (process.env.LOCAL_DEV) {
+
+    worker = new Worker(global.__PUBLIC__URL__ || `//${location.host}/gostEngineWorker.js`)
+
+    // if (process.env.LOCAL_DEV) {
     //   worker = new Worker('./gostEngine.js')
     // } else {
     //   worker = new Worker(global.__PUBLIC__URL__ || `//${location.host}${gostCrypto.BASE_URL || ''}/gostEngineWorker.js`)
     // }
-    // Result of opertion
 
+
+    // Result of opertion
     worker.onmessage = function (event) {
       // Find task
-      const id = event.data.id;
-
+      const id = event.data.id
       for (var i = 0, n = tasks.length; i < n; i++) {
-        if (tasks[i].id === id) {
-          break;
-        }
+        if (tasks[i].id === id) {break}
       }
-
       if (i < n) {
-        const task = tasks[i];
-        tasks.splice(i, 1); // Reject if error or resolve with result
-
-        if (event.data.error) {
-          task.reject(new OperationError(event.data.error));
-        } else {
-          task.resolve(event.data.result);
-        }
+        const task = tasks[i]
+        tasks.splice(i, 1)
+        // Reject if error or resolve with result
+        if (event.data.error) {task.reject(new OperationError(event.data.error))} else {task.resolve(event.data.result)}
       }
-    }; // Worker error - reject all waiting tasks
-
+    }
 
+    // Worker error - reject all waiting tasks
     worker.onerror = function (event) {
-      for (let i = 0, n = tasks.length; i < n; i++) {
-        tasks[i].reject(event.error);
-      }
+      for (let i = 0, n = tasks.length; i < n; i++) {tasks[i].reject(event.error)}
+      tasks = []
+    }
 
-      tasks = [];
-    };
   } catch (e) {
     // Worker is't supported
-    worker = false;
+    worker = false
   }
-} // Executor for any method
-
+}
 
+// Executor for any method
 function execute(algorithm, method, args) {
   return new Promise(function (resolve, reject) {
     try {
       if (worker) {
-        const id = ++sequence;
+        const id = ++sequence
         tasks.push({
           id: id,
           resolve: resolve,
-          reject: reject
-        });
+          reject: reject,
+        })
         worker.postMessage({
-          id: id,
-          algorithm: algorithm,
-          method: method,
-          args: args
-        });
+          id: id, algorithm: algorithm,
+          method: method, args: args,
+        })
       } else {
-        if (global.gostEngine) {
-          resolve(global.gostEngine.execute(algorithm, method, args));
-        } else {
-          reject(new OperationError('Module gostEngine not found'));
-        }
+        if (global.gostEngine) {resolve(global.gostEngine.execute(algorithm, method, args))} else {reject(new OperationError('Module gostEngine not found'))}
       }
     } catch (error) {
-      reject(error);
+      reject(error)
     }
-  });
-} // Self resolver
-
+  })
+}
 
+// Self resolver
 function call(callback) {
   try {
-    callback();
-  } catch (e) {}
-} // </editor-fold>
+    callback()
+  } catch (e) {
+  }
+}
+
+// </editor-fold>
 
 /*
  * WebCrypto common class references
  *
- */
-// <editor-fold defaultstate="collapsed">
-
+ */ // <editor-fold defaultstate="collapsed">
 /**
  * The Algorithm object is a dictionary object [WebIDL] which is used to
  * specify an algorithm and any additional parameters required to fully
@@ -1039,9 +884,8 @@ function call(callback) {
  *  </pre>
  * @class CryptoOperationData
  */
+var CryptoOperationData = global.ArrayBuffer
 
-
-var CryptoOperationData = global.ArrayBuffer;
 /**
  * DER-encoded ArrayBuffer or PEM-encoded DOMString constains ASN.1 object<br>
  * <pre>
@@ -1058,17 +902,17 @@ var CryptoOperationData = global.ArrayBuffer;
  *
  * @namespace gostCrypto
  */
+const gostCrypto = {}
 
-const gostCrypto = {};
 /**
  * The SubtleCrypto class provides low-level cryptographic primitives and algorithms.
  * WebCrypto API reference {@link http://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface}
  *
  * @class SubtleCrypto
- */
-// <editor-fold>
+ */ // <editor-fold>
+function SubtleCrypto() {
+}
 
-function SubtleCrypto() {}
 /**
  * The encrypt method returns a new Promise object that will encrypt data
  * using the specified algorithm identifier with the supplied Key.
@@ -1097,19 +941,16 @@ function SubtleCrypto() {}
  * @param {CryptoOperationData} data Operation data
  * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
  */
-
-
 SubtleCrypto.prototype.encrypt = function (algorithm, key, data) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.encrypt(algorithm, key, data);
-    }
+    if (checkNative(algorithm)) {return rootcrypto.subtle.encrypt(algorithm, key, data)}
 
-    algorithm = normalize(algorithm, 'encrypt');
-    return execute(algorithm, 'encrypt', [extractKey('encrypt', algorithm, key), data]);
-  });
-}; // </editor-fold>
+    algorithm = normalize(algorithm, 'encrypt')
+    return execute(algorithm, 'encrypt',
+      [extractKey('encrypt', algorithm, key), data])
+  })
+} // </editor-fold>
 
 /**
  * The decrypt method returns a new Promise object that will decrypt data
@@ -1139,19 +980,16 @@ SubtleCrypto.prototype.encrypt = function (algorithm, key, data) // <editor-fold
  * @param {CryptoOperationData} data Operation data
  * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
  */
-
-
 SubtleCrypto.prototype.decrypt = function (algorithm, key, data) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.decrypt(algorithm, key, data);
-    }
+    if (checkNative(algorithm)) {return rootcrypto.subtle.decrypt(algorithm, key, data)}
 
-    algorithm = normalize(algorithm, 'decrypt');
-    return execute(algorithm, 'decrypt', [extractKey('decrypt', algorithm, key), data]);
-  });
-}; // </editor-fold>
+    algorithm = normalize(algorithm, 'decrypt')
+    return execute(algorithm, 'decrypt',
+      [extractKey('decrypt', algorithm, key), data])
+  })
+} // </editor-fold>
 
 /**
  * The sign method returns a new Promise object that will sign data using
@@ -1180,26 +1018,22 @@ SubtleCrypto.prototype.decrypt = function (algorithm, key, data) // <editor-fold
  * @param {CryptoOperationData} data Operation data
  * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
  */
-
-
 SubtleCrypto.prototype.sign = function (algorithm, key, data) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.sign(algorithm, key, data);
-    }
+    if (checkNative(algorithm)) {return rootcrypto.subtle.sign(algorithm, key, data)}
 
-    algorithm = normalize(algorithm, 'sign');
-    const value = execute(algorithm, 'sign', [extractKey('sign', algorithm, key), data]).then(function (data) {
+    algorithm = normalize(algorithm, 'sign')
+    const value = execute(algorithm, 'sign',
+      [extractKey('sign', algorithm, key), data]).then(function (data) {
       if (algorithm.procreator === 'SC' && algorithm.mode === 'SIGN') {
-        data = gostCrypto.asn1.GostSignature.encode(data);
+        data = gostCrypto.asn1.GostSignature.encode(data)
       }
-
-      return data;
-    });
-    return value;
-  });
-}; // </editor-fold>
+      return data
+    })
+    return value
+  })
+} // </editor-fold>
 
 /**
  * The verify method returns a new Promise object that will verify data
@@ -1229,28 +1063,20 @@ SubtleCrypto.prototype.sign = function (algorithm, key, data) // <editor-fold de
  * @param {CryptoOperationData} data Operation data
  * @returns {Promise} Promise that resolves with boolean value of verification result
  */
-
-
 SubtleCrypto.prototype.verify = function (algorithm, key, signature, data) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.verify(algorithm, key, signature, data);
-    }
-
-    algorithm = normalize(algorithm, 'verify');
+    if (checkNative(algorithm)) {return rootcrypto.subtle.verify(algorithm, key, signature, data)}
 
+    algorithm = normalize(algorithm, 'verify')
     if (algorithm.procreator === 'SC' && algorithm.mode === 'SIGN') {
-      const obj = gostCrypto.asn1.GostSignature.decode(signature);
-      signature = {
-        r: obj.r,
-        s: obj.s
-      };
+      const obj = gostCrypto.asn1.GostSignature.decode(signature)
+      signature = { r: obj.r, s: obj.s }
     }
-
-    return execute(algorithm, 'verify', [extractKey('verify', algorithm, key), signature, data]);
-  });
-}; // </editor-fold>
+    return execute(algorithm, 'verify',
+      [extractKey('verify', algorithm, key), signature, data])
+  })
+} // </editor-fold>
 
 /**
  * The digest method returns a new Promise object that will digest data
@@ -1272,19 +1098,15 @@ SubtleCrypto.prototype.verify = function (algorithm, key, signature, data) // <e
  * @param {CryptoOperationData} data Operation data
  * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
  */
-
-
 SubtleCrypto.prototype.digest = function (algorithm, data) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.digest(algorithm, data);
-    }
+    if (checkNative(algorithm)) {return rootcrypto.subtle.digest(algorithm, data)}
 
-    algorithm = normalize(algorithm, 'digest');
-    return execute(algorithm, 'digest', [data]);
-  });
-}; // </editor-fold>
+    algorithm = normalize(algorithm, 'digest')
+    return execute(algorithm, 'digest', [data])
+  })
+} // </editor-fold>
 
 /**
  * The generateKey method returns a new Promise object that will key(s) using
@@ -1313,40 +1135,22 @@ SubtleCrypto.prototype.digest = function (algorithm, data) // <editor-fold defau
  * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
  * @returns {Promise} Promise that resolves with {@link Key} or {@link KeyPair} in according to key algorithm
  */
-
-
 SubtleCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.generateKey(algorithm, extractable, keyUsages);
-    }
+    if (checkNative(algorithm)) {return rootcrypto.subtle.generateKey(algorithm, extractable, keyUsages)}
 
     let privateAlgorithm = algorithm.privateKey,
-        publicAlgorithm = algorithm.publicKey;
-    algorithm = normalize(algorithm, 'generateKey');
-
-    if (privateAlgorithm) {
-      privateAlgorithm = normalize(privateAlgorithm, 'generateKey');
-    } else {
-      privateAlgorithm = algorithm;
-    }
-
-    if (publicAlgorithm) {
-      publicAlgorithm = normalize(publicAlgorithm, 'generateKey');
-    } else {
-      publicAlgorithm = algorithm;
-    }
-
+      publicAlgorithm = algorithm.publicKey
+    algorithm = normalize(algorithm, 'generateKey')
+    if (privateAlgorithm) {privateAlgorithm = normalize(privateAlgorithm, 'generateKey')} else {privateAlgorithm = algorithm}
+    if (publicAlgorithm) {publicAlgorithm = normalize(publicAlgorithm, 'generateKey')} else {publicAlgorithm = algorithm}
     return execute(algorithm, 'generateKey', []).then(function (data) {
-      if (data.publicKey && data.privateKey) {
-        return convertKeyPair(publicAlgorithm, privateAlgorithm, extractable, keyUsages, data.publicKey, data.privateKey);
-      }
-
-      return convertKey(algorithm, extractable, keyUsages, data);
-    });
-  });
-}; // </editor-fold>
+      if (data.publicKey && data.privateKey) {return convertKeyPair(publicAlgorithm, privateAlgorithm, extractable, keyUsages, data.publicKey, data.privateKey)}
+      return convertKey(algorithm, extractable, keyUsages, data)
+    })
+  })
+} // </editor-fold>
 
 /**
  * The deriveKey method returns a new Promise object that will key(s) using
@@ -1377,29 +1181,27 @@ SubtleCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages
  * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
  * @returns {Promise} Promise that resolves with {@link Key}
  */
-
-
-SubtleCrypto.prototype.deriveKey = function (algorithm, baseKey, derivedKeyType, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
+SubtleCrypto.prototype.deriveKey = function (algorithm, baseKey,
+  derivedKeyType, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
     if (checkNative(algorithm)) {
-      return rootcrypto.subtle.deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages);
+      return rootcrypto.subtle.deriveKey(algorithm, baseKey,
+        derivedKeyType, extractable, keyUsages)
     }
 
-    algorithm = normalize(algorithm, 'deriveKey');
-    derivedKeyType = normalize(derivedKeyType, 'generateKey');
-    algorithm.keySize = derivedKeyType.keySize;
-
+    algorithm = normalize(algorithm, 'deriveKey')
+    derivedKeyType = normalize(derivedKeyType, 'generateKey')
+    algorithm.keySize = derivedKeyType.keySize
     if (algorithm['public']) {
-      algorithm['public'].algorithm = normalize(algorithm['public'].algorithm);
-      algorithm['public'] = extractKey('deriveKey', algorithm, algorithm['public']);
+      algorithm['public'].algorithm = normalize(algorithm['public'].algorithm)
+      algorithm['public'] = extractKey('deriveKey', algorithm, algorithm['public'])
     }
-
     return execute(algorithm, 'deriveKey', [extractKey('deriveKey', algorithm, baseKey)]).then(function (data) {
-      return convertKey(derivedKeyType, extractable, keyUsages, data);
-    });
-  });
-}; // </editor-fold>
+      return convertKey(derivedKeyType, extractable, keyUsages, data)
+    })
+  })
+} // </editor-fold>
 
 /**
  * The deriveBits method returns length bits on baseKey using the
@@ -1426,24 +1228,16 @@ SubtleCrypto.prototype.deriveKey = function (algorithm, baseKey, derivedKeyType,
  * @param {number} length Length bits
  * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
  */
-
-
 SubtleCrypto.prototype.deriveBits = function (algorithm, baseKey, length) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.deriveBits(algorithm, baseKey, length);
-    }
+    if (checkNative(algorithm)) {return rootcrypto.subtle.deriveBits(algorithm, baseKey, length)}
 
-    algorithm = normalize(algorithm, 'deriveBits');
-
-    if (algorithm['public']) {
-      algorithm['public'] = extractKey('deriveBits', algorithm, algorithm['public']);
-    }
-
-    return execute(algorithm, 'deriveBits', [extractKey('deriveBits', algorithm, baseKey), length]);
-  });
-}; // </editor-fold>
+    algorithm = normalize(algorithm, 'deriveBits')
+    if (algorithm['public']) {algorithm['public'] = extractKey('deriveBits', algorithm, algorithm['public'])}
+    return execute(algorithm, 'deriveBits', [extractKey('deriveBits', algorithm, baseKey), length])
+  })
+} // </editor-fold>
 
 /**
  * The importKey method returns a new Promise object that will key(s) using
@@ -1481,98 +1275,60 @@ SubtleCrypto.prototype.deriveBits = function (algorithm, baseKey, length) // <ed
  * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
  * @returns {Promise} Promise that resolves with {@link Key}
  */
-
-
 SubtleCrypto.prototype.importKey = function (format, keyData, algorithm, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
 {
-  let type;
+  let type
   return new Promise(call).then(function () {
-    if (checkNative(algorithm)) {
-      return rootcrypto.subtle.importKey(format, keyData, algorithm, extractable, keyUsages);
-    }
+    if (checkNative(algorithm)) {return rootcrypto.subtle.importKey(format, keyData, algorithm, extractable, keyUsages)}
 
     if (format === 'raw') {
-      algorithm = normalize(algorithm, 'importKey');
-
+      algorithm = normalize(algorithm, 'importKey')
       if (keyUsages && keyUsages.indexOf) {
-        const name = algorithm.name.toUpperCase().replace(/[\.\s]/g, '');
-
-        if (name.indexOf('3410') >= 0 && keyUsages.indexOf('sign') >= 0) {
-          type = 'private';
-        } else if (name.indexOf('3410') >= 0 && keyUsages.indexOf('verify') >= 0) {
-          type = 'public';
-        }
+        const name = algorithm.name.toUpperCase().replace(/[\.\s]/g, '')
+        if (name.indexOf('3410') >= 0 && keyUsages.indexOf('sign') >= 0) {type = 'private'} else if (name.indexOf('3410') >= 0 && keyUsages.indexOf('verify') >= 0) {type = 'public'}
       }
-
-      return keyData;
-    }
-
-    let key;
-
-    if (format === 'pkcs8') {
-      key = gostCrypto.asn1.GostPrivateKeyInfo.decode(keyData).object;
-    } else if (format === 'spki') {
-      key = gostCrypto.asn1.GostSubjectPublicKeyInfo.decode(keyData).object;
-    } else {
-      throw new NotSupportedError('Key format not supported');
-    }
-
-    algorithm = normalize(key.algorithm, 'importKey');
-    type = key.type;
-
-    if (extractable !== false) {
-      extractable = extractable || key.extractable;
+      return keyData
     }
+    let key
+    if (format === 'pkcs8') {key = gostCrypto.asn1.GostPrivateKeyInfo.decode(keyData).object} else if (format === 'spki') {key = gostCrypto.asn1.GostSubjectPublicKeyInfo.decode(keyData).object} else {throw new NotSupportedError('Key format not supported')}
 
+    algorithm = normalize(key.algorithm, 'importKey')
+    type = key.type
+    if (extractable !== false) {extractable = extractable || key.extractable}
     if (keyUsages) {
       for (var i = 0; i < keyUsages.length; i++) {
-        if (key.usages.indexOf(keyUsages[i]) < 0) {
-          throw DataError('Key usage not valid for this key');
-        }
+        if (key.usages.indexOf(keyUsages[i]) < 0) {throw DataError('Key usage not valid for this key')}
       }
-    } else {
-      keyUsages = key.usages;
-    }
-
-    const data = key.buffer,
-          keySize = algorithm.keySize,
-          dataLen = data.byteLength;
-
-    if (type === 'public' || keySize === dataLen) {
-      return data;
-    } // Remove private key masks
-
-
-    if (dataLen % keySize > 0) {
-      throw new DataError('Invalid key size');
-    }
-
-    algorithm.mode = 'MASK';
-    algorithm.procreator = 'VN';
-    const chain = [];
-
+    } else {keyUsages = key.usages}
+    const data = key.buffer, keySize = algorithm.keySize, dataLen = data.byteLength
+    if (type === 'public' || keySize === dataLen) {return data}
+
+    // Remove private key masks
+    if (dataLen % keySize > 0) {throw new DataError('Invalid key size')}
+    algorithm.mode = 'MASK'
+    algorithm.procreator = 'VN'
+    const chain = []
     for (var i = keySize; i < dataLen; i += keySize) {
-      chain.push(function (mask) {
+      chain.push((function (mask) {
         return function (data) {
           return execute(algorithm, 'unwrapKey', [mask, data]).then(function (data) {
-            const next = chain.pop();
+            const next = chain.pop()
+            if (next) {return next(data)}
 
-            if (next) {
-              return next(data);
-            }
+            delete algorithm.mode
+            return data
 
-            delete algorithm.mode;
-            return data;
-          });
-        };
-      }(new Uint8Array(data, i, keySize)));
+          })
+        }
+      })(new Uint8Array(data, i, keySize)))
     }
+    return chain.pop()(new Uint8Array(data, 0, keySize))
+
 
-    return chain.pop()(new Uint8Array(data, 0, keySize));
   }).then(function (data) {
-    return convertKey(algorithm, extractable, keyUsages, data, type);
-  });
-}; // </editor-fold>
+    return convertKey(algorithm, extractable, keyUsages, data, type)
+  })
+} // </editor-fold>
 
 /**
  * The exportKey method returns a new Promise object that will key data in
@@ -1609,58 +1365,40 @@ SubtleCrypto.prototype.importKey = function (format, keyData, algorithm, extract
  * @param {Key} key Key object
  * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
  */
-
-
 SubtleCrypto.prototype.exportKey = function (format, key) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (key && checkNative(key.algorithm)) {
-      return rootcrypto.subtle.exportKey(format, key);
-    }
+    if (key && checkNative(key.algorithm)) {return rootcrypto.subtle.exportKey(format, key)}
 
-    if (!key.extractable) {
-      throw new InvalidAccessError('Key not extractable');
-    }
-
-    const raw = extractKey(null, null, key);
-
-    if (format === 'raw') {
-      return raw;
-    }
+    if (!key.extractable) {throw new InvalidAccessError('Key not extractable')}
 
+    const raw = extractKey(null, null, key)
+    if (format === 'raw') {return raw}
     if (format === 'pkcs8' && key.algorithm && key.algorithm.id) {
       if (key.algorithm.procreator === 'VN') {
         // Add masks for ViPNet
-        let algorithm = key.algorithm,
-            mask;
-        algorithm.mode = 'MASK';
+        let algorithm = key.algorithm, mask
+        algorithm.mode = 'MASK'
         return execute(algorithm, 'generateKey').then(function (data) {
-          mask = data;
-          return execute(algorithm, 'wrapKey', [mask, key.buffer]);
+          mask = data
+          return execute(algorithm, 'wrapKey', [mask, key.buffer])
         }).then(function (data) {
-          delete algorithm.mode;
-          const d = new Uint8Array(data.byteLength + mask.byteLength);
-          d.set(new Uint8Array(data, 0, data.byteLength));
-          d.set(new Uint8Array(mask, 0, mask.byteLength), data.byteLength);
-          const buffer = d.buffer;
-          buffer.enclosed = true;
+          delete algorithm.mode
+          const d = new Uint8Array(data.byteLength + mask.byteLength)
+          d.set(new Uint8Array(data, 0, data.byteLength))
+          d.set(new Uint8Array(mask, 0, mask.byteLength), data.byteLength)
+          const buffer = d.buffer
+          buffer.enclosed = true
           return gostCrypto.asn1.GostPrivateKeyInfo.encode({
             algorithm: algorithm,
-            buffer: buffer
-          });
-        });
-      }
-
-      return gostCrypto.asn1.GostPrivateKeyInfo.encode(key);
-    }
-
-    if (format === 'spki' && key.algorithm && key.algorithm.id) {
-      return gostCrypto.asn1.GostSubjectPublicKeyInfo.encode(key);
-    }
-
-    throw new NotSupportedError('Key format not supported');
-  });
-}; // </editor-fold>
+            buffer: buffer,
+          })
+        })
+      } return gostCrypto.asn1.GostPrivateKeyInfo.encode(key)
+    } if (format === 'spki' && key.algorithm && key.algorithm.id) {return gostCrypto.asn1.GostSubjectPublicKeyInfo.encode(key)}
+    throw new NotSupportedError('Key format not supported')
+  })
+} // </editor-fold>
 
 /**
  * The wrapKey method returns a new Promise object that will wrapped key(s).
@@ -1685,31 +1423,21 @@ SubtleCrypto.prototype.exportKey = function (format, key) // <editor-fold defaul
  * @param {AlgorithmIdentifier} wrapAlgorithm Algorithm identifier
  * @returns {Promise} Promise that resolves with {@link CryptoOperationData}
  */
-
-
 SubtleCrypto.prototype.wrapKey = function (format, key, wrappingKey, wrapAlgorithm) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
-    if (checkNative(wrapAlgorithm)) {
-      return rootcrypto.subtle.wrapKey(format, key, wrappingKey, wrapAlgorithm);
-    }
-
-    wrapAlgorithm = normalize(wrapAlgorithm, 'wrapKey');
-    let keyData = extractKey(null, null, key);
-
-    if (wrapAlgorithm.procreator === 'SC' && key.type === 'private') {
-      keyData = swapBytes(keyData);
-    }
-
-    return execute(wrapAlgorithm, 'wrapKey', [extractKey('wrapKey', wrapAlgorithm, wrappingKey), keyData]).then(function (data) {
-      if (format === 'raw') {
-        return data;
-      }
-
-      throw new NotSupportedError('Key format not supported');
-    });
-  });
-}; // </editor-fold>
+    if (checkNative(wrapAlgorithm)) {return rootcrypto.subtle.wrapKey(format, key, wrappingKey, wrapAlgorithm)}
+
+    wrapAlgorithm = normalize(wrapAlgorithm, 'wrapKey')
+    let keyData = extractKey(null, null, key)
+    if (wrapAlgorithm.procreator === 'SC' && key.type === 'private') {keyData = swapBytes(keyData)}
+    return execute(wrapAlgorithm, 'wrapKey',
+      [extractKey('wrapKey', wrapAlgorithm, wrappingKey), keyData]).then(function (data) {
+      if (format === 'raw') {return data}
+      throw new NotSupportedError('Key format not supported')
+    })
+  })
+} // </editor-fold>
 
 /**
  * The unwrapKey method returns a new Promise object that will unwrapped key(s).
@@ -1737,43 +1465,30 @@ SubtleCrypto.prototype.wrapKey = function (format, key, wrappingKey, wrapAlgorit
  * @param {KeyUsages} keyUsages Key usage array: type of operation that may be performed using a key
  * @returns {Promise} Promise that resolves with {@link Key}
  */
-
-
-SubtleCrypto.prototype.unwrapKey = function (format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
+SubtleCrypto.prototype.unwrapKey = function (format, wrappedKey, unwrappingKey,
+  unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages) // <editor-fold defaultstate="collapsed">
 {
   return new Promise(call).then(function () {
     if (checkNative(unwrapAlgorithm)) {
-      return rootcrypto.subtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages);
+      return rootcrypto.subtle.unwrapKey(format, wrappedKey, unwrappingKey,
+        unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages)
     }
 
-    unwrapAlgorithm = normalize(unwrapAlgorithm, 'unwrapKey');
-    unwrappedKeyAlgorithm = normalize(unwrappedKeyAlgorithm, 'importKey');
-
-    if (format !== 'raw') {
-      throw new NotSupportedError('Key format not supported');
-    }
+    unwrapAlgorithm = normalize(unwrapAlgorithm, 'unwrapKey')
+    unwrappedKeyAlgorithm = normalize(unwrappedKeyAlgorithm, 'importKey')
+    if (format !== 'raw') {throw new NotSupportedError('Key format not supported')}
 
     return execute(unwrapAlgorithm, 'unwrapKey', [extractKey('unwrapKey', unwrapAlgorithm, unwrappingKey), wrappedKey]).then(function (data) {
-      let type;
-
+      let type
       if (unwrappedKeyAlgorithm && unwrappedKeyAlgorithm.name) {
-        const name = unwrappedKeyAlgorithm.name.toUpperCase().replace(/[\.\s]/g, '');
-
-        if (name.indexOf('3410') >= 0 && keyUsages.indexOf('sign') >= 0) {
-          type = 'private';
-        } else if (name.indexOf('3410') >= 0 && keyUsages.indexOf('verify') >= 0) {
-          type = 'public';
-        }
+        const name = unwrappedKeyAlgorithm.name.toUpperCase().replace(/[\.\s]/g, '')
+        if (name.indexOf('3410') >= 0 && keyUsages.indexOf('sign') >= 0) {type = 'private'} else if (name.indexOf('3410') >= 0 && keyUsages.indexOf('verify') >= 0) {type = 'public'}
       }
-
-      if (unwrapAlgorithm.procreator === 'SC' && type === 'private') {
-        data = swapBytes(data);
-      }
-
-      return convertKey(unwrappedKeyAlgorithm, extractable, keyUsages, data, type);
-    });
-  });
-}; // </editor-fold>
+      if (unwrapAlgorithm.procreator === 'SC' && type === 'private') {data = swapBytes(data)}
+      return convertKey(unwrappedKeyAlgorithm, extractable, keyUsages, data, type)
+    })
+  })
+} // </editor-fold>
 
 /**
  * The subtle attribute provides an instance of the SubtleCrypto
@@ -1783,9 +1498,8 @@ SubtleCrypto.prototype.unwrapKey = function (format, wrappedKey, unwrappingKey,
  * @memberOf gostCrypto
  * @type SubtleCrypto
  */
+gostCrypto.subtle = new SubtleCrypto()
 
-
-gostCrypto.subtle = new SubtleCrypto();
 /**
  * The getRandomValues method generates cryptographically random values.
  *
@@ -1795,20 +1509,15 @@ gostCrypto.subtle = new SubtleCrypto();
  * @memberOf gostCrypto
  * @param {(CryptoOperationData)} array Destination buffer for random data
  */
-
 gostCrypto.getRandomValues = function (array) // <editor-fold defaultstate="collapsed">
 {
   // Execute randomizer
-  const randomSource = GostRandom ? new GostRandom() : rootcrypto;
-
-  if (randomSource.getRandomValues) {
-    randomSource.getRandomValues(array);
-  } else {
-    throw new NotSupportedError('Random generator not found');
-  }
-}; // </editor-fold>
+  const randomSource = GostRandom ? new GostRandom() : rootcrypto
+  if (randomSource.getRandomValues) {randomSource.getRandomValues(array)} else {throw new NotSupportedError('Random generator not found')}
+} // </editor-fold>
 // </editor-fold>
 
 
-gostCrypto.BASE_URL = '';
-module.exports = gostCrypto;
\ No newline at end of file
+gostCrypto.BASE_URL = ''
+
+module.exports = gostCrypto
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostDigest.js b/node_modules/gost-crypto/lib/gostDigest.js
index a54d86b..bbb2a79 100644
--- a/node_modules/gost-crypto/lib/gostDigest.js
+++ b/node_modules/gost-crypto/lib/gostDigest.js
@@ -33,89 +33,85 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const GostRandom = require('./gostRandom');
 
-const GostCipher = require('./gostCipher');
+
+const GostRandom = require('./gostRandom')
+const GostCipher = require('./gostCipher')
+
+
 /*
  * GOST R 34.11
  * Common methods
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
+const rootcrypto = global.crypto || global.msCrypto
 
-const rootcrypto = global.crypto || global.msCrypto;
 const DataError = global.DataError || Error,
-      NotSupportedError = global.NotSupportedError || Error; // Copy len values from s[sOfs] to d[dOfs]
+  NotSupportedError = global.NotSupportedError || Error
 
+// Copy len values from s[sOfs] to d[dOfs]
 function arraycopy(s, sOfs, d, dOfs, len) {
-  for (let i = 0; i < len; i++) {
-    d[dOfs + i] = s[sOfs + i];
-  }
-} // Swap bytes in buffer
-
+  for (let i = 0; i < len; i++) {d[dOfs + i] = s[sOfs + i]}
+}
 
+// Swap bytes in buffer
 function swap(s) {
   const src = new Uint8Array(s),
-        dst = new Uint8Array(src.length);
-
-  for (let i = 0, n = src.length; i < n; i++) {
-    dst[n - i - 1] = src[i];
-  }
+    dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
+}
 
-  return dst.buffer;
-} // Convert BASE64 string to Uint8Array
+// Convert BASE64 string to Uint8Array
 // for decompression of constants and precalc values
-
-
 function b64decode(s) {
   // s = s.replace(/[^A-Za-z0-9\+\/]/g, '');
   const n = s.length,
-        k = n * 3 + 1 >> 2,
-        r = new Uint8Array(k);
+    k = n * 3 + 1 >> 2, r = new Uint8Array(k)
 
   for (var m3, m4, u24 = 0, j = 0, i = 0; i < n; i++) {
-    m4 = i & 3;
-    let c = s.charCodeAt(i);
-    c = c > 64 && c < 91 ? c - 65 : c > 96 && c < 123 ? c - 71 : c > 47 && c < 58 ? c + 4 : c === 43 ? 62 : c === 47 ? 63 : 0;
-    u24 |= c << 18 - 6 * m4;
+    m4 = i & 3
+    let c = s.charCodeAt(i)
 
+    c = c > 64 && c < 91 ?
+      c - 65 : c > 96 && c < 123 ?
+        c - 71 : c > 47 && c < 58 ?
+          c + 4 : c === 43 ?
+            62 : c === 47 ?
+              63 : 0
+
+    u24 |= c << 18 - 6 * m4
     if (m4 === 3 || n - i === 1) {
-      for (m3 = 0; m3 < 3 && j < k; m3++, j++) {
-        r[j] = u24 >>> (16 >>> m3 & 24) & 255;
+      for (m3 = 0; m3 < 3 && j < k; m3++ , j++) {
+        r[j] = u24 >>> (16 >>> m3 & 24) & 255
       }
+      u24 = 0
 
-      u24 = 0;
     }
   }
+  return r.buffer
+}
 
-  return r.buffer;
-} // Random seed
-
-
+// Random seed
 function getSeed(length) {
-  const randomSource = GostRandom ? new (GostRandom || global.GostRandom)() : rootcrypto;
 
+  const randomSource = GostRandom ? new (GostRandom || global.GostRandom) : rootcrypto
   if (randomSource.getRandomValues) {
-    const d = new Uint8Array(Math.ceil(length / 8));
-    randomSource.getRandomValues(d);
-    return d;
-  }
-
-  throw new NotSupportedError('Random generator not found');
-} // Check buffer
-
+    const d = new Uint8Array(Math.ceil(length / 8))
+    randomSource.getRandomValues(d)
+    return d
+  } throw new NotSupportedError('Random generator not found')
+}
 
+// Check buffer
 function buffer(d) {
-  if (d instanceof ArrayBuffer) {
-    return d;
-  }
-
+  if (d instanceof ArrayBuffer) {return d}
   if (d && d.buffer && d.buffer instanceof ArrayBuffer) {
-    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ? d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer;
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
   }
-
-  throw new DataError('ArrayBuffer or ArrayBufferView required');
+  throw new DataError('ArrayBuffer or ArrayBufferView required')
 } // </editor-fold>
 
 /**
@@ -136,207 +132,212 @@ function buffer(d) {
  * @param {(ArrayBuffer|TypedArray)} data Data
  * @returns {ArrayBuffer} Digest of data
  */
-
-
-const digest2012 = function () // <editor-fold defaultstate="collapsed">
+const digest2012 = (function () // <editor-fold defaultstate="collapsed">
 {
   // Constants
-  const buffer0 = new Int32Array(16); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
-
-  const buffer512 = new Int32Array(16); // [512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
+  const buffer0 = new Int32Array(16) // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
 
-  buffer512[0] = 512; // Constant C
+  const buffer512 = new Int32Array(16) // [512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
+  buffer512[0] = 512
 
-  const C = function (s) {
+  // Constant C
+  const C = (function (s) {
     const h = new Int32Array(b64decode(s)),
-          r = new Array(12);
-
-    for (let i = 0; i < 12; i++) {
-      r[i] = new Int32Array(h.buffer, i * 64, 16);
-    }
+      r = new Array(12)
+    for (let i = 0; i < 12; i++) {r[i] = new Int32Array(h.buffer, i * 64, 16)}
+    return r
+  })(
+    'B0Wm8lllgN0jTXTMNnR2BRXTYKQIKkKiAWlnkpHgfEv8xIV1jbhOcRbQRS5DdmovH3xlwIEvy+vp2soe2lsIsbebsSFwBHnmVs3L1xui3VXKpwrbwmG1XFiZ1hJrF7WaMQG1Fg9e1WGYKyMKcur+89e1cA9GneNPGi+dqYq1o2+yCroK9ZYemTHbeoZD9LbCCdtiYDc6ycGxnjWQ5A/i03t7KbEUderyix+cUl9e8QY1hD1qKPw5Cscvzius3HT1LtHjhLy+DCLxN+iToepTNL4DUpMzE7fYddYD7YIs16k/NV5orRxynX08XDN+hY5I3eRxXaDhSPnSZhXos98f71f+bHz9WBdg9WPqqX6iVnoWGicjtwD/36P1OiVHF82/vf8PgNc1njVKEIYWHxwVf2MjqWwMQT+amUdHraxr6ktufWRGekBo+jVPkDZyxXG/tsa+wmYf8gq0t5oct6b6z8aO8Jq0mn8YbKRCUfnEZi3AOTB6O8Okb9nTOh2urk+uk9QUOk1WhojzSjyiTEUXNQQFSiiDaUcGNyyCLcWrkgnJk3oZMz5H08mHv+bHxp45VAkkv/6GrFHsxaruFg7H9B7nAr/UDX+k' +
+        '2ahRWTXCrDYvxKXRK43RaZAGm5LLK4n0msTbTTtEtIke3jaccfi3TkFBbgwCqucDp8mTTUJbH5vbWiODUURhcmAqH8uS3DgOVJwHppqKK3uxzrLbC0QKgIQJDeC3Vdk8JEKJJRs6fTreXxbs2JpMlJsiMRZUWo837ZxFmPvHtHTDtjsV0fqYNvRSdjswbB56SzNprwJn558DYTMbiuH/H9t4iv8c50GJ8/PkskjlKjhSbwWApt6+qxst84HNpMprXdhvwEpZot6Ybkd9Hc2678q5SOrvcR2KeWaEFCGAASBhB6vru2v62JT+WmPNxgIw+4nI79CezXsg1xvxSpK8SJkbstnVF/T6UijhiKqkHeeGzJEYne+AXZufITDUEiD4dx3fvDI8pM16sUkEsIAT0roxFvFn5443')
+
+  // Precalc Ax
+  const Ax = (function (s) {
+    return new Int32Array(b64decode(s))
+  })(
+    '5vh+XFtxH9Alg3eACST6FshJ4H6FLqSoW0aGoY8GwWoLMumi13tBbqvaN6RngVxm9heWqBpoZnb13AtwY5GVS0hi84235kvx/1ximmi9hcXLgn2m/NdXlWbTba9pufCJNWyfdEg9g7B8vOyxI4yZoTanAqwxxHCNnrao0C+839aLGfpR5bOuN5zPtUCKEn0LvAx4tQggj1rlM+OEIojs7c7Cx9N3wV/S7HgXtlBdD165TMLAgzaHHYwgXbTLCwStdjyFWyigiS9YjRt59v8yVz/s9p5DEZM+D8DTn4A6GMnuAQom9fOtgxDv6PRBGXmmXc2hDH3pOhBKG+4dEkjpLFO/8tshhHM5tPUMz6aiPQlftLyc2EeYzeiKLYsHHFb5f3dxaVp1apzF8C5xoLoevKZj+atCFeZyLrGeIt5fu3gNuc4PJZS6FIJSDmOXZk2ELwMeagII6phcfyFEob5r8Ho3yxzRY2Lbg+COK0sxHGTPcEebq5YOMoVrqYa53ucetUeMh3r1bOm4/kKIX2HW/RvdAVaWYjjIYiFXkj74qS78l/9CEUR2+J19NQhWRSzrTJDJsOCnElYjCFAt+8sBbC16A/qnpkhF' +
+        '9G6LOL/GxKu9vvj91HfeujqsTOvIB5t58JyxBeiHnQwn+moQrIpYy4lg58FAHQzqGm+BHko1aSiQxPsHc9GW/0NQGi9gnQqf96UW4MY/N5Yc5KazuNqSUhMkdSw44IqbpahkczvsFU8r8SRXVUmzP9dm2xVEDcXHp9F5455Ct5La3xUaYZl/04agNF7AJxQjONVRe22pOaRlGPB3EEADtAJ5HZClrqLdiNJniZxKXQqTD2bfCihlwk7p1CBFCbCLMlU4kWaFKSpBKQe/xTOoQrJ+K2JUTcZzbFMERWKV4Ada9AbpU1GQih8vO2vBI2Fvw3sJ3FJV5cY5Z9Ezsf5oRCmIOcfw5xHiQJuH9xlk+aLpOK3D20sHGQwLTkf5w+v0VTTVdtNriENGEKBa64sC2CDDzfWCMvJRbeGEDb7Cseeg6N4GsPodCHuFS1QNNDM7QuKaZ7zKW3/YpgiKxDfdDsY7s6nZQ+2BIXFNvV5lo7FnYe3nte6haSQx98jVc6v21R/GheGjZxpeBjzUBBDJLSg6uY8ssEACj+vAbLLy95AX1k8Rb6HTPOBzWfGpnuSqeE7WjHTNwAZuKhnVxztC2ocStBYccEXD' +
+        'NxWC5O2TIW2s45BBSTn2/H7F8SGGIjt8wLCUBCusFvv510U3mlJ+v3N8Py6jtoFoM+e42brSeMqpoyo0wi/+u+SBY8z+370NjllAJG6lpnBRxu9LhCrR5CK60GUnnFCM2RSIwhhgjO4xnqVJH3zaF9OU4SgTTJxgCUv0MnLV47Ob9hKlpKrXkcy72kPSb/0PNN4fPJRq0lBPW1RomV7ha9+fr2/qj3eUJkjqWHDdCSu/x+Vtcdl8Z93msv9PIdVJPCdrRjroYAORdntPr4bHH2ihPng11LmgtowRXwMMn9QUHdLJFlggAZg9j33dUySsZKpwP8wXUlTCyYmUjgK0Jj5edtafRsLeUHRvA1h9gARF2z2CknLx5WBYSgKbVgvz+65Ypz/83GKhWl5ObK1M6EupblXOH7jMCPl0eq6CslPBAhRM9/tHG58EKJjz6442BosnrfLv+3rtypf+jApevneOBRP099jPMCwlAcMri/eNkt38F1xVTfhlxX9GBS9f6vMwG6Ky9CSqaLfsu9YNhpmPDzUBBHVMAAAAAAAAAADxLjFNNNDM7HEFIr4GGCO1rygNmTDABcGX/VziXWk8ZRmkHMYzzJoV' +
+        'lYRBcvjHnrjcVDK3k3aEqZQ2wTokkM9YgCsT8zLI71nEQq45fO1PXPoc2O/jq42C8uWslU0pP9Fq2CPokHobfU0iSfg88EO2A8ud2Hn58z3eLS8nNtgmdCpDpB+JHuLfb5iZnRtsEzrUrUbNPfQ2+rs131AmmCXAlk/cqoE+bYXrQbBTfuWlxAVAunWLFghHpBrkO+e7RK/juMQp0GcXl4GZk7vun765rpqN0eyXVCHzVyzdkX5uMWOT19rir/jOR6IgEjfcUzijI0PeyQPuNXn8VsSompHmAbKASNxXUeASlvVk5Lfbe3X3GINRWXoS222VUr3OLjMenbsjHXQwj1INcpP90yLZ4gpEYQwwRnf+7uLStOrUJcow/e4ggAZ1YerKSkcBWhPnSv4UhyZOMCzIg7J78RmlFmTPWbP2gtyoEap8HnivWx1WJvtkjcOytz6RF99bzjTQX3zwarVvXf0lfwrNEycYV03I5nbFKp4HOaflLriqmlSGVT4PPNmjVv9IrqqSe36+dWUlrY4th30ObPn/28hBOx7MoxRQyplpE74w6YPoQK1REAmVbqccsbW2ui20NU5Eab3KTiWgBRWvUoHKD3Hh' +
+        'dEWYy40OK/JZP5sxKqhjt++zim4ppPxja2qjoEwtSp09lesO5r8x46KRw5YVVL/VGBacju+by/URXWi8nU4oRrqHXxj6z3Qg0e38uLbiPr2wBzby8eNkroTZKc5libb+cLei9tpPclUOclPXXG1JKQTyOj1XQVmnCoBp6gssEI5J0HPFa7EaEYqrehk55P/XzQlaCw44rO/J+2A2WXn1SJK95pfWfzQix4kz4QUUvGHhwdm5dcm1StImYWDPG82AmkSS7Xj9hnGzzKsqiBqXk3LOv2Z/4dCI1tRbXZhalCfIEagFjD9V3mX1tDGWtQYZ90+WsdZwbkOFnR6Ly0PTNlqrioXM+j2E+ce/mcKV/P2iH9Wh3ktjD82z73Y7i0VtgD9Z+Hz3w4WyfHO+XzGRPJjjrGYzsEghv2FnTCa4+BgP+8mVxMEwyKqghiAQdhqYYFfzQiEBFqr2PHYMBlTMNS3bRcxmfZBCvPRalkvUA4Jo6KDD7zxvPae9ktJp/3O8KQriAgHtIoe33jTN6IWBj9kB7qfdYQWb1vonMhmgNVPVbxrodMzOyeoxJFwug/VUcDRVXaB75JnOJtKsVue+9/0WGFelBU44' +
+        'ag59pFJ0NtFb2Go4HN6f8sr3dWIxdwwysJqu2eJ5yNBd7xCRxgZ02xEQRqJRXlBFI1Ns5HKYAvzFDLz39bY8+nOhaIfNFx8DfSlBr9nyjb0/Xj60Wk87nYTu/jYbZ3FAPbjj0+cHYnEaOij58g/SSH68fHW0nnYndOXyk8frVlwY3PWeT0eLpAxu9E+prctSxpmBLZjax2B4iwbcbkadDvxl+Op1IexOMKX3IZ6OC1Ur7D9lvKV7a93QSWm68bdemZBM2+OU6lcUsgHR5upA9ruwwIJBKErdUPIEY7+PHf/o1/k7k8usuE2Mto5HfIbowd0bOZImjj98WqESCdYvyy89mKvbNcmuZxNpViv9X/UVweFsNs7igB1+su3485sX2pTTfbAN/gGHe8PsdguK2suEld/hU65EBaJHc7e0ELMShXt4PDKr3463cNBoElE7U2c5udLj5mVYTVficbJkaNeJx4/JhJclqTW7+n0a4QKLFTej36ZBiNDNXZvDeN56Ssgsmk2Az7dCd38bg722IHLSiDodM711XnotS6tqj0H02qtruxyV2ZBc/+f9jTG2g6pkIhGbOB/ArvuEQgIsSaD5CMZjAzrj' +
+        'pCivCASTiCat5Bw0GopTx65xIe535qhdxH9cSiWSnoy1OOmqVc3YYwY3eqna2OspoYroe7MnmJVu39pqNeSEFGt9nRmCUJSn1Bz6VaTobL/lyu3J6kLFnKNsNRwOb8F5UYHk3m+rv4n/8MUwGE0X1J1B6xWEBFiSHA1SUCjXOWHxeOwYDKiFapoFcQGO+BHNQJGifD7178wZrxUjn2Mp0jR0UO/5HrmQ4RtKB43Sd1m5Vh3l/GATMZEvH1otqZPAFlTctluiGRo+Ld4JimuZ64pm1x4PguP+jFGtt9VaCNdFM+UPiUH/fwLm3We9SFns4Giqul321S/CSCbj/0p1pWw5Bw2IrN34ZIZUjEaRpG/Rvr0mE1x8DLMPkwOPFTNKgtmEn8G/mmmcMguoVCD65PpSgkOv+QdnntTWz+loowi4Jf1YLESxR5t2kbxe3LO7x+phkEj+ZRYQY6YfgXryM0fVOGg0CaaTY8LOmExt7TAqn9/YbIHZHXseOwYDKmaUZmCJ6/vZ/YMKWY7mc3UgewdEmhQK/ElfLKilcbZZMjQfmG+KRbvC+zgapKBQs3LCVCOjrdgfrzoXJzwLi4a7bP6DJY3IabWi' +
+        'KHkCv9HJgPH1qUvWazg3r4iACnmyyroSVVBDEAg7DUzfNpQOB7nusgTRp85nkLLFYSQT//EltNwm8SuXxSwST4YII1GmLyis75NjL5k35ec1B7BSKTob5ucsMK5XCpxw01hgQa4UJeDeRXSz151MxJK6IoBAxWha8AsMpdyMJxy+Eofx9pxabvOeMX+x4NyGSV0RQCDsNC1pm0B+PxjNS9yjqdRq1RUoDR0U8nmJaSQAAAAAAAAAAFk+t1+hlsYeLk54FgsRa9htSuewWIh/juZf0BOHLj4Gem3bu9MOxOKsl/yJyq7xsQnMszweGdvhifPqxGLuGGR3cM9JqoetxlbFfsplV/bWA5U92m1s+5o2ko2IRFbgfB7rjzeVn2CNMdYXnE6qqSNvrDrX5cAmYkMEn6ZTmRRWq9NmncBSuO6vAsFTp8IKKzzLA243I8AHk8nCPZDhyizDO8ZeL27X00z/VjOXWCSeselOZDJdaqY34W01lHJCCnn45mG+Yj94UhTZBALHRBNILvH98MiWWxP2m8XsFgmpDogpKBTlkr5OGYtUKhB9cszAD8vrr+cbG0nIRCIrcD4lZBZNqEDp1SDGUT4f9Plm' +
+        'usMgP5EM6Kvy7dHCYcR+8IFMuUWs02Hzlf64lEo5IQVcnPAsFiLWrZcYZfP3cXjpvYe6K5vwofREQAWyWWVdCe11vkgkf7wLdZYSLhfP9Cq0SwkXhel6FZZrhU4nVdqf7uCDkkkTR5EyQypGI8ZSuahGW0etPkN0+LRfJBKxXoskF/bweGRLo/shYv5/3aURS7vMJ52kbcEBc+C90CSidiIgjFmivKCKj8SQbbg2803kuQ10OmZn6nFHteBwX0bvJ4LLKhUIsDnsBl719FsefSG1sYPP0FsQ2+czwGApXHefpzZyOUwBfs9VMhGGwxyB2HIOGg1Fp+07j5l6Pd+JWDr8ecft+ysu6aQZhkPvDs5fCc32e04tN09qa+n6NN8Etq3UcDihI/mNIk0KBX6qocliSLhcG/eo4/2XYDCaLrULKm5bo1GCDetCxOH+p1cilI1YKZodg3N/z5zIZLrUUaVbT7XUtypQCL9Tgc49eZdGptjV5C0E5dIrgPx+MIeWV7aed7VzVKA5aUQdgJfQtDMwyvvz4vDP4o533eC+jMNisS4lnElPRqbOcm+529HKQeJCwe7RTbp2Ay/0eqMPsEWyaKk6zeTM' +
+        'r38L6IRUnQgEg1SzwUaCY5JUNcLIDv7S7k438n/f+6cWejOSDGDxTfsSO1LqA+WESgyrU/27kAed6vY4D3iKGctI7FWPDLMqtZ3Estb+9+Dc28oi9PPsthHfWBNUmpxA4z/e31aKztOgwcgSQyLpwwela4FY+m0NdyeVebHh893ZsYt0QirABLjsLZ//q8KU9Kz4qC11kU97v2mx7ytoeMT2L69Iesfhds6AnMZ+XQxnEdiPkuTBTGJ7mdkkPe3+I0qlw9+2i1GQmx8VJi2/bU9m6gVLYry1GuLPWlKqaui+oFP70M4BSO1oCMDmYxTJQ/4WzRWoJxDNBJIxoGlw9ue8imyXzEywM3zoNfyzucBl3vJYfMeA81IhTt5BMrtQlfFeQ5D0k9+HCDliXdLg8UExPBr7i2avkXIK8FGyEbxHfUJ+1O6lcy47TO72474lgmJ4NOsLzEOcA+PdeOckyCh3MorZhn35FLUZReJDsPJXSw+I9+uX4oi2+piapJQ6GcTwaMsWhYZQ7mQJrxH6733zF9XATqukelZ8VJi0xqm2u/uAT0IYjjzCK887xc0L0EM26qo5dxPwL6wb7DMTLCUG26fw00iN' +
+        '1+Zda/LDGh5eubIWH/gg9YQuBlDEbg+fcWvrHZ6EMAGpM3WMqzFe1D/kFP2ieSJlJ8nxcB7wCTJzpMHKcKdxvpQYS6bnaz0OQNgp/4wUyH4PvsP6x3Z0yzYWqWNKapVyjxORGcJe+Tf1Re1NWuo/nugCSZZQujh7ZDfnvQtYLiLmVZ+J4FPiYYCtUuMFKI38bcVaI+NLmTXeFOD1GtCtCcY5BXimWYZeltdhcQlIfLHi1ss6IRVgAgHpFeV3n67RrbAhP2p33LeYgLduuaGmq12fjSSGRM+b/V5FNsVmJljxxrn+m6y9/erNY0G+mXnE76ciFwhAVXZRB3Hs2I5UPsK6UctnHwQ9CtSCrHGvWHn+eHoEXNrJNrI4rzOOBJrtvYZsyUly7iZhXabrvYECkDKV/dCLLBcR+DQEYHO/CurzCZMpdY/8QhyusT59z6k0uiMHSBGIgysk785Ch0zmXA5X1h+w6doas9G61vmbNDzAdXsciTxFgitRDbhAOpKXXHaYwfHbYUo+DQEY1eaMtNYPSI6FXLTPrpYeDfPLM9k6jlWrFKAO10IXAyhiN4nBg4tt0ZyUYpKJX+997Ts668/LuOZOSjFJ' +
+        'Bkx+ZC9lw9w9Kz4qTFpj2lvT80CpIQxHtHTRV6FhWTGsWTTaHehyZm7jZRF693ZbyG7TZxawXESbpohcIB1JxbkFOHqINGxFExByxLq53f+/SUYep1GvmdUpd7wc4FuhsPeF5GAn21JUbTC6bld4jDBa1wdlD1auyYfGgmEv8pWlq4lE9fvFcX7VKOdZ8kTKjdy7zix9uIiqFUq+Mo2xuh5hm+mT7OiLCfK9nugTtxd0AapLKF0csyGFjxQxlcruSMOBhBOY0bj8t1DTsvmIiTmoapmNHOG5H4iODORzRlp4mVaDdpeHFgLPKtfuI0G/hccTtbPxoU7/kW/hK0Vn53waAjC30QV1DJj8yF7Km6Wj5/cg2p4GrWpgMaK7sfQ4lz50lH7X0mAs9GY5GMD/ml9Qp/NoZ44kNNmDtKRJ1M1orxt1VZK1h388PQIubeobq/xfW0USH2sNcektKVU1dN/99RBtTwPYCBuoe5+MGcbbfqGjrAmBu7vKEq1mFy36eXBDZgEIKccXkyZ3e/9fnAAAAAAAAAAA6yR2pMkG1xVyTdQvBzjfb7dS7mU43bZfN/+8hj31O6OO+oT8tcFX5unrXHMnJZaq' +
+        'GwvavyU1xDmG4SyHKk1OIJlpoovOPgh6+vsut52cS1UFakFWttksslo65qXevqKWIqOwJqgpJYBTyFs7Nq0VgbEekAEXuHWDxR86Sj/laTDgGeHtzzYhveyBHSWR/LoYRFt9TE1SSh2o2mBp3K7wBVj1zHIwneMp1MBiWWt/9XDOIq0DOdWfmFkc2ZdHAk34i5DFqgMYe1T2Y9J/w1bQ8NhYnpE1tW7VNTCWUdPWehwS+WchzSZzLtKMHD1EGjasSSqUYWQHf2ktHXPcb19RS28KcPQNaNiKYLSzDsoerEHTZQnYM4WYfQs9l0kGMPaonszJCpbEZXeiDuLFrQGofOSatV4OcKPepEKcoYJka6Dal7RG25Yvaszth9TX9t4nKrgYXTelPEafJdzv4VvLpsGcbvn+o+tTp2SjkxvYhM4v0lkLgXwQ9FaiGm2AdDkz5XOgu3nvDQ8VXAygldweI2wsT8aU1DfkEDZN9iMFMpHdMt/Hg2xCZwMmPzKZvO9uZvjNauV7b52MNa4rW+IWWTGzwuISkPh/k70gJ7+RUANpRg6QIg0bVimeJ2+uGdMoY5KMPFOiQy9wgv746Rue0LxveSw+7UD3' +
+        'TEDVN9LeU9t16L+uX8KyYk2pwNKlQf0KTo//4Dz9EmQmIOSVaW+n4+Hw9Ai4qY9s0aojD92m2cLH0BCd0cYoj4p50E90h9WFRpRXm6NxC6I4QX98+oNPaB1HpNsKUAflIGya8UYKZD+hKN33NL1HEoFERwZytyMt8uCGzAIQUpMYLeWNvIkrV8qh+bD4kx37a4kkR8wuWun53RGFBCCkO0vlvraKJD7WVYQlXxnI1l07Z0BOYz+gBqaNtnZsRyof94rHmrTJfiHDU0QuEICq7JpPnblXgucUBbp7yCybMiAxpUZl+LZeT7G2Ufd1R/TUi/oNhXukZoKFqWxaoWqYu5kPrvkI63nJoV43okf0pi12hX3NXSd0HvjFC4AKGCC8vmXcsgH3orRmbRuYb5Qm50zJIb9TxOZIlUEKD5PZykIgzcyqZHuk70KaQGCJChhxDE6k9psys4vM2jYt3jVM05bcI7x8Wy+pwwm7aKqFGrPSYTGnNkjgEwIdxSlB/E2yzVrat3BL5IqneWXZhO1x5jI4b9YXNLuk6C1t1TirckVcIUfqYXe0sV2hq3DPCRzorJB/znK4vf9XyF39lyJ4qKTkTGprb5QN' +
+        'OFGZW08f3+RiV4zK7XG8ntmIK7DAHSwKkXudXRE8UDuiwx4RqHZDxuRjySOjmcHO9xaGxX6odtyHtKlz4JbVCa8NVn2dOlgUtAwqP1ncxvQ2AviEldEh3dPh3T2YNkhK+UXnGqRmiOV1GFR+sqWR9ZNmWHRQwB2JnqgQGGWMBltPVAgMvEYDoy0DhMZRN7893DJQeOyGHirqMKj8eVc/9yFNIDDKBQy2ZfAyK4AWwwxpvpbdGyRwh9uV7pmB4WG40fwYFNnKBfiCDtK7zA3nKWPXYFBDDxTHO8yw6KCdOg+OQHZNVz9UojnRdcHhYXe9EvWjfHNPH0urN8EvH9/CbVZIsWc5XNDxbATtFTe/QqftlxYdFDBAZX1sZ9qrcrgH7Bf6h7pO6Dzfr3nLAwT7wXM/BgVxvEY+eNYcEofpiifQfPSOd7StobnCYlNskN0m4kSbWGCAFgWPwJrX+UH8+/rYzqlL5G0Oo0PyiwYI65+bEmvQSRc0e5qSh0rnaZwiGwF8QsTmnuA6TFxyDuOSVktun14+o5naa6NT9FrYPTXn/uCQTBskJSLQCYMlh+ldhCmAwA8UMOLGs8Cghh4okwh0M6QZ1yny' +
+        'NB89rdQtbG/uCj+u+7Kljkruc8SQ3TGDqrcttbGhajSpKgQGXiOP33tLNaFoa2/MaiO/bvSmlWwZHLlrhRrTUlXVmNTW3jUayWBN5fKufvMcpsKjqYHhct4vlVGtelOYMCWq/1bI9hYVUh2dHihg2VBv4xz6RQc6GJxV8StkewsBgOyarn6oWXzsi0AFDBBeI1DlGYv5QQTvitM0VcwN1wenvuFtZ3+S5eMluQ3naZdaBhWRom5jerYR7xYYIItGCfTfPrepgaseuweK6H2swLeRA4y2XiMfD9ONRXSwVmBn7fcCweqOvrpfS+CDEjjN48R3ws7+vlwNzkhsNUwb0oxds2QWwxkQJuqe0adicyQDnSmz74Ll658o/ILL8q4CqKronPBdJ4ZDGqz6J3SwKM9HH54xt6k4WBvQuOOSLsi8eBmbQAvvBpD7cce/QvhiHzvrEEYDBJloPnpHtVrY3piPQmOmldGQ2AjHKm5jhFMGJ1J7wxnXy+uwRGbXKZeu5n4MCuJljHwU0vEHsFbIgHEiwywwQAuMinrhH9Xaztug3ts46YoOdK0Qk1TcxhWmC+kaF/ZVzBmN3V/+uL2xSb/lMCiviQrt' +
+        '1lum9bStemp5VvCIKZcifhDoZlUys1L5DlNh39rO/jnOx/MEn8kBYf9itWFnf18ul1zPJtIlh/BR7w+GVDuvYy8eQe8Qy/KPUnImNbu5SoiujbrnM0TwTUEHadNmiP2as6uU3jS7uWaAExeSjfGqm6VkoPDFETxU8THUvr2xoRd/caLz6o71tUCHhUnI9lXDfvFOaUTwXezURmPc9VE32PKs/Q1SM0T8AAAAAAAAAABfvG5ZjvVRWhbPNC7xqoUysDa9bds5XI0TdU/m3TG3Ervfp3otbJCUiefIrDpYKzA8aw4JzfpFncSuBYnH4mUhSXNad39f1GjK/WRWHSybGNoVAgMvn8nhiGckNpQmg2k3ghQeO6+JhJy11TEkcEvp19tKbxrT0jOm+YlDKpPZv501OauKDuOwU/LKrxXH4tFuGSg8dkMPFT3r4pNjhO3EXjyCwyCL+QMzuINMuUoT/WRw3rEuaGtVNZ/RN3pTxDZhyqV5AvNZdQQ6l1KC5Zp5/X9wSCaDEpzFLukTaZzNeCi5/w59rI0dVFV0TnignUPLfYjMs1IzQUS9EhtKE8+6TUnNJf26ThE+dssgjAYILz/2J7oieKB2' +
+        'wolX8gT7supFPf6B5G1n45TB5pU9p2IbLINoXP9JF2TzLBGX/E3spSsk1r2SLmj2sit4RJrFET9I87bt0SF8MS6erXW+tVrWF0/YtF/ULWtO1OSWEjir+pLmtO7+vrXQRqDXMgvvgghHIDuopZEqUST3W/jmnj6W8LE4JBPPCU7+4ln7yQH3dydqcksJHNt9vfj1Ae51R19ZmzwiTeyGkW2EAY+Zwer+dJi45BzbOazgWV5xIXxbtyqkOic8UMCv9QtD7D9UO26Djj4hYnNPcMCUkttFB/9Ycr/qn9/C7mcRaIrPnM36oBqBkNhqmDa5esvZO8YVx5XHMyw6KGCAyoY0RelO6H1Q9pZqX9DW3oXprYFPltXaHHCiL7aePqPVCmn2jVgrZEC4Qo7Jwu51f2BKSeOsjfEsW4b5CwwQyyPh2bLrjwLz7ik5E5TT0iVEyOChf1zQ1qq1jMal96JurYGT+wgjjwLC1caPRlsvn4H8/5zSiP26xXcFkVfzWdxHHSYuOQf/SSv7WCIz5ZrFV92yvOJC+LZzJXe3Ykjgls9vmcSm2D2nTMEUfkHreVcB9IuvdpEqkzc+8p0kmywKGenhYyK2+GIv' +
+        'VTaZQEd1f3qfTVbVpHsLM4IlZ0ZqoRdMuPUFfesIL7LMSMEL9EdfUzcwiNQnXew6lo9DJRgK7RAXPSMs9wFhUa5O0J+Ub8wT/UtHQcRTmHMbWz8N2ZM3ZS/8sJZ7ZEBS4CN20gqJhAyjrjpwMpsY10GcvSM13oUm+v6/EVt8MZkDlwdPhaqbDcWK1PtINrlwvsYL4/xBBKge/zbcS3CHchMf3DPthFO2CETjPjQXZNMP8RtuqzjNOWQ1Hwp3YbhaO1aU9QnPug4whXCEuHJF0Eevs70il6488rpcL29rVUp0vcR2H09w4c/fxkRx7cRe5hB4TB3ArxZ6yinWPBE/KC3tQRd2qFmvrF8hHpmj1e7UhPlJqH7zOzzjbKWW4BPk0SDwmDqdQyxrxARk3Fl1Y2nV9eXRlWyemulfBDaYuyTJ7MjaZqTvRNaVCMilsurGxAwiNcBQO4A4wZO6jGUhAxzux11GvJ6P0zEBGTdRWtHY4uVohuylD7E3EI1XecmRcJ87aQXKQgZP61CDFoDK7+xFavMkG9I4WNZzr+GBq74kL1Tnytm/jAIR8YENzBn9kLxNuw9DxgqVGERqnaB2HaG/y/E/VwEq' +
+        'K95PiWHhcrUnuFOoT3MkgbCx5kPfH0thGMw4Qlw5rGjSt/fXvzfYITEDhkowFMcgFKokY3Kr+lxuYA21TrrFdDlHZXQEA6PzCcIV8Lxx5iMqWLlH6YfwRXtM3xi0d73Ylwm165Bsb+BzCDwmgGDZC/7cQA5B+QN+KElIxuRL6bhyjsroCAZb+wYzDp4XSSsaWVCFYWnnKU665PT85sQ2T8p7z5XjDnRJfX/RhqM+lsJSg2EQ2FrWkE36oQIbTNMSkTq7dYclRPrdRuy5FA8VGD1lmmsehpEUwj8sq9cZEJrXE/4GLdRoNtCmBlay+8HcIhxaed2QlJbv0m28obFJNQ537aAjXk/Jy/05W2to9rkN4OrvpvTUxAQi/x8ahTLn+Wm4Xt7WqpR/biAHrvKPPzrQYjuBqTj+ZiTui3qtoae2gujdyFZge6eMxW8oHiowx5slekX6oI1bQXTgZCsws19ji/9+rgJUS8mvnAwF+AjOWTCK+YtGro/FjanMVcOIgDSWx2dtDrHzPKrh5w3XurtiAjJuorS/1QIPhyAYccudXKdUqbcSzoQWadh96DxWimGEeF62c59CC7pssHQeK/EtW2Dqwc5H' +
+        'dqw19xKDaRwsa7fZ/s7bX/zNsY9MNRqDH3nAEsMWBYLwq62uYqdMt+GlgByC7wb8Z6IYRfLLI1dRFGZfXfBNnb9A/S10J4ZYoDk9P7cxg9oFpAnRkuOwF6n7KM8LQGX5JamiKUK/PXzbdeInA0Y+ArMm4QxatdBs55aOgpWmLea5c/OzY26tQt9XHTgZwwzl7lSbcinXy8USmSr9ZeLRRvjvTpBWsChktwQeE0Aw4ovALt0q2tUJZ5MrSvSK6V0Hb+b7e8bcR4Qjmqy3VfYWZkAaS+29uAfWSF6o04mvYwWkG8IgrbSxPXU7MriXKfIRmX5YS7MyICkdaDGTztocf/9atsDJn4GOFrvV4n9n46GlnTTuJdIzzZj4roU7VKLZbfcK+ssQXnl5XS6ZubukJY5De2dEM0F4AYb2zohmgvDr8JKjuzR70rzX+mLxjR1VrdnX0BHFVx4L0+Rxsb3/3qpsL4CO6v70XuV9MfbIgKT1D6R/8ET8oBrdycNR9bWV6nZkbTNS+SIAAAAAAAAAAIWQnxb1jr6mRilFc6rxLMwKVRK/Odt9Lnjb2Fcx3SbVKc++CGwta0ghi102WDoPmxUs0q36zXis' +
+        'g6ORiOLHlbzDudplX3+Sap7LoBssHYnDB7X4UJ8vqep+6NbJJpQNzza2fhqvO27KhgeYWXAkJav7eEnf0xqzaUx8V8yTKlHi2WQTpg6KJ/8mPqVmxxWmcWxx/DRDdtyJSk9ZUoRjevja8xTpiyC88lcnaMFKuWaHEIjbfGguyLuIcHX5U3pqYi56RljzAsKiYZEW2+WCCE2ofd4BgybnCdzAGnecaZfo7cOcPax9UMimCjOhoHiowMGoK+RSs4uXP3Rr6hNKiOmiKMy+uv2aJ6vq2U4GjHwE9IlSsXgiflBc9Iyw+wSZWWAX4BVt5Iq9RDi08qc9NTGMUormSf9YhbUV75JN/Pt2DGYcIS6SVjS0kxlcxZp5hpzaUZoh0ZA+MpSBBbW+XC0ZSs6M1F8umEONTKI4Epzbm2+pyr7+OdSBsmAJ7wuMQd7R6/aRpY4VTm2mTZ7mSB9UsG+OzxP9iknYXh0ByeH1r8gmURwJTuP2mKMwde5nrVrHgi7sTbJDjdR8KMGZ2nWJ9oM32xzoks3ON8V8Id2jUwWX3lA8VGBqQvKqVD/3k11yen5zYhup4jKHUwdFnfFWoZ4Pwt/kd8Yd07TNnCJ9' +
+        '5Yd/A5hqNBuUnrKkFcb07WIGEZRgKJNAY4DnWuhOEbCL53K21tDxb1CSkJHVls9t6GeV7D6e4N98+SdIK1gUMshqPhTuwm20cRnNp42swPbkAYnNEAy265KtvDoCj9/3sqAXwtLTUpwgDav40FyNazSnj5ui93c347RxnY8jHwFFvkI8L1u3wfceVf79iOVdaFMDK1nz7m5ls+nE/wc6qncqwzma5evsh4Ful/hCp1sRDi2y4EhKSzMSd8s92N7dvVEMrHnrn6U1IXlVKpH1x4qwqWhG4GptQ8foC0vwszoIybNUaxYe5TnxwjXrqZC+wb7yN2YGx7IsIJIzYUVpqusBUjtvwyialGlTq5Nazt0nKDj2PhM0DosEVeyhK6BSd6GyxJeP+KKlUSLKE+VAhiJ2E1hi0/HN243f3gi3bP5dHhLInkoXig5WgWsDlphn7l95lTMD7Vmv7XSLq3jXHW2Sny35PlPu9dio+Lp5jCr2GbFpjjnPa5Xdry90kQTi7CqcgOCIZCfOXI/YgluV6sTg2Zk6xgJxRpnDpRcwdvk9GxUfUKKfQp7VBeorx1lGNGZaz9x/S5hhsftTKSNC98chwAgOhkEw' +
+        'hpPNFpb9e3SHJzGScTaxS9NEbIpjoXIbZpo16KZoDkrKtljyOVCaFqTl3k70Loq5N6dDXug/CNkTTmI54mx/loJ5Gjwt9nSIP27wCoMpFjyOWn5C/etlkVyq7kx5gd21GfI0eFrx6A0lXd3j7Zi9cFCJijKpnMysKMpFGdpOZlauWYgPTLMdIg2XmPo31tsmMvlo8LT/zRqgDwlkTyWFRfo61RdeJN5y9GxUfF2yRhVxPoD7/w9+IHhDzytz0qr6vRfqNq7fYrT9ERus0W+Sz0q6p9vHLWfgs0FrXa1J+tO8oxaySRSoixXRUAaK7PkU4nwd6+Me/EBP5Ix1m+2iI37c/RQbUix4TlBw8XwmaBzmlsrBWBXzvDXSpks7tIGngAz/Kf59/fYe2frD1bqksGwmY6ke9ZnRA8EZkTRAQ0H3rU3tafIFVM2dlkm2G9aryMO95+rbE2jRMYmfsCr7ZR0Y41Lh+ufx2jkjWu98psGhu/XgqO5PepE3eAXPmgseMThxYYC/jlvZ+DrL2zzlgAJ15RXTi4l+Ry0/IfD7vMYtlG63ho6jlbo8JI0hlC4J5yI2Rb/eOYP/ZP65AuQbscl3QWMNENlX' +
+        'w8sXIrWNTsyieuxxnK4MO5n+y1GkjBX7FGWsgm0nMyvhvQR6116/AXn3M6+UGWDFZy7JbEGjxHXCf+umUkaE82Tv0P1144c07Z5gBAdDrhj7jimTue8UTThFPrEMYlqBaXhIB0I1XBJIz0LOFKbunhysH9YGMS3Oe4LWukeS6budFBx7H4caB1YWuA3BHEouuEnBmPIfp3d8qRgByNmlBrE0jkh+wnOtQbINHph7OkR0YKtVo8+744TmKANFdvIKG4fRbYl6YXMP4n3v5F1SWIPN5rjKPb63DCNkftAdERl6Nio+oFkjhLYfQPPxiT8QddRX0UQEcdxFWNo0I3A1uNymEWWH/CBDjZtn08mrJtArC1yI7g4lF2/nejgqtdqQJpzEctnY/jFjxB5G+qjLibervHcWQvUvfR3khS8SbzmoxrowJDOboGAFB9fO6IjIj+6Cxhogr65XokSJJteAEfyl5yg2pFjwByvOu49LTL1Je75K820koTyv6Zu3aVV9EvqevQWntanowEuqW4Nr20JzFI+sO3kFkIOEgShRwSHlV9NQbFWw/XL/mWrLTz1hPtoMjmTi3APwhoNW5rlJ6QTq1yq7Cw/8' +
+        'F6S1E1lncGrjyOFvBNU2f/hPMAKNr1cMGEbI/L06IjJbgSD39sqRCNRvojHs6j6mM02UdFM0ByVYQDlmworSSb7W86eanyH1aMy0g6X+li3QhXUbV+ExWv7QAj3lL9GOSw5bXyDmrd8aMy3pbrGrTKPOEPV7ZcYEEI97qNYsPNerB6OhEHPY4WsNrRKRvtVs8vNmQzUywJcuVXcmss7g1AAAAAAAAAAAywKkdt6bUCnk4y/Ui556wnNLZe4shPdeblOGvM1+EK8BtPyE58vKP8/oc1xlkF/VNhO/2g/0wuYRO4csMef26C/hi6JVBSrr6XS3LrxIoeQKvFZBuJ2Xm7RqpeYiArZuROwmsMS7/4emkDtbJ6UDx39oAZD8meZHl6hKOqcajZzdEu3hYDfqfMVUJR3dDchOiMVMfZVr4xNNkWlgSGYrXbCAcsyZCbmStd5ZYsXJfFGBuAOtGbY3ybL1l9lKgjDsCwiqxV9WXaTxMn/SAXKD1q2YkZ54815jarlRlnZ1H1Mk6SFnClN3T7n9PRwV1G1IkvZhlPvaSF9aNdxzEQFbN97T9HBUd6k9wAoOs4HNDY27iNgJxl/kNhYQSZe+rLpV' +
+        'IbcKyVaTsoxZ9MXiJUEYdtXbXrULIfSZVdehnPVcCW+pcka0w/hRn4VS1IeivTg1VGNdGBKXw1Ajwu/chRg78p9h+W7MDJN5U0iTo53cj+1e3wtZqgpUy6wsbRqfOJRc1667oNiqfecqv6AMCcXvKNhMxk889y+/IAP2TbFYeLOnJMffwG7J+AafMj9ogIaCzClqzVHQHJQFXiuuXMDFw2Jw4sIdYwG2O4QnIDgiGcDS8JAOhGq4JFL8byd6F0XSxpU8jOlNiw/gCfj+MJV1PmVbLHmSKE0LmEo31UNH38Tqta6/iAjipZo/0sCQzFa6nKDg//hM0DhMJZXkr63hYt9nCPSzvGMCv2IPI31U68qTQp0QHBGCYAl9T9CM3dTajC+bVy5g7O9winx/GMS0Hzow26Tf6dP/QAbxmn+w8Htfa/fdTcGe9B9tBkcycW6P+fvMhmpknTMwjI3lZ3REZIlxsPlyoCks1hpHJD9ht9jv64UR1MgnZpYctr5A0UejqrNfJfe4Et52FU5AcEQynVE9drZOVwaT80eax9L5Cqibiy5EdwechSl+uZ09haxpfjfmLfx9QMN3byWk7pOeW+BFyFDdj7Wt' +
+        'hu1bpxH/GVLpHQvZz2FrNTfgqyVuQI/7lgf2wDECWnoLAvXhFtI8nfPYSGv7UGUMYhz/J8QIdfV9QMtx+l/TSm2qZhbaopBin181SSPshOLshHw9xQfDswJaNmgEPOIFqL+ebE2sCxn6gIvi6b67lLW5nFJ3x0+jeNm8lfA5e8zjMuUM260mJMdPzhKTMnl+Fyns6y6nCavC1rn2mVTR+F2JjL+6uFUahZp2+xfditsb6FiGNi9/tfZBP4/xNs2K0xEPpbu341wKL+7VFMxNEegwEO3Nfxq5oedd5V9C1YHu3kpVwTshtvL1U1/5ThSADMG0bRiIdh684V/bZSmROy0l6JdacYHCcYF/HOLXpVQuUsXLXFMSS/n3pr7vnCgdnnIufSHy9W7OFw2bgdyn5g6bggUctJQbHnEvYjxJ1zMh5Fz6Qvn33MuOen+Lug9gjpiDGgEPtkZHTM8NjolbI6mShVhPsnqVjMK1cgUzVENC1bjphO/zpQEtGzQCHnGMV6Ziaq50GAv/GfwG49gTEjW6nU1qfG3+ydRMF4+G7WVQZSPmoC5SiAN3LVwGIpOJiwH0/gtpHsD42r2K7YJZkUxOOuyYW2e+' +
+        'sQ3wgn+/lqlqaSea1Pja4eeGidzT1f8ugS4aKx+lU9H7rZDW66DKGBrFQ7I0MQ45FgT33yy5eCemJBxpURifAnU1E8zqr3xeZPKln8hMTvokfSseSJ9fWttk1xirR0xIefSnofInCkAVc9qDKpvrrjSXhnloYhxyUUg40qIwIwTwr2U3/XL2hR0GAj46a0S6Z4WIw85u3XNmqJP3zHCs/9TSTim17anfOFYyFHDqamwHw0GMDlpKgyvLsi9WNbrNBLRs0Ah42QoG7lq4DEQ7DzshH0h2yPnlCVjDiRLu3pjRSznNv4sBWTl7KSBy9Bvgh8BAkxPhaN6tJumIR8qjn04UDIScZ4W71f9VHbfz2FOgykbRXVykDc1gIMeH/jRvhLdtzxXD+1fe/aD8oSHkzkuNe2CWAS09msZCrSmKLGQIddi9EPCvFLNXxup7g3SsTWMh2JpFFjLtqWcJxxmyP/dsJLvzKLwGxmLVJpEsCPI84l7EeJKzZrl4KD9vTzm9wIyPnp1oM/1PORewnnn0N1k94G+ywIwQ1oh4QbHRS9oZsm7uMhOdsLSUh2Z12T4vglk3dxmHwFiQ6ax4PUZhdfGCfgP/bIcJ' +
+        'lF3AqDU+uH9FFvllirW5Jj+Vc5h+sCDvuFUzC21RSDEq5qkbVCvLQWMx5BPGFgR5QI+OgYDTEaDv81FhwyVQOtBmIvm9lXDViHbZog1LjUmlUzE1VzoMi+Fo02TfkcQh9BsJ5/UKL48SsJsPJMGhLdpJzCypWT3EH1w0Vj5Xpr9U0U82qFaLgq983+BD9kGa6momhclD+Lzl3L+01+kdK7J63d55nQUga0Q8rtbmq217rpHJ9hvoRT64aKx8rlFjEce2UyLjMqTSPBSRuamS0I+1mC4DEcfKcKxkKODJ1NiJW8KWD1X8xXZCPpDsje/Xb/BQft6ecmc9z0XweozC6kqgYFSUH1yxWBD7W7De/Zxe/qHjvJrGk27dS0rcgAPrdBgI+OixDdIUXsG3KIWaIii8n3NQFylEJwoGQk69zNOXKu30Mxwr9gWZd+QKZqiGJVAwKkqBLtbdio2gpwN3R8UV+HqXDpt7MCPqqWAaxXi346o6c/utpg+2mTEequWXAAAAAAAAAAAxDvGdYgS09CKTcaZE22RVDeyvWRqWB5JcpJeLuKYklhwrGQo4dTU2QaKVtYLNYCwyedzBZCYnfcGhlKqfdkJx' +
+        'E52AOybf0KGuUcTUQegwFtgT+kStZd/BrAvyvEXU0hMjvmqSRsUV2UnXTQiSPc84nQUDISfQZucvf97/Xk1jx6R+KgFVJH0HmbFv8S+ov+1GYdQ5jJcqr9/Qu8ijP5VC3KeWlKUdBsuwIOu2faHnJboPBWNpbao05PGkgNX3bKfEOONOlRDq95OegSQ7ZPL8je+uRgctJc8sCPOjWG/wTtelY3WzzzpWIMlHzkDnhlBD+KPdhvGCKVaLeV6sammHgAMBHx27Il31NhLT9xReAxifddowDew8lXDbnDcgyfO7Ih5Xa3PbuHL2UkDk9TbdRDviUYiryKriH/442bNXqP1Dym7n5PEXyqNhS4mkfuz+NOcy4cZinoN0LEMbmbHUzzoWr4PC1mqq5agESZDpHCYnHXZMo71fkcS3TD9YEPl8bdBF+EGixn8a/Rn+YzFPyPlXI42YnOmnCQddUwbujlX8VAKqSPoOSPpWPJAjvrRl376rylI/dmyHfSLYvOHuzE0784XgReO+u2mzYRVzPhDqrWcg/UMots6xDnHl3Cq9zETvZzfgt1I/FY6kErCNmJx0xS22zmGb61mZK5Rd6Ios78oJd29M' +
+        'o71rjVt+N4TrRz2xy12JMMP7osKbSqB0nCgYFSXOF2toMxHy0MQ45F/Tute+hLcf/G7RWuX6gJs2zbARbF7+dymRhEdSCVjIopBwuVlgRghTEg66pgzBAToMBHx01ohpaR4KxtLaSWhz20l05utHUXqDiv30BZnJWkrNM7TiH5lgRslPwDSX8OarkujRy46iM1TH9WY4VvHZPuFwr3uuTWFr0nvCKuZ8krOaEDl6g3CryLMwS46YkL+WcodjCwKyW2fWB7b8bhXQMcOXzlU/5ha6WwGwBrUlqJut5ilucMhqH1Jdd9NDW24QNXBXPfoLZg77Khf8lat2Mnqel2NL9kutnWRiRYv18YMMrtvD90jFyPVCZpEx/5UEShzcSLDLiSli3zz4uGawueII6TDBNaFPs/BhGnZ8jSYF8hwWATbWtxki/sxUnjcIlDilkH2LC12jjlgD1JxaW8yc6m88vO2uJG07c//l0rh+D94i7c5eVKuxyoGF7B3n+I/oBWG5rV4ahwE1oIwvKtvWZc7MdleAtaeC9YNYPtyKLu3kez/J2Vw1Br7nD4O+ER1sTgXupgO5CVk2dBAQPIG0gJ/eXSxptgJ9DHdK' +
+        'OZCA19XIeVMJ1B4WSHQGtM3WOxgmUF5f+Z3C9JsCmOic0FQKlDy2f7yoS3+JHxfFcj0ds7eN8qZ4qm5x5ztPLhQz5pmgcWcNhPIb5FRiB4KY3zMntNIPL/BJ3OLTdp5c22xgGZZW63pkh0ayB4tHgzLNI1mNy63PHqSVW/DH2oXpoUNAG51Gtf2Spdm77CG4yBOMeQ4Ljhsu4AuabXulYvhXEriTt/H86yj+2AvqlJ1WSmXrikDqTGyZiOhHSigjRTWJixIdjy2r2MAyMazL9Loukcq5hny9eWC+Pe+OJjoMEal3YC/W8MtQ4a0WyTUn6uIulANf/YkoZtEvXeLOGv8bGEGrm/OQn5M53oz+DUOWRyfIxIoL91JFAsaqrlMcm5xe86wQtBNPovpJQqsypT8WWmLlURIrx0FI2nbm49eSSEDl5GSyp9NyrkPWl4TaIztyoQXhGoakigSRSUGmOLS2hSXJ3nhl3eq6rKbPgAIKl3PCULa9iMKE/7tevTOTi6DfRyyPak4q72y3TZUcMkJ5g3IqMY1Bc/fN/784m7IHTAr5OCwCbIpqDwskOgNab9rlPF+Ikx/Gi5iWflOKw0T/WccaqOY5' +
+        '4vzgzkOekimiDN4kedjNQBnon6LI69jp9Ea7z/OYJwxDs1M+IoTkVdgvDc2OlFBGUQZvErJs6CDnOVeva8VCbQgezlpAwW+gOxk9T8W/q3t/5mSI3xdNQg6YFO9wWATYgTeshXw518axczJE4YWoIWlcP4lvEfhn9s8GV+Pv9SQaq/J20Clj1S2jZk51uR5eAom9mBB30iiQwf199BNgjzxVN7b9k6kXqhIQfjkZouAGhtq1MJlreNqmsFWe44Juw04v91YIWodtU1ikT/9BN/xYdZWzWUisfKUJXMfV9n77FH9si3VKwL/rJquR3az5aJbvxWekkXPKmjHhHnxcM7vkQYaxMxWpDdt5O2iav+RwtKArp/ogjuR6OntzB/lRjOzVvhSjaCLu7Um5I7FE2Rdwi024s9wxYIghnydl/tOz+o/c8fJ6CZELLTH8pgmbD1LEo3jtbcxQzL9eutmBNGvVghF/ZipPlM6aUNT92d8rJbz7RSB1JmfEK2YfSfy/SSQg/HIyWd0DQ23UGMK7PB9uRRf4crORoIVjvGmvH2jUPqS67ruGtgHK0EwItWkUrJTKywmAyZhUw9hzmjc4ZCb+xcAtusrC' +
+        '3qnXeL4NOz4ED2ctIO65UOWw6jd7spBF8wqxNsu0JWBiAZwHNxIs++hrkwwTKC+hzBzrVC7lN0tTj9KKohs6CBthIjrYnArBNsJEdK0lFJ96I9Pp90ydBr4h9ueZaMXtz1+GgDYnjHf3BdYb61qcME0rR9FS3OCNX557/cI07Pgkd3hYPc0Y6oZ7pnxEFdWqTOGXnVppiZkAAAAAAAAAAOxk9CEzxpbxtXxVacFrEXHBx5JvRn+Ir2VNlv4PPi6XFfk21ajEDhm4pyxSqfGulalRfaoh2xncWNJxBPoY7pRZGKFI8q2HgFzdFina9lfEgnTBUWT7bPrR+xPbxuBW8n1v2RDPYJ9qtj84vdmpqk09n+f69SbAA3S7xwaHFJne32MHNLa4Uio60+0DzQrCb/reryCDwCPUwA1CI07K4buFOMuoXNdulsQCJQ5uJFjrR7w0EwJqXQWv16cfEUJypJeN94TMP2LjuW38HqFEx4Ehss85FZbIrjGOTo2VCRbzzpVWzD6S5WM4WlCb3X0QRzWBKaC156+j5vOH42NwK3ngdV1WU+lAAXvpA6X/+fQSErU8LJDoDHUzB/MVhX7E24+vuGoMYdMe' +
+        '2eXdgYYhOVJ3+KrSn9Yi4iW9qBQ1eHH+dXEXSo+h8MoTf+xgmF1lYTBEnsGdvH/npUDU3UH0zyzcIGrgrnrpFluRHNDi2lWosjBfkPlHEx00S/nsvVLGt10XxmXSQz7QGCJP7sBesf2eWemShEtkV5pWjr+kpd0Ho8YOaHFtpFR+LLTE16IkVoexdjBMoLy+QTrupjLzNn2ZFeNrvGdmO0DwPuo6Rl9pHC0ow+CwCK1OaCoFSh5bsQXFt2EoW9BE4b+NGltcKRXywGF6wwFMdLf16PHRHMNZY8tMSz+nRe+dGoRGnInfa+M2MIJLK/s91fR09uYO76L1jGuD+y1OGEZ25F8K3zQRIHgfdR0jobq9Ypszgap+0a4dd1MZ9xuw/tHIDaMumoRVCQg/koJRcCmsAWNVV6cOp8lpRVGDHQSOZWgmBNS6ChH2UfiIKrdJ133JbvZ5PYrvJ5n1KwQtzUju8LB6hzDJIvGi7Q1Uc5JhQvHTL9CXx0pnTShq8OLhgP18yXSMvtJxfnBnr09JmpOCkKns0duziOOykzRN0XInNBWMJQ+j1g') //==
 
-    return r;
-  }('B0Wm8lllgN0jTXTMNnR2BRXTYKQIKkKiAWlnkpHgfEv8xIV1jbhOcRbQRS5DdmovH3xlwIEvy+vp2soe2lsIsbebsSFwBHnmVs3L1xui3VXKpwrbwmG1XFiZ1hJrF7WaMQG1Fg9e1WGYKyMKcur+89e1cA9GneNPGi+dqYq1o2+yCroK9ZYemTHbeoZD9LbCCdtiYDc6ycGxnjWQ5A/i03t7KbEUderyix+cUl9e8QY1hD1qKPw5Cscvzius3HT1LtHjhLy+DCLxN+iToepTNL4DUpMzE7fYddYD7YIs16k/NV5orRxynX08XDN+hY5I3eRxXaDhSPnSZhXos98f71f+bHz9WBdg9WPqqX6iVnoWGicjtwD/36P1OiVHF82/vf8PgNc1njVKEIYWHxwVf2MjqWwMQT+amUdHraxr6ktufWRGekBo+jVPkDZyxXG/tsa+wmYf8gq0t5oct6b6z8aO8Jq0mn8YbKRCUfnEZi3AOTB6O8Okb9nTOh2urk+uk9QUOk1WhojzSjyiTEUXNQQFSiiDaUcGNyyCLcWrkgnJk3oZMz5H08mHv+bHxp45VAkkv/6GrFHsxaruFg7H9B7nAr/UDX+k' + '2ahRWTXCrDYvxKXRK43RaZAGm5LLK4n0msTbTTtEtIke3jaccfi3TkFBbgwCqucDp8mTTUJbH5vbWiODUURhcmAqH8uS3DgOVJwHppqKK3uxzrLbC0QKgIQJDeC3Vdk8JEKJJRs6fTreXxbs2JpMlJsiMRZUWo837ZxFmPvHtHTDtjsV0fqYNvRSdjswbB56SzNprwJn558DYTMbiuH/H9t4iv8c50GJ8/PkskjlKjhSbwWApt6+qxst84HNpMprXdhvwEpZot6Ybkd9Hc2678q5SOrvcR2KeWaEFCGAASBhB6vru2v62JT+WmPNxgIw+4nI79CezXsg1xvxSpK8SJkbstnVF/T6UijhiKqkHeeGzJEYne+AXZufITDUEiD4dx3fvDI8pM16sUkEsIAT0roxFvFn5443'); // Precalc Ax
-
-
-  const Ax = function (s) {
-    return new Int32Array(b64decode(s));
-  }('5vh+XFtxH9Alg3eACST6FshJ4H6FLqSoW0aGoY8GwWoLMumi13tBbqvaN6RngVxm9heWqBpoZnb13AtwY5GVS0hi84235kvx/1ximmi9hcXLgn2m/NdXlWbTba9pufCJNWyfdEg9g7B8vOyxI4yZoTanAqwxxHCNnrao0C+839aLGfpR5bOuN5zPtUCKEn0LvAx4tQggj1rlM+OEIojs7c7Cx9N3wV/S7HgXtlBdD165TMLAgzaHHYwgXbTLCwStdjyFWyigiS9YjRt59v8yVz/s9p5DEZM+D8DTn4A6GMnuAQom9fOtgxDv6PRBGXmmXc2hDH3pOhBKG+4dEkjpLFO/8tshhHM5tPUMz6aiPQlftLyc2EeYzeiKLYsHHFb5f3dxaVp1apzF8C5xoLoevKZj+atCFeZyLrGeIt5fu3gNuc4PJZS6FIJSDmOXZk2ELwMeagII6phcfyFEob5r8Ho3yxzRY2Lbg+COK0sxHGTPcEebq5YOMoVrqYa53ucetUeMh3r1bOm4/kKIX2HW/RvdAVaWYjjIYiFXkj74qS78l/9CEUR2+J19NQhWRSzrTJDJsOCnElYjCFAt+8sBbC16A/qnpkhF' + '9G6LOL/GxKu9vvj91HfeujqsTOvIB5t58JyxBeiHnQwn+moQrIpYy4lg58FAHQzqGm+BHko1aSiQxPsHc9GW/0NQGi9gnQqf96UW4MY/N5Yc5KazuNqSUhMkdSw44IqbpahkczvsFU8r8SRXVUmzP9dm2xVEDcXHp9F5455Ct5La3xUaYZl/04agNF7AJxQjONVRe22pOaRlGPB3EEADtAJ5HZClrqLdiNJniZxKXQqTD2bfCihlwk7p1CBFCbCLMlU4kWaFKSpBKQe/xTOoQrJ+K2JUTcZzbFMERWKV4Ada9AbpU1GQih8vO2vBI2Fvw3sJ3FJV5cY5Z9Ezsf5oRCmIOcfw5xHiQJuH9xlk+aLpOK3D20sHGQwLTkf5w+v0VTTVdtNriENGEKBa64sC2CDDzfWCMvJRbeGEDb7Cseeg6N4GsPodCHuFS1QNNDM7QuKaZ7zKW3/YpgiKxDfdDsY7s6nZQ+2BIXFNvV5lo7FnYe3nte6haSQx98jVc6v21R/GheGjZxpeBjzUBBDJLSg6uY8ssEACj+vAbLLy95AX1k8Rb6HTPOBzWfGpnuSqeE7WjHTNwAZuKhnVxztC2ocStBYccEXD' + 'NxWC5O2TIW2s45BBSTn2/H7F8SGGIjt8wLCUBCusFvv510U3mlJ+v3N8Py6jtoFoM+e42brSeMqpoyo0wi/+u+SBY8z+370NjllAJG6lpnBRxu9LhCrR5CK60GUnnFCM2RSIwhhgjO4xnqVJH3zaF9OU4SgTTJxgCUv0MnLV47Ob9hKlpKrXkcy72kPSb/0PNN4fPJRq0lBPW1RomV7ha9+fr2/qj3eUJkjqWHDdCSu/x+Vtcdl8Z93msv9PIdVJPCdrRjroYAORdntPr4bHH2ihPng11LmgtowRXwMMn9QUHdLJFlggAZg9j33dUySsZKpwP8wXUlTCyYmUjgK0Jj5edtafRsLeUHRvA1h9gARF2z2CknLx5WBYSgKbVgvz+65Ypz/83GKhWl5ObK1M6EupblXOH7jMCPl0eq6CslPBAhRM9/tHG58EKJjz6442BosnrfLv+3rtypf+jApevneOBRP099jPMCwlAcMri/eNkt38F1xVTfhlxX9GBS9f6vMwG6Ky9CSqaLfsu9YNhpmPDzUBBHVMAAAAAAAAAADxLjFNNNDM7HEFIr4GGCO1rygNmTDABcGX/VziXWk8ZRmkHMYzzJoV' + 'lYRBcvjHnrjcVDK3k3aEqZQ2wTokkM9YgCsT8zLI71nEQq45fO1PXPoc2O/jq42C8uWslU0pP9Fq2CPokHobfU0iSfg88EO2A8ud2Hn58z3eLS8nNtgmdCpDpB+JHuLfb5iZnRtsEzrUrUbNPfQ2+rs131AmmCXAlk/cqoE+bYXrQbBTfuWlxAVAunWLFghHpBrkO+e7RK/juMQp0GcXl4GZk7vun765rpqN0eyXVCHzVyzdkX5uMWOT19rir/jOR6IgEjfcUzijI0PeyQPuNXn8VsSompHmAbKASNxXUeASlvVk5Lfbe3X3GINRWXoS222VUr3OLjMenbsjHXQwj1INcpP90yLZ4gpEYQwwRnf+7uLStOrUJcow/e4ggAZ1YerKSkcBWhPnSv4UhyZOMCzIg7J78RmlFmTPWbP2gtyoEap8HnivWx1WJvtkjcOytz6RF99bzjTQX3zwarVvXf0lfwrNEycYV03I5nbFKp4HOaflLriqmlSGVT4PPNmjVv9IrqqSe36+dWUlrY4th30ObPn/28hBOx7MoxRQyplpE74w6YPoQK1REAmVbqccsbW2ui20NU5Eab3KTiWgBRWvUoHKD3Hh' + 'dEWYy40OK/JZP5sxKqhjt++zim4ppPxja2qjoEwtSp09lesO5r8x46KRw5YVVL/VGBacju+by/URXWi8nU4oRrqHXxj6z3Qg0e38uLbiPr2wBzby8eNkroTZKc5libb+cLei9tpPclUOclPXXG1JKQTyOj1XQVmnCoBp6gssEI5J0HPFa7EaEYqrehk55P/XzQlaCw44rO/J+2A2WXn1SJK95pfWfzQix4kz4QUUvGHhwdm5dcm1StImYWDPG82AmkSS7Xj9hnGzzKsqiBqXk3LOv2Z/4dCI1tRbXZhalCfIEagFjD9V3mX1tDGWtQYZ90+WsdZwbkOFnR6Ly0PTNlqrioXM+j2E+ce/mcKV/P2iH9Wh3ktjD82z73Y7i0VtgD9Z+Hz3w4WyfHO+XzGRPJjjrGYzsEghv2FnTCa4+BgP+8mVxMEwyKqghiAQdhqYYFfzQiEBFqr2PHYMBlTMNS3bRcxmfZBCvPRalkvUA4Jo6KDD7zxvPae9ktJp/3O8KQriAgHtIoe33jTN6IWBj9kB7qfdYQWb1vonMhmgNVPVbxrodMzOyeoxJFwug/VUcDRVXaB75JnOJtKsVue+9/0WGFelBU44' + 'ag59pFJ0NtFb2Go4HN6f8sr3dWIxdwwysJqu2eJ5yNBd7xCRxgZ02xEQRqJRXlBFI1Ns5HKYAvzFDLz39bY8+nOhaIfNFx8DfSlBr9nyjb0/Xj60Wk87nYTu/jYbZ3FAPbjj0+cHYnEaOij58g/SSH68fHW0nnYndOXyk8frVlwY3PWeT0eLpAxu9E+prctSxpmBLZjax2B4iwbcbkadDvxl+Op1IexOMKX3IZ6OC1Ur7D9lvKV7a93QSWm68bdemZBM2+OU6lcUsgHR5upA9ruwwIJBKErdUPIEY7+PHf/o1/k7k8usuE2Mto5HfIbowd0bOZImjj98WqESCdYvyy89mKvbNcmuZxNpViv9X/UVweFsNs7igB1+su3485sX2pTTfbAN/gGHe8PsdguK2suEld/hU65EBaJHc7e0ELMShXt4PDKr3463cNBoElE7U2c5udLj5mVYTVficbJkaNeJx4/JhJclqTW7+n0a4QKLFTej36ZBiNDNXZvDeN56Ssgsmk2Az7dCd38bg722IHLSiDodM711XnotS6tqj0H02qtruxyV2ZBc/+f9jTG2g6pkIhGbOB/ArvuEQgIsSaD5CMZjAzrj' + 'pCivCASTiCat5Bw0GopTx65xIe535qhdxH9cSiWSnoy1OOmqVc3YYwY3eqna2OspoYroe7MnmJVu39pqNeSEFGt9nRmCUJSn1Bz6VaTobL/lyu3J6kLFnKNsNRwOb8F5UYHk3m+rv4n/8MUwGE0X1J1B6xWEBFiSHA1SUCjXOWHxeOwYDKiFapoFcQGO+BHNQJGifD7178wZrxUjn2Mp0jR0UO/5HrmQ4RtKB43Sd1m5Vh3l/GATMZEvH1otqZPAFlTctluiGRo+Ld4JimuZ64pm1x4PguP+jFGtt9VaCNdFM+UPiUH/fwLm3We9SFns4Giqul321S/CSCbj/0p1pWw5Bw2IrN34ZIZUjEaRpG/Rvr0mE1x8DLMPkwOPFTNKgtmEn8G/mmmcMguoVCD65PpSgkOv+QdnntTWz+loowi4Jf1YLESxR5t2kbxe3LO7x+phkEj+ZRYQY6YfgXryM0fVOGg0CaaTY8LOmExt7TAqn9/YbIHZHXseOwYDKmaUZmCJ6/vZ/YMKWY7mc3UgewdEmhQK/ElfLKilcbZZMjQfmG+KRbvC+zgapKBQs3LCVCOjrdgfrzoXJzwLi4a7bP6DJY3IabWi' + 'KHkCv9HJgPH1qUvWazg3r4iACnmyyroSVVBDEAg7DUzfNpQOB7nusgTRp85nkLLFYSQT//EltNwm8SuXxSwST4YII1GmLyis75NjL5k35ec1B7BSKTob5ucsMK5XCpxw01hgQa4UJeDeRXSz151MxJK6IoBAxWha8AsMpdyMJxy+Eofx9pxabvOeMX+x4NyGSV0RQCDsNC1pm0B+PxjNS9yjqdRq1RUoDR0U8nmJaSQAAAAAAAAAAFk+t1+hlsYeLk54FgsRa9htSuewWIh/juZf0BOHLj4Gem3bu9MOxOKsl/yJyq7xsQnMszweGdvhifPqxGLuGGR3cM9JqoetxlbFfsplV/bWA5U92m1s+5o2ko2IRFbgfB7rjzeVn2CNMdYXnE6qqSNvrDrX5cAmYkMEn6ZTmRRWq9NmncBSuO6vAsFTp8IKKzzLA243I8AHk8nCPZDhyizDO8ZeL27X00z/VjOXWCSeselOZDJdaqY34W01lHJCCnn45mG+Yj94UhTZBALHRBNILvH98MiWWxP2m8XsFgmpDogpKBTlkr5OGYtUKhB9cszAD8vrr+cbG0nIRCIrcD4lZBZNqEDp1SDGUT4f9Plm' + 'usMgP5EM6Kvy7dHCYcR+8IFMuUWs02Hzlf64lEo5IQVcnPAsFiLWrZcYZfP3cXjpvYe6K5vwofREQAWyWWVdCe11vkgkf7wLdZYSLhfP9Cq0SwkXhel6FZZrhU4nVdqf7uCDkkkTR5EyQypGI8ZSuahGW0etPkN0+LRfJBKxXoskF/bweGRLo/shYv5/3aURS7vMJ52kbcEBc+C90CSidiIgjFmivKCKj8SQbbg2803kuQ10OmZn6nFHteBwX0bvJ4LLKhUIsDnsBl719FsefSG1sYPP0FsQ2+czwGApXHefpzZyOUwBfs9VMhGGwxyB2HIOGg1Fp+07j5l6Pd+JWDr8ecft+ysu6aQZhkPvDs5fCc32e04tN09qa+n6NN8Etq3UcDihI/mNIk0KBX6qocliSLhcG/eo4/2XYDCaLrULKm5bo1GCDetCxOH+p1cilI1YKZodg3N/z5zIZLrUUaVbT7XUtypQCL9Tgc49eZdGptjV5C0E5dIrgPx+MIeWV7aed7VzVKA5aUQdgJfQtDMwyvvz4vDP4o533eC+jMNisS4lnElPRqbOcm+529HKQeJCwe7RTbp2Ay/0eqMPsEWyaKk6zeTM' + 'r38L6IRUnQgEg1SzwUaCY5JUNcLIDv7S7k438n/f+6cWejOSDGDxTfsSO1LqA+WESgyrU/27kAed6vY4D3iKGctI7FWPDLMqtZ3Estb+9+Dc28oi9PPsthHfWBNUmpxA4z/e31aKztOgwcgSQyLpwwela4FY+m0NdyeVebHh893ZsYt0QirABLjsLZ//q8KU9Kz4qC11kU97v2mx7ytoeMT2L69Iesfhds6AnMZ+XQxnEdiPkuTBTGJ7mdkkPe3+I0qlw9+2i1GQmx8VJi2/bU9m6gVLYry1GuLPWlKqaui+oFP70M4BSO1oCMDmYxTJQ/4WzRWoJxDNBJIxoGlw9ue8imyXzEywM3zoNfyzucBl3vJYfMeA81IhTt5BMrtQlfFeQ5D0k9+HCDliXdLg8UExPBr7i2avkXIK8FGyEbxHfUJ+1O6lcy47TO72474lgmJ4NOsLzEOcA+PdeOckyCh3MorZhn35FLUZReJDsPJXSw+I9+uX4oi2+piapJQ6GcTwaMsWhYZQ7mQJrxH6733zF9XATqukelZ8VJi0xqm2u/uAT0IYjjzCK887xc0L0EM26qo5dxPwL6wb7DMTLCUG26fw00iN' + '1+Zda/LDGh5eubIWH/gg9YQuBlDEbg+fcWvrHZ6EMAGpM3WMqzFe1D/kFP2ieSJlJ8nxcB7wCTJzpMHKcKdxvpQYS6bnaz0OQNgp/4wUyH4PvsP6x3Z0yzYWqWNKapVyjxORGcJe+Tf1Re1NWuo/nugCSZZQujh7ZDfnvQtYLiLmVZ+J4FPiYYCtUuMFKI38bcVaI+NLmTXeFOD1GtCtCcY5BXimWYZeltdhcQlIfLHi1ss6IRVgAgHpFeV3n67RrbAhP2p33LeYgLduuaGmq12fjSSGRM+b/V5FNsVmJljxxrn+m6y9/erNY0G+mXnE76ciFwhAVXZRB3Hs2I5UPsK6UctnHwQ9CtSCrHGvWHn+eHoEXNrJNrI4rzOOBJrtvYZsyUly7iZhXabrvYECkDKV/dCLLBcR+DQEYHO/CurzCZMpdY/8QhyusT59z6k0uiMHSBGIgysk785Ch0zmXA5X1h+w6doas9G61vmbNDzAdXsciTxFgitRDbhAOpKXXHaYwfHbYUo+DQEY1eaMtNYPSI6FXLTPrpYeDfPLM9k6jlWrFKAO10IXAyhiN4nBg4tt0ZyUYpKJX+997Ts668/LuOZOSjFJ' + 'Bkx+ZC9lw9w9Kz4qTFpj2lvT80CpIQxHtHTRV6FhWTGsWTTaHehyZm7jZRF693ZbyG7TZxawXESbpohcIB1JxbkFOHqINGxFExByxLq53f+/SUYep1GvmdUpd7wc4FuhsPeF5GAn21JUbTC6bld4jDBa1wdlD1auyYfGgmEv8pWlq4lE9fvFcX7VKOdZ8kTKjdy7zix9uIiqFUq+Mo2xuh5hm+mT7OiLCfK9nugTtxd0AapLKF0csyGFjxQxlcruSMOBhBOY0bj8t1DTsvmIiTmoapmNHOG5H4iODORzRlp4mVaDdpeHFgLPKtfuI0G/hccTtbPxoU7/kW/hK0Vn53waAjC30QV1DJj8yF7Km6Wj5/cg2p4GrWpgMaK7sfQ4lz50lH7X0mAs9GY5GMD/ml9Qp/NoZ44kNNmDtKRJ1M1orxt1VZK1h388PQIubeobq/xfW0USH2sNcektKVU1dN/99RBtTwPYCBuoe5+MGcbbfqGjrAmBu7vKEq1mFy36eXBDZgEIKccXkyZ3e/9fnAAAAAAAAAAA6yR2pMkG1xVyTdQvBzjfb7dS7mU43bZfN/+8hj31O6OO+oT8tcFX5unrXHMnJZaq' + 'GwvavyU1xDmG4SyHKk1OIJlpoovOPgh6+vsut52cS1UFakFWttksslo65qXevqKWIqOwJqgpJYBTyFs7Nq0VgbEekAEXuHWDxR86Sj/laTDgGeHtzzYhveyBHSWR/LoYRFt9TE1SSh2o2mBp3K7wBVj1zHIwneMp1MBiWWt/9XDOIq0DOdWfmFkc2ZdHAk34i5DFqgMYe1T2Y9J/w1bQ8NhYnpE1tW7VNTCWUdPWehwS+WchzSZzLtKMHD1EGjasSSqUYWQHf2ktHXPcb19RS28KcPQNaNiKYLSzDsoerEHTZQnYM4WYfQs9l0kGMPaonszJCpbEZXeiDuLFrQGofOSatV4OcKPepEKcoYJka6Dal7RG25Yvaszth9TX9t4nKrgYXTelPEafJdzv4VvLpsGcbvn+o+tTp2SjkxvYhM4v0lkLgXwQ9FaiGm2AdDkz5XOgu3nvDQ8VXAygldweI2wsT8aU1DfkEDZN9iMFMpHdMt/Hg2xCZwMmPzKZvO9uZvjNauV7b52MNa4rW+IWWTGzwuISkPh/k70gJ7+RUANpRg6QIg0bVimeJ2+uGdMoY5KMPFOiQy9wgv746Rue0LxveSw+7UD3' + 'TEDVN9LeU9t16L+uX8KyYk2pwNKlQf0KTo//4Dz9EmQmIOSVaW+n4+Hw9Ai4qY9s0aojD92m2cLH0BCd0cYoj4p50E90h9WFRpRXm6NxC6I4QX98+oNPaB1HpNsKUAflIGya8UYKZD+hKN33NL1HEoFERwZytyMt8uCGzAIQUpMYLeWNvIkrV8qh+bD4kx37a4kkR8wuWun53RGFBCCkO0vlvraKJD7WVYQlXxnI1l07Z0BOYz+gBqaNtnZsRyof94rHmrTJfiHDU0QuEICq7JpPnblXgucUBbp7yCybMiAxpUZl+LZeT7G2Ufd1R/TUi/oNhXukZoKFqWxaoWqYu5kPrvkI63nJoV43okf0pi12hX3NXSd0HvjFC4AKGCC8vmXcsgH3orRmbRuYb5Qm50zJIb9TxOZIlUEKD5PZykIgzcyqZHuk70KaQGCJChhxDE6k9psys4vM2jYt3jVM05bcI7x8Wy+pwwm7aKqFGrPSYTGnNkjgEwIdxSlB/E2yzVrat3BL5IqneWXZhO1x5jI4b9YXNLuk6C1t1TirckVcIUfqYXe0sV2hq3DPCRzorJB/znK4vf9XyF39lyJ4qKTkTGprb5QN' + 'OFGZW08f3+RiV4zK7XG8ntmIK7DAHSwKkXudXRE8UDuiwx4RqHZDxuRjySOjmcHO9xaGxX6odtyHtKlz4JbVCa8NVn2dOlgUtAwqP1ncxvQ2AviEldEh3dPh3T2YNkhK+UXnGqRmiOV1GFR+sqWR9ZNmWHRQwB2JnqgQGGWMBltPVAgMvEYDoy0DhMZRN7893DJQeOyGHirqMKj8eVc/9yFNIDDKBQy2ZfAyK4AWwwxpvpbdGyRwh9uV7pmB4WG40fwYFNnKBfiCDtK7zA3nKWPXYFBDDxTHO8yw6KCdOg+OQHZNVz9UojnRdcHhYXe9EvWjfHNPH0urN8EvH9/CbVZIsWc5XNDxbATtFTe/QqftlxYdFDBAZX1sZ9qrcrgH7Bf6h7pO6Dzfr3nLAwT7wXM/BgVxvEY+eNYcEofpiifQfPSOd7StobnCYlNskN0m4kSbWGCAFgWPwJrX+UH8+/rYzqlL5G0Oo0PyiwYI65+bEmvQSRc0e5qSh0rnaZwiGwF8QsTmnuA6TFxyDuOSVktun14+o5naa6NT9FrYPTXn/uCQTBskJSLQCYMlh+ldhCmAwA8UMOLGs8Cghh4okwh0M6QZ1yny' + 'NB89rdQtbG/uCj+u+7Kljkruc8SQ3TGDqrcttbGhajSpKgQGXiOP33tLNaFoa2/MaiO/bvSmlWwZHLlrhRrTUlXVmNTW3jUayWBN5fKufvMcpsKjqYHhct4vlVGtelOYMCWq/1bI9hYVUh2dHihg2VBv4xz6RQc6GJxV8StkewsBgOyarn6oWXzsi0AFDBBeI1DlGYv5QQTvitM0VcwN1wenvuFtZ3+S5eMluQ3naZdaBhWRom5jerYR7xYYIItGCfTfPrepgaseuweK6H2swLeRA4y2XiMfD9ONRXSwVmBn7fcCweqOvrpfS+CDEjjN48R3ws7+vlwNzkhsNUwb0oxds2QWwxkQJuqe0adicyQDnSmz74Ll658o/ILL8q4CqKronPBdJ4ZDGqz6J3SwKM9HH54xt6k4WBvQuOOSLsi8eBmbQAvvBpD7cce/QvhiHzvrEEYDBJloPnpHtVrY3piPQmOmldGQ2AjHKm5jhFMGJ1J7wxnXy+uwRGbXKZeu5n4MCuJljHwU0vEHsFbIgHEiwywwQAuMinrhH9Xaztug3ts46YoOdK0Qk1TcxhWmC+kaF/ZVzBmN3V/+uL2xSb/lMCiviQrt' + '1lum9bStemp5VvCIKZcifhDoZlUys1L5DlNh39rO/jnOx/MEn8kBYf9itWFnf18ul1zPJtIlh/BR7w+GVDuvYy8eQe8Qy/KPUnImNbu5SoiujbrnM0TwTUEHadNmiP2as6uU3jS7uWaAExeSjfGqm6VkoPDFETxU8THUvr2xoRd/caLz6o71tUCHhUnI9lXDfvFOaUTwXezURmPc9VE32PKs/Q1SM0T8AAAAAAAAAABfvG5ZjvVRWhbPNC7xqoUysDa9bds5XI0TdU/m3TG3Ervfp3otbJCUiefIrDpYKzA8aw4JzfpFncSuBYnH4mUhSXNad39f1GjK/WRWHSybGNoVAgMvn8nhiGckNpQmg2k3ghQeO6+JhJy11TEkcEvp19tKbxrT0jOm+YlDKpPZv501OauKDuOwU/LKrxXH4tFuGSg8dkMPFT3r4pNjhO3EXjyCwyCL+QMzuINMuUoT/WRw3rEuaGtVNZ/RN3pTxDZhyqV5AvNZdQQ6l1KC5Zp5/X9wSCaDEpzFLukTaZzNeCi5/w59rI0dVFV0TnignUPLfYjMs1IzQUS9EhtKE8+6TUnNJf26ThE+dssgjAYILz/2J7oieKB2' + 'wolX8gT7supFPf6B5G1n45TB5pU9p2IbLINoXP9JF2TzLBGX/E3spSsk1r2SLmj2sit4RJrFET9I87bt0SF8MS6erXW+tVrWF0/YtF/ULWtO1OSWEjir+pLmtO7+vrXQRqDXMgvvgghHIDuopZEqUST3W/jmnj6W8LE4JBPPCU7+4ln7yQH3dydqcksJHNt9vfj1Ae51R19ZmzwiTeyGkW2EAY+Zwer+dJi45BzbOazgWV5xIXxbtyqkOic8UMCv9QtD7D9UO26Djj4hYnNPcMCUkttFB/9Ycr/qn9/C7mcRaIrPnM36oBqBkNhqmDa5esvZO8YVx5XHMyw6KGCAyoY0RelO6H1Q9pZqX9DW3oXprYFPltXaHHCiL7aePqPVCmn2jVgrZEC4Qo7Jwu51f2BKSeOsjfEsW4b5CwwQyyPh2bLrjwLz7ik5E5TT0iVEyOChf1zQ1qq1jMal96JurYGT+wgjjwLC1caPRlsvn4H8/5zSiP26xXcFkVfzWdxHHSYuOQf/SSv7WCIz5ZrFV92yvOJC+LZzJXe3Ykjgls9vmcSm2D2nTMEUfkHreVcB9IuvdpEqkzc+8p0kmywKGenhYyK2+GIv' + 'VTaZQEd1f3qfTVbVpHsLM4IlZ0ZqoRdMuPUFfesIL7LMSMEL9EdfUzcwiNQnXew6lo9DJRgK7RAXPSMs9wFhUa5O0J+Ub8wT/UtHQcRTmHMbWz8N2ZM3ZS/8sJZ7ZEBS4CN20gqJhAyjrjpwMpsY10GcvSM13oUm+v6/EVt8MZkDlwdPhaqbDcWK1PtINrlwvsYL4/xBBKge/zbcS3CHchMf3DPthFO2CETjPjQXZNMP8RtuqzjNOWQ1Hwp3YbhaO1aU9QnPug4whXCEuHJF0Eevs70il6488rpcL29rVUp0vcR2H09w4c/fxkRx7cRe5hB4TB3ArxZ6yinWPBE/KC3tQRd2qFmvrF8hHpmj1e7UhPlJqH7zOzzjbKWW4BPk0SDwmDqdQyxrxARk3Fl1Y2nV9eXRlWyemulfBDaYuyTJ7MjaZqTvRNaVCMilsurGxAwiNcBQO4A4wZO6jGUhAxzux11GvJ6P0zEBGTdRWtHY4uVohuylD7E3EI1XecmRcJ87aQXKQgZP61CDFoDK7+xFavMkG9I4WNZzr+GBq74kL1Tnytm/jAIR8YENzBn9kLxNuw9DxgqVGERqnaB2HaG/y/E/VwEq' + 'K95PiWHhcrUnuFOoT3MkgbCx5kPfH0thGMw4Qlw5rGjSt/fXvzfYITEDhkowFMcgFKokY3Kr+lxuYA21TrrFdDlHZXQEA6PzCcIV8Lxx5iMqWLlH6YfwRXtM3xi0d73Ylwm165Bsb+BzCDwmgGDZC/7cQA5B+QN+KElIxuRL6bhyjsroCAZb+wYzDp4XSSsaWVCFYWnnKU665PT85sQ2T8p7z5XjDnRJfX/RhqM+lsJSg2EQ2FrWkE36oQIbTNMSkTq7dYclRPrdRuy5FA8VGD1lmmsehpEUwj8sq9cZEJrXE/4GLdRoNtCmBlay+8HcIhxaed2QlJbv0m28obFJNQ537aAjXk/Jy/05W2to9rkN4OrvpvTUxAQi/x8ahTLn+Wm4Xt7WqpR/biAHrvKPPzrQYjuBqTj+ZiTui3qtoae2gujdyFZge6eMxW8oHiowx5slekX6oI1bQXTgZCsws19ji/9+rgJUS8mvnAwF+AjOWTCK+YtGro/FjanMVcOIgDSWx2dtDrHzPKrh5w3XurtiAjJuorS/1QIPhyAYccudXKdUqbcSzoQWadh96DxWimGEeF62c59CC7pssHQeK/EtW2Dqwc5H' + 'dqw19xKDaRwsa7fZ/s7bX/zNsY9MNRqDH3nAEsMWBYLwq62uYqdMt+GlgByC7wb8Z6IYRfLLI1dRFGZfXfBNnb9A/S10J4ZYoDk9P7cxg9oFpAnRkuOwF6n7KM8LQGX5JamiKUK/PXzbdeInA0Y+ArMm4QxatdBs55aOgpWmLea5c/OzY26tQt9XHTgZwwzl7lSbcinXy8USmSr9ZeLRRvjvTpBWsChktwQeE0Aw4ovALt0q2tUJZ5MrSvSK6V0Hb+b7e8bcR4Qjmqy3VfYWZkAaS+29uAfWSF6o04mvYwWkG8IgrbSxPXU7MriXKfIRmX5YS7MyICkdaDGTztocf/9atsDJn4GOFrvV4n9n46GlnTTuJdIzzZj4roU7VKLZbfcK+ssQXnl5XS6ZubukJY5De2dEM0F4AYb2zohmgvDr8JKjuzR70rzX+mLxjR1VrdnX0BHFVx4L0+Rxsb3/3qpsL4CO6v70XuV9MfbIgKT1D6R/8ET8oBrdycNR9bWV6nZkbTNS+SIAAAAAAAAAAIWQnxb1jr6mRilFc6rxLMwKVRK/Odt9Lnjb2Fcx3SbVKc++CGwta0ghi102WDoPmxUs0q36zXis' + 'g6ORiOLHlbzDudplX3+Sap7LoBssHYnDB7X4UJ8vqep+6NbJJpQNzza2fhqvO27KhgeYWXAkJav7eEnf0xqzaUx8V8yTKlHi2WQTpg6KJ/8mPqVmxxWmcWxx/DRDdtyJSk9ZUoRjevja8xTpiyC88lcnaMFKuWaHEIjbfGguyLuIcHX5U3pqYi56RljzAsKiYZEW2+WCCE2ofd4BgybnCdzAGnecaZfo7cOcPax9UMimCjOhoHiowMGoK+RSs4uXP3Rr6hNKiOmiKMy+uv2aJ6vq2U4GjHwE9IlSsXgiflBc9Iyw+wSZWWAX4BVt5Iq9RDi08qc9NTGMUormSf9YhbUV75JN/Pt2DGYcIS6SVjS0kxlcxZp5hpzaUZoh0ZA+MpSBBbW+XC0ZSs6M1F8umEONTKI4Epzbm2+pyr7+OdSBsmAJ7wuMQd7R6/aRpY4VTm2mTZ7mSB9UsG+OzxP9iknYXh0ByeH1r8gmURwJTuP2mKMwde5nrVrHgi7sTbJDjdR8KMGZ2nWJ9oM32xzoks3ON8V8Id2jUwWX3lA8VGBqQvKqVD/3k11yen5zYhup4jKHUwdFnfFWoZ4Pwt/kd8Yd07TNnCJ9' + '5Yd/A5hqNBuUnrKkFcb07WIGEZRgKJNAY4DnWuhOEbCL53K21tDxb1CSkJHVls9t6GeV7D6e4N98+SdIK1gUMshqPhTuwm20cRnNp42swPbkAYnNEAy265KtvDoCj9/3sqAXwtLTUpwgDav40FyNazSnj5ui93c347RxnY8jHwFFvkI8L1u3wfceVf79iOVdaFMDK1nz7m5ls+nE/wc6qncqwzma5evsh4Ful/hCp1sRDi2y4EhKSzMSd8s92N7dvVEMrHnrn6U1IXlVKpH1x4qwqWhG4GptQ8foC0vwszoIybNUaxYe5TnxwjXrqZC+wb7yN2YGx7IsIJIzYUVpqusBUjtvwyialGlTq5Nazt0nKDj2PhM0DosEVeyhK6BSd6GyxJeP+KKlUSLKE+VAhiJ2E1hi0/HN243f3gi3bP5dHhLInkoXig5WgWsDlphn7l95lTMD7Vmv7XSLq3jXHW2Sny35PlPu9dio+Lp5jCr2GbFpjjnPa5Xdry90kQTi7CqcgOCIZCfOXI/YgluV6sTg2Zk6xgJxRpnDpRcwdvk9GxUfUKKfQp7VBeorx1lGNGZaz9x/S5hhsftTKSNC98chwAgOhkEw' + 'hpPNFpb9e3SHJzGScTaxS9NEbIpjoXIbZpo16KZoDkrKtljyOVCaFqTl3k70Loq5N6dDXug/CNkTTmI54mx/loJ5Gjwt9nSIP27wCoMpFjyOWn5C/etlkVyq7kx5gd21GfI0eFrx6A0lXd3j7Zi9cFCJijKpnMysKMpFGdpOZlauWYgPTLMdIg2XmPo31tsmMvlo8LT/zRqgDwlkTyWFRfo61RdeJN5y9GxUfF2yRhVxPoD7/w9+IHhDzytz0qr6vRfqNq7fYrT9ERus0W+Sz0q6p9vHLWfgs0FrXa1J+tO8oxaySRSoixXRUAaK7PkU4nwd6+Me/EBP5Ix1m+2iI37c/RQbUix4TlBw8XwmaBzmlsrBWBXzvDXSpks7tIGngAz/Kf59/fYe2frD1bqksGwmY6ke9ZnRA8EZkTRAQ0H3rU3tafIFVM2dlkm2G9aryMO95+rbE2jRMYmfsCr7ZR0Y41Lh+ufx2jkjWu98psGhu/XgqO5PepE3eAXPmgseMThxYYC/jlvZ+DrL2zzlgAJ15RXTi4l+Ry0/IfD7vMYtlG63ho6jlbo8JI0hlC4J5yI2Rb/eOYP/ZP65AuQbscl3QWMNENlX' + 'w8sXIrWNTsyieuxxnK4MO5n+y1GkjBX7FGWsgm0nMyvhvQR6116/AXn3M6+UGWDFZy7JbEGjxHXCf+umUkaE82Tv0P1144c07Z5gBAdDrhj7jimTue8UTThFPrEMYlqBaXhIB0I1XBJIz0LOFKbunhysH9YGMS3Oe4LWukeS6budFBx7H4caB1YWuA3BHEouuEnBmPIfp3d8qRgByNmlBrE0jkh+wnOtQbINHph7OkR0YKtVo8+744TmKANFdvIKG4fRbYl6YXMP4n3v5F1SWIPN5rjKPb63DCNkftAdERl6Nio+oFkjhLYfQPPxiT8QddRX0UQEcdxFWNo0I3A1uNymEWWH/CBDjZtn08mrJtArC1yI7g4lF2/nejgqtdqQJpzEctnY/jFjxB5G+qjLibervHcWQvUvfR3khS8SbzmoxrowJDOboGAFB9fO6IjIj+6Cxhogr65XokSJJteAEfyl5yg2pFjwByvOu49LTL1Je75K820koTyv6Zu3aVV9EvqevQWntanowEuqW4Nr20JzFI+sO3kFkIOEgShRwSHlV9NQbFWw/XL/mWrLTz1hPtoMjmTi3APwhoNW5rlJ6QTq1yq7Cw/8' + 'F6S1E1lncGrjyOFvBNU2f/hPMAKNr1cMGEbI/L06IjJbgSD39sqRCNRvojHs6j6mM02UdFM0ByVYQDlmworSSb7W86eanyH1aMy0g6X+li3QhXUbV+ExWv7QAj3lL9GOSw5bXyDmrd8aMy3pbrGrTKPOEPV7ZcYEEI97qNYsPNerB6OhEHPY4WsNrRKRvtVs8vNmQzUywJcuVXcmss7g1AAAAAAAAAAAywKkdt6bUCnk4y/Ui556wnNLZe4shPdeblOGvM1+EK8BtPyE58vKP8/oc1xlkF/VNhO/2g/0wuYRO4csMef26C/hi6JVBSrr6XS3LrxIoeQKvFZBuJ2Xm7RqpeYiArZuROwmsMS7/4emkDtbJ6UDx39oAZD8meZHl6hKOqcajZzdEu3hYDfqfMVUJR3dDchOiMVMfZVr4xNNkWlgSGYrXbCAcsyZCbmStd5ZYsXJfFGBuAOtGbY3ybL1l9lKgjDsCwiqxV9WXaTxMn/SAXKD1q2YkZ54815jarlRlnZ1H1Mk6SFnClN3T7n9PRwV1G1IkvZhlPvaSF9aNdxzEQFbN97T9HBUd6k9wAoOs4HNDY27iNgJxl/kNhYQSZe+rLpV' + 'IbcKyVaTsoxZ9MXiJUEYdtXbXrULIfSZVdehnPVcCW+pcka0w/hRn4VS1IeivTg1VGNdGBKXw1Ajwu/chRg78p9h+W7MDJN5U0iTo53cj+1e3wtZqgpUy6wsbRqfOJRc1667oNiqfecqv6AMCcXvKNhMxk889y+/IAP2TbFYeLOnJMffwG7J+AafMj9ogIaCzClqzVHQHJQFXiuuXMDFw2Jw4sIdYwG2O4QnIDgiGcDS8JAOhGq4JFL8byd6F0XSxpU8jOlNiw/gCfj+MJV1PmVbLHmSKE0LmEo31UNH38Tqta6/iAjipZo/0sCQzFa6nKDg//hM0DhMJZXkr63hYt9nCPSzvGMCv2IPI31U68qTQp0QHBGCYAl9T9CM3dTajC+bVy5g7O9winx/GMS0Hzow26Tf6dP/QAbxmn+w8Htfa/fdTcGe9B9tBkcycW6P+fvMhmpknTMwjI3lZ3REZIlxsPlyoCks1hpHJD9ht9jv64UR1MgnZpYctr5A0UejqrNfJfe4Et52FU5AcEQynVE9drZOVwaT80eax9L5Cqibiy5EdwechSl+uZ09haxpfjfmLfx9QMN3byWk7pOeW+BFyFDdj7Wt' + 'hu1bpxH/GVLpHQvZz2FrNTfgqyVuQI/7lgf2wDECWnoLAvXhFtI8nfPYSGv7UGUMYhz/J8QIdfV9QMtx+l/TSm2qZhbaopBin181SSPshOLshHw9xQfDswJaNmgEPOIFqL+ebE2sCxn6gIvi6b67lLW5nFJ3x0+jeNm8lfA5e8zjMuUM260mJMdPzhKTMnl+Fyns6y6nCavC1rn2mVTR+F2JjL+6uFUahZp2+xfditsb6FiGNi9/tfZBP4/xNs2K0xEPpbu341wKL+7VFMxNEegwEO3Nfxq5oedd5V9C1YHu3kpVwTshtvL1U1/5ThSADMG0bRiIdh684V/bZSmROy0l6JdacYHCcYF/HOLXpVQuUsXLXFMSS/n3pr7vnCgdnnIufSHy9W7OFw2bgdyn5g6bggUctJQbHnEvYjxJ1zMh5Fz6Qvn33MuOen+Lug9gjpiDGgEPtkZHTM8NjolbI6mShVhPsnqVjMK1cgUzVENC1bjphO/zpQEtGzQCHnGMV6Ziaq50GAv/GfwG49gTEjW6nU1qfG3+ydRMF4+G7WVQZSPmoC5SiAN3LVwGIpOJiwH0/gtpHsD42r2K7YJZkUxOOuyYW2e+' + 'sQ3wgn+/lqlqaSea1Pja4eeGidzT1f8ugS4aKx+lU9H7rZDW66DKGBrFQ7I0MQ45FgT33yy5eCemJBxpURifAnU1E8zqr3xeZPKln8hMTvokfSseSJ9fWttk1xirR0xIefSnofInCkAVc9qDKpvrrjSXhnloYhxyUUg40qIwIwTwr2U3/XL2hR0GAj46a0S6Z4WIw85u3XNmqJP3zHCs/9TSTim17anfOFYyFHDqamwHw0GMDlpKgyvLsi9WNbrNBLRs0Ah42QoG7lq4DEQ7DzshH0h2yPnlCVjDiRLu3pjRSznNv4sBWTl7KSBy9Bvgh8BAkxPhaN6tJumIR8qjn04UDIScZ4W71f9VHbfz2FOgykbRXVykDc1gIMeH/jRvhLdtzxXD+1fe/aD8oSHkzkuNe2CWAS09msZCrSmKLGQIddi9EPCvFLNXxup7g3SsTWMh2JpFFjLtqWcJxxmyP/dsJLvzKLwGxmLVJpEsCPI84l7EeJKzZrl4KD9vTzm9wIyPnp1oM/1PORewnnn0N1k94G+ywIwQ1oh4QbHRS9oZsm7uMhOdsLSUh2Z12T4vglk3dxmHwFiQ6ax4PUZhdfGCfgP/bIcJ' + 'lF3AqDU+uH9FFvllirW5Jj+Vc5h+sCDvuFUzC21RSDEq5qkbVCvLQWMx5BPGFgR5QI+OgYDTEaDv81FhwyVQOtBmIvm9lXDViHbZog1LjUmlUzE1VzoMi+Fo02TfkcQh9BsJ5/UKL48SsJsPJMGhLdpJzCypWT3EH1w0Vj5Xpr9U0U82qFaLgq983+BD9kGa6momhclD+Lzl3L+01+kdK7J63d55nQUga0Q8rtbmq217rpHJ9hvoRT64aKx8rlFjEce2UyLjMqTSPBSRuamS0I+1mC4DEcfKcKxkKODJ1NiJW8KWD1X8xXZCPpDsje/Xb/BQft6ecmc9z0XweozC6kqgYFSUH1yxWBD7W7De/Zxe/qHjvJrGk27dS0rcgAPrdBgI+OixDdIUXsG3KIWaIii8n3NQFylEJwoGQk69zNOXKu30Mxwr9gWZd+QKZqiGJVAwKkqBLtbdio2gpwN3R8UV+HqXDpt7MCPqqWAaxXi346o6c/utpg+2mTEequWXAAAAAAAAAAAxDvGdYgS09CKTcaZE22RVDeyvWRqWB5JcpJeLuKYklhwrGQo4dTU2QaKVtYLNYCwyedzBZCYnfcGhlKqfdkJx' + 'E52AOybf0KGuUcTUQegwFtgT+kStZd/BrAvyvEXU0hMjvmqSRsUV2UnXTQiSPc84nQUDISfQZucvf97/Xk1jx6R+KgFVJH0HmbFv8S+ov+1GYdQ5jJcqr9/Qu8ijP5VC3KeWlKUdBsuwIOu2faHnJboPBWNpbao05PGkgNX3bKfEOONOlRDq95OegSQ7ZPL8je+uRgctJc8sCPOjWG/wTtelY3WzzzpWIMlHzkDnhlBD+KPdhvGCKVaLeV6sammHgAMBHx27Il31NhLT9xReAxifddowDew8lXDbnDcgyfO7Ih5Xa3PbuHL2UkDk9TbdRDviUYiryKriH/442bNXqP1Dym7n5PEXyqNhS4mkfuz+NOcy4cZinoN0LEMbmbHUzzoWr4PC1mqq5agESZDpHCYnHXZMo71fkcS3TD9YEPl8bdBF+EGixn8a/Rn+YzFPyPlXI42YnOmnCQddUwbujlX8VAKqSPoOSPpWPJAjvrRl376rylI/dmyHfSLYvOHuzE0784XgReO+u2mzYRVzPhDqrWcg/UMots6xDnHl3Cq9zETvZzfgt1I/FY6kErCNmJx0xS22zmGb61mZK5Rd6Ios78oJd29M' + 'o71rjVt+N4TrRz2xy12JMMP7osKbSqB0nCgYFSXOF2toMxHy0MQ45F/Tute+hLcf/G7RWuX6gJs2zbARbF7+dymRhEdSCVjIopBwuVlgRghTEg66pgzBAToMBHx01ohpaR4KxtLaSWhz20l05utHUXqDiv30BZnJWkrNM7TiH5lgRslPwDSX8OarkujRy46iM1TH9WY4VvHZPuFwr3uuTWFr0nvCKuZ8krOaEDl6g3CryLMwS46YkL+WcodjCwKyW2fWB7b8bhXQMcOXzlU/5ha6WwGwBrUlqJut5ilucMhqH1Jdd9NDW24QNXBXPfoLZg77Khf8lat2Mnqel2NL9kutnWRiRYv18YMMrtvD90jFyPVCZpEx/5UEShzcSLDLiSli3zz4uGawueII6TDBNaFPs/BhGnZ8jSYF8hwWATbWtxki/sxUnjcIlDilkH2LC12jjlgD1JxaW8yc6m88vO2uJG07c//l0rh+D94i7c5eVKuxyoGF7B3n+I/oBWG5rV4ahwE1oIwvKtvWZc7MdleAtaeC9YNYPtyKLu3kez/J2Vw1Br7nD4O+ER1sTgXupgO5CVk2dBAQPIG0gJ/eXSxptgJ9DHdK' + 'OZCA19XIeVMJ1B4WSHQGtM3WOxgmUF5f+Z3C9JsCmOic0FQKlDy2f7yoS3+JHxfFcj0ds7eN8qZ4qm5x5ztPLhQz5pmgcWcNhPIb5FRiB4KY3zMntNIPL/BJ3OLTdp5c22xgGZZW63pkh0ayB4tHgzLNI1mNy63PHqSVW/DH2oXpoUNAG51Gtf2Spdm77CG4yBOMeQ4Ljhsu4AuabXulYvhXEriTt/H86yj+2AvqlJ1WSmXrikDqTGyZiOhHSigjRTWJixIdjy2r2MAyMazL9Loukcq5hny9eWC+Pe+OJjoMEal3YC/W8MtQ4a0WyTUn6uIulANf/YkoZtEvXeLOGv8bGEGrm/OQn5M53oz+DUOWRyfIxIoL91JFAsaqrlMcm5xe86wQtBNPovpJQqsypT8WWmLlURIrx0FI2nbm49eSSEDl5GSyp9NyrkPWl4TaIztyoQXhGoakigSRSUGmOLS2hSXJ3nhl3eq6rKbPgAIKl3PCULa9iMKE/7tevTOTi6DfRyyPak4q72y3TZUcMkJ5g3IqMY1Bc/fN/784m7IHTAr5OCwCbIpqDwskOgNab9rlPF+Ikx/Gi5iWflOKw0T/WccaqOY5' + '4vzgzkOekimiDN4kedjNQBnon6LI69jp9Ea7z/OYJwxDs1M+IoTkVdgvDc2OlFBGUQZvErJs6CDnOVeva8VCbQgezlpAwW+gOxk9T8W/q3t/5mSI3xdNQg6YFO9wWATYgTeshXw518axczJE4YWoIWlcP4lvEfhn9s8GV+Pv9SQaq/J20Clj1S2jZk51uR5eAom9mBB30iiQwf199BNgjzxVN7b9k6kXqhIQfjkZouAGhtq1MJlreNqmsFWe44Juw04v91YIWodtU1ikT/9BN/xYdZWzWUisfKUJXMfV9n77FH9si3VKwL/rJquR3az5aJbvxWekkXPKmjHhHnxcM7vkQYaxMxWpDdt5O2iav+RwtKArp/ogjuR6OntzB/lRjOzVvhSjaCLu7Um5I7FE2Rdwi024s9wxYIghnydl/tOz+o/c8fJ6CZELLTH8pgmbD1LEo3jtbcxQzL9eutmBNGvVghF/ZipPlM6aUNT92d8rJbz7RSB1JmfEK2YfSfy/SSQg/HIyWd0DQ23UGMK7PB9uRRf4crORoIVjvGmvH2jUPqS67ruGtgHK0EwItWkUrJTKywmAyZhUw9hzmjc4ZCb+xcAtusrC' + '3qnXeL4NOz4ED2ctIO65UOWw6jd7spBF8wqxNsu0JWBiAZwHNxIs++hrkwwTKC+hzBzrVC7lN0tTj9KKohs6CBthIjrYnArBNsJEdK0lFJ96I9Pp90ydBr4h9ueZaMXtz1+GgDYnjHf3BdYb61qcME0rR9FS3OCNX557/cI07Pgkd3hYPc0Y6oZ7pnxEFdWqTOGXnVppiZkAAAAAAAAAAOxk9CEzxpbxtXxVacFrEXHBx5JvRn+Ir2VNlv4PPi6XFfk21ajEDhm4pyxSqfGulalRfaoh2xncWNJxBPoY7pRZGKFI8q2HgFzdFina9lfEgnTBUWT7bPrR+xPbxuBW8n1v2RDPYJ9qtj84vdmpqk09n+f69SbAA3S7xwaHFJne32MHNLa4Uio60+0DzQrCb/reryCDwCPUwA1CI07K4buFOMuoXNdulsQCJQ5uJFjrR7w0EwJqXQWv16cfEUJypJeN94TMP2LjuW38HqFEx4Ehss85FZbIrjGOTo2VCRbzzpVWzD6S5WM4WlCb3X0QRzWBKaC156+j5vOH42NwK3ngdV1WU+lAAXvpA6X/+fQSErU8LJDoDHUzB/MVhX7E24+vuGoMYdMe' + '2eXdgYYhOVJ3+KrSn9Yi4iW9qBQ1eHH+dXEXSo+h8MoTf+xgmF1lYTBEnsGdvH/npUDU3UH0zyzcIGrgrnrpFluRHNDi2lWosjBfkPlHEx00S/nsvVLGt10XxmXSQz7QGCJP7sBesf2eWemShEtkV5pWjr+kpd0Ho8YOaHFtpFR+LLTE16IkVoexdjBMoLy+QTrupjLzNn2ZFeNrvGdmO0DwPuo6Rl9pHC0ow+CwCK1OaCoFSh5bsQXFt2EoW9BE4b+NGltcKRXywGF6wwFMdLf16PHRHMNZY8tMSz+nRe+dGoRGnInfa+M2MIJLK/s91fR09uYO76L1jGuD+y1OGEZ25F8K3zQRIHgfdR0jobq9Ypszgap+0a4dd1MZ9xuw/tHIDaMumoRVCQg/koJRcCmsAWNVV6cOp8lpRVGDHQSOZWgmBNS6ChH2UfiIKrdJ133JbvZ5PYrvJ5n1KwQtzUju8LB6hzDJIvGi7Q1Uc5JhQvHTL9CXx0pnTShq8OLhgP18yXSMvtJxfnBnr09JmpOCkKns0duziOOykzRN0XInNBWMJQ+j1g'); //==
   // Variables
+  let sigma, N, h
 
-
-  let sigma, N, h; // 64bit tools
-
+  // 64bit tools
   function get8(x, i) {
-    return x[i >> 2] >> ((i & 3) << 3) & 0xff;
-  } // 512bit tools
-
+    return (x[i >> 2] >> ((i & 3) << 3)) & 0xff
+  }
 
+  // 512bit tools
   function add512(x, y) {
-    let CF = 0,
-        w0,
-        w1;
-
+    let CF = 0, w0, w1
     for (let i = 0; i < 16; i++) {
-      w0 = (x[i] & 0xffff) + (y[i] & 0xffff) + (CF || 0);
-      w1 = (x[i] >>> 16) + (y[i] >>> 16) + (w0 >>> 16);
-      x[i] = w0 & 0xffff | w1 << 16;
-      CF = w1 >>> 16;
+      w0 = (x[i] & 0xffff) + (y[i] & 0xffff) + (CF || 0)
+      w1 = (x[i] >>> 16) + (y[i] >>> 16) + (w0 >>> 16)
+      x[i] = (w0 & 0xffff) | (w1 << 16)
+      CF = (w1 >>> 16)
     }
   }
 
   function get512(d) {
-    return new Int32Array(d.buffer, d.byteOffset, 16);
+    return new Int32Array(d.buffer, d.byteOffset, 16)
   }
 
+
   function copy512(r, d) {
-    for (let i = 0; i < 16; i++) {
-      r[i] = d[i];
-    }
+    for (let i = 0; i < 16; i++) {r[i] = d[i]}
   }
 
   function new512() {
-    return new Int32Array(16);
-  } // Core private algorithms
-
+    return new Int32Array(16)
+  }
 
+  // Core private algorithms
   function xor512(x, y) {
-    for (let i = 0; i < 16; i++) {
-      x[i] = x[i] ^ y[i];
-    }
+    for (let i = 0; i < 16; i++) {x[i] = x[i] ^ y[i]}
   }
 
-  const r = new512();
 
+  const r = new512()
   function XLPS(x, y) {
-    copy512(r, x);
-    xor512(r, y);
-
+    copy512(r, x)
+    xor512(r, y)
     for (let i = 0; i < 8; i++) {
-      var z0,
-          z1,
-          k = get8(r, i) << 1;
-      z0 = Ax[k];
-      z1 = Ax[k + 1];
-
+      var z0, z1, k = get8(r, i) << 1
+      z0 = Ax[k]
+      z1 = Ax[k + 1]
       for (let j = 1; j < 8; j++) {
-        k = (j << 9) + (get8(r, (j << 3) + i) << 1);
-        z0 = z0 ^ Ax[k];
-        z1 = z1 ^ Ax[k + 1];
+        k = (j << 9) + (get8(r, (j << 3) + i) << 1)
+        z0 = z0 ^ Ax[k]
+        z1 = z1 ^ Ax[k + 1]
       }
-
-      x[i << 1] = z0;
-      x[(i << 1) + 1] = z1;
+      x[i << 1] = z0
+      x[(i << 1) + 1] = z1
     }
   }
 
-  const data = new512(),
-        Ki = new512();
-
+  const data = new512(), Ki = new512()
   function g(h, N, m) {
-    let i;
-    copy512(data, h);
-    XLPS(data, N);
-    /* Starting E() */
+    let i
+
+    copy512(data, h)
+    XLPS(data, N)
 
-    copy512(Ki, data);
-    XLPS(data, m);
+    /* Starting E() */
+    copy512(Ki, data)
+    XLPS(data, m)
 
     for (i = 0; i < 11; i++) {
-      XLPS(Ki, C[i]);
-      XLPS(data, Ki);
+      XLPS(Ki, C[i])
+      XLPS(data, Ki)
     }
 
-    XLPS(Ki, C[11]);
-    xor512(data, Ki);
+    XLPS(Ki, C[11])
+    xor512(data, Ki)
     /* E() done */
 
-    xor512(h, data);
-    xor512(h, m);
-  } // Stages
-
+    xor512(h, data)
+    xor512(h, m)
+  }
 
+  // Stages
   function stage2(d) {
-    const m = get512(d);
-    g(h, N, m);
-    add512(N, buffer512);
-    add512(sigma, m);
+    const m = get512(d)
+    g(h, N, m)
+
+    add512(N, buffer512)
+    add512(sigma, m)
   }
 
   function stage3(d) {
-    const n = d.length;
+    const n = d.length
+    if (n > 63) {return}
 
-    if (n > 63) {
-      return;
-    }
+    const b0 = new Int32Array(16)
+    b0[0] = n << 3
 
-    const b0 = new Int32Array(16);
-    b0[0] = n << 3;
-    const b = new Uint8Array(64);
+    const b = new Uint8Array(64)
+    for (let i = 0; i < n; i++) {b[i] = d[i]}
+    b[n] = 0x01
 
-    for (let i = 0; i < n; i++) {
-      b[i] = d[i];
-    }
+    const m = get512(b), m0 = get512(b0)
+    g(h, N, m)
 
-    b[n] = 0x01;
-    const m = get512(b),
-          m0 = get512(b0);
-    g(h, N, m);
-    add512(N, m0);
-    add512(sigma, m);
-    g(h, buffer0, N);
-    g(h, buffer0, sigma);
+    add512(N, m0)
+    add512(sigma, m)
+
+    g(h, buffer0, N)
+    g(h, buffer0, sigma)
   }
 
   return function (data) {
-    // Cleanup
-    sigma = new512();
-    N = new512(); // Initial vector
 
-    h = new512();
+    // Cleanup
+    sigma = new512()
+    N = new512()
 
+    // Initial vector
+    h = new512()
     for (var i = 0; i < 16; i++) {
-      if (this.bitLength === 256) {
-        h[i] = 0x01010101;
-      }
-    } // Make data
+      if (this.bitLength === 256) {h[i] = 0x01010101}
+    }
 
+    // Make data
+    const d = new Uint8Array(buffer(data))
 
-    const d = new Uint8Array(buffer(data));
-    const n = d.length;
-    const r = n % 64,
-          q = (n - r) / 64;
+    const n = d.length
+    const r = n % 64, q = (n - r) / 64
 
-    for (var i = 0; i < q; i++) {
-      stage2.call(this, new Uint8Array(d.buffer, i * 64, 64));
-    }
+    for (var i = 0; i < q; i++) {stage2.call(this, new Uint8Array(d.buffer, i * 64, 64))}
 
-    stage3.call(this, new Uint8Array(d.buffer, q * 64, r));
-    let digest;
+    stage3.call(this, new Uint8Array(d.buffer, q * 64, r))
 
+    let digest
     if (this.bitLength === 256) {
-      digest = new Int32Array(8);
-
-      for (var i = 0; i < 8; i++) {
-        digest[i] = h[8 + i];
-      }
+      digest = new Int32Array(8)
+      for (var i = 0; i < 8; i++) {digest[i] = h[8 + i]}
     } else {
-      digest = new Int32Array(16);
-
-      for (var i = 0; i < 16; i++) {
-        digest[i] = h[i];
-      }
-    } // Swap hash for SignalCom
-
-
-    if (this.procreator === 'SC' || this.procreator === 'VN') {
-      return swap(digest.buffer);
+      digest = new Int32Array(16)
+      for (var i = 0; i < 16; i++) {digest[i] = h[i]}
     }
-
-    return digest.buffer;
-  };
+    // Swap hash for SignalCom
+    if (this.procreator === 'SC' || this.procreator === 'VN') {return swap(digest.buffer)}
+    return digest.buffer
+  }
 } // </editor-fold>
-();
+)()
+
 /**
  * Algorithm name GOST R 34.11-94<br><br>
  *
@@ -349,185 +350,183 @@ const digest2012 = function () // <editor-fold defaultstate="collapsed">
  * @param {(ArrayBuffer|TypedArray)} data Data
  * @returns {ArrayBuffer} Digest of data
  */
-
-
-const digest94 = function () // <editor-fold defaultstate="collapsed">
+const digest94 = (function () // <editor-fold defaultstate="collapsed">
 {
-  let C, H, M, Sum; // (i + 1 + 4(k - 1)) = 8i + k      i = 0-3, k = 1-8
+  let C, H, M, Sum
 
+  // (i + 1 + 4(k - 1)) = 8i + k      i = 0-3, k = 1-8
   function P(d) {
-    const K = new Uint8Array(32);
+    const K = new Uint8Array(32)
 
     for (let k = 0; k < 8; k++) {
-      K[4 * k] = d[k];
-      K[1 + 4 * k] = d[8 + k];
-      K[2 + 4 * k] = d[16 + k];
-      K[3 + 4 * k] = d[24 + k];
+      K[4 * k] = d[k]
+      K[1 + 4 * k] = d[8 + k]
+      K[2 + 4 * k] = d[16 + k]
+      K[3 + 4 * k] = d[24 + k]
     }
 
-    return K;
-  } //A (x) = (x0 ^ x1) || x3 || x2 || x1
-
+    return K
+  }
 
+  //A (x) = (x0 ^ x1) || x3 || x2 || x1
   function A(d) {
-    const a = new Uint8Array(8);
+    const a = new Uint8Array(8)
 
     for (let j = 0; j < 8; j++) {
-      a[j] = d[j] ^ d[j + 8];
+      a[j] = (d[j] ^ d[j + 8])
     }
 
-    arraycopy(d, 8, d, 0, 24);
-    arraycopy(a, 0, d, 24, 8);
-    return d;
-  } // (in:) n16||..||n1 ==> (out:) n1^n2^n3^n4^n13^n16||n16||..||n2
+    arraycopy(d, 8, d, 0, 24)
+    arraycopy(a, 0, d, 24, 8)
 
+    return d
+  }
 
+  // (in:) n16||..||n1 ==> (out:) n1^n2^n3^n4^n13^n16||n16||..||n2
   function fw(d) {
-    const wS = new Uint16Array(d.buffer, 0, 16);
-    const wS15 = wS[0] ^ wS[1] ^ wS[2] ^ wS[3] ^ wS[12] ^ wS[15];
-    arraycopy(wS, 1, wS, 0, 15);
-    wS[15] = wS15;
-  } //Encrypt function, ECB mode
-
+    const wS = new Uint16Array(d.buffer, 0, 16)
+    const wS15 = wS[0] ^ wS[1] ^ wS[2] ^ wS[3] ^ wS[12] ^ wS[15]
+    arraycopy(wS, 1, wS, 0, 15)
+    wS[15] = wS15
+  }
 
+  //Encrypt function, ECB mode
   function encrypt(key, s, sOff, d, dOff) {
-    const t = new Uint8Array(8);
-    arraycopy(d, dOff, t, 0, 8);
-    const r = new Uint8Array(this.cipher.encrypt(key, t));
-    arraycopy(r, 0, s, sOff, 8);
-  } // block processing
-
+    const t = new Uint8Array(8)
+    arraycopy(d, dOff, t, 0, 8)
+    const r = new Uint8Array(this.cipher.encrypt(key, t))
+    arraycopy(r, 0, s, sOff, 8)
+  }
 
+  // block processing
   function process(d, dOff) {
-    let S = new Uint8Array(32),
-        U = new Uint8Array(32),
-        V = new Uint8Array(32),
-        W = new Uint8Array(32);
-    arraycopy(d, dOff, M, 0, 32); //key step 1
-    // H = h3 || h2 || h1 || h0
-    // S = s3 || s2 || s1 || s0
+    let S = new Uint8Array(32), U = new Uint8Array(32),
+      V = new Uint8Array(32), W = new Uint8Array(32)
 
-    arraycopy(H, 0, U, 0, 32);
-    arraycopy(M, 0, V, 0, 32);
+    arraycopy(d, dOff, M, 0, 32)
 
-    for (var j = 0; j < 32; j++) {
-      W[j] = U[j] ^ V[j];
-    } // Encrypt GOST 28147-ECB
+    //key step 1
 
+    // H = h3 || h2 || h1 || h0
+    // S = s3 || s2 || s1 || s0
+    arraycopy(H, 0, U, 0, 32)
+    arraycopy(M, 0, V, 0, 32)
+    for (var j = 0; j < 32; j++) {
+      W[j] = (U[j] ^ V[j])
+    }
+    // Encrypt GOST 28147-ECB
+    encrypt.call(this, P(W), S, 0, H, 0) // s0 = EK0 [h0]
 
-    encrypt.call(this, P(W), S, 0, H, 0); // s0 = EK0 [h0]
     //keys step 2,3,4
-
     for (let i = 1; i < 4; i++) {
-      const tmpA = A(U);
-
+      const tmpA = A(U)
       for (var j = 0; j < 32; j++) {
-        U[j] = tmpA[j] ^ C[i][j];
+        U[j] = (tmpA[j] ^ C[i][j])
       }
-
-      V = A(A(V));
-
+      V = A(A(V))
       for (var j = 0; j < 32; j++) {
-        W[j] = U[j] ^ V[j];
-      } // Encrypt GOST 28147-ECB
-
-
-      encrypt.call(this, P(W), S, i * 8, H, i * 8); // si = EKi [hi]
-    } // x(M, H) = y61(H^y(M^y12(S)))
-
+        W[j] = (U[j] ^ V[j])
+      }
+      // Encrypt GOST 28147-ECB
+      encrypt.call(this, P(W), S, i * 8, H, i * 8) // si = EKi [hi]
+    }
 
+    // x(M, H) = y61(H^y(M^y12(S)))
     for (var n = 0; n < 12; n++) {
-      fw(S);
+      fw(S)
     }
-
     for (var n = 0; n < 32; n++) {
-      S[n] = S[n] ^ M[n];
+      S[n] = (S[n] ^ M[n])
     }
 
-    fw(S);
+    fw(S)
 
     for (var n = 0; n < 32; n++) {
-      S[n] = H[n] ^ S[n];
+      S[n] = (H[n] ^ S[n])
     }
-
     for (var n = 0; n < 61; n++) {
-      fw(S);
+      fw(S)
     }
-
-    arraycopy(S, 0, H, 0, H.length);
-  } //  256 bitsblock modul -> (Sum + a mod (2^256))
+    arraycopy(S, 0, H, 0, H.length)
+  }
 
 
+  //  256 bitsblock modul -> (Sum + a mod (2^256))
   function summing(d) {
-    let carry = 0;
-
+    let carry = 0
     for (let i = 0; i < Sum.length; i++) {
-      const sum = (Sum[i] & 0xff) + (d[i] & 0xff) + carry;
-      Sum[i] = sum;
-      carry = sum >>> 8;
+      const sum = (Sum[i] & 0xff) + (d[i] & 0xff) + carry
+
+      Sum[i] = sum
+
+      carry = sum >>> 8
     }
-  } // reset the chaining variables to the IV values.
+  }
 
+  // reset the chaining variables to the IV values.
+  const C2 = new Uint8Array([
+    0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
+    0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
+    0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF,
+    0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF,
+  ])
 
-  const C2 = new Uint8Array([0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF]);
   return function (data) {
-    // Reset buffers
-    H = new Uint8Array(32);
-    M = new Uint8Array(32);
-    Sum = new Uint8Array(32); // Reset IV value
 
-    C = new Array(4);
+    // Reset buffers
+    H = new Uint8Array(32)
+    M = new Uint8Array(32)
+    Sum = new Uint8Array(32)
 
-    for (var i = 0; i < 4; i++) {
-      C[i] = new Uint8Array(32);
-    }
+    // Reset IV value
+    C = new Array(4)
+    for (var i = 0; i < 4; i++) {C[i] = new Uint8Array(32)}
+    arraycopy(C2, 0, C[2], 0, C2.length)
 
-    arraycopy(C2, 0, C[2], 0, C2.length); // Make data
+    // Make data
+    const d = new Uint8Array(buffer(data))
 
-    const d = new Uint8Array(buffer(data));
-    const n = d.length;
-    const r = n % 32,
-          q = (n - r) / 32; // Proccess full blocks
+    const n = d.length
+    const r = n % 32, q = (n - r) / 32
 
+    // Proccess full blocks
     for (var i = 0; i < q; i++) {
-      var b = new Uint8Array(d.buffer, i * 32, 32);
-      summing.call(this, b); // calc sum M
-
-      process.call(this, b, 0);
-    } // load d the remadder with padding zero;
+      var b = new Uint8Array(d.buffer, i * 32, 32)
 
+      summing.call(this, b) // calc sum M
+      process.call(this, b, 0)
+    }
 
+    // load d the remadder with padding zero;
     if (r > 0) {
       var b = new Uint8Array(d.buffer, q * 32),
-          c = new Uint8Array(32);
-      arraycopy(b, 0, c, 0, r);
-      summing.call(this, c); // calc sum M
+        c = new Uint8Array(32)
+      arraycopy(b, 0, c, 0, r)
+      summing.call(this, c) // calc sum M
+      process.call(this, c, 0)
 
-      process.call(this, c, 0);
-    } // get length into L (byteCount * 8 = bitCount) in little endian.
-
-
-    let L = new Uint8Array(32),
-        n8 = n * 8,
-        k = 0;
+    }
 
+    // get length into L (byteCount * 8 = bitCount) in little endian.
+    let L = new Uint8Array(32), n8 = n * 8, k = 0
     while (n8 > 0) {
-      L[k++] = n8 & 0xff;
-      n8 = Math.floor(n8 / 256);
+      L[k++] = n8 & 0xff
+      n8 = Math.floor(n8 / 256)
     }
+    process.call(this, L, 0)
+    process.call(this, Sum, 0)
 
-    process.call(this, L, 0);
-    process.call(this, Sum, 0);
-    let h = H.buffer; // Swap hash for SignalCom
+    let h = H.buffer
 
-    if (this.procreator === 'SC') {
-      h = swap(h);
-    }
+    // Swap hash for SignalCom
+    if (this.procreator === 'SC') {h = swap(h)}
+
+    return h
+  }
 
-    return h;
-  };
 } // </editor-fold>
-();
+)()
+
 /**
  * Algorithm name SHA-1<br><br>
  *
@@ -541,139 +540,136 @@ const digest94 = function () // <editor-fold defaultstate="collapsed">
  * @param {(ArrayBuffer|TypedArray)} data Data
  * @returns {ArrayBuffer} Digest of data
  */
-
-
-const digestSHA1 = function () // <editor-fold defaultstate="collapsed">
+const digestSHA1 = (function () // <editor-fold defaultstate="collapsed">
 {
+
   // Create a buffer for each 80 word block.
-  let state,
-      block = new Uint32Array(80);
+  let state, block = new Uint32Array(80)
 
   function common(a, e, w, k, f) {
-    return f + e + w + k + (a << 5 | a >>> 27) >>> 0;
+    return (f + e + w + k + ((a << 5) | (a >>> 27))) >>> 0
   }
 
   function f1(a, b, c, d, e, w) {
-    return common(a, e, w, 0x5A827999, d ^ b & (c ^ d));
+    return common(a, e, w, 0x5A827999, d ^ (b & (c ^ d)))
   }
 
   function f2(a, b, c, d, e, w) {
-    return common(a, e, w, 0x6ED9EBA1, b ^ c ^ d);
+    return common(a, e, w, 0x6ED9EBA1, b ^ c ^ d)
   }
 
   function f3(a, b, c, d, e, w) {
-    return common(a, e, w, 0x8F1BBCDC, b & c | d & (b | c));
+    return common(a, e, w, 0x8F1BBCDC, (b & c) | (d & (b | c)))
   }
 
   function f4(a, b, c, d, e, w) {
-    return common(a, e, w, 0xCA62C1D6, b ^ c ^ d);
+    return common(a, e, w, 0xCA62C1D6, b ^ c ^ d)
   }
 
   function cycle(state, block) {
     let a = state[0],
-        b = state[1],
-        c = state[2],
-        d = state[3],
-        e = state[4]; // Partially unroll loops so we don't have to shift variables.
-
-    let fn = f1;
+      b = state[1],
+      c = state[2],
+      d = state[3],
+      e = state[4]
 
+    // Partially unroll loops so we don't have to shift variables.
+    let fn = f1
     for (let i = 0; i < 80; i += 5) {
       if (i === 20) {
-        fn = f2;
+        fn = f2
       } else if (i === 40) {
-        fn = f3;
+        fn = f3
       } else if (i === 60) {
-        fn = f4;
+        fn = f4
       }
-
-      e = fn(a, b, c, d, e, block[i]);
-      b = (b << 30 | b >>> 2) >>> 0;
-      d = fn(e, a, b, c, d, block[i + 1]);
-      a = (a << 30 | a >>> 2) >>> 0;
-      c = fn(d, e, a, b, c, block[i + 2]);
-      e = (e << 30 | e >>> 2) >>> 0;
-      b = fn(c, d, e, a, b, block[i + 3]);
-      d = (d << 30 | d >>> 2) >>> 0;
-      a = fn(b, c, d, e, a, block[i + 4]);
-      c = (c << 30 | c >>> 2) >>> 0;
+      e = fn(a, b, c, d, e, block[i])
+      b = ((b << 30) | (b >>> 2)) >>> 0
+      d = fn(e, a, b, c, d, block[i + 1])
+      a = ((a << 30) | (a >>> 2)) >>> 0
+      c = fn(d, e, a, b, c, block[i + 2])
+      e = ((e << 30) | (e >>> 2)) >>> 0
+      b = fn(c, d, e, a, b, block[i + 3])
+      d = ((d << 30) | (d >>> 2)) >>> 0
+      a = fn(b, c, d, e, a, block[i + 4])
+      c = ((c << 30) | (c >>> 2)) >>> 0
     }
+    state[0] += a
+    state[1] += b
+    state[2] += c
+    state[3] += d
+    state[4] += e
+  }
 
-    state[0] += a;
-    state[1] += b;
-    state[2] += c;
-    state[3] += d;
-    state[4] += e;
-  } // Swap bytes for 32bits word
-
-
+  // Swap bytes for 32bits word
   function swap32(b) {
-    return (b & 0xff) << 24 | (b & 0xff00) << 8 | b >> 8 & 0xff00 | b >> 24 & 0xff;
-  } // input is a Uint8Array bitstream of the data
-
+    return ((b & 0xff) << 24)
+            | ((b & 0xff00) << 8)
+            | ((b >> 8) & 0xff00)
+            | ((b >> 24) & 0xff)
+  }
 
+  // input is a Uint8Array bitstream of the data
   return function (data) {
-    const d = new Uint8Array(buffer(data)),
-          dlen = d.length; // Pad the input string length.
-
-    let len = dlen + 9;
+    const d = new Uint8Array(buffer(data)), dlen = d.length
 
+    // Pad the input string length.
+    let len = dlen + 9
     if (len % 64) {
-      len += 64 - len % 64;
+      len += 64 - (len % 64)
     }
 
-    state = new Uint32Array(5);
-    state[0] = 0x67452301;
-    state[1] = 0xefcdab89;
-    state[2] = 0x98badcfe;
-    state[3] = 0x10325476;
-    state[4] = 0xc3d2e1f0;
+    state = new Uint32Array(5)
+    state[0] = 0x67452301
+    state[1] = 0xefcdab89
+    state[2] = 0x98badcfe
+    state[3] = 0x10325476
+    state[4] = 0xc3d2e1f0
 
     for (let ofs = 0; ofs < len; ofs += 64) {
+
       // Copy input to block and write padding as needed
       for (var i = 0; i < 64; i++) {
         let b = 0,
-            o = ofs + i;
-
+          o = ofs + i
         if (o < dlen) {
-          b = d[o];
+          b = d[o]
         } else if (o === dlen) {
-          b = 0x80;
+          b = 0x80
         } else {
           // Write original bit length as a 64bit big-endian integer to the end.
-          const x = len - o - 1;
-
+          const x = len - o - 1
           if (x >= 0 && x < 4) {
-            b = dlen << 3 >>> x * 8 & 0xff;
+            b = (dlen << 3 >>> (x * 8)) & 0xff
           }
-        } // Interpret the input bytes as big-endian per the spec
-
+        }
 
+        // Interpret the input bytes as big-endian per the spec
         if (i % 4 === 0) {
-          block[i >> 2] = b << 24;
+          block[i >> 2] = b << 24
         } else {
-          block[i >> 2] |= b << (3 - i % 4) * 8;
+          block[i >> 2] |= b << ((3 - (i % 4)) * 8)
         }
-      } // Extend the block
-
+      }
 
+      // Extend the block
       for (var i = 16; i < 80; i++) {
-        const w = block[i - 3] ^ block[i - 8] ^ block[i - 14] ^ block[i - 16];
-        block[i] = w << 1 | w >>> 31;
+        const w = block[i - 3] ^ block[i - 8] ^ block[i - 14] ^ block[i - 16]
+        block[i] = (w << 1) | (w >>> 31)
       }
 
-      cycle(state, block);
-    } // Swap the bytes around since they are big endian internally
-
+      cycle(state, block)
 
-    for (var i = 0; i < 5; i++) {
-      state[i] = swap32(state[i]);
     }
 
-    return state.buffer;
-  };
+    // Swap the bytes around since they are big endian internally
+    for (var i = 0; i < 5; i++) {state[i] = swap32(state[i])}
+    return state.buffer
+  }
+
 } // </editor-fold>
-();
+)()
+
 /**
  * Algorithm name GOST R 34.11-HMAC<br><br>
  *
@@ -684,42 +680,32 @@ const digestSHA1 = function () // <editor-fold defaultstate="collapsed">
  * @param {ArrayBuffer} key The key for HMAC.
  * @param {Hash} data Data
  */
-
-
 function signHMAC(key, data) // <editor-fold defaultstate="collapsed">
 {
   // GOST R 34.11-94 - B=32b, L=32b
   // GOST R 34.11-256 - B=64b, L=32b
   // GOST R 34.11-512 - B=64b, L=64b
-  var b = this.digest === digest94 ? 32 : 64,
-      l = this.bitLength / 8,
-      k = buffer(key),
-      d = buffer(data),
-      k0;
-
-  if (k.byteLength === b) {
-    k0 = new Uint8Array(k);
-  } else {
-    var k0 = new Uint8Array(b);
-
+  var b = (this.digest === digest94) ? 32 : 64,
+    l = this.bitLength / 8,
+    k = buffer(key),
+    d = buffer(data), k0
+  if (k.byteLength === b) {k0 = new Uint8Array(k)} else {
+    var k0 = new Uint8Array(b)
     if (k.byteLength > b) {
-      k0.set(new Uint8Array(this.digest(k)));
+      k0.set(new Uint8Array(this.digest(k)))
     } else {
-      k0.set(new Uint8Array(k));
+      k0.set(new Uint8Array(k))
     }
   }
-
   const s0 = new Uint8Array(b + d.byteLength),
-        s1 = new Uint8Array(b + l);
-
+    s1 = new Uint8Array(b + l)
   for (let i = 0; i < b; i++) {
-    s0[i] = k0[i] ^ 0x36;
-    s1[i] = k0[i] ^ 0x5C;
+    s0[i] = k0[i] ^ 0x36
+    s1[i] = k0[i] ^ 0x5C
   }
-
-  s0.set(new Uint8Array(d), b);
-  s1.set(new Uint8Array(this.digest(s0)), b);
-  return this.digest(s1);
+  s0.set(new Uint8Array(d), b)
+  s1.set(new Uint8Array(this.digest(s0)), b)
+  return this.digest(s1)
 } // </editor-fold>
 
 /**
@@ -735,26 +721,18 @@ function signHMAC(key, data) // <editor-fold defaultstate="collapsed">
  * @param {(ArrayBuffer|TypedArray)} data Data
  * @returns {boolean} HMAC verified = true
  */
-
-
 function verifyHMAC(key, signature, data) // <editor-fold defaultstate="collapsed">
 {
   const hmac = new Uint8Array(this.sign(key, data)),
-        test = new Uint8Array(signature);
-
-  if (hmac.length !== test.length) {
-    return false;
-  }
-
+    test = new Uint8Array(signature)
+  if (hmac.length !== test.length) {return false}
   for (let i = 0, n = hmac.length; i < n; i++) {
-    if (hmac[i] !== test[i]) {
-      return false;
-    }
+    if (hmac[i] !== test[i]) {return false}
   }
-
-  return true;
+  return true
 } // </editor-fold>
 
+
 /**
  * Algorithm name GOST R 34.11-KDF<br><br>
  *
@@ -765,11 +743,9 @@ function verifyHMAC(key, signature, data) // <editor-fold defaultstate="collapse
  * @instance
  * @returns {ArrayBuffer} Generated key
  */
-
-
 function generateKey() // <editor-fold defaultstate="collapsed">
 {
-  return getSeed(this.bitLength).buffer;
+  return getSeed(this.bitLength).buffer
 } // </editor-fold>
 
 /**
@@ -787,105 +763,68 @@ function generateKey() // <editor-fold defaultstate="collapsed">
  * @param {number} length output bit-length
  * @returns {ArrayBuffer} result
  */
-
-
 function deriveBitsPFXKDF(baseKey, length) // <editor-fold defaultstate="collapsed">
 {
-  if (length % 8 > 0) {
-    throw new DataError('Length must multiple of 8');
-  }
-
-  const u = this.bitLength / 8,
-        v = this.digest === digest94 ? 32 : 64,
-        n = length / 8,
-        r = this.iterations; //   1.  Construct a string, D (the "diversifier"), by concatenating v/8
-  //       copies of ID.
-
-  const ID = this.diversifier,
-        D = new Uint8Array(v);
-
-  for (var i = 0; i < v; i++) {
-    D[i] = ID;
-  } //   2.  Concatenate copies of the salt together to create a string S of
+  if (length % 8 > 0) {throw new DataError('Length must multiple of 8')}
+  const u = this.bitLength / 8, v = (this.digest === digest94) ? 32 : 64,
+    n = length / 8, r = this.iterations
+    //   1.  Construct a string, D (the "diversifier"), by concatenating v/8
+    //       copies of ID.
+  const ID = this.diversifier, D = new Uint8Array(v)
+  for (var i = 0; i < v; i++) {D[i] = ID}
+  //   2.  Concatenate copies of the salt together to create a string S of
   //       length v(ceiling(s/v)) bits (the final copy of the salt may be
   //       truncated to create S).  Note that if the salt is the empty
   //       string, then so is S.
-
-
-  const S0 = new Uint8Array(buffer(this.salt)),
-        s = S0.length,
-        slen = v * Math.ceil(s / v),
-        S = new Uint8Array(slen);
-
-  for (var i = 0; i < slen; i++) {
-    S[i] = S0[i % s];
-  } //   3.  Concatenate copies of the password together to create a string P
+  const S0 = new Uint8Array(buffer(this.salt)), s = S0.length,
+    slen = v * Math.ceil(s / v), S = new Uint8Array(slen)
+  for (var i = 0; i < slen; i++) {S[i] = S0[i % s]}
+  //   3.  Concatenate copies of the password together to create a string P
   //       of length v(ceiling(p/v)) bits (the final copy of the password
   //       may be truncated to create P).  Note that if the password is the
   //       empty string, then so is P.
-
-
-  const P0 = new Uint8Array(buffer(baseKey)),
-        p = P0.length,
-        plen = v * Math.ceil(p / v),
-        P = new Uint8Array(plen);
-
-  for (var i = 0; i < plen; i++) {
-    P[i] = P0[i % p];
-  } //   4.  Set I=S||P to be the concatenation of S and P.
-
-
-  const I = new Uint8Array(slen + plen);
-  arraycopy(S, 0, I, 0, slen);
-  arraycopy(P, 0, I, slen, plen); //   5.  Set c=ceiling(n/u).
-
-  const c = Math.ceil(n / u); //   6.  For i=1, 2, ..., c, do the following:
-
-  const A = new Uint8Array(c * u);
-
+  const P0 = new Uint8Array(buffer(baseKey)), p = P0.length,
+    plen = v * Math.ceil(p / v), P = new Uint8Array(plen)
+  for (var i = 0; i < plen; i++) {P[i] = P0[i % p]}
+  //   4.  Set I=S||P to be the concatenation of S and P.
+  const I = new Uint8Array(slen + plen)
+  arraycopy(S, 0, I, 0, slen)
+  arraycopy(P, 0, I, slen, plen)
+  //   5.  Set c=ceiling(n/u).
+  const c = Math.ceil(n / u)
+  //   6.  For i=1, 2, ..., c, do the following:
+  const A = new Uint8Array(c * u)
   for (var i = 0; i < c; i++) {
     //  A.  Set A2=H^r(D||I). (i.e., the r-th hash of D||1,
     //      H(H(H(... H(D||I))))
-    let H = new Uint8Array(v + slen + plen);
-    arraycopy(D, 0, H, 0, v);
-    arraycopy(I, 0, H, v, slen + plen);
-
-    for (var j = 0; j < r; j++) {
-      H = new Uint8Array(this.digest(H));
-    }
-
-    arraycopy(H, 0, A, i * u, u); //  B.  Concatenate copies of Ai to create a string B of length v
+    let H = new Uint8Array(v + slen + plen)
+    arraycopy(D, 0, H, 0, v)
+    arraycopy(I, 0, H, v, slen + plen)
+    for (var j = 0; j < r; j++) {H = new Uint8Array(this.digest(H))}
+    arraycopy(H, 0, A, i * u, u)
+    //  B.  Concatenate copies of Ai to create a string B of length v
     //      bits (the final copy of Ai may be truncated to create B).
-
-    const B = new Uint8Array(v);
-
-    for (var j = 0; j < v; j++) {
-      B[j] = H[j % u];
-    } //  C.  Treating I as a concatenation I_0, I_1, ..., I_(k-1) of v-bit
+    const B = new Uint8Array(v)
+    for (var j = 0; j < v; j++) {B[j] = H[j % u]}
+    //  C.  Treating I as a concatenation I_0, I_1, ..., I_(k-1) of v-bit
     //      blocks, where k=ceiling(s/v)+ceiling(p/v), modify I by
     //      setting I_j=(I_j+B+1) mod 2^v for each j.
-
-
-    const k = (slen + plen) / v;
-
+    const k = (slen + plen) / v
     for (j = 0; j < k; j++) {
-      var cf = 1,
-          w;
-
+      var cf = 1, w
       for (let l = v - 1; l >= 0; --l) {
-        w = I[v * j + l] + B[l] + cf;
-        cf = w >>> 8;
-        I[v * j + l] = w & 0xff;
+        w = I[v * j + l] + B[l] + cf
+        cf = w >>> 8
+        I[v * j + l] = w & 0xff
       }
     }
-  } //   7.  Concatenate A_1, A_2, ..., A_c together to form a pseudorandom
+  }
+  //   7.  Concatenate A_1, A_2, ..., A_c together to form a pseudorandom
   //       bit string, A.
   //   8.  Use the first n bits of A as the output of this entire process.
-
-
-  const R = new Uint8Array(n);
-  arraycopy(A, 0, R, 0, n);
-  return R.buffer;
+  const R = new Uint8Array(n)
+  arraycopy(A, 0, R, 0, n)
+  return R.buffer
 } // </editor-fold>
 
 /**
@@ -902,40 +841,25 @@ function deriveBitsPFXKDF(baseKey, length) // <editor-fold defaultstate="collaps
  * @param {number} length output bit-length
  * @returns {ArrayBuffer} result
  */
-
-
 function deriveBitsKDF(baseKey, length) // <editor-fold defaultstate="collapsed">
 {
-  if (length % 8 > 0) {
-    throw new DataError('Length must be multiple of 8');
-  }
-
-  let rlen = length / 8,
-      label,
-      context = new Uint8Array(buffer(this.context)),
-      blen = this.bitLength / 8,
-      n = Math.ceil(rlen / blen);
-
-  if (this.label) {
-    label = new Uint8Array(buffer(this.label));
-  } else {
-    label = new Uint8Array([0x26, 0xBD, 0xB8, 0x78]);
-  }
-
-  const result = new Uint8Array(rlen);
-
+  if (length % 8 > 0) {throw new DataError('Length must be multiple of 8')}
+  let rlen = length / 8, label, context = new Uint8Array(buffer(this.context)),
+    blen = this.bitLength / 8, n = Math.ceil(rlen / blen)
+  if (this.label) {label = new Uint8Array(buffer(this.label))} else {label = new Uint8Array([0x26, 0xBD, 0xB8, 0x78])}
+  const result = new Uint8Array(rlen)
   for (let i = 0; i < n; i++) {
-    const data = new Uint8Array(label.length + context.length + 4);
-    data[0] = i + 1;
-    data.set(label, 1);
-    data[label.length + 1] = 0x00;
-    data.set(context, label.length + 2);
-    data[data.length - 2] = length >>> 8;
-    data[data.length - 1] = length & 0xff;
-    result.set(new Uint8Array(signHMAC.call(this, baseKey, data), 0, i < n - 1 ? blen : rlen - i * blen), i * blen);
+    const data = new Uint8Array(label.length + context.length + 4)
+    data[0] = i + 1
+    data.set(label, 1)
+    data[label.length + 1] = 0x00
+    data.set(context, label.length + 2)
+    data[data.length - 2] = length >>> 8
+    data[data.length - 1] = length & 0xff
+    result.set(new Uint8Array(signHMAC.call(this, baseKey, data), 0,
+      i < n - 1 ? blen : rlen - i * blen), i * blen)
   }
-
-  return result.buffer;
+  return result.buffer
 } // </editor-fold>
 
 /**
@@ -953,37 +877,22 @@ function deriveBitsKDF(baseKey, length) // <editor-fold defaultstate="collapsed"
  * @param {number} length output bit-length
  * @returns {ArrayBuffer} result
  */
-
-
 function deriveBitsPBKDF1(baseKey, length) // <editor-fold defaultstate="collapsed">
 {
-  if (length < this.bitLength / 2 || length % 8 > 0) {
-    throw new DataError(`Length must be more than ${this.bitLength / 2} bits and multiple of 8`);
-  }
-
-  let hLen = this.bitLength / 8,
-      dkLen = length / 8,
-      c = this.iterations,
-      P = new Uint8Array(buffer(baseKey)),
-      S = new Uint8Array(buffer(this.salt)),
-      slen = S.length,
-      plen = P.length,
-      T = new Uint8Array(plen + slen),
-      DK = new Uint8Array(dkLen);
-
-  if (dkLen > hLen) {
-    throw new DataError('Invalid parameters: Length value');
-  }
-
-  arraycopy(P, 0, T, 0, plen);
-  arraycopy(S, 0, T, plen, slen);
-
-  for (let i = 0; i < c; i++) {
-    T = new Uint8Array(this.digest(T));
-  }
-
-  arraycopy(T, 0, DK, 0, dkLen);
-  return DK.buffer;
+  if (length < this.bitLength / 2 || length % 8 > 0) {throw new DataError(`Length must be more than ${ this.bitLength / 2 } bits and multiple of 8`)}
+  let hLen = this.bitLength / 8, dkLen = length / 8,
+    c = this.iterations,
+    P = new Uint8Array(buffer(baseKey)),
+    S = new Uint8Array(buffer(this.salt)),
+    slen = S.length, plen = P.length,
+    T = new Uint8Array(plen + slen),
+    DK = new Uint8Array(dkLen)
+  if (dkLen > hLen) {throw new DataError('Invalid parameters: Length value')}
+  arraycopy(P, 0, T, 0, plen)
+  arraycopy(S, 0, T, plen, slen)
+  for (let i = 0; i < c; i++) {T = new Uint8Array(this.digest(T))}
+  arraycopy(T, 0, DK, 0, dkLen)
+  return DK.buffer
 } // </editor-fold>
 
 /**
@@ -1001,62 +910,41 @@ function deriveBitsPBKDF1(baseKey, length) // <editor-fold defaultstate="collaps
  * @param {number} length output bit-length
  * @returns {ArrayBuffer} result
  */
-
-
 function deriveBitsPBKDF2(baseKey, length) // <editor-fold defaultstate="collapsed">
 {
-  const diversifier = this.diversifier || 1; // For PKCS12 MAC required 3*length
-
-  length = length * diversifier;
-
-  if (length < this.bitLength / 2 || length % 8 > 0) {
-    throw new DataError(`Length must be more than ${this.bitLength / 2} bits and multiple of 8`);
-  }
-
-  const hLen = this.bitLength / 8,
-        dkLen = length / 8,
-        c = this.iterations,
-        P = new Uint8Array(buffer(baseKey)),
-        S = new Uint8Array(buffer(this.salt));
+  const diversifier = this.diversifier || 1 // For PKCS12 MAC required 3*length
+  length = length * diversifier
+  if (length < this.bitLength / 2 || length % 8 > 0) {throw new DataError(`Length must be more than ${ this.bitLength / 2 } bits and multiple of 8`)}
+  const hLen = this.bitLength / 8, dkLen = length / 8,
+    c = this.iterations,
+    P = new Uint8Array(buffer(baseKey)),
+    S = new Uint8Array(buffer(this.salt))
   const slen = S.byteLength,
-        data = new Uint8Array(slen + 4);
-  arraycopy(S, 0, data, 0, slen);
-
-  if (dkLen > (0xffffffff - 1) * 32) {
-    throw new DataError('Invalid parameters: Length value');
-  }
+    data = new Uint8Array(slen + 4)
+  arraycopy(S, 0, data, 0, slen)
 
+  if (dkLen > (0xffffffff - 1) * 32) {throw new DataError('Invalid parameters: Length value')}
   const n = Math.ceil(dkLen / hLen),
-        DK = new Uint8Array(dkLen);
-
+    DK = new Uint8Array(dkLen)
   for (let i = 1; i <= n; i++) {
-    data[slen] = i >>> 24 & 0xff;
-    data[slen + 1] = i >>> 16 & 0xff;
-    data[slen + 2] = i >>> 8 & 0xff;
-    data[slen + 3] = i & 0xff;
-    let U = new Uint8Array(signHMAC.call(this, P, data)),
-        Z = U;
+    data[slen] = i >>> 24 & 0xff
+    data[slen + 1] = i >>> 16 & 0xff
+    data[slen + 2] = i >>> 8 & 0xff
+    data[slen + 3] = i & 0xff
 
+    let U = new Uint8Array(signHMAC.call(this, P, data)), Z = U
     for (let j = 1; j < c; j++) {
-      U = new Uint8Array(signHMAC.call(this, P, U));
-
-      for (let k = 0; k < hLen; k++) {
-        Z[k] = U[k] ^ Z[k];
-      }
+      U = new Uint8Array(signHMAC.call(this, P, U))
+      for (let k = 0; k < hLen; k++) {Z[k] = U[k] ^ Z[k]}
     }
-
-    const ofs = (i - 1) * hLen;
-    arraycopy(Z, 0, DK, ofs, Math.min(hLen, dkLen - ofs));
+    const ofs = (i - 1) * hLen
+    arraycopy(Z, 0, DK, ofs, Math.min(hLen, dkLen - ofs))
   }
-
   if (diversifier > 1) {
-    const rLen = dkLen / diversifier,
-          R = new Uint8Array(rLen);
-    arraycopy(DK, dkLen - rLen, R, 0, rLen);
-    return R.buffer;
-  }
-
-  return DK.buffer;
+    const rLen = dkLen / diversifier, R = new Uint8Array(rLen)
+    arraycopy(DK, dkLen - rLen, R, 0, rLen)
+    return R.buffer
+  } return DK.buffer
 } // </editor-fold>
 
 /**
@@ -1074,82 +962,61 @@ function deriveBitsPBKDF2(baseKey, length) // <editor-fold defaultstate="collaps
  * @param {number} length output bit-length
  * @returns {ArrayBuffer} result
  */
-
-
 function deriveBitsCP(baseKey, length) {
-  if (length > this.bitLength || length % 8 > 0) {
-    throw new DataError(`Length can't be more than ${this.bitLength} bits and multiple of 8`);
-  } // GOST R 34.11-94 - B=32b, L=32b
+  if (length > this.bitLength || length % 8 > 0) {throw new DataError(`Length can't be more than ${ this.bitLength } bits and multiple of 8`)}
+  // GOST R 34.11-94 - B=32b, L=32b
   // GOST R 34.11-256 - B=64b, L=32b
   // GOST R 34.11-512 - B=64b, L=64b
-
-
-  let b = this.digest === digest94 ? 32 : 64,
-      l = this.bitLength / 8,
-      p = baseKey && baseKey.byteLength > 0 ? new Uint8Array(buffer(baseKey)) : false,
-      plen = p ? p.length : 0,
-      iterations = this.iterations,
-      salt = new Uint8Array(buffer(this.salt)),
-      slen = salt.length,
-      d = new Uint8Array(slen + plen);
-  arraycopy(salt, 0, d, 0, slen);
-
-  if (p) {
-    arraycopy(p, 0, d, slen, plen);
-  }
+  let b = (this.digest === digest94) ? 32 : 64,
+    l = this.bitLength / 8,
+    p = baseKey && baseKey.byteLength > 0 ? new Uint8Array(buffer(baseKey)) : false,
+    plen = p ? p.length : 0,
+    iterations = this.iterations,
+    salt = new Uint8Array(buffer(this.salt)),
+    slen = salt.length,
+    d = new Uint8Array(slen + plen)
+  arraycopy(salt, 0, d, 0, slen)
+  if (p) {arraycopy(p, 0, d, slen, plen)}
 
   let h = new Uint8Array(this.digest(d)),
-      k = new Uint8Array(b),
-      s0 = new Uint8Array(b),
-      s1 = new Uint8Array(b);
-  const c = 'DENEFH028.760246785.IUEFHWUIO.EF';
-
-  for (var i = 0; i < c.length; i++) {
-    k[i] = c.charCodeAt(i);
-  }
-
-  d = new Uint8Array(2 * (b + l));
+    k = new Uint8Array(b),
+    s0 = new Uint8Array(b),
+    s1 = new Uint8Array(b)
+  const c = 'DENEFH028.760246785.IUEFHWUIO.EF'
+  for (var i = 0; i < c.length; i++) {k[i] = c.charCodeAt(i)}
 
+  d = new Uint8Array(2 * (b + l))
   for (let j = 0; j < iterations; j++) {
     for (var i = 0; i < b; i++) {
-      s0[i] = k[i] ^ 0x36;
-      s1[i] = k[i] ^ 0x5C;
-      k[i] = 0;
+      s0[i] = k[i] ^ 0x36
+      s1[i] = k[i] ^ 0x5C
+      k[i] = 0
     }
-
-    arraycopy(s0, 0, d, 0, b);
-    arraycopy(h, 0, d, b, l);
-    arraycopy(s1, 0, d, b + l, b);
-    arraycopy(h, 0, d, b + l + b, l);
-    arraycopy(new Uint8Array(this.digest(d)), 0, k, 0, l);
+    arraycopy(s0, 0, d, 0, b)
+    arraycopy(h, 0, d, b, l)
+    arraycopy(s1, 0, d, b + l, b)
+    arraycopy(h, 0, d, b + l + b, l)
+    arraycopy(new Uint8Array(this.digest(d)), 0, k, 0, l)
   }
-
   for (var i = 0; i < l; i++) {
-    s0[i] = k[i] ^ 0x36;
-    s1[i] = k[i] ^ 0x5C;
-    k[i] = 0;
-  }
-
-  d = new Uint8Array(2 * l + slen + plen);
-  arraycopy(s0, 0, d, 0, l);
-  arraycopy(salt, 0, d, l, slen);
-  arraycopy(s1, 0, d, l + slen, l);
-
-  if (p) {
-    arraycopy(p, 0, d, l + slen + l, plen);
-  }
-
-  h = this.digest(this.digest(d));
-
-  if (length === this.bitLength) {
-    return h;
+    s0[i] = k[i] ^ 0x36
+    s1[i] = k[i] ^ 0x5C
+    k[i] = 0
   }
+  d = new Uint8Array(2 * l + slen + plen)
+  arraycopy(s0, 0, d, 0, l)
+  arraycopy(salt, 0, d, l, slen)
+  arraycopy(s1, 0, d, l + slen, l)
+  if (p) {arraycopy(p, 0, d, l + slen + l, plen)}
+  h = this.digest(this.digest(d))
+  if (length === this.bitLength) {return h}
+
+  const rlen = length / 8, r = new Uint8Array(rlen)
+  arraycopy(h, 0, r, 0, rlen)
+  return r.buffer
 
-  const rlen = length / 8,
-        r = new Uint8Array(rlen);
-  arraycopy(h, 0, r, 0, rlen);
-  return r.buffer;
 }
+
 /**
  * Algorithm name GOST R 34.11-KDF or GOST R 34.11-PBKDF2 or other<br><br>
  *
@@ -1161,11 +1028,9 @@ function deriveBitsCP(baseKey, length) {
  * @param {ArrayBuffer} baseKey
  * @returns {ArrayBuffer}
  */
-
-
 function deriveKey(baseKey) // <editor-fold defaultstate="collapsed">
 {
-  return this.deriveBits(baseKey, this.keySize * 8);
+  return this.deriveBits(baseKey, this.keySize * 8)
 } // </editor-fold>
 
 /**
@@ -1245,103 +1110,94 @@ function deriveKey(baseKey) // <editor-fold defaultstate="collapsed">
  * @class GostDigest
  * @param {AlgorithmIdentifier} algorithm WebCryptoAPI algorithm identifier
  */
-
-
 function GostDigest(algorithm) // <editor-fold defaultstate="collapsed">
 {
-  algorithm = algorithm || {};
-  this.name = `${algorithm.name || 'GOST R 34.10'}-${(algorithm.version || 2012) % 100}${(algorithm.version || 2012) > 1 ? `-${algorithm.length || 256}` : ''}${(algorithm.mode || 'HASH') !== 'HASH' ? `-${algorithm.mode}` : ''}${algorithm.procreator ? `/${algorithm.procreator}` : ''}${typeof algorithm.sBox === 'string' ? `/${algorithm.sBox}` : ''}`; // Algorithm procreator
-
-  this.procreator = algorithm.procreator; // Bit length
 
-  this.bitLength = algorithm.length || 256;
+  algorithm = algorithm || {}
 
-  switch (algorithm.version || 2012) {
-    case 1:
-      // SHA-1
-      this.digest = digestSHA1;
-      this.bitLength = 160;
-      break;
+  this.name = `${algorithm.name || 'GOST R 34.10' }-${ (algorithm.version || 2012) % 100
+  }${(algorithm.version || 2012) > 1 ? `-${ algorithm.length || 256}` : ''
+  }${((algorithm.mode || 'HASH') !== 'HASH') ? `-${ algorithm.mode}` : ''
+  }${algorithm.procreator ? `/${ algorithm.procreator}` : ''
+  }${typeof algorithm.sBox === 'string' ? `/${ algorithm.sBox}` : ''}`
 
-    case 1994:
-      this.digest = digest94; // Define chiper algorithm
+  // Algorithm procreator
+  this.procreator = algorithm.procreator
 
-      this.sBox = (algorithm.sBox || (algorithm.procreator === 'SC' ? 'D-SC' : 'D-A')).toUpperCase();
+  // Bit length
+  this.bitLength = algorithm.length || 256
 
-      if (!GostCipher) {
-        GostCipher = global.GostCipher;
-      }
+  switch (algorithm.version || 2012) {
+    case 1: // SHA-1
+      this.digest = digestSHA1
+      this.bitLength = 160
+      break
+    case 1994:
+      this.digest = digest94
+      // Define chiper algorithm
+      this.sBox = (algorithm.sBox || (algorithm.procreator === 'SC' ? 'D-SC' : 'D-A')).toUpperCase()
 
-      if (!GostCipher) {
-        throw new NotSupportedError('Object GostCipher not found');
-      }
+      if (!GostCipher) {GostCipher = global.GostCipher}
+      if (!GostCipher) {throw new NotSupportedError('Object GostCipher not found')}
 
       this.cipher = new GostCipher({
         name: 'GOST 28147',
         block: 'ECB',
         sBox: this.sBox,
-        procreator: this.procreator
-      });
-      break;
+        procreator: this.procreator,
+      })
 
+      break
     case 2012:
-      this.digest = digest2012;
-      break;
-
+      this.digest = digest2012
+      break
     default:
-      throw new NotSupportedError(`Algorithm version ${algorithm.version} not supported`);
-  } // Key size
-
+      throw new NotSupportedError(`Algorithm version ${ algorithm.version } not supported`)
+  }
 
-  this.keySize = algorithm.keySize || (algorithm.version <= 2 ? this.bitLength / 8 : 32);
+  // Key size
+  this.keySize = algorithm.keySize || (algorithm.version <= 2 ? this.bitLength / 8 : 32)
 
   switch (algorithm.mode || 'HASH') {
     case 'HASH':
-      break;
-
+      break
     case 'HMAC':
-      this.sign = signHMAC;
-      this.verify = verifyHMAC;
-      this.generateKey = generateKey;
-      break;
-
+      this.sign = signHMAC
+      this.verify = verifyHMAC
+      this.generateKey = generateKey
+      break
     case 'KDF':
-      this.deriveKey = deriveKey;
-      this.deriveBits = deriveBitsKDF;
-      this.label = algorithm.label;
-      this.context = algorithm.context;
-      break;
-
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsKDF
+      this.label = algorithm.label
+      this.context = algorithm.context
+      break
     case 'PBKDF2':
-      this.deriveKey = deriveKey;
-      this.deriveBits = deriveBitsPBKDF2;
-      this.generateKey = generateKey;
-      this.salt = algorithm.salt;
-      this.iterations = algorithm.iterations || 2000;
-      this.diversifier = algorithm.diversifier || 1;
-      break;
-
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsPBKDF2
+      this.generateKey = generateKey
+      this.salt = algorithm.salt
+      this.iterations = algorithm.iterations || 2000
+      this.diversifier = algorithm.diversifier || 1
+      break
     case 'PFXKDF':
-      this.deriveKey = deriveKey;
-      this.deriveBits = deriveBitsPFXKDF;
-      this.generateKey = generateKey;
-      this.salt = algorithm.salt;
-      this.iterations = algorithm.iterations || 2000;
-      this.diversifier = algorithm.diversifier || 1;
-      break;
-
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsPFXKDF
+      this.generateKey = generateKey
+      this.salt = algorithm.salt
+      this.iterations = algorithm.iterations || 2000
+      this.diversifier = algorithm.diversifier || 1
+      break
     case 'CPKDF':
-      this.deriveKey = deriveKey;
-      this.deriveBits = deriveBitsCP;
-      this.generateKey = generateKey;
-      this.salt = algorithm.salt;
-      this.iterations = algorithm.iterations || 2000;
-      break;
-
+      this.deriveKey = deriveKey
+      this.deriveBits = deriveBitsCP
+      this.generateKey = generateKey
+      this.salt = algorithm.salt
+      this.iterations = algorithm.iterations || 2000
+      break
     default:
-      throw new NotSupportedError(`Algorithm mode ${algorithm.mode} not supported`);
+      throw new NotSupportedError(`Algorithm mode ${ algorithm.mode } not supported`)
   }
 } // </editor-fold>
 
-
-module.exports = GostDigest;
\ No newline at end of file
+module.exports = GostDigest
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostEngine.js b/node_modules/gost-crypto/lib/gostEngine.js
index 537c0cc..3627648 100644
--- a/node_modules/gost-crypto/lib/gostEngine.js
+++ b/node_modules/gost-crypto/lib/gostEngine.js
@@ -29,46 +29,44 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const GostRandom = require('./gostRandom');
 
-const GostCipher = require('./gostCipher');
+const GostRandom = require('./gostRandom')
+const GostCipher = require('./gostCipher')
+const GostDigest = require('./gostDigest')
+const GostSign = require('./gostSign')
 
-const GostDigest = require('./gostDigest');
 
-const GostSign = require('./gostSign');
 /*
  * Engine definition base on normalized algorithm identifier
  *
- */
-// <editor-fold defaultstate="collapsed">
-// Define engine
+ */ // <editor-fold defaultstate="collapsed">
 
 
+// Define engine
 function defineEngine(method, algorithm) {
-  if (!algorithm) {
-    throw new (global.SyntaxError || Error)('Algorithm not defined');
-  }
+  if (!algorithm) {throw new (global.SyntaxError || Error)('Algorithm not defined')}
 
-  if (!algorithm.name) {
-    throw new (global.SyntaxError || Error)('Algorithm name not defined');
-  }
+  if (!algorithm.name) {throw new (global.SyntaxError || Error)('Algorithm name not defined')}
 
-  const name = algorithm.name,
-        mode = algorithm.mode;
+  const name = algorithm.name, mode = algorithm.mode
+  if ((name === 'GOST 28147' || name === 'GOST R 34.12' || name === 'RC2') && (method === 'generateKey' ||
+        (mode === 'MAC' && (method === 'sign' || method === 'verify')) ||
+        ((mode === 'KW' || mode === 'MASK') && (method === 'wrapKey' || method === 'unwrapKey')) ||
+        ((!mode || mode === 'ES') && (method === 'encrypt' || method === 'decrypt')))) {
+    return 'GostCipher'
 
-  if ((name === 'GOST 28147' || name === 'GOST R 34.12' || name === 'RC2') && (method === 'generateKey' || mode === 'MAC' && (method === 'sign' || method === 'verify') || (mode === 'KW' || mode === 'MASK') && (method === 'wrapKey' || method === 'unwrapKey') || (!mode || mode === 'ES') && (method === 'encrypt' || method === 'decrypt'))) {
-    return 'GostCipher';
-  }
+  } if ((name === 'GOST R 34.11' || name === 'SHA') && (method === 'digest' ||
+        (mode === 'HMAC' && (method === 'sign' || method === 'verify' || method === 'generateKey')) ||
+        ((mode === 'KDF' || mode === 'PBKDF2' || mode === 'PFXKDF' || mode === 'CPKDF') &&
+            (method === 'deriveKey' || method === 'deriveBits' || method === 'generateKey')))) {
+    return 'GostDigest'
 
-  if ((name === 'GOST R 34.11' || name === 'SHA') && (method === 'digest' || mode === 'HMAC' && (method === 'sign' || method === 'verify' || method === 'generateKey') || (mode === 'KDF' || mode === 'PBKDF2' || mode === 'PFXKDF' || mode === 'CPKDF') && (method === 'deriveKey' || method === 'deriveBits' || method === 'generateKey'))) {
-    return 'GostDigest';
-  }
-
-  if (name === 'GOST R 34.10' && (method === 'generateKey' || (!mode || mode === 'SIGN') && (method === 'sign' || method === 'verify') || mode === 'MASK' && (method === 'wrapKey' || method === 'unwrapKey') || mode === 'DH' && (method === 'deriveKey' || method === 'deriveBits'))) {
-    return 'GostSign';
-  }
-
-  throw new (global.NotSupportedError || Error)(`Algorithm ${name}-${mode} is not valid for ${method}`);
+  } if (name === 'GOST R 34.10' && (method === 'generateKey' ||
+        ((!mode || mode === 'SIGN') && (method === 'sign' || method === 'verify')) ||
+        (mode === 'MASK' && (method === 'wrapKey' || method === 'unwrapKey')) ||
+        (mode === 'DH' && (method === 'deriveKey' || method === 'deriveBits')))) {
+    return 'GostSign'
+  } throw new (global.NotSupportedError || Error)(`Algorithm ${ name }-${ mode } is not valid for ${ method}`)
 } // </editor-fold>
 
 /**
@@ -83,8 +81,6 @@ function defineEngine(method, algorithm) {
  *  </ul>
  * @namespace gostEngine
  */
-
-
 const gostEngine = {
   /**
      * gostEngine.execute(algorithm, method, args) Entry point to execution
@@ -105,14 +101,12 @@ const gostEngine = {
   execute: function (algorithm, method, args) // <editor-fold defaultstate="collapsed">
   {
     // Define engine for GOST algorithms
-    const engine = defineEngine(method, algorithm); // Create cipher
-
-    const cipher = this[`get${engine}`](algorithm); // Execute method
-
-    return cipher[method].apply(cipher, args);
-  },
-  // </editor-fold>
-
+    const engine = defineEngine(method, algorithm)
+    // Create cipher
+    const cipher = this[`get${ engine}`](algorithm)
+    // Execute method
+    return cipher[method].apply(cipher, args)
+  }, // </editor-fold>
   /**
      * gostEngine.getGostCipher(algorithm) returns GOST 28147 / GOST R 34.12 cipher instance<br><br>
      *
@@ -213,10 +207,8 @@ const gostEngine = {
      */
   getGostCipher: function (algorithm) // <editor-fold defaultstate="collapsed">
   {
-    return new (GostCipher || (GostCipher = global.GostCipher))(algorithm);
-  },
-  // </editor-fold>
-
+    return new (GostCipher || (GostCipher = global.GostCipher))(algorithm)
+  }, // </editor-fold>
   /**
      * gostEngine.getGostDigest(algorithm) returns GOST R 34.11 cipher instance<br><br>
      *
@@ -294,10 +286,8 @@ const gostEngine = {
      */
   getGostDigest: function (algorithm) // <editor-fold defaultstate="collapsed">
   {
-    return new (GostDigest || (GostDigest = global.GostDigest))(algorithm);
-  },
-  // </editor-fold>
-
+    return new (GostDigest || (GostDigest = global.GostDigest))(algorithm)
+  }, // </editor-fold>
   /**
      * gostEngine.getGostSign(algorithm) returns GOST R 34.10 cipher instance<br><br>
      *
@@ -373,15 +363,15 @@ const gostEngine = {
      */
   getGostSign: function (algorithm) // <editor-fold defaultstate="collapsed">
   {
-    return new (GostSign || (GostSign = global.GostSign))(algorithm);
-  } // </editor-fold>
+    return new (GostSign || (GostSign = global.GostSign))(algorithm)
+  }, // </editor-fold>
+}
 
-};
 /*
  * Worker method execution
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
+
 // Worker for gostCripto method execution
 // if (global.importScripts) {
 
@@ -396,21 +386,21 @@ const gostEngine = {
      * @name onmessage
      * @param {MessageEvent} event Message event with data {algorithm, method, args}
      */
-
 global.onmessage = function (event) {
   try {
     postMessage({
       id: event.data.id,
-      result: gostEngine.execute(event.data.algorithm, event.data.method, event.data.args)
-    });
+      result: gostEngine.execute(event.data.algorithm,
+        event.data.method, event.data.args),
+    })
   } catch (e) {
     postMessage({
       id: event.data.id,
-      error: e.message
-    });
+      error: e.message,
+    })
   }
-}; // }
+}
+// }
 // </editor-fold>
 
-
-module.exports = gostEngine;
\ No newline at end of file
+module.exports = gostEngine
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostEngineWorker.js b/node_modules/gost-crypto/lib/gostEngineWorker.js
index 67e4f6b..3bb96e9 100644
--- a/node_modules/gost-crypto/lib/gostEngineWorker.js
+++ b/node_modules/gost-crypto/lib/gostEngineWorker.js
@@ -32,7 +32,7 @@
  *
  */
 
-const GostRandom = require('./gostRandom')
+let GostRandom = require('./gostRandom')
 
 /*
  * Initial parameters and common algortithms of GOST 28147-89
diff --git a/node_modules/gost-crypto/lib/gostKeys.js b/node_modules/gost-crypto/lib/gostKeys.js
index 0087891..a0291fe 100644
--- a/node_modules/gost-crypto/lib/gostKeys.js
+++ b/node_modules/gost-crypto/lib/gostKeys.js
@@ -29,255 +29,199 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const gostCrypto = require('./gostCrypto');
 
-const GostASN1 = require('./gostASN1');
+const gostCrypto = require('./gostCrypto')
+const GostASN1 = require('./gostASN1')
+const GostCert = require('./gostCert')
+const GostCMS = require('./gostCMS')
 
-const GostCert = require('./gostCert');
-
-const GostCMS = require('./gostCMS');
 /*
  * Common tools and methods
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
+const Promise = global.Promise
+const Object = global.Object
+const CryptoOperationData = global.ArrayBuffer
+const Date = global.Date
 
-const Promise = global.Promise;
-const Object = global.Object;
-const CryptoOperationData = global.ArrayBuffer;
-const Date = global.Date;
-const subtle = gostCrypto.subtle;
-const asn1 = gostCrypto.asn1;
-const coding = gostCrypto.coding;
-const providers = gostCrypto.security.providers;
-const cert = gostCrypto.cert;
-const cms = gostCrypto.cms; // Expand javascript object
+const subtle = gostCrypto.subtle
+const asn1 = gostCrypto.asn1
+const coding = gostCrypto.coding
+const providers = gostCrypto.security.providers
+const cert = gostCrypto.cert
+const cms = gostCrypto.cms
 
+// Expand javascript object
 function expand() {
-  const r = {};
-
+  const r = {}
   for (let i = 0, n = arguments.length; i < n; i++) {
-    const item = arguments[i];
-
+    const item = arguments[i]
     if (typeof item === 'object') {
       for (const name in item) {
-        if (item.hasOwnProperty(name)) {
-          r[name] = item[name];
-        }
+        if (item.hasOwnProperty(name)) {r[name] = item[name]}
       }
     }
   }
-
-  return r;
+  return r
 }
 
 function defineProperty(object, name, descriptor, enumerable) {
-  if (typeof descriptor !== 'object') {
-    descriptor = {
-      value: descriptor
-    };
-  }
-
-  if (enumerable !== undefined) {
-    descriptor.enumerable = enumerable;
-  }
-
-  Object.defineProperty(object, name, descriptor);
+  if (typeof descriptor !== 'object') {descriptor = { value: descriptor }}
+  if (enumerable !== undefined) {descriptor.enumerable = enumerable}
+  Object.defineProperty(object, name, descriptor)
 }
 
 function defineProperties(object, properties, enumerable) {
-  for (const name in properties) {
-    defineProperty(object, name, properties[name], enumerable);
-  }
-} // Extend javascript class
-
+  for (const name in properties) {defineProperty(object, name, properties[name], enumerable)}
+}
 
+// Extend javascript class
 function extend(Super, Class, propertiesObject, propertiesClass) {
   // If constructor not defined
   if (typeof Class !== 'function') {
-    propertiesClass = propertiesObject;
-    propertiesObject = Class;
-
+    propertiesClass = propertiesObject
+    propertiesObject = Class
     Class = function () {
-      Super.apply(this, arguments);
-    };
-  } // Create prototype properties
-
-
+      Super.apply(this, arguments)
+    }
+  }
+  // Create prototype properties
   Class.prototype = Object.create(Super.prototype, {
     constructor: {
-      value: Class
+      value: Class,
     },
     superclass: {
-      value: Super.prototype
-    }
-  });
-
-  if (propertiesObject) {
-    defineProperties(Class.prototype, propertiesObject, true);
-  } // Inherites super class properties
-
-
+      value: Super.prototype,
+    },
+  })
+  if (propertiesObject) {defineProperties(Class.prototype, propertiesObject, true)}
+  // Inherites super class properties
   if (Super !== Object) {
-    for (const name in Super) {
-      Class[name] = Super[name];
-    }
+    for (const name in Super) {Class[name] = Super[name]}
   }
+  Class.super = Super
+  if (propertiesClass) {defineProperties(Class, propertiesClass, true)}
+  return Class
+}
 
-  Class.super = Super;
-
-  if (propertiesClass) {
-    defineProperties(Class, propertiesClass, true);
-  }
-
-  return Class;
-} // Get random values
-
-
+// Get random values
 function getSeed(length) {
-  const seed = new Uint8Array(length);
-  gostCrypto.getRandomValues(seed);
-  return seed.buffer;
-} // Self resolver
-
+  const seed = new Uint8Array(length)
+  gostCrypto.getRandomValues(seed)
+  return seed.buffer
+}
 
+// Self resolver
 function call(callback) {
   try {
-    callback();
-  } catch (e) {}
-} // Get buffer
+    callback()
+  } catch (e) {
+  }
+}
 
 
+// Get buffer
 function buffer(d) {
-  if (d instanceof CryptoOperationData) {
-    return d;
-  }
-
+  if (d instanceof CryptoOperationData) {return d}
   if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
-    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ? d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer;
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
   }
-
-  throw new DataError('CryptoOperationData required');
-} // Today date + n days with time
-
-
+  throw new DataError('CryptoOperationData required')
+}
+// Today date + n days with time
 function now(n) {
-  const date = new Date();
-
-  if (n) {
-    date.setDate(date.getDate() + n);
-  }
-
-  return date;
-} // Today date + n days
-
+  const date = new Date()
+  if (n) {date.setDate(date.getDate() + n)}
+  return date
+}
 
+// Today date + n days
 function today(n) {
-  const date = now(n);
-  date.setHours(0, 0, 0, 0);
-  return date;
-} // Check the buffers to equal
-
+  const date = now(n)
+  date.setHours(0, 0, 0, 0)
+  return date
+}
 
+// Check the buffers to equal
 function equalBuffers(r1, r2) {
   const s1 = new Uint8Array(r1),
-        s2 = new Uint8Array(r2);
-
-  if (s1.length !== s2.length) {
-    return false;
-  }
-
+    s2 = new Uint8Array(r2)
+  if (s1.length !== s2.length) {return false}
   for (let i = 0, n = s1.length; i < n; i++) {
-    if (s1[i] !== s2[i]) {
-      return false;
-    }
+    if (s1[i] !== s2[i]) {return false}
   }
+  return true
+}
 
-  return true;
-} // Generate new alias
-
-
+// Generate new alias
 function generateUUID() {
-  let r = new Uint8Array(getSeed(16)),
-      s = '';
-
-  for (let i = 0; i < 16; i++) {
-    s += `00${r[i].toString(16)}`.slice(-2);
-  }
-
-  return `${s.substr(0, 8)}-${s.substr(8, 4)}-4${s.substr(13, 3)}-9${s.substr(17, 3)}-${s.substr(20, 12)}`;
-} // Return get32 from buffer
-
+  let r = new Uint8Array(getSeed(16)), s = ''
+  for (let i = 0; i < 16; i++) {s += (`00${ r[i].toString(16)}`).slice(-2)}
+  return `${s.substr(0, 8) }-${ s.substr(8, 4) }-4${ s.substr(13, 3)
+  }-9${ s.substr(17, 3) }-${ s.substr(20, 12)}`
+}
 
+// Return get32 from buffer
 function get32(buffer, offset) {
-  const r = new Uint8Array(buffer, offset, 4);
-  return r[3] << 24 | r[2] << 16 | r[1] << 8 | r[0];
+  const r = new Uint8Array(buffer, offset, 4)
+  return (r[3] << 24) | (r[2] << 16) | (r[1] << 8) | r[0]
 }
 
 function set32(buffer, offset, int) {
-  const r = new Uint8Array(buffer, offset, 4);
-  r[3] = int >>> 24;
-  r[2] = int >>> 16 & 0xff;
-  r[1] = int >>> 8 & 0xff;
-  r[0] = int & 0xff;
-  return r;
-} // Salt size
-
+  const r = new Uint8Array(buffer, offset, 4)
+  r[3] = int >>> 24
+  r[2] = int >>> 16 & 0xff
+  r[1] = int >>> 8 & 0xff
+  r[0] = int & 0xff
+  return r
+}
 
+// Salt size
 function saltSize(algorithm) {
   switch (algorithm.id) {
     case 'pbeWithSHAAnd40BitRC2-CBC':
     case 'pbeWithSHAAnd128BitRC2-CBC':
-      return 8;
-
+      return 8
     case 'pbeUnknownGost':
-      return 16;
-
+      return 16
     case 'sha1':
-      return 20;
-
+      return 20
     default:
-      return 32;
+      return 32
   }
-} // Password to bytes
-
+}
 
+// Password to bytes
 function passwordData(derivation, password) {
-  if (!password) {
-    return new CryptoOperationData(0);
-  }
-
+  if (!password) {return new CryptoOperationData(0)}
   if (derivation.name.indexOf('CPKDF') >= 0) {
     // CryptoPro store password
-    const r = [];
-
+    const r = []
     for (let i = 0; i < password.length; i++) {
-      const c = password.charCodeAt(i);
-      r.push(c & 0xff);
-      r.push(c >>> 8 & 0xff);
-      r.push(0);
-      r.push(0);
-    }
-
-    return new Uint8Array(r).buffer;
-  }
-
-  if (derivation.name.indexOf('PFXKDF') >= 0) // PKCS#12 unicode password
-    {
-      return coding.Chars.decode(`${password}\0`, 'unicode');
+      const c = password.charCodeAt(i)
+      r.push(c & 0xff)
+      r.push(c >>> 8 & 0xff)
+      r.push(0)
+      r.push(0)
     }
+    return new Uint8Array(r).buffer
+  } if (derivation.name.indexOf('PFXKDF') >= 0)
+  // PKCS#12 unicode password
+  {return coding.Chars.decode(`${password }\0`, 'unicode')}
+  return coding.Chars.decode(password, 'utf8')
+}
 
-  return coding.Chars.decode(password, 'utf8');
-} // </editor-fold>
+// </editor-fold>
 
 /**
  * Key and Certificate Store methods
  *
  * @class GostKeys
  */
+function GostKeys() {
+}
 
-
-function GostKeys() {}
 /**
  * Key templates
  * <ul>
@@ -288,15 +232,13 @@ function GostKeys() {}
  * @memberOf GostKeys
  * @instance
  */
-
-
-const options = {
-  // <editor-fold defaultstate="collapsed">
+const options = { // <editor-fold defaultstate="collapsed">
   providerName: 'CP-01',
-  days: 7305 // </editor-fold>
+  days: 7305, // </editor-fold>
+}
+
+GostKeys.prototype.options = options
 
-};
-GostKeys.prototype.options = options;
 /**
  * A class for private keys in PKCS #8 format
  *
@@ -304,9 +246,8 @@ GostKeys.prototype.options = options;
  * @extends GostASN1.PrivateKeyInfo
  * @param {(FormatedData|GostASN1.PrivateKeyInfo)} keyInfo
  */
-
 function PKCS8(keyInfo) {
-  asn1.PrivateKeyInfo.call(this, keyInfo);
+  asn1.PrivateKeyInfo.call(this, keyInfo)
 }
 
 extend(asn1.PrivateKeyInfo, PKCS8, {
@@ -319,11 +260,10 @@ extend(asn1.PrivateKeyInfo, PKCS8, {
      */
   getPrivateKey: function () // <editor-fold defaultstate="collapsed">
   {
-    const keyUsages = this.privateKeyAlgorithm.id === 'rsaEncryption' ? ['sign'] : ['sign', 'deriveKey', 'deriveBits'];
-    return subtle.importKey('pkcs8', this.encode(), this.privateKeyAlgorithm, 'true', keyUsages);
-  },
-  // </editor-fold>
-
+    const keyUsages = (this.privateKeyAlgorithm.id === 'rsaEncryption') ? ['sign'] :
+      ['sign', 'deriveKey', 'deriveBits']
+    return subtle.importKey('pkcs8', this.encode(), this.privateKeyAlgorithm, 'true', keyUsages)
+  }, // </editor-fold>
   /**
      * Set the private key
      *
@@ -334,14 +274,12 @@ extend(asn1.PrivateKeyInfo, PKCS8, {
      */
   setPrivateKey: function (privateKey) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return subtle.exportKey('pkcs8', privateKey).then(function (keyInfo) {
-      asn1.PrivateKeyInfo.call(self, keyInfo);
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      asn1.PrivateKeyInfo.call(self, keyInfo)
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Generate private key and return certification request
      *
@@ -353,29 +291,27 @@ extend(asn1.PrivateKeyInfo, PKCS8, {
      */
   generate: function (req, keyAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
-      if (!(req instanceof cert.Request)) {
-        req = new cert.Request(req);
-      } // Generate request
-
-
-      return req.generate(keyAlgorithm);
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
     }).then(function (key) {
-      asn1.PrivateKeyInfo.call(self, key);
-      return req;
-    });
-  } // </editor-fold>
+      asn1.PrivateKeyInfo.call(self, key)
+
+      return req
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * A class for private keys in PKCS #8 format
  *
  * @memberOf GostKeys
  * @type GostKeys.PKCS8
  */
+GostKeys.prototype.PKCS8 = PKCS8
 
-GostKeys.prototype.PKCS8 = PKCS8;
 /**
  * A class for PKCS #5 and PKCS #12 password-encrypted private keys in PKCS #8 format
  *
@@ -383,9 +319,8 @@ GostKeys.prototype.PKCS8 = PKCS8;
  * @extends GostASN1.EncryptedPrivateKeyInfo
  * @param {(FormatedData|GostASN1.EncryptedPrivateKeyInfo)} encryptedKey
  */
-
 function PKCS8Encrypted(encryptedKey) {
-  asn1.EncryptedPrivateKeyInfo.call(this, encryptedKey);
+  asn1.EncryptedPrivateKeyInfo.call(this, encryptedKey)
 }
 
 extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
@@ -399,8 +334,7 @@ extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
      */
   getKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        engine;
+    let self = this, engine
     return new Promise(call).then(function () {
       engine = new cms.EncryptedDataContentInfo({
         contentType: 'encryptedData',
@@ -408,17 +342,15 @@ extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
         encryptedContentInfo: {
           contentType: 'data',
           contentEncryptionAlgorithm: self.encryptionAlgorithm,
-          encryptedContent: self.encryptedData
-        }
-      });
-      return engine.getEnclosed(keyPassword);
+          encryptedContent: self.encryptedData,
+        },
+      })
+      return engine.getEnclosed(keyPassword)
     }).then(function (contentInfo) {
       // Create key object
-      return PKCS8.decode(contentInfo.content);
-    });
-  },
-  // </editor-fold>
-
+      return PKCS8.decode(contentInfo.content)
+    })
+  }, // </editor-fold>
   /**
      * Get the private key
      *
@@ -430,11 +362,9 @@ extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
   getPrivateKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
   {
     return this.getKey(keyPassword).then(function (keyInfo) {
-      return keyInfo.getPrivateKey();
-    });
-  },
-  // </editor-fold>
-
+      return keyInfo.getPrivateKey()
+    })
+  }, // </editor-fold>
   /**
      * Sets and encrypt the private key info
      *
@@ -447,20 +377,17 @@ extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
      */
   setKey: function (keyInfo, keyPassword, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        engine;
+    let self = this, engine
     return new Promise(call).then(function () {
-      keyInfo = new PKCS8(keyInfo);
-      engine = new cms.EncryptedDataContentInfo();
-      return engine.encloseContent(keyInfo.encode(), keyPassword, encryptionAlgorithm || options.providerName);
+      keyInfo = new PKCS8(keyInfo)
+      engine = new cms.EncryptedDataContentInfo()
+      return engine.encloseContent(keyInfo.encode(), keyPassword, encryptionAlgorithm || options.providerName)
     }).then(function () {
-      self.encryptionAlgorithm = engine.encryptedContentInfo.contentEncryptionAlgorithm;
-      self.encryptedData = engine.encryptedContentInfo.encryptedContent;
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      self.encryptionAlgorithm = engine.encryptedContentInfo.contentEncryptionAlgorithm
+      self.encryptedData = engine.encryptedContentInfo.encryptedContent
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Set the private key
      *
@@ -473,13 +400,11 @@ extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
      */
   setPrivateKey: function (privateKey, keyPassword, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new PKCS8().setPrivateKey(privateKey).then(function (keyInfo) {
-      return self.setKey(keyInfo, keyPassword, encryptionAlgorithm);
-    });
-  },
-  // </editor-fold>
-
+      return self.setKey(keyInfo, keyPassword, encryptionAlgorithm)
+    })
+  }, // </editor-fold>
   /**
      * Generate private key and return certification request
      *
@@ -493,30 +418,27 @@ extend(asn1.EncryptedPrivateKeyInfo, PKCS8Encrypted, {
      */
   generate: function (req, keyPassword, keyAlgorithm, encryptionAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
-      if (!(req instanceof cert.Request)) {
-        req = new cert.Request(req);
-      } // Generate request
-
-
-      return req.generate(keyAlgorithm);
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
     }).then(function (key) {
-      return self.setKey(key, keyPassword, encryptionAlgorithm);
+      return self.setKey(key, keyPassword, encryptionAlgorithm)
     }).then(function () {
-      return req;
-    });
-  } // </editor-fold>
+      return req
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * A class for PKCS #5 and PKCS #12 password-encrypted private keys in PKCS #8 format
  *
  * @memberOf GostKeys
  * @type GostKeys.PKCS8Encrypted
  */
+GostKeys.prototype.PKCS8Encrypted = PKCS8Encrypted
 
-GostKeys.prototype.PKCS8Encrypted = PKCS8Encrypted;
 /**
  * A class for password-encrypted private keys in SignalCom container<br><br>
  *
@@ -531,18 +453,16 @@ GostKeys.prototype.PKCS8Encrypted = PKCS8Encrypted;
  * @class GostKeys.SignalComKeyContainer
  * @param {SignalComKeyContainer} container
  */
-
 function SignalComKeyContainer(container) // <editor-fold defaultstate="collapsed">
 {
   if (container) {
     const self = this;
     ['mk.db3', 'masks.db3', 'kek.opq', 'rand.opq'].forEach(function (name) {
-      self[name] = container[name];
-    });
+      self[name] = container[name]
+    })
   }
 } // </editor-fold>
 
-
 extend(Object, SignalComKeyContainer, {
   /**
      * Get password-based encryption key
@@ -554,58 +474,47 @@ extend(Object, SignalComKeyContainer, {
      */
   getEncryptionKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        wrapping = providers['SC-01'].wrapping,
-        encryption = providers['SC-01'].encryption,
-        derivation = providers['SC-01'].derivation,
-        masks = self['masks.db3'],
-        mk = self['mk.db3'],
-        kek = self['kek.opq']; // Decrypt key
-
+    let self = this, wrapping = providers['SC-01'].wrapping,
+      encryption = providers['SC-01'].encryption,
+      derivation = providers['SC-01'].derivation,
+      masks = self['masks.db3'], mk = self['mk.db3'], kek = self['kek.opq']
+    // Decrypt key
     return new Promise(call).then(function () {
-      if (!masks || !mk || !kek) {
-        throw new Error('Not enougth key container files');
-      } // Check for encrypted key
-
-
+      if ((!masks || !mk || !kek)) {throw new Error('Not enougth key container files')}
+      // Check for encrypted key
       if (masks.byteLength > 32) {
         if (keyPassword) {
           // Extract password based encryption mask
-          return subtle.importKey('raw', coding.Chars.decode(keyPassword, 'utf8'), derivation, false, ['deriveKey', 'deriveBits']).then(function (integrityKey) {
-            return subtle.deriveKey(expand(derivation, {
-              salt: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
-            }), integrityKey, encryption, false, ['decrypt']);
+          return subtle.importKey('raw', coding.Chars.decode(keyPassword, 'utf8'),
+            derivation, false, ['deriveKey', 'deriveBits']).then(function (integrityKey) {
+            return subtle.deriveKey(expand(derivation,
+              { salt: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) }),
+            integrityKey, encryption, false, ['decrypt'])
           }).then(function (encryptionKey) {
-            const encrypted = new cms.EncryptedDataContentInfo(masks);
-            return encrypted.getEnclosed(encryptionKey);
+            const encrypted = new cms.EncryptedDataContentInfo(masks)
+            return encrypted.getEnclosed(encryptionKey)
           }).then(function (digested) {
-            return digested.verify();
+            return digested.verify()
           }).then(function (data) {
-            return data.content;
-          });
-        }
-
-        throw new Error('Key password is required');
-      } else if (keyPassword) {
-        throw new Error('Key password is not required');
-      }
-
-      return masks;
+            return data.content
+          })
+        } throw new Error('Key password is required')
+      } else if (keyPassword) {throw new Error('Key password is not required')}
+      return masks
     }).then(function (decrypedMasks) {
       // Combine masks
-      masks = decrypedMasks;
-      const mkm = new Uint8Array(mk.byteLength + masks.byteLength);
-      mkm.set(new Uint8Array(mk), 0);
-      mkm.set(new Uint8Array(masks), mk.byteLength); // Import master key
-
-      return subtle.importKey('raw', mkm.buffer, wrapping, false, ['unwrapKey']);
+      masks = decrypedMasks
+      const mkm = new Uint8Array(mk.byteLength + masks.byteLength)
+      mkm.set(new Uint8Array(mk), 0)
+      mkm.set(new Uint8Array(masks), mk.byteLength)
+      // Import master key
+      return subtle.importKey('raw', mkm.buffer, wrapping, false, ['unwrapKey'])
     }).then(function (unwrappingKey) {
       // Unwrap kek
-      return subtle.unwrapKey('raw', kek, unwrappingKey, wrapping, encryption, false, ['wrapKey', 'unwrapKey']);
-    });
-  },
-  // </editor-fold>
-
+      return subtle.unwrapKey('raw', kek, unwrappingKey, wrapping, encryption,
+        false, ['wrapKey', 'unwrapKey'])
+    })
+  }, // </editor-fold>
   /**
      * Generate encryption key and container files
      *
@@ -616,78 +525,74 @@ extend(Object, SignalComKeyContainer, {
      */
   generateContainer: function (keyPassword) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        wrapping = providers['SC-01'].wrapping,
-        encryption = providers['SC-01'].encryption,
-        derivation = providers['SC-01'].derivation,
-        digest = providers['SC-01'].digest,
-        encryptionKey,
-        wrappingKey;
+    let self = this, wrapping = providers['SC-01'].wrapping,
+      encryption = providers['SC-01'].encryption,
+      derivation = providers['SC-01'].derivation,
+      digest = providers['SC-01'].digest,
+      encryptionKey, wrappingKey
     return new Promise(call).then(function () {
       // Generate wrapping key
-      return subtle.generateKey(wrapping, true, ['wrapKey']);
+      return subtle.generateKey(wrapping, true, ['wrapKey'])
     }).then(function (key) {
-      wrappingKey = key; // Split masks
-
-      const len = wrappingKey.buffer.byteLength;
-      self['mk.db3'] = new Uint8Array(new Uint8Array(wrappingKey.buffer, 0, len - 32)).buffer;
-      const masks = new Uint8Array(new Uint8Array(wrappingKey.buffer, len - 32, 32)).buffer;
-
+      wrappingKey = key
+      // Split masks
+      const len = wrappingKey.buffer.byteLength
+      self['mk.db3'] = new Uint8Array(new Uint8Array(wrappingKey.buffer, 0, len - 32)).buffer
+      const masks = new Uint8Array(new Uint8Array(wrappingKey.buffer, len - 32, 32)).buffer
       if (keyPassword) {
         // Encrypt masks
         let encrypted = new cms.EncryptedDataContentInfo(),
-            digested = new cms.DigestedDataContentInfo(); // Digest data
-
+          digested = new cms.DigestedDataContentInfo()
+        // Digest data
         return digested.encloseContent(masks, digest).then(function () {
-          digested = {
-            // Double wrapping - SignalCom mistake
+          digested = { // Double wrapping - SignalCom mistake
             contentType: 'digestedData',
-            content: digested.encode()
-          };
-          return subtle.importKey('raw', coding.Chars.decode(keyPassword, 'utf8'), derivation, false, ['deriveKey', 'deriveBits']);
+            content: digested.encode(),
+          }
+          return subtle.importKey('raw', coding.Chars.decode(keyPassword, 'utf8'),
+            derivation, false, ['deriveKey', 'deriveBits'])
         }).then(function (integrityKey) {
-          return subtle.deriveKey(expand(derivation, {
-            salt: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
-          }), integrityKey, encryption, false, ['encrypt']);
+          return subtle.deriveKey(expand(derivation,
+            { salt: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) }),
+          integrityKey, encryption, false, ['encrypt'])
         }).then(function (encryptionKey) {
           // Encrypt data with password
-          return encrypted.encloseContent(digested, encryptionKey, encryption);
+          return encrypted.encloseContent(digested, encryptionKey, encryption)
         }).then(function () {
-          return encrypted.encode();
-        });
+          return encrypted.encode()
+        })
       }
-
-      return masks;
+      return masks
     }).then(function (masks) {
-      self['masks.db3'] = masks; // Generate encryption key
-
-      return subtle.generateKey(encryption, false, ['wrapKey', 'unwrapKey']);
+      self['masks.db3'] = masks
+      // Generate encryption key
+      return subtle.generateKey(encryption, false, ['wrapKey', 'unwrapKey'])
     }).then(function (key) {
-      encryptionKey = key; // Wrap encryption key
-
-      return subtle.wrapKey('raw', key, wrappingKey, wrapping);
+      encryptionKey = key
+      // Wrap encryption key
+      return subtle.wrapKey('raw', key, wrappingKey, wrapping)
     }).then(function (data) {
-      self['kek.opq'] = data; // Generate random seed
-
-      return subtle.generateKey(encryption, false, ['wrapKey', 'unwrapKey']);
+      self['kek.opq'] = data
+      // Generate random seed
+      return subtle.generateKey(encryption, false, ['wrapKey', 'unwrapKey'])
     }).then(function (key) {
       // Wrap random seed
-      return subtle.wrapKey('raw', key, wrappingKey, wrapping);
+      return subtle.wrapKey('raw', key, wrappingKey, wrapping)
     }).then(function (data) {
-      self['rand.opq'] = data;
-      return encryptionKey;
-    });
-  } // </editor-fold>
+      self['rand.opq'] = data
+      return encryptionKey
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * A class for password-encrypted private keys in SignalCom container
  *
  * @memberOf GostKeys
  * @type GostKeys.SignalComKeyContainer
  */
+GostKeys.prototype.SignalComKeyContainer = SignalComKeyContainer
 
-GostKeys.prototype.SignalComKeyContainer = SignalComKeyContainer;
 /**
  * A class for password-encrypted SignalCom private keys
  *
@@ -697,14 +602,12 @@ GostKeys.prototype.SignalComKeyContainer = SignalComKeyContainer;
  * @param {GostASN1.PrivateKeyInfo} keyInfo
  * @param {GostKeys.SignalComKeyContainer} container
  */
-
 function SignalComPrivateKeyInfo(keyInfo, container) // <editor-fold defaultstate="collapsed">
 {
-  asn1.GostWrappedPrivateKey.call(this, keyInfo);
-  SignalComKeyContainer.call(this, container);
+  asn1.GostWrappedPrivateKey.call(this, keyInfo)
+  SignalComKeyContainer.call(this, container)
 } // </editor-fold>
 
-
 extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
   /**
      * Get the private key info
@@ -716,11 +619,9 @@ extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
   getKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
   {
     return this.getPrivateKey(keyPassword).then(function (privateKey) {
-      return new PKCS8().setPrivateKey(privateKey);
-    });
-  },
-  // </editor-fold>
-
+      return new PKCS8().setPrivateKey(privateKey)
+    })
+  }, // </editor-fold>
   /**
      * Get the private key
      *
@@ -731,39 +632,30 @@ extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
      */
   getPrivateKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        wrapping = providers['SC-01'].wrapping,
-        publicKeyData; // Decrypt key
-
+    let self = this, wrapping = providers['SC-01'].wrapping,
+      publicKeyData
+    // Decrypt key
     return new Promise(call).then(function () {
       // Get password key
-      return self.getEncryptionKey(keyPassword, true);
+      return self.getEncryptionKey(keyPassword, true)
     }).then(function (encryptionKey) {
       // Unwrap private key
-      return subtle.unwrapKey('raw', self.privateKeyWrapped, encryptionKey, wrapping, self.privateKeyAlgorithm, true, ['sign', 'deriveKey', 'deriveBits']);
+      return subtle.unwrapKey('raw', self.privateKeyWrapped, encryptionKey, wrapping,
+        self.privateKeyAlgorithm, true, ['sign', 'deriveKey', 'deriveBits'])
     }).then(function (privateKey) {
-      publicKeyData = self.attributes && self.attributes['id-sc-gostR3410-2001-publicKey']; // Generate key pair
-
+      publicKeyData = self.attributes && self.attributes['id-sc-gostR3410-2001-publicKey']
+      // Generate key pair
       if (publicKeyData) {
-        return subtle.generateKey(expand(privateKey.algorithm, {
-          ukm: privateKey.buffer
-        }), privateKey.extractable, privateKey.usages);
+        return subtle.generateKey(expand(privateKey.algorithm, { ukm: privateKey.buffer }),
+          privateKey.extractable, privateKey.usages)
       }
-
-      return {
-        privateKey: privateKey
-      };
+      return { privateKey: privateKey }
     }).then(function (keyPair) {
       // Compare public key
-      if (publicKeyData && !equalBuffers(keyPair.publicKey.buffer, publicKeyData)) {
-        throw new Error('Check public key failed');
-      }
-
-      return keyPair.privateKey;
-    });
-  },
-  // </editor-fold>
-
+      if (publicKeyData && !equalBuffers(keyPair.publicKey.buffer, publicKeyData)) {throw new Error('Check public key failed')}
+      return keyPair.privateKey
+    })
+  }, // </editor-fold>
   /**
      * Sets and encrypt the private key info
      *
@@ -775,13 +667,11 @@ extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
      */
   setKey: function (keyInfo, keyPassword) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new PKCS8(keyInfo).getPrivateKey().then(function (privateKey) {
-      return self.setPrivateKey(privateKey, keyPassword);
-    });
-  },
-  // </editor-fold>
-
+      return self.setPrivateKey(privateKey, keyPassword)
+    })
+  }, // </editor-fold>
   /**
      * Set the private key
      *
@@ -793,37 +683,32 @@ extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
      */
   setPrivateKey: function (privateKey, keyPassword) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        wrapping = providers['SC-01'].wrapping,
-        wrappedData;
+    let self = this, wrapping = providers['SC-01'].wrapping, wrappedData
     return new Promise(call).then(function () {
       // Get or generate encryption key
       return self.getEncryptionKey(keyPassword)['catch'](function () {
-        return self.generateContainer(keyPassword);
-      });
+        return self.generateContainer(keyPassword)
+      })
     }).then(function (encryptionKey) {
       // Encrypt key buffer
-      return subtle.wrapKey('raw', privateKey, encryptionKey, wrapping);
+      return subtle.wrapKey('raw', privateKey, encryptionKey, wrapping)
     }).then(function (data) {
-      wrappedData = data; // Generate public key
-
-      return subtle.generateKey(expand(privateKey.algorithm, {
-        ukm: privateKey.buffer
-      }), true, ['sign', 'verify']);
+      wrappedData = data
+      // Generate public key
+      return subtle.generateKey(expand(privateKey.algorithm,
+        { ukm: privateKey.buffer }), true, ['sign', 'verify'])
     }).then(function (keyPair) {
       self.object = {
         version: 0,
         privateKeyAlgorithm: privateKey.algorithm,
         privateKeyWrapped: wrappedData,
         attributes: {
-          'id-sc-gostR3410-2001-publicKey': keyPair.publicKey.buffer
-        }
-      };
-      return self;
-    });
-  },
-  // </editor-fold>
-
+          'id-sc-gostR3410-2001-publicKey': keyPair.publicKey.buffer,
+        },
+      }
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Change key password
      *
@@ -835,13 +720,11 @@ extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
      */
   changePassword: function (oldKeyPassword, newKeyPassword) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return self.getPrivateKey(oldKeyPassword).then(function (privateKey) {
-      return self.setPrivateKey(privateKey, newKeyPassword);
-    });
-  },
-  // </editor-fold>
-
+      return self.setPrivateKey(privateKey, newKeyPassword)
+    })
+  }, // </editor-fold>
   /**
      * Generate private key, certificate and return certification request
      *
@@ -854,33 +737,29 @@ extend(asn1.GostWrappedPrivateKey, SignalComPrivateKeyInfo, {
      */
   generate: function (req, keyPassword, keyAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        keyInfo;
+    let self = this, keyInfo
     return new Promise(call).then(function () {
-      if (!(req instanceof cert.Request)) {
-        req = new cert.Request(req);
-      } // Generate request
-
-
-      return req.generate(keyAlgorithm);
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
     }).then(function (key) {
-      keyInfo = key;
-      return self.setKey(keyInfo, keyPassword);
+      keyInfo = key
+      return self.setKey(keyInfo, keyPassword)
     }).then(function () {
-      return req;
-    });
-  } // </editor-fold>
+      return req
+    })
+  }, // </editor-fold>
+})
+defineProperties(SignalComPrivateKeyInfo.prototype, SignalComKeyContainer.prototype)
 
-});
-defineProperties(SignalComPrivateKeyInfo.prototype, SignalComKeyContainer.prototype);
 /**
  * A class for password-encrypted SignalCom private keys
  *
  * @memberOf GostKeys
  * @type GostKeys.SignalComPrivateKeyInfo
  */
+GostKeys.prototype.SignalComPrivateKeyInfo = SignalComPrivateKeyInfo
 
-GostKeys.prototype.SignalComPrivateKeyInfo = SignalComPrivateKeyInfo;
 /**
  * A class for password-encrypted private keys in CryptoPro container
  *
@@ -897,71 +776,69 @@ GostKeys.prototype.SignalComPrivateKeyInfo = SignalComPrivateKeyInfo;
  * @class GostKeys.CryptoProKeyContainer
  * @param {Object} container
  */
-
 function CryptoProKeyContainer(container) // <editor-fold defaultstate="collapsed">
 {
   if (container) {
-    this.header = asn1.GostKeyContainer.decode(container.header);
-    this.name = asn1.GostKeyContainerName.decode(container.name);
-    this.primary = asn1.GostPrivateKeys.decode(container.primary);
-    this.masks = asn1.GostPrivateMasks.decode(container.masks);
-
+    this.header = asn1.GostKeyContainer.decode(container.header)
+    this.name = asn1.GostKeyContainerName.decode(container.name)
+    this.primary = asn1.GostPrivateKeys.decode(container.primary)
+    this.masks = asn1.GostPrivateMasks.decode(container.masks)
     if (container.primary2 && container.masks2) {
-      this.primary2 = asn1.GostPrivateKeys.decode(container.primary2);
-      this.masks2 = asn1.GostPrivateMasks.decode(container.masks2);
+      this.primary2 = asn1.GostPrivateKeys.decode(container.primary2)
+      this.masks2 = asn1.GostPrivateMasks.decode(container.masks2)
     }
   }
 } // </editor-fold>
 
+extend(Object, CryptoProKeyContainer, (function () {
 
-extend(Object, CryptoProKeyContainer, function () {
   // <editor-fold defaultstate="collapsed">
   // True if 512 bit
   function isKeySize512(algorithm) {
-    return algorithm.name.indexOf('-512') >= 0 || algorithm.length === 512;
-  } // Test version 2012
-
+    return algorithm.name.indexOf('-512') >= 0 || algorithm.length === 512
+  }
 
+  // Test version 2012
   function isVersion2012(algorithm) {
-    return !(algorithm.name.indexOf('-94') >= 0 || algorithm.name.indexOf('-2001') >= 0 || algorithm.version === 1994 || algorithm.version === 2001);
-  } // Derive password key
-
+    return !((algorithm.name.indexOf('-94') >= 0 || algorithm.name.indexOf('-2001') >= 0 ||
+            algorithm.version === 1994 || algorithm.version === 2001))
+  }
 
+  // Derive password key
   function derivePasswordKey(algorithm, password, salt) {
-    const hash = isVersion2012(algorithm) ? 'GOST R 34.11-256' : `GOST R 34.11-94/${algorithm.sBox || 'D-A'}`,
-          derivation = {
-      name: 'CPKDF',
-      hash: hash,
-      salt: salt,
-      iterations: password ? 2000 : 2
-    }; // Import password
-
-    return subtle.importKey('raw', passwordData(derivation, password), derivation, false, ['deriveKey', 'deriveBits']).then(function (baseKey) {
-      // Derive key
-      return subtle.deriveKey(derivation, baseKey, 'GOST 28147', false, ['sign', 'verify', 'encrypt', 'decrypt']);
-    });
-  } // Compute password MAC
+    const hash = isVersion2012(algorithm) ? 'GOST R 34.11-256' : `GOST R 34.11-94/${ algorithm.sBox || 'D-A'}`,
+      derivation = { name: 'CPKDF', hash: hash, salt: salt, iterations: password ? 2000 : 2 }
+
+    // Import password
+    return subtle.importKey('raw', passwordData(derivation, password),
+      derivation, false, ['deriveKey', 'deriveBits']).then(function (baseKey) {
 
+      // Derive key
+      return subtle.deriveKey(derivation, baseKey, 'GOST 28147',
+        false, ['sign', 'verify', 'encrypt', 'decrypt'])
+    })
+  }
 
+  // Compute password MAC
   function computePasswordMAC(algorithm, password, salt) {
-    const mac = expand({
-      name: 'GOST 28147-MAC'
-    }, algorithm.encParams); // Derive password
+    const mac = expand({ name: 'GOST 28147-MAC' }, algorithm.encParams)
 
+    // Derive password
     return derivePasswordKey(algorithm, password, salt).then(function (macKey) {
-      // Mac for 16 zero bytes
-      return subtle.sign(mac, macKey, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
-    });
-  } //        var lastBuffer;
-  // Compute container MAC
 
+      // Mac for 16 zero bytes
+      return subtle.sign(mac, macKey,
+        new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
+    })
+  }
 
+  //        var lastBuffer;
+  // Compute container MAC
   function computeContainerMAC(algorithm, content) {
-    const mac = expand({
-      name: 'GOST 28147-MAC'
-    }, algorithm.encParams),
-          keyData = new Uint8Array([// 32 zero bytes
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
+    const mac = expand({ name: 'GOST 28147-MAC' }, algorithm.encParams),
+      keyData = new Uint8Array([// 32 zero bytes
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
     return subtle.importKey('raw', keyData, mac, false, ['sign']).then(function (macKey) {
       //                var buffer = new Uint8Array(content.encode());
       //                console.log(coding.Hex.encode(buffer));
@@ -973,157 +850,139 @@ extend(Object, CryptoProKeyContainer, function () {
       //                    console.log('diff length');
       //                lastBuffer = buffer;
       // Mac for content
-      return subtle.sign(mac, macKey, content.encode());
-    });
-  } // Compute mask MAC
-
+      return subtle.sign(mac, macKey, content.encode())
+    })
+  }
 
+  // Compute mask MAC
   function computeMaskMAC(algorithm, mask, status) {
     // Import mask as key for MAC
-    const mac = expand({
-      name: 'GOST 28147-MAC'
-    }, algorithm.encParams),
-          keyData = mask.byteLength === 64 ? new Uint8Array(new Uint8Array(mask, 32, 32)).buffer : mask;
+    const mac = expand({ name: 'GOST 28147-MAC' }, algorithm.encParams),
+      keyData = mask.byteLength === 64 ?
+        new Uint8Array(new Uint8Array(mask, 32, 32)).buffer : mask
     return subtle.importKey('raw', keyData, mac, false, ['sign']).then(function (macKey) {
-      // Verify MAC for maskStatus
-      return subtle.sign(mac, macKey, status);
-    });
-  } // Generate mask
 
+      // Verify MAC for maskStatus
+      return subtle.sign(mac, macKey, status)
+    })
+  }
 
+  // Generate mask
   function generateMasks(algorithm) {
-    let wrapAlgorithm = expand(algorithm, {
-      mode: 'MASK'
-    }),
-        mask,
-        status = getSeed(12);
-    wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '');
+    let wrapAlgorithm = expand(algorithm, { mode: 'MASK' }),
+      mask, status = getSeed(12)
+    wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '')
     return subtle.generateKey(wrapAlgorithm, true, ['wrapKey', 'unwrapKey']).then(function (key) {
-      return subtle.exportKey('raw', key);
+      return subtle.exportKey('raw', key)
     }).then(function (data) {
-      mask = data;
-      return computeMaskMAC(algorithm, mask, status);
+      mask = data
+      return computeMaskMAC(algorithm, mask, status)
     }).then(function (hmac) {
       return new asn1.GostPrivateMasks({
         mask: mask,
         randomStatus: status,
-        hmacRandom: hmac
-      });
-    });
-  } // Compute FP
-
+        hmacRandom: hmac,
+      })
+    })
+  }
 
+  // Compute FP
   function computeFP(privateKey) {
     // Generate key pair with predefined ukm for check public key
-    return subtle.generateKey(expand(privateKey.algorithm, {
-      ukm: privateKey.buffer
-    }), true, ['sign', 'verify']).then(function (keyPair) {
-      return new Uint8Array(new Uint8Array(keyPair.publicKey.buffer, 0, 8)).buffer;
-    });
-  } // Unwrap private key
-
+    return subtle.generateKey(expand(privateKey.algorithm, { ukm: privateKey.buffer }), true, ['sign', 'verify']).then(function (keyPair) {
+      return new Uint8Array(new Uint8Array(keyPair.publicKey.buffer, 0, 8)).buffer
+    })
+  }
 
+  // Unwrap private key
   function unwrapKey(algorithm, encryptionKey, key, mask, fp) {
-    let encryption = {
-      name: 'GOST 28147-ECB',
-      sBox: algorithm.encParams && algorithm.encParams.sBox
-    },
-        unwrapAlgorithm = expand(algorithm, {
-      mode: 'MASK'
-    }),
-        privateKey;
-    unwrapAlgorithm.name = unwrapAlgorithm.name.replace('-DH', '');
-    let wrappedKey; // Encrypt ukm data for private key
+    let encryption = { name: 'GOST 28147-ECB', sBox: algorithm.encParams && algorithm.encParams.sBox },
+      unwrapAlgorithm = expand(algorithm, { mode: 'MASK' }), privateKey
+    unwrapAlgorithm.name = unwrapAlgorithm.name.replace('-DH', '')
+    let wrappedKey
 
+    // Encrypt ukm data for private key
     return subtle.decrypt(encryption, encryptionKey, key).then(function (data) {
-      wrappedKey = data; // Import mask key
-
-      return subtle.importKey('raw', mask, unwrapAlgorithm, 'false', ['sign', 'unwrapKey']);
+      wrappedKey = data
+      // Import mask key
+      return subtle.importKey('raw', mask, unwrapAlgorithm, 'false', ['sign', 'unwrapKey'])
     }).then(function (unwrappingKey) {
+
       // Unwrap private key
-      return subtle.unwrapKey('raw', wrappedKey, unwrappingKey, unwrapAlgorithm, algorithm, 'true', ['sign']);
+      return subtle.unwrapKey('raw', wrappedKey, unwrappingKey,
+        unwrapAlgorithm, algorithm, 'true', ['sign'])
     }).then(function (key) {
-      privateKey = key;
-      return computeFP(privateKey);
+      privateKey = key
+      return computeFP(privateKey)
     }).then(function (computedFP) {
       // Check public key buffer
-      if (!equalBuffers(computedFP, fp)) {
-        throw new Error('Incorrect fp');
-      }
+      if (!equalBuffers(computedFP, fp)) {throw new Error('Incorrect fp')}
 
-      return privateKey;
-    });
-  } // Wrap private key
+      return privateKey
+    })
 
+  }
 
+  // Wrap private key
   function wrapKey(algorithm, encryptionKey, privateKey, mask) {
-    const encryption = {
-      name: 'GOST 28147-ECB',
-      sBox: algorithm.encParams && algorithm.encParams.sBox
-    },
-          wrapAlgorithm = expand(algorithm, {
-      mode: 'MASK'
-    });
-    wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', ''); // Import mask key
+    const encryption = { name: 'GOST 28147-ECB', sBox: algorithm.encParams && algorithm.encParams.sBox },
+      wrapAlgorithm = expand(algorithm, { mode: 'MASK' })
+    wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '')
 
-    return subtle.importKey('raw', mask, wrapAlgorithm, false, ['sign', 'wrapKey']).then(function (wrappingKey) {
+    // Import mask key
+    return subtle.importKey('raw', mask, wrapAlgorithm, false,
+      ['sign', 'wrapKey']).then(function (wrappingKey) {
       // Wrap private key
-      return subtle.wrapKey('raw', privateKey, wrappingKey, wrapAlgorithm);
+      return subtle.wrapKey('raw', privateKey, wrappingKey, wrapAlgorithm)
     }).then(function (wrappedKey) {
       // Encrypt key
-      return subtle.encrypt(encryption, encryptionKey, wrappedKey);
-    });
-  } // Decrypt private key
-
+      return subtle.encrypt(encryption, encryptionKey, wrappedKey)
+    })
+  }
 
+  // Decrypt private key
   function decryptKey(content, primary, masks, keyPassword, secondary) {
-    const algorithm = content.primaryPrivateKeyParameters.privateKeyAlgorithm;
+    const algorithm = content.primaryPrivateKeyParameters.privateKeyAlgorithm
     return new Promise(call).then(function () {
       // Check format
-      if (primary.hmacKey) {
-        throw new Error('Old key format');
-      }
-
-      if (masks.randomStatus.byteLength < 12) {
-        throw new Error('Invalid random status length');
-      } // Import mask as key for MAC
+      if (primary.hmacKey) {throw new Error('Old key format')}
 
+      if (masks.randomStatus.byteLength < 12) {throw new Error('Invalid random status length')}
 
-      return computeMaskMAC(algorithm, masks.mask, masks.randomStatus);
+      // Import mask as key for MAC
+      return computeMaskMAC(algorithm, masks.mask, masks.randomStatus)
     }).then(function (hmac) {
-      if (!equalBuffers(hmac, masks.hmacRandom)) {
-        throw new Error('Imita for mask is invalid');
-      } // Derive key
+      if (!equalBuffers(hmac, masks.hmacRandom)) {throw new Error('Imita for mask is invalid')}
 
-
-      return derivePasswordKey(algorithm, keyPassword, new Uint8Array(masks.randomStatus, 0, 12));
+      // Derive key
+      return derivePasswordKey(algorithm, keyPassword, new Uint8Array(masks.randomStatus, 0, 12))
     }).then(function (encryptionKey) {
       // Unwrap keys
-      return secondary && primary.secondaryKey ? unwrapKey(content.secondaryPrivateKeyParameters.privateKeyAlgorithm, encryptionKey, primary.secondaryKey, masks.mask, content.secondaryFP) : unwrapKey(algorithm, encryptionKey, primary.primaryKey, masks.mask, content.primaryFP);
-    });
-  } // Encrypt private key
-
+      return secondary && primary.secondaryKey ?
+        unwrapKey(content.secondaryPrivateKeyParameters.privateKeyAlgorithm,
+          encryptionKey, primary.secondaryKey, masks.mask, content.secondaryFP) :
+        unwrapKey(algorithm, encryptionKey, primary.primaryKey, masks.mask, content.primaryFP)
+    })
+  }
 
+  // Encrypt private key
   function encryptKey(algorithm, primary, masks, keyPassword, secondary, privateKey) {
     // Derive key
     return derivePasswordKey(algorithm, keyPassword, new Uint8Array(masks.randomStatus, 0, 12)).then(function (encryptionKey) {
       // Wrap keys
-      return wrapKey(algorithm, encryptionKey, privateKey, masks.mask);
+      return wrapKey(algorithm, encryptionKey, privateKey, masks.mask)
     }).then(function (encryptedKey) {
-      if (!primary) {
-        primary = new asn1.GostPrivateKeys();
-      }
-
+      if (!primary) {primary = new asn1.GostPrivateKeys()}
       if (secondary) {
-        primary.secondaryKey = encryptedKey;
+        primary.secondaryKey = encryptedKey
       } else {
-        primary.primaryKey = encryptedKey;
+        primary.primaryKey = encryptedKey
       }
+      return primary
+    })
+  }
 
-      return primary;
-    });
-  } // </editor-fold>
-
+  // </editor-fold>
 
   return {
     /**
@@ -1138,11 +997,9 @@ extend(Object, CryptoProKeyContainer, function () {
     getKey: function (keyPassword, secondary) // <editor-fold defaultstate="collapsed">
     {
       return this.getPrivateKey(keyPassword, secondary).then(function (privateKey) {
-        return new PKCS8().setPrivateKey(privateKey);
-      });
-    },
-    // </editor-fold>
-
+        return new PKCS8().setPrivateKey(privateKey)
+      })
+    }, // </editor-fold>
     /**
          * Get the private key
          *
@@ -1154,19 +1011,13 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     getPrivateKey: function (keyPassword, secondary) // <editor-fold defaultstate="collapsed">
     {
-      const self = this,
-            content = self.header.keyContainerContent; // Decrypt key
-
+      const self = this, content = self.header.keyContainerContent
+      // Decrypt key
       return decryptKey(content, self.primary, self.masks, keyPassword, secondary)['catch'](function (e) {
-        if (self.primary2 && self.masks2) {
-          return decryptKey(content, self.primary2, self.masks2, keyPassword, secondary);
-        }
-
-        throw e;
-      });
-    },
-    // </editor-fold>
-
+        if (self.primary2 && self.masks2) {return decryptKey(content, self.primary2, self.masks2, keyPassword, secondary)}
+        throw e
+      })
+    }, // </editor-fold>
     /**
          * Get the certificate from the key container
          *
@@ -1177,18 +1028,12 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     getCertificate: function (secondary) // <editor-fold defaultstate="collapsed">
     {
-      const self = this,
-            content = self.header.keyContainerContent;
+      const self = this, content = self.header.keyContainerContent
       return new Promise(call).then(function () {
-        if (secondary) {
-          return new cert.X509(content.secondaryCertificate);
-        }
-
-        return new cert.X509(content.primaryCertificate);
-      });
-    },
-    // </editor-fold>
-
+        if (secondary) {return new cert.X509(content.secondaryCertificate)}
+        return new cert.X509(content.primaryCertificate)
+      })
+    }, // </editor-fold>
     /**
          * Get the container name
          *
@@ -1198,10 +1043,8 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     getContainerName: function () // <editor-fold defaultstate="collapsed">
     {
-      return this.name.containerName;
-    },
-    // </editor-fold>
-
+      return this.name.containerName
+    }, // </editor-fold>
     /**
          * Sets and encrypt the private key info
          *
@@ -1215,13 +1058,11 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     setKey: function (keyInfo, keyPassword, secondary, days) // <editor-fold defaultstate="collapsed">
     {
-      const self = this;
+      const self = this
       return new PKCS8(keyInfo).getPrivateKey().then(function (privateKey) {
-        return self.setPrivateKey(privateKey, keyPassword, secondary, days);
-      });
-    },
-    // </editor-fold>
-
+        return self.setPrivateKey(privateKey, keyPassword, secondary, days)
+      })
+    }, // </editor-fold>
     /**
          * Set the private key
          *
@@ -1235,120 +1076,92 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     setPrivateKey: function (privateKey, keyPassword, secondary, days) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          content,
-          algorithm;
+      let self = this, content, algorithm
       return new Promise(call).then(function () {
         self.header = self.header || new asn1.GostKeyContainer({
           keyContainerContent: {
             containerAlgoritmIdentifier: {
-              algorithm: 'id-CryptoPro-GostPrivateKeys-V2-Full'
+              algorithm: 'id-CryptoPro-GostPrivateKeys-V2-Full',
             },
             attributes: ['kccaReservePrimary', 'kccaPrimaryKeyAbsent'],
             extensions: {
               keyValidity: {
-                notAfter: now(days || options.days)
-              }
-            }
-          }
-        });
-        content = self.header.keyContainerContent; // Set private key
-
-        let keyParameters = secondary ? content.secondaryPrivateKeyParameters : content.primaryPrivateKeyParameters;
-
+                notAfter: now(days || options.days),
+              },
+            },
+          },
+        })
+        content = self.header.keyContainerContent
+        // Set private key
+        let keyParameters = secondary ? content.secondaryPrivateKeyParameters :
+          content.primaryPrivateKeyParameters
         if (!keyParameters) {
           algorithm = expand(privateKey.algorithm, {
             sBox: 'D-A',
             encParams: {
               block: 'CFB',
               sBox: 'E-A',
-              keyMeshing: 'CP'
-            }
-          });
+              keyMeshing: 'CP',
+            },
+          })
           keyParameters = {
             attributes: ['pkaExportable', 'pkaExchange', 'pkaDhAllowed'],
-            privateKeyAlgorithm: algorithm
-          };
-
+            privateKeyAlgorithm: algorithm,
+          }
           if (secondary) {
-            if (!content.primaryPrivateKeyParameters) {
-              throw new Error('Primary key must be defined first');
-            }
-
-            content.secondaryPrivateKeyParameters = keyParameters;
+            if (!content.primaryPrivateKeyParameters) {throw new Error('Primary key must be defined first')}
+            content.secondaryPrivateKeyParameters = keyParameters
           } else {
-            content.primaryPrivateKeyParameters = keyParameters;
-            const absent = content.attributes.indexOf('kccaPrimaryKeyAbsent');
-
-            if (absent >= 0) {
-              content.attributes.splice(absent, 1);
-            }
+            content.primaryPrivateKeyParameters = keyParameters
+            const absent = content.attributes.indexOf('kccaPrimaryKeyAbsent')
+            if (absent >= 0) {content.attributes.splice(absent, 1)}
           }
-        } else {
-          algorithm = keyParameters.privateKeyAlgorithm;
-        } // Generate masks
-
-
+        } else {algorithm = keyParameters.privateKeyAlgorithm}
+        // Generate masks
         const promises = [];
         [0, 1].forEach(function (i) {
-          const name = `masks${i > 0 ? '2' : ''}`;
-
+          const name = `masks${ i > 0 ? '2' : ''}`
           if (!self[name]) {
             promises.push(generateMasks(algorithm).then(function (masks) {
-              self[name] = masks;
-            }));
+              self[name] = masks
+            }))
           }
-        });
-        return Promise.all(promises);
+        })
+        return Promise.all(promises)
       }).then(function () {
         // Encrypt key
         const promises = [];
         [0, 1].forEach(function (i) {
-          const name = `primary${i > 0 ? '2' : ''}`,
-                maskname = `masks${i > 0 ? '2' : ''}`;
+          const name = `primary${ i > 0 ? '2' : ''}`,
+            maskname = `masks${ i > 0 ? '2' : ''}`
           promises.push(encryptKey(algorithm, self[name], self[maskname], keyPassword, secondary, privateKey).then(function (primary) {
-            self[name] = primary;
-          }));
-        });
-        return Promise.all(promises);
+            self[name] = primary
+          }))
+        })
+        return Promise.all(promises)
       }).then(function () {
         // Compute FP for a private key
         return computeFP(privateKey).then(function (FP) {
-          if (secondary) {
-            content.secondaryFP = FP;
-          } else {
-            content.primaryFP = FP;
-          }
-        });
+          if (secondary) {content.secondaryFP = FP} else {content.primaryFP = FP}
+        })
       }).then(function () {
         // Compute password MAC
-        const softPassword = content.attributes.indexOf('kccaSoftPassword');
-
+        const softPassword = content.attributes.indexOf('kccaSoftPassword')
         if (keyPassword) {
-          if (softPassword < 0) {
-            content.attributes.push('kccaSoftPassword');
-          }
-
-          return computePasswordMAC(algorithm, keyPassword, content.primaryFP);
+          if (softPassword < 0) {content.attributes.push('kccaSoftPassword')}
+          return computePasswordMAC(algorithm, keyPassword, content.primaryFP)
         }
+        if (softPassword >= 0) {content.attributes.splice(softPassword, 1)}
 
-        if (softPassword >= 0) {
-          content.attributes.splice(softPassword, 1);
-        }
       }).then(function (hmac) {
-        if (hmac) {
-          content.hmacPassword = hmac;
-        } // Calculate container MAC
-
-
-        return computeContainerMAC(algorithm, content);
+        if (hmac) {content.hmacPassword = hmac}
+        // Calculate container MAC
+        return computeContainerMAC(algorithm, content)
       }).then(function (hmac) {
-        self.header.hmacKeyContainerContent = hmac;
-        return self;
-      });
-    },
-    // </editor-fold>
-
+        self.header.hmacKeyContainerContent = hmac
+        return self
+      })
+    }, // </editor-fold>
     /**
          * Set the certificate to the key container
          *
@@ -1361,58 +1174,51 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     setCertificate: function (certificate, secondary, days) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          content,
-          algorithm;
+      let self = this, content, algorithm
       return new Promise(call).then(function () {
         self.header = self.header || new asn1.GostKeyContainer({
           keyContainerContent: {
             containerAlgoritmIdentifier: {
-              algorithm: 'id-CryptoPro-GostPrivateKeys-V2-Full'
+              algorithm: 'id-CryptoPro-GostPrivateKeys-V2-Full',
             },
             attributes: ['kccaReservePrimary', 'kccaPrimaryKeyAbsent'],
             extensions: {
               keyValidity: {
-                notAfter: now(days || options.days)
-              }
-            }
-          }
-        });
-        content = self.header.keyContainerContent;
-        certificate = new cert.X509(certificate);
-        algorithm = content.primaryPrivateKeyParameters && content.primaryPrivateKeyParameters.privateKeyAlgorithm || expand(certificate.subjectPublicKeyInfo.algorithm, {
-          sBox: 'D-A',
-          encParams: {
-            block: 'CFB',
-            sBox: 'E-A',
-            keyMeshing: 'CP'
-          }
-        });
-        return certificate.getPublicKey();
+                notAfter: now(days || options.days),
+              },
+            },
+          },
+        })
+        content = self.header.keyContainerContent
+        certificate = new cert.X509(certificate)
+        algorithm = (content.primaryPrivateKeyParameters &&
+                    content.primaryPrivateKeyParameters.privateKeyAlgorithm) ||
+                    expand(certificate.subjectPublicKeyInfo.algorithm, {
+                      sBox: 'D-A',
+                      encParams: {
+                        block: 'CFB',
+                        sBox: 'E-A',
+                        keyMeshing: 'CP',
+                      },
+                    })
+        return certificate.getPublicKey()
       }).then(function (publicKey) {
         if (secondary) {
-          if (content.secondaryFP && !equalBuffers(content.secondaryFP, new Uint8Array(publicKey.buffer, 0, content.secondaryFP.byteLength))) {
-            throw new Error('The public key of the certificate does not match the private key');
-          }
-
-          content.secondaryCertificate = certificate;
+          if (content.secondaryFP && !equalBuffers(content.secondaryFP,
+            new Uint8Array(publicKey.buffer, 0, content.secondaryFP.byteLength))) {throw new Error('The public key of the certificate does not match the private key')}
+          content.secondaryCertificate = certificate
         } else {
-          if (content.primaryFP && !equalBuffers(content.primaryFP, new Uint8Array(publicKey.buffer, 0, content.primaryFP.byteLength))) {
-            throw new Error('The public key of the certificate does not match the private key');
-          }
-
-          content.primaryCertificate = certificate;
-        } // Calculate container MAC
-
-
-        return computeContainerMAC(algorithm, content);
+          if (content.primaryFP && !equalBuffers(content.primaryFP,
+            new Uint8Array(publicKey.buffer, 0, content.primaryFP.byteLength))) {throw new Error('The public key of the certificate does not match the private key')}
+          content.primaryCertificate = certificate
+        }
+        // Calculate container MAC
+        return computeContainerMAC(algorithm, content)
       }).then(function (hmac) {
-        self.header.hmacKeyContainerContent = hmac;
-        return self;
-      });
-    },
-    // </editor-fold>
-
+        self.header.hmacKeyContainerContent = hmac
+        return self
+      })
+    }, // </editor-fold>
     /**
          * Set the container name
          *
@@ -1422,12 +1228,8 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     setContainerName: function (name) // <editor-fold defaultstate="collapsed">
     {
-      this.name = new asn1.GostKeyContainerName({
-        containerName: name
-      });
-    },
-    // </editor-fold>
-
+      this.name = new asn1.GostKeyContainerName({ containerName: name })
+    }, // </editor-fold>
     /**
          * Verify key container with password
          *
@@ -1438,46 +1240,29 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     verify: function (keyPassword) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          content,
-          algorithm;
+      let self = this, content, algorithm
       return new Promise(call).then(function () {
-        content = self.header.keyContainerContent;
-        algorithm = content.primaryPrivateKeyParameters.privateKeyAlgorithm; // Verify container MAC
-
-        return computeContainerMAC(algorithm, content);
+        content = self.header.keyContainerContent
+        algorithm = content.primaryPrivateKeyParameters.privateKeyAlgorithm
+        // Verify container MAC
+        return computeContainerMAC(algorithm, content)
       }).then(function (hmac) {
-        if (!equalBuffers(hmac, self.header.hmacKeyContainerContent)) {
-          throw new Error('Container is not valid.');
-        } // Verify key password MAC
-
-
-        const needPassword = content.attributes.indexOf('kccaSoftPassword') >= 0;
-
-        if (!keyPassword && needPassword) {
-          throw new Error('Password is required');
-        }
-
-        if (keyPassword && !needPassword) {
-          throw new Error('Password is not reqiured.');
+        if (!equalBuffers(hmac, self.header.hmacKeyContainerContent)) {throw new Error('Container is not valid.')}
+        // Verify key password MAC
+        const needPassword = content.attributes.indexOf('kccaSoftPassword') >= 0
+        if (!keyPassword && needPassword) {throw new Error('Password is required')}
+        if (keyPassword && !needPassword) {throw new Error('Password is not reqiured.')}
+        if (keyPassword)
+        // Derive password
+        {
+          return computePasswordMAC(algorithm, keyPassword, content.primaryFP).then(function (hmac) {
+            if (!equalBuffers(hmac, content.hmacPassword)) {throw new Error('Password is not valid.')}
+            return self
+          })
         }
-
-        if (keyPassword) // Derive password
-          {
-            return computePasswordMAC(algorithm, keyPassword, content.primaryFP).then(function (hmac) {
-              if (!equalBuffers(hmac, content.hmacPassword)) {
-                throw new Error('Password is not valid.');
-              }
-
-              return self;
-            });
-          }
-
-        return self;
-      });
-    },
-    // </editor-fold>
-
+        return self
+      })
+    }, // </editor-fold>
     /**
          * Change key password
          *
@@ -1489,30 +1274,22 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     changePassword: function (oldKeyPassword, newKeyPassword) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          content;
+      let self = this, content
       return new Promise(call).then(function () {
-        content = self.header.keyContainerContent;
-
-        if (!content.primaryPrivateKeyParameters) {
-          throw new Error('Private key not yet defined');
-        }
-
+        content = self.header.keyContainerContent
+        if (!content.primaryPrivateKeyParameters) {throw new Error('Private key not yet defined')}
         return self.getPrivateKey(oldKeyPassword).then(function (privateKey) {
-          return self.setPrivateKey(privateKey, newKeyPassword);
-        });
+          return self.setPrivateKey(privateKey, newKeyPassword)
+        })
       }).then(function () {
         if (content.secondaryPrivateKeyParameters) {
           return self.getPrivateKey(oldKeyPassword, true).then(function (privateKey) {
-            return self.setPrivateKey(privateKey, newKeyPassword, true);
-          });
+            return self.setPrivateKey(privateKey, newKeyPassword, true)
+          })
         }
-
-        return self;
-      });
-    },
-    // </editor-fold>
-
+        return self
+      })
+    }, // </editor-fold>
     /**
          * Generate private key, certificate and return certification request
          *
@@ -1525,31 +1302,24 @@ extend(Object, CryptoProKeyContainer, function () {
          */
     generate: function (req, keyPassword, keyAlgorithm) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          certificate,
-          keyInfo;
+      let self = this, certificate, keyInfo
       return new Promise(call).then(function () {
-        if (!(req instanceof cert.Request)) {
-          req = new cert.Request(req);
-        } // Generate request
-
-
-        return req.generate(keyAlgorithm);
+        if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+        // Generate request
+        return req.generate(keyAlgorithm)
       }).then(function (key) {
-        keyInfo = key;
-        return self.setKey(keyInfo, keyPassword);
+        keyInfo = key
+        return self.setKey(keyInfo, keyPassword)
       }).then(function () {
         // Create the new certificate
-        certificate = new cert.X509(req);
-        return certificate.sign(keyInfo);
+        certificate = new cert.X509(req)
+        return certificate.sign(keyInfo)
       }).then(function () {
-        return self.setCertificate(certificate);
+        return self.setCertificate(certificate)
       }).then(function () {
-        return req;
-      });
-    },
-    // </editor-fold>
-
+        return req
+      })
+    }, // </editor-fold>
     /**
          * Encode key container
          *
@@ -1566,20 +1336,20 @@ extend(Object, CryptoProKeyContainer, function () {
         masks: this.masks.encode(format),
         primary: this.primary.encode(format),
         masks2: this.masks2.encode(format),
-        primary2: this.primary2.encode(format)
-      };
-    } // </editor-fold>
+        primary2: this.primary2.encode(format),
+      }
+    }, // </editor-fold>
+  }
+})())
 
-  };
-}());
 /**
  * A class for password-encrypted private keys in CryptoPro container
  *
  * @memberOf GostKeys
  * @type GostKeys.SignalComPrivateKeyInfo
  */
+GostKeys.prototype.CryptoProKeyContainer = CryptoProKeyContainer
 
-GostKeys.prototype.CryptoProKeyContainer = CryptoProKeyContainer;
 /**
  * A class for password-encrypted private keys in ViPNet container entry
  *
@@ -1587,7 +1357,6 @@ GostKeys.prototype.CryptoProKeyContainer = CryptoProKeyContainer;
  * @extends GostASN1.ViPNetInfo
  * @param {(FormatedData|GostKeys.ViPNetContainerEntry)} entry
  */
-
 function ViPNetContainerEntry(entry) // <editor-fold defaultstate="collapsed">
 {
   asn1.ViPNetInfo.call(this, entry || {
@@ -1595,45 +1364,42 @@ function ViPNetContainerEntry(entry) // <editor-fold defaultstate="collapsed">
     keyInfo: {
       keyClass: 1,
       keyType: 43556,
-      flags: 1
+      flags: 1,
     },
     defenceKeyInfo: {
       keyClass: 1024,
       keyType: 24622,
       keyUID: getSeed(32),
-      flags: -2147483648
-    }
-  });
+      flags: -2147483648,
+    },
+  })
 } // </editor-fold>
 
+extend(asn1.ViPNetInfo, ViPNetContainerEntry, (function () {
 
-extend(asn1.ViPNetInfo, ViPNetContainerEntry, function () {
   function getKeyPassword(keyPassword) // <editor-fold defaultstate="collapsed">
   {
-    if (keyPassword === undefined) {
-      keyPassword = '';
-    } // Generate key data
-
-
-    let passwordData = coding.Chars.decode(keyPassword, 'win1251'),
-        keyData;
+    if (keyPassword === undefined) {keyPassword = ''}
+    // Generate key data
+    let passwordData = coding.Chars.decode(keyPassword, 'win1251'), keyData
     return subtle.digest('GOST R 34.11-94', passwordData).then(function (data) {
-      keyData = data; // Generate mask data
-
-      const secodeData = new Uint8Array(passwordData.byteLength + keyData.byteLength);
-      secodeData.set(new Uint8Array(passwordData), 0);
-      secodeData.set(new Uint8Array(keyData), passwordData.byteLength);
-      return subtle.digest('GOST R 34.11-94', secodeData);
+      keyData = data
+      // Generate mask data
+      const secodeData = new Uint8Array(passwordData.byteLength + keyData.byteLength)
+      secodeData.set(new Uint8Array(passwordData), 0)
+      secodeData.set(new Uint8Array(keyData), passwordData.byteLength)
+      return subtle.digest('GOST R 34.11-94', secodeData)
     }).then(function (data) {
       // Remove mask
-      return subtle.importKey('raw', data, 'GOST 28147', false, ['unwrapKey']);
+      return subtle.importKey('raw', data, 'GOST 28147', false, ['unwrapKey'])
     }).then(function (unwrappingKey) {
       // Unwrap secret key
-      return subtle.unwrapKey('raw', keyData, unwrappingKey, 'GOST 28147-MASK/VN', 'GOST 28147-89', 'false', ['encrypt', 'decrypt', 'sign', 'verify']);
-    });
+      return subtle.unwrapKey('raw', keyData, unwrappingKey,
+        'GOST 28147-MASK/VN', 'GOST 28147-89',
+        'false', ['encrypt', 'decrypt', 'sign', 'verify'])
+    })
   } // </editor-fold>
 
-
   return {
     /**
          * Get the private key
@@ -1645,88 +1411,66 @@ extend(asn1.ViPNetInfo, ViPNetContainerEntry, function () {
          */
     getPrivateKey: function (keyPassword) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          keyPart,
-          encryptedKey; // Decrypt key
-
+      let self = this, keyPart, encryptedKey
+      // Decrypt key
       return new Promise(call).then(function () {
-        return !keyPassword || typeof keyPassword === 'string' ? getKeyPassword(keyPassword) : keyPassword;
+        return !keyPassword || typeof keyPassword === 'string' ?
+          getKeyPassword(keyPassword) : keyPassword
       }).then(function (key) {
-        keyPassword = key; // Verify password
-
-        keyPart = self.keyPart;
-        encryptedKey = new Uint8Array(keyPart, 0, keyPart.byteLength - 4 - 8);
+        keyPassword = key
+        // Verify password
+        keyPart = self.keyPart
+        encryptedKey = new Uint8Array(keyPart, 0, keyPart.byteLength - 4 - 8)
         const macKey = new Uint8Array(keyPart, encryptedKey.byteLength, 4),
-              encodedKeyInfo = self.keyInfo.encode(),
-              data = new Uint8Array(encryptedKey.byteLength + encodedKeyInfo.byteLength);
-        data.set(new Uint8Array(encryptedKey), 0);
-        data.set(new Uint8Array(encodedKeyInfo), encryptedKey.byteLength);
-        return subtle.verify({
-          name: 'GOST 28147-89-MAC'
-        }, keyPassword, macKey, data);
+          encodedKeyInfo = self.keyInfo.encode(),
+          data = new Uint8Array(encryptedKey.byteLength + encodedKeyInfo.byteLength)
+        data.set(new Uint8Array(encryptedKey), 0)
+        data.set(new Uint8Array(encodedKeyInfo), encryptedKey.byteLength)
+        return subtle.verify({ name: 'GOST 28147-89-MAC' }, keyPassword, macKey, data)
       }).then(function (result) {
-        if (!result) {
-          throw new Error('Invalid key password');
-        }
-
-        const iv = new Uint8Array(keyPart, keyPart.byteLength - 8, 8); // Decrypt key data
-
-        return subtle.decrypt({
-          name: 'GOST 28147-89-CFB',
-          iv: iv
-        }, keyPassword, encryptedKey);
+        if (!result) {throw new Error('Invalid key password')}
+        const iv = new Uint8Array(keyPart, keyPart.byteLength - 8, 8)
+        // Decrypt key data
+        return subtle.decrypt({ name: 'GOST 28147-89-CFB', iv: iv }, keyPassword, encryptedKey)
       }).then(function (keyData) {
-        const l2 = keyData.byteLength / 2;
-
+        const l2 = keyData.byteLength / 2
         if (self.keyInfo.keyClass & 0x3 === 0) {
           // Secret key. Remove mask and import
-          return subtle.importKey('raw', new Int32Array(keyData, l2, l2), 'GOST 28147', false, ['unwrapKey']).then(function (unwrappingKey) {
+          return subtle.importKey('raw', new Int32Array(keyData, l2, l2), 'GOST 28147', false,
+            ['unwrapKey']).then(function (unwrappingKey) {
             // Unwrap secret key
-            return subtle.unwrapKey('raw', new Int32Array(keyData, 0, l2), unwrappingKey, 'GOST 28147-MASK/VN', 'GOST 28147-89', 'false', ['encrypt', 'decrypt', 'sign', 'verify']);
-          });
-        } // Private key
-
-
-        const algorithm = self.keyInfo.algorithm || self.certificate && self.certificate.subjectPublicKeyInfo.algorithm;
-
-        if (!algorithm) {
-          throw new Error('Algorithm is not specified');
+            return subtle.unwrapKey('raw', new Int32Array(keyData, 0, l2), unwrappingKey,
+              'GOST 28147-MASK/VN', 'GOST 28147-89',
+              'false', ['encrypt', 'decrypt', 'sign', 'verify'])
+          })
         }
-
-        const unwrapAlgorithm = expand(algorithm, {
-          mode: 'MASK',
-          procreator: 'VN'
-        });
-        unwrapAlgorithm.name = unwrapAlgorithm.name.replace('-DH', '');
+        // Private key
+        const algorithm = self.keyInfo.algorithm ||
+                        (self.certificate && self.certificate.subjectPublicKeyInfo.algorithm)
+        if (!algorithm) {throw new Error('Algorithm is not specified')}
+        const unwrapAlgorithm = expand(algorithm, { mode: 'MASK', procreator: 'VN' })
+        unwrapAlgorithm.name = unwrapAlgorithm.name.replace('-DH', '')
         const wrapped = new Uint8Array(keyData, 0, l2),
-              mask = new Uint8Array(keyData, l2, l2); // Import mask key
-
+          mask = new Uint8Array(keyData, l2, l2)
+        // Import mask key
         return subtle.importKey('raw', mask, unwrapAlgorithm, 'false', ['sign', 'unwrapKey']).then(function (unwrappingKey) {
           // Unwrap private key
-          return subtle.unwrapKey('raw', wrapped, unwrappingKey, unwrapAlgorithm, algorithm, 'true', ['sign', 'deriveBits', 'deriveKey']);
+          return subtle.unwrapKey('raw', wrapped, unwrappingKey, unwrapAlgorithm, algorithm, 'true', ['sign', 'deriveBits', 'deriveKey'])
         }).then(function (privateKey) {
           // Generate key pair
           if (self.publicKey) {
-            return subtle.generateKey(expand(privateKey.algorithm, {
-              ukm: privateKey.buffer
-            }), privateKey.extractable, privateKey.usages);
+            return subtle.generateKey(expand(privateKey.algorithm, { ukm: privateKey.buffer }),
+              privateKey.extractable, privateKey.usages)
           }
-
-          return {
-            privateKey: privateKey
-          };
+          return { privateKey: privateKey }
         }).then(function (keyPair) {
           // Compare public key
-          if (self.publicKey && !equalBuffers(keyPair.publicKey.buffer, self.publicKey)) {
-            throw new Error('Check public key failed');
-          }
-
-          return keyPair.privateKey;
-        });
-      });
-    },
-    // </editor-fold>
+          if (self.publicKey && !equalBuffers(keyPair.publicKey.buffer, self.publicKey)) {throw new Error('Check public key failed')}
+          return keyPair.privateKey
+        })
 
+      })
+    }, // </editor-fold>
     /**
          * Set the private key
          *
@@ -1739,100 +1483,78 @@ extend(asn1.ViPNetInfo, ViPNetContainerEntry, function () {
          */
     setPrivateKey: function (privateKey, keyPassword, days) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          wrapAlgorithm,
-          wrappingKey,
-          keyData,
-          keyPart; // Decrypt key
-
+      let self = this, wrapAlgorithm, wrappingKey, keyData, keyPart
+      // Decrypt key
       return new Promise(call).then(function () {
-        return !keyPassword || typeof keyPassword === 'string' ? getKeyPassword(keyPassword) : keyPassword;
+        return !keyPassword || typeof keyPassword === 'string' ?
+          getKeyPassword(keyPassword) : keyPassword
       }).then(function (key) {
-        keyPassword = key;
-        const algorithm = privateKey.algorithm;
-        self.keyInfo.algorithm = algorithm;
-        self.keyInfo.serialNumber = getSeed(16);
-        self.keyInfo.keyUID = getSeed(8);
+        keyPassword = key
+        const algorithm = privateKey.algorithm
+        self.keyInfo.algorithm = algorithm
+        self.keyInfo.serialNumber = getSeed(16)
+        self.keyInfo.keyUID = getSeed(8)
         self.keyInfo.validity = {
           notBefore: today(),
-          notAfter: today(days || options.days)
-        };
-
+          notAfter: today(days || options.days),
+        }
         if (privateKey.type === 'private') {
           // Generate mask
-          wrapAlgorithm = expand(algorithm, {
-            mode: 'MASK',
-            procreator: 'VN'
-          });
-          wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '');
-          self.keyInfo.keyClass = 1;
-          self.keyInfo.keyType = 43556; // Generate public key
-
-          return subtle.generateKey(expand(algorithm, {
-            ukm: privateKey.buffer
-          }), true, ['sign', 'verify']).then(function (keyPair) {
-            self.publicKey = keyPair.publicKey.buffer; // Check certificate
-
+          wrapAlgorithm = expand(algorithm, { mode: 'MASK', procreator: 'VN' })
+          wrapAlgorithm.name = wrapAlgorithm.name.replace('-DH', '')
+          self.keyInfo.keyClass = 1
+          self.keyInfo.keyType = 43556
+          // Generate public key
+          return subtle.generateKey(expand(algorithm, { ukm: privateKey.buffer }), true,
+            ['sign', 'verify']).then(function (keyPair) {
+            self.publicKey = keyPair.publicKey.buffer
+            // Check certificate
             if (self.certificate) {
-              const spki = self.certificate.subjectPublicKeyInfo;
-              return subtle.importKey('spki', spki.encode(), spki.algorithm, true, ['verify']);
+              const spki = self.certificate.subjectPublicKeyInfo
+              return subtle.importKey('spki', spki.encode(), spki.algorithm, true, ['verify'])
             }
           }).then(function (publicKey) {
-            if (publicKey && !equalBuffers(publicKey.buffer, self.publicKey)) {
-              delete self.certificate;
-            } // Remove not valid certificate
-
-          });
-        }
-
-        if (privateKey.type === 'secret') {
-          wrapAlgorithm = 'GOST 28147/MASK/VN';
-          delete self.certificate;
-          delete self.publicKey;
-          self.keyInfo.keyClass = 64;
-          self.keyInfo.keyType = 24622;
-        } else {
-          throw new Error('Invalid key type');
-        }
+            if (publicKey && !equalBuffers(publicKey.buffer, self.publicKey)) {delete self.certificate} // Remove not valid certificate
+          })
+        } if (privateKey.type === 'secret') {
+          wrapAlgorithm = 'GOST 28147/MASK/VN'
+          delete self.certificate
+          delete self.publicKey
+          self.keyInfo.keyClass = 64
+          self.keyInfo.keyType = 24622
+        } else {throw new Error('Invalid key type')}
       }).then(function () {
         // Generate mask
-        return subtle.generateKey(wrapAlgorithm, true, ['wrapKey', 'unwrapKey']);
+        return subtle.generateKey(wrapAlgorithm, true, ['wrapKey', 'unwrapKey'])
       }).then(function (key) {
-        wrappingKey = key; // Wrap private key with mask
-
-        return subtle.wrapKey('raw', privateKey, wrappingKey, wrapAlgorithm);
+        wrappingKey = key
+        // Wrap private key with mask
+        return subtle.wrapKey('raw', privateKey, wrappingKey, wrapAlgorithm)
       }).then(function (data) {
-        keyData = new Uint8Array(data.byteLength * 2);
-        keyData.set(new Uint8Array(data));
-        return subtle.exportKey('raw', wrappingKey);
+        keyData = new Uint8Array(data.byteLength * 2)
+        keyData.set(new Uint8Array(data))
+        return subtle.exportKey('raw', wrappingKey)
       }).then(function (data) {
-        keyData.set(new Uint8Array(data), data.byteLength);
-        keyPart = new Uint8Array(keyData.byteLength + 12); // Encrypt key
-
-        const encyption = {
-          name: 'GOST 28147-CFB',
-          iv: getSeed(8)
-        };
-        keyPart.set(new Uint8Array(encyption.iv), keyPart.byteLength - 8);
-        return subtle.encrypt(encyption, keyPassword, keyData);
+        keyData.set(new Uint8Array(data), data.byteLength)
+        keyPart = new Uint8Array(keyData.byteLength + 12)
+        // Encrypt key
+        const encyption = { name: 'GOST 28147-CFB', iv: getSeed(8) }
+        keyPart.set(new Uint8Array(encyption.iv), keyPart.byteLength - 8)
+        return subtle.encrypt(encyption, keyPassword, keyData)
       }).then(function (encryptedKey) {
-        keyPart.set(new Uint8Array(encryptedKey)); // Calculate MAC
-
+        keyPart.set(new Uint8Array(encryptedKey))
+        // Calculate MAC
         const encodedKeyInfo = self.keyInfo.encode(),
-              data = new Uint8Array(encryptedKey.byteLength + encodedKeyInfo.byteLength);
-        data.set(new Uint8Array(encryptedKey), 0);
-        data.set(new Uint8Array(encodedKeyInfo), encryptedKey.byteLength);
-        return subtle.sign({
-          name: 'GOST 28147-89-MAC'
-        }, keyPassword, data);
+          data = new Uint8Array(encryptedKey.byteLength + encodedKeyInfo.byteLength)
+        data.set(new Uint8Array(encryptedKey), 0)
+        data.set(new Uint8Array(encodedKeyInfo), encryptedKey.byteLength)
+        return subtle.sign({ name: 'GOST 28147-89-MAC' }, keyPassword, data)
       }).then(function (macKey) {
-        keyPart.set(new Uint8Array(macKey), keyPart.byteLength - 12);
-        self.keyPart = keyPart.buffer;
-        return self;
-      });
-    },
-    // </editor-fold>
-
+        keyPart.set(new Uint8Array(macKey), keyPart.byteLength - 12)
+        self.keyPart = keyPart.buffer
+        return self
+      })
+    }, // </editor-fold>
     /**
          * Encode container entry
          *
@@ -1844,21 +1566,16 @@ extend(asn1.ViPNetInfo, ViPNetContainerEntry, function () {
     encode: function (format) // <editor-fold defaultstate="collapsed">
     {
       const header = asn1.ViPNetInfo.method('encode').call(this),
-            result = new Uint8Array(8 + header.byteLength + this.keyPart.byteLength);
-      set32(result.buffer, 0, 4 + header.byteLength + this.keyPart.byteLength);
-      result.set(new Uint8Array(header), 4);
-      set32(result.buffer, 4 + header.byteLength, this.keyPart.byteLength);
-      result.set(new Uint8Array(this.keyPart), 8 + header.byteLength);
-
-      if (format === 'PEM') {
-        return coding.Base64.encode(result.buffer);
-      }
-
-      return result.buffer;
-    } // </editor-fold>
-
-  };
-}(), {
+        result = new Uint8Array(8 + header.byteLength + this.keyPart.byteLength)
+      set32(result.buffer, 0, 4 + header.byteLength + this.keyPart.byteLength)
+      result.set(new Uint8Array(header), 4)
+      set32(result.buffer, 4 + header.byteLength, this.keyPart.byteLength)
+      result.set(new Uint8Array(this.keyPart), 8 + header.byteLength)
+      if (format === 'PEM') {return coding.Base64.encode(result.buffer)}
+      return result.buffer
+    }, // </editor-fold>
+  }
+})(), {
   /**
      * Decode container entry
      *
@@ -1868,67 +1585,51 @@ extend(asn1.ViPNetInfo, ViPNetContainerEntry, function () {
      */
   decode: function (entry) // <editor-fold defaultstate="collapsed">
   {
-    if (typeof entry === 'string') {
-      entry = coding.Base64.decode(entry);
-    }
-
-    entry = buffer(entry); // Entry size
-
-    const entrySize = get32(entry, 0);
-
-    if (entry.byteLength !== entrySize + 4) {
-      throw new Error('Invalid container entry size');
-    } // Decode header info
-
-
-    const source = coding.BER.decode(new Uint8Array(entry, 4, entrySize));
-    const result = asn1.ViPNetInfo.decode.call(this, source); // Decode key info
-
+    if (typeof entry === 'string') {entry = coding.Base64.decode(entry)}
+    entry = buffer(entry)
+    // Entry size
+    const entrySize = get32(entry, 0)
+    if (entry.byteLength !== entrySize + 4) {throw new Error('Invalid container entry size')}
+    // Decode header info
+    const source = coding.BER.decode(new Uint8Array(entry, 4, entrySize))
+    const result = asn1.ViPNetInfo.decode.call(this, source)
+    // Decode key info
     const headerSize = source.header.byteLength + source.content.byteLength,
-          keyPartSize = get32(entry, 4 + headerSize);
-
-    if (entry.byteLength !== headerSize + keyPartSize + 8) {
-      throw new Error('Invalid container key part size');
-    }
-
-    result.keyPart = new Uint8Array(new Uint8Array(entry, headerSize + 8, keyPartSize)).buffer; // Key Info buffer - can be used in case error of format encoding
+      keyPartSize = get32(entry, 4 + headerSize)
+    if (entry.byteLength !== headerSize + keyPartSize + 8) {throw new Error('Invalid container key part size')}
+    result.keyPart = new Uint8Array(new Uint8Array(entry, headerSize + 8, keyPartSize)).buffer
+    // Key Info buffer - can be used in case error of format encoding
     // var keyInfoSource = source.object[1];
     // result.encodedKeyInfo = new Uint8Array(new Uint8Array(keyInfoSource.header.buffer,
     //    keyInfoSource.header.byteOffset, keyInfoSource.header.byteLength + keyInfoSource.content.byteLength)).buffer;
+    return result
+  }, // </editor-fold>
+})
 
-    return result;
-  } // </editor-fold>
-
-});
 /**
  * A class for password-encrypted private keys in CryptoPro container
  *
  * @memberOf GostKeys
  * @type GostKeys.SignalComPrivateKeyInfo
  */
+GostKeys.prototype.ViPNetContainerEntry = ViPNetContainerEntry
 
-GostKeys.prototype.ViPNetContainerEntry = ViPNetContainerEntry;
 /**
  * A class for password-encrypted private keys in ViPNet container
  *
  * @class GostKeys.ViPNetContainer
  * @param {(FormatedData|GostKeys.ViPNetContainer)} container
  */
-
 function ViPNetContainer(container) // <editor-fold defaultstate="collapsed">
 {
-  if (container && (container instanceof CryptoOperationData || container.buffer instanceof CryptoOperationData || typeof container === 'string')) {
-    this.decode(container);
-  } else {
-    container = container || {};
-    this.fileType = container.fileType || 'ITCS';
-    this.fileVersion = container.fileVersion || 0x10;
-
-    if (container.applicationHeader) {
-      this.applicationHeader = container.applicationHeader;
-    }
-
-    this.entries = container.entries || [];
+  if (container && (container instanceof CryptoOperationData ||
+        container.buffer instanceof CryptoOperationData ||
+        typeof container === 'string')) {this.decode(container)} else {
+    container = container || {}
+    this.fileType = container.fileType || 'ITCS'
+    this.fileVersion = container.fileVersion || 0x10
+    if (container.applicationHeader) {this.applicationHeader = container.applicationHeader}
+    this.entries = container.entries || []
   }
 } // </editor-fold>
 
@@ -1944,21 +1645,13 @@ extend(Object, ViPNetContainer, {
      */
   getCertificate: function (index) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
-      const entry = self.entries[index || 0];
-
-      if (!entry) {
-        throw new Error('Entry not defined');
-      }
-
-      if (entry.certificate) {
-        return new cert.X509(entry.certificate);
-      }
-    });
-  },
-  // </editor-fold>
-
+      const entry = self.entries[index || 0]
+      if (!entry) {throw new Error('Entry not defined')}
+      if (entry.certificate) {return new cert.X509(entry.certificate)}
+    })
+  }, // </editor-fold>
   /**
      * Get the private key info
      *
@@ -1971,11 +1664,9 @@ extend(Object, ViPNetContainer, {
   getKey: function (keyPassword, index) // <editor-fold defaultstate="collapsed">
   {
     return this.getPrivateKey(keyPassword, index).then(function (privateKey) {
-      return new PKCS8().setPrivateKey(privateKey);
-    });
-  },
-  // </editor-fold>
-
+      return new PKCS8().setPrivateKey(privateKey)
+    })
+  }, // </editor-fold>
   /**
      * Get the private key
      *
@@ -1987,19 +1678,13 @@ extend(Object, ViPNetContainer, {
      */
   getPrivateKey: function (keyPassword, index) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
-      const entry = self.entries[index || 0];
-
-      if (!entry) {
-        throw new Error('Entry not defined');
-      }
-
-      return entry.getPrivateKey(keyPassword);
-    });
-  },
-  // </editor-fold>
-
+      const entry = self.entries[index || 0]
+      if (!entry) {throw new Error('Entry not defined')}
+      return entry.getPrivateKey(keyPassword)
+    })
+  }, // </editor-fold>
   /**
      * Set the certificate to the container
      *
@@ -2011,27 +1696,18 @@ extend(Object, ViPNetContainer, {
      */
   setCertificate: function (certificate, index) // <editor-fold defaultstate="collapsed">
   {
-    var self = this,
-        entry,
-        certificate;
+    var self = this, entry, certificate
     return new Promise(call).then(function () {
-      entry = self.entries[index || 0] || (self.entries[index || 0] = new ViPNetContainerEntry());
-      certificate = new cert.X509(certificate);
-
-      if (entry.publicKey) {
-        return certificate.getPublicKey();
-      }
+      entry = self.entries[index || 0] ||
+                (self.entries[index || 0] = new ViPNetContainerEntry())
+      certificate = new cert.X509(certificate)
+      if (entry.publicKey) {return certificate.getPublicKey()}
     }).then(function (publicKey) {
-      if (publicKey && !equalBuffers(entry.publicKey, publicKey.buffer)) {
-        throw new Error('Invalid certificate for private key');
-      }
-
-      entry.certificate = certificate;
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      if (publicKey && !equalBuffers(entry.publicKey, publicKey.buffer)) {throw new Error('Invalid certificate for private key')}
+      entry.certificate = certificate
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Set the key to the container
      *
@@ -2045,13 +1721,11 @@ extend(Object, ViPNetContainer, {
      */
   setKey: function (keyInfo, keyPassword, index, days) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new PKCS8(keyInfo).getPrivateKey().then(function (privateKey) {
-      return self.setPrivateKey(privateKey, keyPassword, index, days);
-    });
-  },
-  // </editor-fold>
-
+      return self.setPrivateKey(privateKey, keyPassword, index, days)
+    })
+  }, // </editor-fold>
   /**
      * Set the private key
      *
@@ -2065,16 +1739,15 @@ extend(Object, ViPNetContainer, {
      */
   setPrivateKey: function (privateKey, keyPassword, index, days) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
-      const entry = self.entries[index || 0] || (self.entries[index || 0] = new ViPNetContainerEntry());
-      return entry.setPrivateKey(privateKey, keyPassword, days);
+      const entry = self.entries[index || 0] ||
+                (self.entries[index || 0] = new ViPNetContainerEntry())
+      return entry.setPrivateKey(privateKey, keyPassword, days)
     }).then(function () {
-      return self;
-    });
-  },
-  // </editor-fold>
-
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Change key password
      *
@@ -2086,15 +1759,13 @@ extend(Object, ViPNetContainer, {
      */
   changePassword: function (oldKeyPassword, newKeyPassword) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
       return self.getPrivateKey(oldKeyPassword).then(function (privateKey) {
-        return self.setPrivateKey(privateKey, newKeyPassword);
-      });
-    });
-  },
-  // </editor-fold>
-
+        return self.setPrivateKey(privateKey, newKeyPassword)
+      })
+    })
+  }, // </editor-fold>
   /**
      * Generate private key, certificate and return certification request
      *
@@ -2107,31 +1778,24 @@ extend(Object, ViPNetContainer, {
      */
   generate: function (req, keyPassword, keyAlgorithm) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        certificate,
-        keyInfo;
+    let self = this, certificate, keyInfo
     return new Promise(call).then(function () {
-      if (!(req instanceof cert.Request)) {
-        req = new cert.Request(req);
-      } // Generate request
-
-
-      return req.generate(keyAlgorithm);
+      if (!(req instanceof cert.Request)) {req = new cert.Request(req)}
+      // Generate request
+      return req.generate(keyAlgorithm)
     }).then(function (key) {
-      keyInfo = key;
-      return self.setKey(keyInfo, keyPassword);
+      keyInfo = key
+      return self.setKey(keyInfo, keyPassword)
     }).then(function () {
       // Create the new certificate
-      certificate = new cert.X509(req);
-      return certificate.sign(keyInfo);
+      certificate = new cert.X509(req)
+      return certificate.sign(keyInfo)
     }).then(function () {
-      return self.setCertificate(certificate);
+      return self.setCertificate(certificate)
     }).then(function () {
-      return req;
-    });
-  },
-  // </editor-fold>
-
+      return req
+    })
+  }, // </editor-fold>
   /**
      * Encode objet to container
      *
@@ -2143,37 +1807,26 @@ extend(Object, ViPNetContainer, {
   encode: function (format) // <editor-fold defaultstate="collapsed">
   {
     // Encode entries
-    let entries = [],
-        entriesSize = 0;
+    let entries = [], entriesSize = 0
     this.entries.forEach(function (entry) {
-      const encoded = entry.encode();
-      entriesSize += encoded.byteLength;
-      entries.push(encoded);
-    });
+      const encoded = entry.encode()
+      entriesSize += encoded.byteLength
+      entries.push(encoded)
+    })
     const headerSize = this.applicationHeader ? this.applicationHeader.byteLength : 0,
-          result = new Uint8Array(12 + headerSize + entriesSize);
-    result.set(new Uint8Array(coding.Chars.decode(this.fileType, 'ascii')));
-    set32(result.buffer, 4, this.fileVersion);
-    set32(result.buffer, 8, headerSize);
-
-    if (headerSize > 0) {
-      result.set(new Uint8Array(this.applicationHeader), 12);
-    }
-
-    let offset = 12 + headerSize;
+      result = new Uint8Array(12 + headerSize + entriesSize)
+    result.set(new Uint8Array(coding.Chars.decode(this.fileType, 'ascii')))
+    set32(result.buffer, 4, this.fileVersion)
+    set32(result.buffer, 8, headerSize)
+    if (headerSize > 0) {result.set(new Uint8Array(this.applicationHeader), 12)}
+    let offset = 12 + headerSize
     entries.forEach(function (entry) {
-      result.set(new Uint8Array(entry), offset);
-      offset += entry.byteLength;
-    });
-
-    if (format === 'PEM') {
-      return coding.Base64.encode(result.buffer);
-    }
-
-    return result.buffer;
-  },
-  // </editor-fold>
-
+      result.set(new Uint8Array(entry), offset)
+      offset += entry.byteLength
+    })
+    if (format === 'PEM') {return coding.Base64.encode(result.buffer)}
+    return result.buffer
+  }, // </editor-fold>
   /**
      * Decode container to the object
      *
@@ -2184,17 +1837,12 @@ extend(Object, ViPNetContainer, {
      */
   decode: function (container) // <editor-fold defaultstate="collapsed">
   {
-    container = this.constructor.decode(container);
-    this.fileType = container.fileType;
-    this.fileVersion = container.fileVersion;
-
-    if (container.applicationHeader) {
-      this.applicationHeader = container.applicationHeader;
-    }
-
-    this.entries = container.entries;
-  } // </editor-fold>
-
+    container = this.constructor.decode(container)
+    this.fileType = container.fileType
+    this.fileVersion = container.fileVersion
+    if (container.applicationHeader) {this.applicationHeader = container.applicationHeader}
+    this.entries = container.entries
+  }, // </editor-fold>
 }, {
   /**
      * Encode object
@@ -2207,10 +1855,8 @@ extend(Object, ViPNetContainer, {
      */
   encode: function (object, format) // <editor-fold defaultstate="collapsed">
   {
-    return new this(object).encode(format);
-  },
-  // </editor-fold>
-
+    return new this(object).encode(format)
+  }, // </editor-fold>
   /**
      * Decode container
      *
@@ -2221,64 +1867,45 @@ extend(Object, ViPNetContainer, {
      */
   decode: function (container) // <editor-fold defaultstate="collapsed">
   {
-    if (typeof container === 'string') {
-      container = coding.Base64.decode(container);
-    }
-
-    container = buffer(container); // File type
-
-    const fileType = coding.Chars.encode(new Uint8Array(container, 0, 4), 'ascii');
-
-    if (fileType !== 'ITCS' && fileType !== 'PKEY' && fileType !== '_CCK' && fileType !== '_LCK') {
-      throw new Error('Unsupported ViPNet container type');
-    } // File version
-
-
+    if (typeof container === 'string') {container = coding.Base64.decode(container)}
+    container = buffer(container)
+    // File type
+    const fileType = coding.Chars.encode(new Uint8Array(container, 0, 4), 'ascii')
+    if (fileType !== 'ITCS' && fileType !== 'PKEY' && fileType !== '_CCK' && fileType !== '_LCK') {throw new Error('Unsupported ViPNet container type')}
+    // File version
     const fileVersion = get32(container, 4),
-          i = fileVersion >>> 16,
-          j = fileVersion & 0xffff;
-
-    if (i !== 0 && i !== 1 || j > 0xff) {
-      throw new Error('Unsupported ViPNet container version');
-    } // File header
-
-
-    let headerSize = get32(container, 8),
-        applicationHeader;
-
-    if (headerSize > 0) {
-      applicationHeader = buffer(new Uint8Array(container, 12, headerSize));
-    } // Read entries
-
-
-    let offset = 12 + headerSize,
-        entries = [];
-
+      i = fileVersion >>> 16, j = fileVersion & 0xffff
+    if ((i !== 0 && i !== 1) || j > 0xff) {throw new Error('Unsupported ViPNet container version')}
+    // File header
+    let headerSize = get32(container, 8), applicationHeader
+    if (headerSize > 0) {applicationHeader = buffer(new Uint8Array(container, 12, headerSize))}
+    // Read entries
+    let offset = 12 + headerSize, entries = []
     while (offset < container.byteLength) {
       // Entry size
-      const entrySize = get32(container, offset); // Decode entry
-
-      entries.push(ViPNetContainerEntry.decode(new Uint8Array(container, offset, entrySize + 4)));
-      offset = offset + entrySize + 4;
+      const entrySize = get32(container, offset)
+      // Decode entry
+      entries.push(ViPNetContainerEntry.decode(
+        new Uint8Array(container, offset, entrySize + 4)))
+      offset = offset + entrySize + 4
     }
-
     return new ViPNetContainer({
       fileType: fileType,
       fileVersion: fileVersion,
       applicationHeader: applicationHeader,
-      entries: entries
-    });
-  } // </editor-fold>
+      entries: entries,
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * A class for password-encrypted private keys in CryptoPro container
  *
  * @memberOf GostKeys
  * @type GostKeys.SignalComPrivateKeyInfo
  */
+GostKeys.prototype.ViPNetContainer = ViPNetContainer
 
-GostKeys.prototype.ViPNetContainer = ViPNetContainer;
 /**
  * An implementation of PKCS #12 password encryption/integrity modes. Both input and output are implemented.<br><br>
  *
@@ -2292,44 +1919,38 @@ GostKeys.prototype.ViPNetContainer = ViPNetContainer;
  * @extends GostASN1.PFX
  * @param {(FormatedData|GostASN1.PFX)} store
  */
-
 function PKCS12(store) // <editor-fold defaultstate="collapsed">
 {
   asn1.PFX.call(this, store || {
     version: 3,
     authSafe: {
-      contentType: 'data'
-    }
-  });
+      contentType: 'data',
+    },
+  })
 } // </editor-fold>
 
+extend(asn1.PFX, PKCS12, (function () {
 
-extend(asn1.PFX, PKCS12, function () {
   // <editor-fold defaultstate="collapsed">
   function calcHMAC(derivation, password, content) {
-    const hmac = {
-      name: 'HMAC',
-      hash: derivation.hash
-    }; // Import password for key generation
-
-    return subtle.importKey('raw', passwordData(derivation, password), derivation, false, ['deriveKey']).then(function (passwordKey) {
+    const hmac = { name: 'HMAC', hash: derivation.hash }
+    // Import password for key generation
+    return subtle.importKey('raw', passwordData(derivation, password),
+      derivation, false, ['deriveKey']).then(function (passwordKey) {
       // Generate key from password.
-      return subtle.deriveKey(derivation, passwordKey, hmac, false, ['sign']);
+      return subtle.deriveKey(derivation, passwordKey, hmac, false, ['sign'])
     }).then(function (integrityKey) {
       // Sign MAC
-      return subtle.sign(hmac, integrityKey, content);
-    });
+      return subtle.sign(hmac, integrityKey, content)
+    })
   }
 
   function verifyHMAC(derivation, password, digest, content) {
     return calcHMAC(derivation, password, content).then(function (test) {
-      if (!equalBuffers(digest, test)) {
-        throw new Error('Invalid password, MAC is not verified');
-      }
-    });
-  } // </editor-fold>
-
-
+      if (!equalBuffers(digest, test)) {throw new Error('Invalid password, MAC is not verified')}
+    })
+  }
+  // </editor-fold>
   return {
     /**
          * Sign the enclosed content with given digest algorithm
@@ -2342,56 +1963,38 @@ extend(asn1.PFX, PKCS12, function () {
          */
     sign: function (password, digestAlgorithm) // <editor-fold defaultstate="collapsed">
     {
-      const self = this;
+      const self = this
       return new Promise(call).then(function () {
         // Calculate mac for password integrity
         if (password) {
           // Define digeset algorithm
-          let hash, derivation, digestProvider;
-
-          if (digestAlgorithm) {
-            digestProvider = providers[digestAlgorithm];
-          } else {
-            digestAlgorithm = providers[options.providerName].digest;
-          }
-
+          let hash, derivation, digestProvider
+          if (digestAlgorithm) {digestProvider = providers[digestAlgorithm]} else {digestAlgorithm = providers[options.providerName].digest}
           if (digestProvider) {
-            hash = digestProvider.digest;
-            derivation = digestProvider.derivation;
+            hash = digestProvider.digest
+            derivation = digestProvider.derivation
           } else {
-            hash = digestAlgorithm;
-            derivation = {
-              name: 'PFXKDF',
-              hash: hash,
-              iterations: 2000
-            };
-          } // Add salt
-
-
-          derivation = expand(derivation, {
-            salt: getSeed(saltSize(hash)),
-            diversifier: 3
-          }); // Sign HMAC
-
-          const content = self.authSafe.content;
+            hash = digestAlgorithm
+            derivation = { name: 'PFXKDF', hash: hash, iterations: 2000 }
+          }
+          // Add salt
+          derivation = expand(derivation, { salt: getSeed(saltSize(hash)), diversifier: 3 })
+          // Sign HMAC
+          const content = self.authSafe.content
           return calcHMAC(derivation, password, content).then(function (digest) {
             self.macData = {
               mac: {
                 digestAlgorithm: hash,
-                digest: digest
+                digest: digest,
               },
               macSalt: derivation.salt,
-              iterations: derivation.iterations
-            };
-            return self;
-          });
-        }
-
-        return self;
-      });
-    },
-    // </editor-fold>
-
+              iterations: derivation.iterations,
+            }
+            return self
+          })
+        } return self
+      })
+    }, // </editor-fold>
     /**
          * Verifies the MAC.
          *
@@ -2402,53 +2005,44 @@ extend(asn1.PFX, PKCS12, function () {
          */
     verify: function (password) // <editor-fold defaultstate="collapsed">
     {
-      let self = this,
-          authSafe = self.authSafe,
-          derivation;
+      let self = this, authSafe = self.authSafe, derivation
       return new Promise(call).then(function () {
         // Indirectly verification
         if (authSafe.contentType === 'data') {
           // Check MAC
           if (self.macData) {
-            if (!password) {
-              throw new Error('Password must be defined for the MAC verification');
-            }
-
+            if (!password) {throw new Error('Password must be defined for the MAC verification')}
             derivation = {
               name: 'PFXKDF',
               hash: self.macData.mac.digestAlgorithm,
               salt: self.macData.macSalt,
               iterations: self.macData.iterations,
-              diversifier: 3
-            };
-            const content = self.authSafe.content,
-                  digest = self.macData.mac.digest; // Verify HMAC with PFXKDF (PKCS#12)
-
+              diversifier: 3,
+            }
+            const content = self.authSafe.content, digest = self.macData.mac.digest
+            // Verify HMAC with PFXKDF (PKCS#12)
             return verifyHMAC(derivation, password, digest, content)['catch'](function () {
               // Verify HMAC with PBKDF2 (TC 26, PKCS#5)
-              derivation.name = 'PBKDF2';
-              return verifyHMAC(derivation, password, digest, content);
-            });
+              derivation.name = 'PBKDF2'
+              return verifyHMAC(derivation, password, digest, content)
+            })
           } // No check with MAC
-
-        } else {
-          throw new Error('Unsupported format');
-        }
+        } else {throw new Error('Unsupported format')}
       }).then(function () {
-        return self;
-      });
-    } // </editor-fold>
+        return self
+      })
+    }, // </editor-fold>
+  }
+})())
 
-  };
-}());
 /**
  * An implementation of PKCS #12 password encryption/integrity modes.
  *
  * @memberOf GostKeys
  * @type GostKeys.PKCS12
  */
+GostKeys.prototype.PKCS12 = PKCS12
 
-GostKeys.prototype.PKCS12 = PKCS12;
 /**
  * This type of entry holds a cryptographic PrivateKey, which is optionally stored
  * in a protected format to prevent unauthorized access. It is also accompanied by
@@ -2466,19 +2060,14 @@ GostKeys.prototype.PKCS12 = PKCS12;
  * @class GostKeys.KeyStore
  * @param {Object} entries Object contains aliased {@link KeyEntry} objects
  */
-
 function KeyStore(entries) // <editor-fold defaultstate="collapsed">
 {
-  this.entries = {};
-
+  this.entries = {}
   if (entries) {
-    for (const name in entries) {
-      this.setEntry(name, entries[name]);
-    }
+    for (const name in entries) {this.setEntry(name, entries[name])}
   }
 } // </editor-fold>
 
-
 extend(Object, KeyStore, {
   /**
      * Lists all the alias names of this keystore.
@@ -2489,16 +2078,10 @@ extend(Object, KeyStore, {
      */
   aliases: function () // <editor-fold defaultstate="collapsed">
   {
-    const result = [];
-
-    for (const name in this.entries) {
-      result.push(name);
-    }
-
-    return result;
-  },
-  // </editor-fold>
-
+    const result = []
+    for (const name in this.entries) {result.push(name)}
+    return result
+  }, // </editor-fold>
   /**
      * Checks if the given alias exists in this keystore.
      *
@@ -2509,10 +2092,8 @@ extend(Object, KeyStore, {
      */
   containsAlias: function (alias) // <editor-fold defaultstate="collapsed">
   {
-    return !!this.entries[alias];
-  },
-  // </editor-fold>
-
+    return !!this.entries[alias]
+  }, // </editor-fold>
   /**
      * Deletes the entry identified by the given alias from this keystore.
      *
@@ -2522,10 +2103,8 @@ extend(Object, KeyStore, {
      */
   deleteEntry: function (alias) // <editor-fold defaultstate="collapsed">
   {
-    delete this.entries[alias];
-  },
-  // </editor-fold>
-
+    delete this.entries[alias]
+  }, // </editor-fold>
   /**
      * Saves a keystore Entry under the specified alias.
      *
@@ -2536,55 +2115,44 @@ extend(Object, KeyStore, {
      */
   setEntry: function (alias, entry) // <editor-fold defaultstate="collapsed">
   {
-    const r = {}; // Keys
-
+    const r = {}
+    // Keys
     if (entry.key) {
       try {
-        r.key = new PKCS8(entry.key, true); // Private key
+        r.key = new PKCS8(entry.key, true) // Private key
       } catch (e) {
         try {
-          r.key = new PKCS8Encrypted(entry.key, true); // Encrypted private key
+          r.key = new PKCS8Encrypted(entry.key, true) // Encrypted private key
         } catch (e1) {
-          if (entry.key instanceof CryptoOperationData) {
-            r.key = entry.key;
-          } // Secret key
-          else {
-              throw new Error('Unknown Key format');
-            }
+          if (entry.key instanceof CryptoOperationData) {r.key = entry.key} // Secret key
+          else {throw new Error('Unknown Key format')}
         }
       }
-    } // Certs
-
-
+    }
+    // Certs
     if (entry.certs) {
-      const certs = entry.certs instanceof Array ? entry.certs : [entry.certs];
-
+      const certs = entry.certs instanceof Array ? entry.certs : [entry.certs]
       for (var i = 0; i < certs.length; i++) {
         try {
-          certs[i] = new cert.X509(certs[i]);
-        } catch (e) {}
+          certs[i] = new cert.X509(certs[i])
+        } catch (e) {
+        }
       }
-
-      r.certs = certs;
-    } // CRLs
-
-
+      r.certs = certs
+    }
+    // CRLs
     if (entry.crls) {
-      const crls = entry.crls instanceof Array ? entry.crls : [entry.crls];
-
+      const crls = entry.crls instanceof Array ? entry.crls : [entry.crls]
       for (var i = 0; i < crls.length; i++) {
         try {
-          crls[i] = new cert.CRL(crls[i]);
-        } catch (e) {}
+          crls[i] = new cert.CRL(crls[i])
+        } catch (e) {
+        }
       }
-
-      r.crls = crls;
+      r.crls = crls
     }
-
-    this.entries[alias] = r;
-  },
-  // </editor-fold>
-
+    this.entries[alias] = r
+  }, // </editor-fold>
   /**
      * Gets a keystore Entry for the specified alias
      *
@@ -2595,10 +2163,8 @@ extend(Object, KeyStore, {
      */
   getEntry: function (alias) // <editor-fold defaultstate="collapsed">
   {
-    return this.entries[alias];
-  },
-  // </editor-fold>
-
+    return this.entries[alias]
+  }, // </editor-fold>
   /**
      * Loads this KeyStore from the given input stream.<br><br>
      * A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device),
@@ -2613,117 +2179,81 @@ extend(Object, KeyStore, {
      */
   load: function (store, password) // <editor-fold defaultstate="collapsed">
   {
-    const self = this;
+    const self = this
     return new Promise(call).then(function () {
       // Verify store file
-      store = new PKCS12(store);
-      return store.verify(password);
+      store = new PKCS12(store)
+      return store.verify(password)
     }).then(function () {
-      if (store.authSafe.contentType !== 'data') {
-        throw new Error('Unsupported PFX format');
-      }
-
+      if (store.authSafe.contentType !== 'data') {throw new Error('Unsupported PFX format')}
       const authSafe = asn1.AuthenticatedSafe.decode(store.authSafe.content).object,
-            promises = []; // Decrypt encrypted content
-
+        promises = []
+      // Decrypt encrypted content
       authSafe.forEach(function (info) {
-        if (info.contentType === 'data') {
-          promises.push(new cms.DataContentInfo(info));
-        } else if (info.contentType === 'encryptedData') {
-          promises.push(new cms.EncryptedDataContentInfo(info).getEnclosed(password));
-        } else {
-          throw new Error('Unsupported PFX format');
-        }
-      });
-      return Promise.all(promises);
+        if (info.contentType === 'data') {promises.push(new cms.DataContentInfo(info))} else if (info.contentType === 'encryptedData') {promises.push(new cms.EncryptedDataContentInfo(info).getEnclosed(password))} else {throw new Error('Unsupported PFX format')}
+      })
+      return Promise.all(promises)
     }).then(function (contents) {
       // Read bags
-      const entries = {};
+      const entries = {}
       contents.forEach(function (info) {
-        const bags = asn1.SafeContents.decode(info.content).object;
+        const bags = asn1.SafeContents.decode(info.content).object
         bags.forEach(function (bag) {
-          const keyId = coding.Hex.encode(bag.bagAttributes && bag.bagAttributes.localKeyId || getSeed(4), true),
-                entry = entries[keyId] || (entries[keyId] = {});
-
+          const keyId = coding.Hex.encode((bag.bagAttributes && bag.bagAttributes.localKeyId)
+                        || getSeed(4), true), entry = entries[keyId] || (entries[keyId] = {})
           switch (bag.bagId) {
             case 'keyBag':
-              entry.key = new PKCS8(bag.bagValue);
-              break;
-
+              entry.key = new PKCS8(bag.bagValue)
+              break
             case 'pkcs8ShroudedKeyBag':
-              entry.key = new PKCS8Encrypted(bag.bagValue);
-              break;
-
+              entry.key = new PKCS8Encrypted(bag.bagValue)
+              break
             case 'secretBag':
-              if (bag.bagValue.secretTypeId === 'secret') {
-                entry.key = bag.bagValue.secretValue;
-              }
-
-              break;
-
+              if (bag.bagValue.secretTypeId === 'secret') {entry.key = bag.bagValue.secretValue}
+              break
             case 'certBag':
-              var certs = entry.certs || (entry.certs = []);
-
-              if (bag.bagValue.certId === 'x509Certificate') {
-                certs.push(new cert.X509(bag.bagValue.certValue));
-              }
-
-              break;
-
+              var certs = entry.certs || (entry.certs = [])
+              if (bag.bagValue.certId === 'x509Certificate') {certs.push(new cert.X509(bag.bagValue.certValue))}
+              break
             case 'crlBag':
-              var crls = entry.crls || (entry.crls = []);
-
-              if (bag.bagValue.crlId === 'x509CRL') {
-                crls.push(new cert.CRL(bag.bagValue.crlValue));
-              }
-
-              break;
+              var crls = entry.crls || (entry.crls = [])
+              if (bag.bagValue.crlId === 'x509CRL') {crls.push(new cert.CRL(bag.bagValue.crlValue))}
+              break
           }
-
-          if (bag.bagAttributes && bag.bagAttributes.friendlyName) {
-            entry.friendlyName = bag.bagAttributes.friendlyName;
-          }
-        });
-      }); // Decrypt keys
-
-      const promises = [];
-
+          if (bag.bagAttributes && bag.bagAttributes.friendlyName) {entry.friendlyName = bag.bagAttributes.friendlyName}
+        })
+      })
+      // Decrypt keys
+      const promises = []
       for (const name in entries) {
-        promises.push(function (entry) {
-          // Try to decrypt private key
+        promises.push((function (entry) {
+        // Try to decrypt private key
           if (entry.key instanceof PKCS8Encrypted) {
             return entry.key.getKey(password).then(function (key) {
-              // Return entry with decrypted key
-              entry.key = key;
-              return entry;
+            // Return entry with decrypted key
+              entry.key = key
+              return entry
             })['catch'](function () {
-              // Return entry with encrypted key
-              return entry;
-            });
+            // Return entry with encrypted key
+              return entry
+            })
           }
-
-          return entry;
-        }(entries[name]));
+          return entry
+        })(entries[name]))
       }
-
-      return Promise.all(promises);
+      return Promise.all(promises)
     }).then(function (entries) {
       // Set alias names
       entries.forEach(function (entry) {
-        const friendlyName = entry.friendlyName;
-
+        const friendlyName = entry.friendlyName
         if (friendlyName) {
-          delete entry.friendlyName;
-          self.entries[friendlyName] = entry;
-        } else {
-          self.entries[generateUUID()] = entry;
-        }
-      });
-      return self;
-    });
-  },
-  // </editor-fold>
-
+          delete entry.friendlyName
+          self.entries[friendlyName] = entry
+        } else {self.entries[generateUUID()] = entry}
+      })
+      return self
+    })
+  }, // </editor-fold>
   /**
      * Stores this keystore to the given output stream, and protects its integrity with the given password.
      *
@@ -2736,27 +2266,20 @@ extend(Object, KeyStore, {
      */
   store: function (password, digestAlgortihm, encryptionAlgortihm) // <editor-fold defaultstate="collapsed">
   {
-    let self = this,
-        keys = [],
-        contents = [],
-        authSafe = [];
+    let self = this, keys = [], contents = [], authSafe = []
     return new Promise(call).then(function () {
       // Define encryption algorithm
       if (encryptionAlgortihm) {
-        encryptionAlgortihm = providers[encryptionAlgortihm] ? providers[encryptionAlgortihm].pbes : encryptionAlgortihm;
+        encryptionAlgortihm = providers[encryptionAlgortihm] ?
+          providers[encryptionAlgortihm].pbes : encryptionAlgortihm
       } else if (digestAlgortihm) {
-        encryptionAlgortihm = providers[digestAlgortihm] ? providers[digestAlgortihm].pbes : providers[options.providerName].pbes;
-      } else {
-        encryptionAlgortihm = providers[options.providerName].pbes;
-      } // Prepare keys and certs
-
-
-      const index = 1;
-
+        encryptionAlgortihm = providers[digestAlgortihm] ?
+          providers[digestAlgortihm].pbes : providers[options.providerName].pbes
+      } else {encryptionAlgortihm = providers[options.providerName].pbes}
+      // Prepare keys and certs
+      const index = 1
       for (const name in self.entries) {
-        var keyId = new Uint32Array([index]),
-            entry = self.entries[name];
-
+        var keyId = new Uint32Array([index]), entry = self.entries[name]
         if (entry.key) {
           (function (key, attributes) {
             if (key instanceof CryptoOperationData) {
@@ -2765,129 +2288,117 @@ extend(Object, KeyStore, {
                 bagValue: {
                   secretTypeId: 'secret',
                   secretValue: key,
-                  bagAttributes: attributes
-                }
-              });
+                  bagAttributes: attributes,
+                },
+              })
             } else if (key instanceof PKCS8) {
               if (encryptionAlgortihm && password) {
                 keys.push(new PKCS8Encrypted().setKey(key, password, encryptionAlgortihm).then(function (encryptedKey) {
                   return {
                     bagId: 'pkcs8ShroudedKeyBag',
                     bagValue: encryptedKey,
-                    bagAttributes: attributes
-                  };
-                }));
+                    bagAttributes: attributes,
+                  }
+                }))
               } else {
                 keys.push({
                   bagId: 'keyBag',
                   bagValue: key,
-                  bagAttributes: attributes
-                });
+                  bagAttributes: attributes,
+                })
               }
             } else if (key instanceof PKCS8Encrypted) {
               keys.push({
                 bagId: 'pkcs8ShroudedKeyBag',
                 bagValue: key,
-                bagAttributes: attributes
-              });
+                bagAttributes: attributes,
+              })
             }
           })(entry.key, {
             localKeyId: keyId,
-            friendlyName: name
-          });
+            friendlyName: name,
+          })
         }
-
         if (entry.certs) {
           entry.certs.forEach(function (certificate) {
-            const attributes = {
-              localKeyId: keyId
-            };
-
+            const attributes = { localKeyId: keyId }
             if (certificate instanceof cert.X509) {
               contents.push({
                 bagId: 'certBag',
                 bagValue: {
                   certId: 'x509Certificate',
-                  certValue: certificate
+                  certValue: certificate,
                 },
-                bagAttributes: attributes
-              });
+                bagAttributes: attributes,
+              })
             }
-          });
+          })
         }
-
         if (entry.crls) {
           entry.crls.forEach(function (crl) {
-            const attributes = {
-              localKeyId: keyId
-            };
-
+            const attributes = { localKeyId: keyId }
             if (crl instanceof cert.CRL) {
               contents.push({
                 bagId: 'crlBag',
                 bagValue: {
                   crlId: 'x509CRL',
-                  crlValue: crl
+                  crlValue: crl,
                 },
-                bagAttributes: attributes
-              });
+                bagAttributes: attributes,
+              })
             }
-          });
+          })
         }
-      } // Encrypt keys
-
-
-      if (keys.length > 0) {
-        return Promise.all(keys);
       }
+      // Encrypt keys
+      if (keys.length > 0) {return Promise.all(keys)}
     }).then(function (bags) {
       if (bags) {
-        const keyContents = asn1.SafeContents.encode(bags);
+        const keyContents = asn1.SafeContents.encode(bags)
         authSafe.push(new cms.DataContentInfo({
           contentType: 'data',
-          content: keyContents
-        }));
-      } // Encrypt certificates and crls
-
+          content: keyContents,
+        }))
+      }
 
+      // Encrypt certificates and crls
       if (contents.length > 0) {
-        contents = asn1.SafeContents.encode(contents);
-
+        contents = asn1.SafeContents.encode(contents)
         if (encryptionAlgortihm && password) {
-          return new cms.EncryptedDataContentInfo().encloseContent(contents, password, encryptionAlgortihm);
+          return new cms.EncryptedDataContentInfo().encloseContent(
+            contents, password, encryptionAlgortihm)
         }
-
-        return new cms.DataContentInfo().encloseContent(contents);
+        return new cms.DataContentInfo().encloseContent(contents)
       }
     }).then(function (contents) {
-      authSafe.push(contents); // Set enclosed data
-
-      authSafe = new asn1.AuthenticatedSafe(authSafe);
-      const store = new PKCS12();
+      authSafe.push(contents)
+      // Set enclosed data
+      authSafe = new asn1.AuthenticatedSafe(authSafe)
+      const store = new PKCS12()
       store.authSafe = {
         contentType: 'data',
-        content: authSafe.encode()
-      }; // Return new PKCS12 with enclosed authenificated content
-
-      return store.sign(password, digestAlgortihm);
-    });
-  } // </editor-fold>
+        content: authSafe.encode(),
+      }
+      // Return new PKCS12 with enclosed authenificated content
+      return store.sign(password, digestAlgortihm)
+    })
+  }, // </editor-fold>
+})
 
-});
 /**
  * This class represents a storage facility for cryptographic keys and certificates.
  *
  * @memberOf GostKeys
  * @type GostKeys.KeyStore
  */
+GostKeys.prototype.KeyStore = KeyStore
 
-GostKeys.prototype.KeyStore = KeyStore;
 /**
  * Implements the Key and Certificate Store methods
  *
  * @memberOf gostCrypto
  * @type GostKeys
  */
+gostCrypto.keys = new GostKeys()
 
-gostCrypto.keys = new GostKeys();
-module.exports = GostKeys;
\ No newline at end of file
+module.exports = GostKeys
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostRandom.js b/node_modules/gost-crypto/lib/gostRandom.js
index e74a197..74f7b74 100644
--- a/node_modules/gost-crypto/lib/gostRandom.js
+++ b/node_modules/gost-crypto/lib/gostRandom.js
@@ -37,50 +37,52 @@
  *
  * @Class GostRandom
  *
- */
-// <editor-fold defaultstate="collapsed">
-const rootcrypto = global.crypto || global.msCrypto;
-const TypeMismatchError = global.TypeMismatchError || Error;
-const QuotaExceededError = global.QuotaExceededError || Error; // Initialize mouse and time counters for random generator
+ */ // <editor-fold defaultstate="collapsed">
+
+const rootcrypto = global.crypto || global.msCrypto
+
+const TypeMismatchError = global.TypeMismatchError || Error
+const QuotaExceededError = global.QuotaExceededError || Error
 
+// Initialize mouse and time counters for random generator
 const randomRing = {
   seed: new Uint8Array(1024),
   getIndex: 0,
   setIndex: 0,
   set: function (x) {
-    if (this.setIndex >= 1024) {
-      this.setIndex = 0;
-    }
-
-    this.seed[this.setIndex++] = x;
+    if (this.setIndex >= 1024) {this.setIndex = 0}
+    this.seed[this.setIndex++] = x
   },
   get: function () {
-    if (this.getIndex >= 1024) {
-      this.getIndex = 0;
-    }
-
-    return this.seed[this.getIndex++];
-  }
-};
+    if (this.getIndex >= 1024) {this.getIndex = 0}
+    return this.seed[this.getIndex++]
+  },
+}
 
 if (typeof document !== 'undefiend') {
   try {
     // Mouse move event to fill random array
     document.addEventListener('mousemove', function (e) {
-      randomRing.set(new Date().getTime() & 255 ^ (e.clientX || e.pageX) & 255 ^ (e.clientY || e.pageY) & 255);
-    }, false);
-  } catch (e) {}
+      randomRing.set((new Date().getTime() & 255) ^
+                ((e.clientX || e.pageX) & 255) ^
+                ((e.clientY || e.pageY) & 255))
+    }, false)
+  } catch (e) {
+  }
 
   try {
     // Keypress event to fill random array
     document.addEventListener('keydown', function (e) {
-      randomRing.set(new Date().getTime() & 255 ^ e.keyCode & 255);
-    }, false);
-  } catch (e) {}
+      randomRing.set((new Date().getTime() & 255) ^
+                (e.keyCode & 255))
+    }, false)
+  } catch (e) {
+  }
 } // </editor-fold>
 
+function GostRandom() {
+}
 
-function GostRandom() {}
 /**
  * The getRandomValues method generates cryptographically random values. <br><br>
  *
@@ -91,37 +93,25 @@ function GostRandom() {}
  * @memberOf GostRandom
  * @param {(ArrayBuffer|ArrayBufferView)} array Destination buffer for random data
  */
-
-
 GostRandom.prototype.getRandomValues = function (array) // <editor-fold defaultstate="collapsed">
 {
-  if (!array.byteLength) {
-    throw new TypeMismatchError('Array is not of an integer type (Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array)');
-  }
 
-  if (array.byteLength > 65536) {
-    throw new QuotaExceededError('Byte length of array can\'t be greate then 65536');
-  }
+  if (!array.byteLength) {throw new TypeMismatchError('Array is not of an integer type (Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array)')}
 
-  const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);
+  if (array.byteLength > 65536) {throw new QuotaExceededError('Byte length of array can\'t be greate then 65536')}
 
+  const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength)
   if (rootcrypto && rootcrypto.getRandomValues) {
     // Native window cryptographic interface
-    rootcrypto.getRandomValues(u8);
+    rootcrypto.getRandomValues(u8)
   } else {
     // Standard Javascript method
-    for (var i = 0, n = u8.length; i < n; i++) {
-      u8[i] = Math.floor(256 * Math.random()) & 255;
-    }
-  } // Mix bio randomizator
-
-
-  for (var i = 0, n = u8.length; i < n; i++) {
-    u8[i] = u8[i] ^ randomRing.get();
+    for (var i = 0, n = u8.length; i < n; i++) {u8[i] = Math.floor(256 * Math.random()) & 255}
   }
 
-  return array;
-}; // </editor-fold>
-
+  // Mix bio randomizator
+  for (var i = 0, n = u8.length; i < n; i++) {u8[i] = u8[i] ^ randomRing.get()}
+  return array
+} // </editor-fold>
 
-module.exports = GostRandom;
\ No newline at end of file
+module.exports = GostRandom
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/gostSecurity.js b/node_modules/gost-crypto/lib/gostSecurity.js
index d2117ad..ad49faf 100644
--- a/node_modules/gost-crypto/lib/gostSecurity.js
+++ b/node_modules/gost-crypto/lib/gostSecurity.js
@@ -29,35 +29,30 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const gostCrypto = require('./gostCrypto'); // <editor-fold defaultstate="collapsed">
-// Expand javascript object
 
+const gostCrypto = require('./gostCrypto')
 
-function expand() {
-  const r = {};
+// <editor-fold defaultstate="collapsed">
 
+// Expand javascript object
+function expand() {
+  const r = {}
   for (let i = 0, n = arguments.length; i < n; i++) {
-    const item = arguments[i];
-
+    const item = arguments[i]
     if (typeof item === 'object') {
-      for (const name in item) {
-        r[name] = item[name];
-      }
+      for (const name in item) {r[name] = item[name]}
     }
   }
-
-  return r;
-} // </editor-fold>
+  return r
+}
+// </editor-fold>
 
 /**
  * Freandly names for ASN.1 Object Identifiers
  *
  * @field names
  * @memberOf GostSecurity
- */
-// <editor-fold defaultstate="collapsed">
-
-
+ */ // <editor-fold defaultstate="collapsed">
 const names = {
   // CryptoPro algoritms
   '1.2.643.2.2': 'CryptoPro',
@@ -590,41 +585,32 @@ const names = {
   '2.5.29.46': 'freshestCRL',
   '2.5.29.54': 'inhibitAnyPolicy',
   '2.5.29.55': 'targetInformation',
-  '2.5.29.56': 'noRevAvail'
-};
+  '2.5.29.56': 'noRevAvail',
+}
+
 /**
  * ASN.1 Object Identifiers for friandly names
  * Generated automaticly
  * @field identifiers
  * @memberOf GostSecurity
  */
+const identifiers = {}
+for (var id in names) {identifiers[names[id]] = id}
 
-const identifiers = {};
-
-for (var id in names) {
-  identifiers[names[id]] = id;
-} // </editor-fold>
+// </editor-fold>
 
 /**
  * Algorithm identifiers {@link gostCrypto.AlgorithmIdentifier} for Object Identifiers
  *
  * @field algorithms
  * @memberOf GostSecurity
- */
-// <editor-fold defaultstate="collapsed">
-
-
+ */ // <editor-fold defaultstate="collapsed">
 const algorithms = {
   // CryptoPro algoritms
   'id-GostR3411-94-with-GostR3410-2001': 'GOST R 34.10-2001/GOST R 34.11-94',
   'id-GostR3411-94-with-GostR3410-94': 'GOST R 34.10-94/GOST R 34.11-94',
   'id-GostR3411-94': 'GOST R 34.11-94',
-  'id-HMACGostR3411-94': {
-    name: 'HMAC',
-    hash: {
-      name: 'GOST R 34.11-94'
-    }
-  },
+  'id-HMACGostR3411-94': { name: 'HMAC', hash: { name: 'GOST R 34.11-94' } },
   'id-Gost28147-89-None-KeyWrap': 'GOST 28147-89-KW',
   'id-Gost28147-89-CryptoPro-KeyWrap': 'GOST 28147-89-CPKW',
   'id-GostR3410-2001': 'GOST R 34.10-2001',
@@ -648,18 +634,8 @@ const algorithms = {
   'id-tc26-signwithdigest-gost3410-12-94': 'GOST R 34.10-256/GOST R 34.11-94',
   'id-tc26-signwithdigest-gost3410-12-256': 'GOST R 34.10-256/GOST R 34.11-256',
   'id-tc26-signwithdigest-gost3410-12-512': 'GOST R 34.10-512/GOST R 34.11-512',
-  'id-tc26-hmac-gost-3411-12-256': {
-    name: 'HMAC',
-    hash: {
-      name: 'GOST R 34.11-256'
-    }
-  },
-  'id-tc26-hmac-gost-3411-12-512': {
-    name: 'HMAC',
-    hash: {
-      name: 'GOST R 34.11-512'
-    }
-  },
+  'id-tc26-hmac-gost-3411-12-256': { name: 'HMAC', hash: { name: 'GOST R 34.11-256' } },
+  'id-tc26-hmac-gost-3411-12-512': { name: 'HMAC', hash: { name: 'GOST R 34.11-512' } },
   'id-tc26-agreement-gost-3410-12-256': 'GOST R 34.10-256-DH/GOST R 34.11-256',
   'id-tc26-agreement-gost-3410-12-512': 'GOST R 34.10-512-DH/GOST R 34.11-256',
   // SignalCom algorithms
@@ -675,272 +651,55 @@ const algorithms = {
   'id-sc-gostR3411-94-with-gostR3410-2001': 'GOST R 34.10-2001/GOST R 34.11-94/SC',
   'id-sc-cmsGostWrap': 'GOST 28147-89-SCKW/SC',
   'id-sc-cmsGost28147Wrap': 'GOST 28147-89-KW/SC',
-  'id-sc-pbeWithGost3411AndGost28147': {
-    derivation: {
-      name: 'GOST R 34.11-94-PBKDF2/SC'
-    },
-    encryption: {
-      name: 'GOST 28147-ECB/SC'
-    }
-  },
-  'id-sc-pbeWithGost3411AndGost28147CFB': {
-    derivation: {
-      name: 'GOST R 34.11-94-PBKDF2/SC'
-    },
-    encryption: {
-      name: 'GOST 28147-CFB/SC'
-    }
-  },
+  'id-sc-pbeWithGost3411AndGost28147': { derivation: { name: 'GOST R 34.11-94-PBKDF2/SC' }, encryption: { name: 'GOST 28147-ECB/SC' } },
+  'id-sc-pbeWithGost3411AndGost28147CFB': { derivation: { name: 'GOST R 34.11-94-PBKDF2/SC' }, encryption: { name: 'GOST 28147-CFB/SC' } },
   'id-sc-gostR3410-2001': 'GOST R 34.10-2001/SC',
-  'id-sc-hmacWithGostR3411': {
-    name: 'HMAC',
-    hash: {
-      name: 'GOST R 34.11-94/SC'
-    }
-  },
+  'id-sc-hmacWithGostR3411': { name: 'HMAC', hash: { name: 'GOST R 34.11-94/SC' } },
   'id-sc-r3410-ESDH-r3411kdf': 'GOST R 34.10-2001-DH/GOST R 34.11-94/SC',
   // RSA algorithms
   noSignature: 'NONE',
-  rsaEncryption: {
-    name: 'RSASSA-PKCS1-v1_5',
-    hash: {
-      name: 'SHA-256'
-    }
-  },
-  sha1withRSAEncryption: {
-    name: 'RSASSA-PKCS1-v1_5',
-    hash: {
-      name: 'SHA-1'
-    }
-  },
-  sha256withRSAEncryption: {
-    name: 'RSASSA-PKCS1-v1_5',
-    hash: {
-      name: 'SHA-256'
-    }
-  },
-  sha384withRSAEncryption: {
-    name: 'RSASSA-PKCS1-v1_5',
-    hash: {
-      name: 'SHA-384'
-    }
-  },
-  sha512withRSAEncryption: {
-    name: 'RSASSA-PKCS1-v1_5',
-    hash: {
-      name: 'SHA-512'
-    }
-  },
+  rsaEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-256' } },
+  sha1withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-1' } },
+  sha256withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-256' } },
+  sha384withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-384' } },
+  sha512withRSAEncryption: { name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-512' } },
   'rsaes-oaep': 'RSA-OAEP',
   'rsassa-pss': 'RSA-PSS',
   // ECDSA
   'ecdsa': 'ECDSA',
-  'ecdsa-with-SHA1': {
-    name: 'ECDSA',
-    hash: {
-      name: 'SHA-1'
-    }
-  },
-  'ecdsa-with-SHA256': {
-    name: 'ECDSA',
-    hash: {
-      name: 'SHA-256'
-    }
-  },
-  'ecdsa-with-SHA384': {
-    name: 'ECDSA',
-    hash: {
-      name: 'SHA-384'
-    }
-  },
-  'ecdsa-with-SHA512': {
-    name: 'ECDSA',
-    hash: {
-      name: 'SHA-512'
-    }
-  },
+  'ecdsa-with-SHA1': { name: 'ECDSA', hash: { name: 'SHA-1' } },
+  'ecdsa-with-SHA256': { name: 'ECDSA', hash: { name: 'SHA-256' } },
+  'ecdsa-with-SHA384': { name: 'ECDSA', hash: { name: 'SHA-384' } },
+  'ecdsa-with-SHA512': { name: 'ECDSA', hash: { name: 'SHA-512' } },
   // Legion of the Bouncy Castle pbe
-  'pbeWithSHAAndAES128-CBC': {
-    derivation: {
-      name: 'PBKDF2',
-      hash: {
-        name: 'SHA-1'
-      }
-    },
-    encryption: {
-      name: 'AES-CBC',
-      length: 128
-    }
-  },
-  'pbeWithSHAAndAES192-CBC': {
-    derivation: {
-      name: 'PBKDF2',
-      hash: {
-        name: 'SHA-1'
-      }
-    },
-    encryption: {
-      name: 'AES-CBC',
-      length: 192
-    }
-  },
-  'pbeWithSHAAndAES256-CBC': {
-    derivation: {
-      name: 'PBKDF2',
-      hash: {
-        name: 'SHA-1'
-      }
-    },
-    encryption: {
-      name: 'AES-CBC',
-      length: 256
-    }
-  },
-  'pbeWithSHA256AndAES128-CBC': {
-    derivation: {
-      name: 'PBKDF2',
-      hash: {
-        name: 'SHA-256'
-      }
-    },
-    encryption: {
-      name: 'AES-CBC',
-      length: 128
-    }
-  },
-  'pbeWithSHA256AndAES192-CBC': {
-    derivation: {
-      name: 'PBKDF2',
-      hash: {
-        name: 'SHA-256'
-      }
-    },
-    encryption: {
-      name: 'AES-CBC',
-      length: 192
-    }
-  },
-  'pbeWithSHA256AndAES256-CBC': {
-    derivation: {
-      name: 'PBKDF2',
-      hash: {
-        name: 'SHA-256'
-      }
-    },
-    encryption: {
-      name: 'AES-CBC',
-      length: 256
-    }
-  },
+  'pbeWithSHAAndAES128-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-1' } }, encryption: { name: 'AES-CBC', length: 128 } },
+  'pbeWithSHAAndAES192-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-1' } }, encryption: { name: 'AES-CBC', length: 192 } },
+  'pbeWithSHAAndAES256-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-1' } }, encryption: { name: 'AES-CBC', length: 256 } },
+  'pbeWithSHA256AndAES128-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-256' } }, encryption: { name: 'AES-CBC', length: 128 } },
+  'pbeWithSHA256AndAES192-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-256' } }, encryption: { name: 'AES-CBC', length: 192 } },
+  'pbeWithSHA256AndAES256-CBC': { derivation: { name: 'PBKDF2', hash: { name: 'SHA-256' } }, encryption: { name: 'AES-CBC', length: 256 } },
   // PKCS12 PBE
-  'pbeWithSHAAnd3-KeyTripleDES-CBC': {
-    derivation: {
-      name: 'PFXKDF',
-      iterations: 2000,
-      hash: 'SHA-1'
-    },
-    encryption: {
-      name: '3DES',
-      block: 'CBC'
-    }
-  },
-  'pbeWithSHAAnd2-KeyTripleDES-CBC': {
-    derivation: {
-      name: 'PFXKDF',
-      iterations: 2000,
-      hash: 'SHA-1'
-    },
-    encryption: {
-      name: '2DES',
-      block: 'CBC'
-    }
-  },
-  'pbeWithSHAAnd128BitRC2-CBC': {
-    derivation: {
-      name: 'PFXKDF',
-      iterations: 2000,
-      hash: 'SHA-1'
-    },
-    encryption: {
-      name: 'RC2',
-      block: 'CBC',
-      length: 128
-    }
-  },
-  'pbeWithSHAAnd40BitRC2-CBC': {
-    derivation: {
-      name: 'PFXKDF',
-      iterations: 2000,
-      hash: 'SHA-1'
-    },
-    encryption: {
-      name: 'RC2',
-      block: 'CBC',
-      length: 40
-    }
-  },
-  'pbeUnknownGost': {
-    derivation: {
-      name: 'PFXKDF',
-      iterations: 2000,
-      hash: 'GOST R 34.11-94'
-    },
-    encryption: {
-      name: 'GOST 28147-89-CFB'
-    }
-  },
+  'pbeWithSHAAnd3-KeyTripleDES-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: '3DES', block: 'CBC' } },
+  'pbeWithSHAAnd2-KeyTripleDES-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: '2DES', block: 'CBC' } },
+  'pbeWithSHAAnd128BitRC2-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: 'RC2', block: 'CBC', length: 128 } },
+  'pbeWithSHAAnd40BitRC2-CBC': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'SHA-1' }, encryption: { name: 'RC2', block: 'CBC', length: 40 } },
+  'pbeUnknownGost': { derivation: { name: 'PFXKDF', iterations: 2000, hash: 'GOST R 34.11-94' }, encryption: { name: 'GOST 28147-89-CFB' } },
   //  Diffie-Hellman Key Exchange Keys
   ecDH: 'ECDH',
   dhKeyAgreement: 'DH',
   // symmetric key algorithm oids
-  'aes128-CBC': {
-    name: 'AES-CBC',
-    length: 128
-  },
-  'aes128-CFB': {
-    name: 'AES-CFB-8',
-    length: 128
-  },
-  'aes128-GCM': {
-    name: 'AES-GCM',
-    length: 128
-  },
-  'aes128-wrap': {
-    name: 'AES-KW',
-    length: 128
-  },
-  'aes192-CBC': {
-    name: 'AES-CBC',
-    length: 192
-  },
-  'aes192-CFB': {
-    name: 'AES-CFB-8',
-    length: 192
-  },
-  'aes192-GCM': {
-    name: 'AES-GCM',
-    length: 192
-  },
-  'aes192-wrap': {
-    name: 'AES-KW',
-    length: 192
-  },
-  'aes256-CBC': {
-    name: 'AES-CBC',
-    length: 256
-  },
-  'aes256-CFB': {
-    name: 'AES-CFB-8',
-    length: 256
-  },
-  'aes256-GCM': {
-    name: 'AES-GCM',
-    length: 256
-  },
-  'aes256-wrap': {
-    name: 'AES-KW',
-    length: 256
-  },
+  'aes128-CBC': { name: 'AES-CBC', length: 128 },
+  'aes128-CFB': { name: 'AES-CFB-8', length: 128 },
+  'aes128-GCM': { name: 'AES-GCM', length: 128 },
+  'aes128-wrap': { name: 'AES-KW', length: 128 },
+  'aes192-CBC': { name: 'AES-CBC', length: 192 },
+  'aes192-CFB': { name: 'AES-CFB-8', length: 192 },
+  'aes192-GCM': { name: 'AES-GCM', length: 192 },
+  'aes192-wrap': { name: 'AES-KW', length: 192 },
+  'aes256-CBC': { name: 'AES-CBC', length: 256 },
+  'aes256-CFB': { name: 'AES-CFB-8', length: 256 },
+  'aes256-GCM': { name: 'AES-GCM', length: 256 },
+  'aes256-wrap': { name: 'AES-KW', length: 256 },
   // hash algorihtms
   sha1: 'SHA-1',
   sha256: 'SHA-256',
@@ -948,51 +707,23 @@ const algorithms = {
   sha512: 'SHA-512',
   // PBE
   PBKDF2: 'PBKDF2',
-  PBES2: {
-    derivation: {
-      name: 'PBKDF2'
-    },
-    encryption: {}
-  },
-  PBMAC1: {
-    derivation: {
-      name: 'PBKDF2'
-    },
-    hmac: {}
-  },
+  PBES2: { derivation: { name: 'PBKDF2' }, encryption: {} },
+  PBMAC1: { derivation: { name: 'PBKDF2' }, hmac: {} },
   // HMAC
   hmacWithSHA1: 'SHA-1-HMAC',
-  hmacWithSHA256: {
-    name: 'HMAC',
-    hash: {
-      name: 'SHA-256'
-    }
-  },
-  hmacWithSHA384: {
-    name: 'HMAC',
-    hash: {
-      name: 'SHA-384'
-    }
-  },
-  hmacWithSHA512: {
-    name: 'HMAC',
-    hash: {
-      name: 'SHA-512'
-    }
-  }
-}; // Each algorithm must has id for convertions
+  hmacWithSHA256: { name: 'HMAC', hash: { name: 'SHA-256' } },
+  hmacWithSHA384: { name: 'HMAC', hash: { name: 'SHA-384' } },
+  hmacWithSHA512: { name: 'HMAC', hash: { name: 'SHA-512' } },
+}
 
+// Each algorithm must has id for convertions
 for (var id in algorithms) {
-  let algorithm = algorithms[id];
-
+  let algorithm = algorithms[id]
   if (typeof algorithm === 'string') {
-    algorithm = {
-      name: algorithm
-    };
+    algorithm = { name: algorithm }
   }
-
-  algorithm.id = id;
-  algorithms[id] = algorithm;
+  algorithm.id = id
+  algorithms[id] = algorithm
 } // </editor-fold>
 
 /**
@@ -1000,141 +731,52 @@ for (var id in algorithms) {
  *
  * @field parameters
  * @memberOf GostSecurity
- */
-// <editor-fold defaultstate="collapsed">
-
-
+ */ // <editor-fold defaultstate="collapsed">
 const parameters = {
-  'id-GostR3410-94-TestParamSet': {
-    namedParam: 'S-TEST'
-  },
-  'id-GostR3410-94-CryptoPro-A-ParamSet': {
-    namedParam: 'S-A'
-  },
-  'id-GostR3410-94-CryptoPro-B-ParamSet': {
-    namedParam: 'S-B'
-  },
-  'id-GostR3410-94-CryptoPro-C-ParamSet': {
-    namedParam: 'S-C'
-  },
-  'id-GostR3410-94-CryptoPro-D-ParamSet': {
-    namedParam: 'S-D'
-  },
-  'id-GostR3410-94-CryptoPro-XchA-ParamSet': {
-    namedParam: 'X-A'
-  },
-  'id-GostR3410-94-CryptoPro-XchB-ParamSet': {
-    namedParam: 'X-B'
-  },
-  'id-GostR3410-94-CryptoPro-XchC-ParamSet': {
-    namedParam: 'X-C'
-  },
+  'id-GostR3410-94-TestParamSet': { namedParam: 'S-TEST' },
+  'id-GostR3410-94-CryptoPro-A-ParamSet': { namedParam: 'S-A' },
+  'id-GostR3410-94-CryptoPro-B-ParamSet': { namedParam: 'S-B' },
+  'id-GostR3410-94-CryptoPro-C-ParamSet': { namedParam: 'S-C' },
+  'id-GostR3410-94-CryptoPro-D-ParamSet': { namedParam: 'S-D' },
+  'id-GostR3410-94-CryptoPro-XchA-ParamSet': { namedParam: 'X-A' },
+  'id-GostR3410-94-CryptoPro-XchB-ParamSet': { namedParam: 'X-B' },
+  'id-GostR3410-94-CryptoPro-XchC-ParamSet': { namedParam: 'X-C' },
   // CryptoPro named curves
-  'id-GostR3410-2001-CryptoPro-TestParamSet': {
-    namedCurve: 'S-256-TEST'
-  },
-  'id-GostR3410-2001-CryptoPro-A-ParamSet': {
-    namedCurve: 'S-256-A'
-  },
-  'id-GostR3410-2001-CryptoPro-B-ParamSet': {
-    namedCurve: 'S-256-B'
-  },
-  'id-GostR3410-2001-CryptoPro-C-ParamSet': {
-    namedCurve: 'S-256-C'
-  },
-  'id-GostR3410-2001-CryptoPro-XchA-ParamSet': {
-    namedCurve: 'X-256-A'
-  },
-  'id-GostR3410-2001-CryptoPro-XchB-ParamSet': {
-    namedCurve: 'X-256-B'
-  },
+  'id-GostR3410-2001-CryptoPro-TestParamSet': { namedCurve: 'S-256-TEST' },
+  'id-GostR3410-2001-CryptoPro-A-ParamSet': { namedCurve: 'S-256-A' },
+  'id-GostR3410-2001-CryptoPro-B-ParamSet': { namedCurve: 'S-256-B' },
+  'id-GostR3410-2001-CryptoPro-C-ParamSet': { namedCurve: 'S-256-C' },
+  'id-GostR3410-2001-CryptoPro-XchA-ParamSet': { namedCurve: 'X-256-A' },
+  'id-GostR3410-2001-CryptoPro-XchB-ParamSet': { namedCurve: 'X-256-B' },
   // TC-26 named curves
-  'id-tc26-gost-3410-12-256-paramSetTest': {
-    namedCurve: 'T-256-TEST'
-  },
-  'id-tc26-gost-3410-12-256-paramSetA': {
-    namedCurve: 'T-256-A'
-  },
-  'id-tc26-gost-3410-12-256-paramSetB': {
-    namedCurve: 'T-256-B'
-  },
-  'id-tc26-gost-3410-12-512-paramSetTest': {
-    namedCurve: 'T-512-TEST'
-  },
-  'id-tc26-gost-3410-12-512-paramSetA': {
-    namedCurve: 'T-512-A'
-  },
-  'id-tc26-gost-3410-12-512-paramSetB': {
-    namedCurve: 'T-512-B'
-  },
-  'id-tc26-gost-3410-12-512-paramSetC': {
-    namedCurve: 'T-512-C'
-  },
-  'id-tc26-gost-3410-12-512-paramSetD': {
-    namedCurve: 'T-512-D'
-  },
+  'id-tc26-gost-3410-12-256-paramSetTest': { namedCurve: 'T-256-TEST' },
+  'id-tc26-gost-3410-12-256-paramSetA': { namedCurve: 'T-256-A' },
+  'id-tc26-gost-3410-12-256-paramSetB': { namedCurve: 'T-256-B' },
+  'id-tc26-gost-3410-12-512-paramSetTest': { namedCurve: 'T-512-TEST' },
+  'id-tc26-gost-3410-12-512-paramSetA': { namedCurve: 'T-512-A' },
+  'id-tc26-gost-3410-12-512-paramSetB': { namedCurve: 'T-512-B' },
+  'id-tc26-gost-3410-12-512-paramSetC': { namedCurve: 'T-512-C' },
+  'id-tc26-gost-3410-12-512-paramSetD': { namedCurve: 'T-512-D' },
   // Curve attributes additional algorithms
-  secp256r1: {
-    namedCurve: 'P-256'
-  },
-  secp384r: {
-    namedCurve: 'P-384'
-  },
-  secp521r: {
-    namedCurve: 'P-521'
-  },
+  secp256r1: { namedCurve: 'P-256' },
+  secp384r: { namedCurve: 'P-384' },
+  secp521r: { namedCurve: 'P-521' },
   // CryptoPro encryption parameters
-  'id-GostR3411-94-TestParamSet': {
-    sBox: 'D-TEST'
-  },
-  'id-GostR3411-94-CryptoProParamSet': {
-    sBox: 'D-A'
-  },
-  'id-GostR3411-94-CryptoPro-A-ParamSet': {
-    sBox: 'D-B'
-  },
-  'id-GostR3411-94-CryptoPro-B-ParamSet': {
-    sBox: 'D-C'
-  },
-  'id-GostR3411-94-CryptoPro-C-ParamSet': {
-    sBox: 'D-D'
-  },
-  'id-Gost28147-89-TestParamSet': {
-    block: 'CTR',
-    sBox: 'E-TEST'
-  },
-  'id-Gost28147-89-CryptoPro-A-ParamSet': {
-    block: 'CFB',
-    sBox: 'E-A',
-    keyMeshing: 'CP'
-  },
-  'id-Gost28147-89-CryptoPro-B-ParamSet': {
-    block: 'CFB',
-    sBox: 'E-B',
-    keyMeshing: 'CP'
-  },
-  'id-Gost28147-89-CryptoPro-C-ParamSet': {
-    block: 'CFB',
-    sBox: 'E-C',
-    keyMeshing: 'CP'
-  },
-  'id-Gost28147-89-CryptoPro-D-ParamSet': {
-    block: 'CFB',
-    sBox: 'E-D',
-    keyMeshing: 'CP'
-  },
-  'id-Gost28147-89-None-KeyMeshing': {
-    keyMeshing: 'NO'
-  },
-  'id-Gost28147-89-CryptoPro-KeyMeshing': {
-    keyMeshing: 'CP'
-  },
+  'id-GostR3411-94-TestParamSet': { sBox: 'D-TEST' },
+  'id-GostR3411-94-CryptoProParamSet': { sBox: 'D-A' },
+  'id-GostR3411-94-CryptoPro-A-ParamSet': { sBox: 'D-B' },
+  'id-GostR3411-94-CryptoPro-B-ParamSet': { sBox: 'D-C' },
+  'id-GostR3411-94-CryptoPro-C-ParamSet': { sBox: 'D-D' },
+  'id-Gost28147-89-TestParamSet': { block: 'CTR', sBox: 'E-TEST' },
+  'id-Gost28147-89-CryptoPro-A-ParamSet': { block: 'CFB', sBox: 'E-A', keyMeshing: 'CP' },
+  'id-Gost28147-89-CryptoPro-B-ParamSet': { block: 'CFB', sBox: 'E-B', keyMeshing: 'CP' },
+  'id-Gost28147-89-CryptoPro-C-ParamSet': { block: 'CFB', sBox: 'E-C', keyMeshing: 'CP' },
+  'id-Gost28147-89-CryptoPro-D-ParamSet': { block: 'CFB', sBox: 'E-D', keyMeshing: 'CP' },
+  'id-Gost28147-89-None-KeyMeshing': { keyMeshing: 'NO' },
+  'id-Gost28147-89-CryptoPro-KeyMeshing': { keyMeshing: 'CP' },
   // TC-26 encryption parameters
-  'id-tc26-gost-28147-param-Z': {
-    block: 'CFB',
-    sBox: 'E-Z'
-  }
-}; // </editor-fold>
+  'id-tc26-gost-28147-param-Z': { block: 'CFB', sBox: 'E-Z' },
+} // </editor-fold>
 
 /**
  * Named attributes for Algorithm identifiers {@link AlgorithmIdentifier}<br><br>
@@ -1190,9 +832,7 @@ const parameters = {
  *  </ul>
  * @field attributes
  * @memberOf GostSecurity
- */
-// <editor-fold defaultstate="collapsed">
-
+ */ // <editor-fold defaultstate="collapsed">
 const attributes = {
   sBox: {
     'D-TEST': 'id-GostR3411-94-TestParamSet',
@@ -1207,7 +847,7 @@ const attributes = {
     'E-D': 'id-Gost28147-89-CryptoPro-D-ParamSet',
     'E-Z': 'id-tc26-gost-28147-param-Z',
     'D-256': 'id-tc26-gost3411-12-256',
-    'D-512': 'id-tc26-gost3411-12-512'
+    'D-512': 'id-tc26-gost3411-12-512',
   },
   namedParam: {
     'S-TEST': 'id-GostR3410-94-TestParamSet',
@@ -1217,7 +857,7 @@ const attributes = {
     'S-D': 'id-GostR3410-94-CryptoPro-D-ParamSet',
     'X-A': 'id-GostR3410-94-CryptoPro-XchA-ParamSet',
     'X-B': 'id-GostR3410-94-CryptoPro-XchB-ParamSet',
-    'X-C': 'id-GostR3410-94-CryptoPro-XchC-ParamSet'
+    'X-C': 'id-GostR3410-94-CryptoPro-XchC-ParamSet',
   },
   namedCurve: {
     'S-256-TEST': 'id-GostR3410-2001-CryptoPro-TestParamSet',
@@ -1232,9 +872,9 @@ const attributes = {
     'T-256-B': 'id-tc26-gost-3410-12-256-paramSetB',
     'T-512-TEST': 'id-tc26-gost-3410-12-512-paramSetTest',
     'T-512-A': 'id-tc26-gost-3410-12-512-paramSetA',
-    'T-512-B': 'id-tc26-gost-3410-12-512-paramSetB'
-  }
-}; // </editor-fold>
+    'T-512-B': 'id-tc26-gost-3410-12-512-paramSetB',
+  },
+} // </editor-fold>
 
 /**
  * Set of algorithms for different providers<br><br>
@@ -1270,320 +910,165 @@ const attributes = {
  *
  * @field providers
  * @memberOf GostSecurity
- */
-// <editor-fold defaultstate="collapsed">
-
+ */ // <editor-fold defaultstate="collapsed">
 const providers = {
   'CP-94': {
     title: 'Crypto-Pro GOST R 34.10-94 Cryptographic Service Provider',
     signature: algorithms['id-GostR3411-94-with-GostR3410-94'],
-    publicKey: {
-      id: 'id-GostR3410-94',
-      name: 'GOST R 34.10-94',
-      namedParam: 'X-A'
-    },
-    privateKey: {
-      id: 'id-GostR3410-94DH',
-      name: 'GOST R 34.10-94-DH',
-      namedParam: 'X-A'
-    },
+    publicKey: { id: 'id-GostR3410-94', name: 'GOST R 34.10-94', namedParam: 'X-A' },
+    privateKey: { id: 'id-GostR3410-94DH', name: 'GOST R 34.10-94-DH', namedParam: 'X-A' },
     digest: algorithms['id-GostR3411-94'],
-    wrapping: {
-      id: 'id-Gost28147-89-CryptoPro-KeyWrap',
-      name: 'GOST 28147-89-CPKW',
-      sBox: 'E-A'
-    },
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
     hmac: algorithms['id-HMACGostR3411-94'],
     agreement: algorithms['id-GostR3410-94-CryptoPro-ESDH'],
-    encryption: {
-      id: 'id-Gost28147-89',
-      name: 'GOST 28147-89',
-      block: 'CFB',
-      sBox: 'E-A',
-      keyMeshing: 'CP'
-    },
-    derivation: {
-      id: 'PBKDF2',
-      name: 'GOST R 34.11-94-PBKDF2',
-      iterations: 2000
-    }
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89', block: 'CFB', sBox: 'E-A', keyMeshing: 'CP' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2', iterations: 2000 },
   },
   'CP-01': {
     title: 'Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider',
     signature: algorithms['id-GostR3411-94-with-GostR3410-2001'],
-    publicKey: {
-      id: 'id-GostR3410-2001',
-      name: 'GOST R 34.10-2001',
-      namedCurve: 'X-256-A'
-    },
-    privateKey: {
-      id: 'id-GostR3410-2001DH',
-      name: 'GOST R 34.10-2001-DH',
-      namedCurve: 'X-256-A'
-    },
-    digest: {
-      id: 'id-GostR3411-94',
-      name: 'GOST R 34.11-94',
-      sBox: 'D-A'
-    },
-    wrapping: {
-      id: 'id-Gost28147-89-CryptoPro-KeyWrap',
-      name: 'GOST 28147-89-CPKW',
-      sBox: 'E-A'
-    },
+    publicKey: { id: 'id-GostR3410-2001', name: 'GOST R 34.10-2001', namedCurve: 'X-256-A' },
+    privateKey: { id: 'id-GostR3410-2001DH', name: 'GOST R 34.10-2001-DH', namedCurve: 'X-256-A' },
+    digest: { id: 'id-GostR3411-94', name: 'GOST R 34.11-94', sBox: 'D-A' },
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
     hmac: algorithms['id-HMACGostR3411-94'],
     agreement: algorithms['id-GostR3410-2001-CryptoPro-ESDH'],
-    encryption: {
-      id: 'id-Gost28147-89',
-      name: 'GOST 28147-89-CFB-CPKM',
-      sBox: 'E-A'
-    },
-    derivation: {
-      id: 'PBKDF2',
-      name: 'GOST R 34.11-94-PBKDF2',
-      iterations: 2000
-    }
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89-CFB-CPKM', sBox: 'E-A' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2', iterations: 2000 },
   },
   'TC-256': {
     title: 'Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider',
     signature: algorithms['id-tc26-signwithdigest-gost3410-12-256'],
-    publicKey: {
-      id: 'id-tc26-gost3410-12-256',
-      name: 'GOST R 34.10-256',
-      namedCurve: 'X-256-A'
-    },
-    privateKey: {
-      id: 'id-tc26-agreement-gost-3410-12-256',
-      name: 'GOST R 34.10-256-DH/GOST R 34.11-256',
-      namedCurve: 'X-256-A'
-    },
+    publicKey: { id: 'id-tc26-gost3410-12-256', name: 'GOST R 34.10-256', namedCurve: 'X-256-A' },
+    privateKey: { id: 'id-tc26-agreement-gost-3410-12-256', name: 'GOST R 34.10-256-DH/GOST R 34.11-256', namedCurve: 'X-256-A' },
     digest: algorithms['id-tc26-gost3411-12-256'],
-    wrapping: {
-      id: 'id-Gost28147-89-CryptoPro-KeyWrap',
-      name: 'GOST 28147-89-CPKW',
-      sBox: 'E-A'
-    },
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
     hmac: algorithms['id-tc26-hmac-gost-3411-12-256'],
     agreement: algorithms['id-tc26-agreement-gost-3410-12-256'],
-    encryption: {
-      id: 'id-Gost28147-89',
-      name: 'GOST 28147-89-CFB-CPKM',
-      sBox: 'E-A'
-    },
-    derivation: {
-      id: 'PBKDF2',
-      name: 'GOST R 34.11-256-12-PBKDF2',
-      iterations: 2000
-    }
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89-CFB-CPKM', sBox: 'E-A' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-256-12-PBKDF2', iterations: 2000 },
   },
   'TC-512': {
     title: 'Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider',
     signature: algorithms['id-tc26-signwithdigest-gost3410-12-512'],
-    publicKey: {
-      id: 'id-tc26-gost3410-12-512',
-      name: 'GOST R 34.10-512',
-      namedCurve: 'T-512-A'
-    },
-    privateKey: {
-      id: 'id-tc26-agreement-gost-3410-12-512',
-      name: 'GOST R 34.10-512-DH/GOST R 34.11-256',
-      namedCurve: 'T-512-A'
-    },
+    publicKey: { id: 'id-tc26-gost3410-12-512', name: 'GOST R 34.10-512', namedCurve: 'T-512-A' },
+    privateKey: { id: 'id-tc26-agreement-gost-3410-12-512', name: 'GOST R 34.10-512-DH/GOST R 34.11-256', namedCurve: 'T-512-A' },
     digest: algorithms['id-tc26-gost3411-12-512'],
-    wrapping: {
-      id: 'id-Gost28147-89-CryptoPro-KeyWrap',
-      name: 'GOST 28147-89-CPKW',
-      sBox: 'E-A'
-    },
+    wrapping: { id: 'id-Gost28147-89-CryptoPro-KeyWrap', name: 'GOST 28147-89-CPKW', sBox: 'E-A' },
     hmac: algorithms['id-tc26-hmac-gost-3411-12-512'],
     agreement: algorithms['id-tc26-agreement-gost-3410-12-512'],
-    encryption: {
-      id: 'id-Gost28147-89',
-      name: 'GOST 28147-89-CFB-CPKM',
-      sBox: 'E-A'
-    },
-    derivation: {
-      id: 'PBKDF2',
-      name: 'GOST R 34.11-256-PBKDF2',
-      iterations: 2000
-    }
+    encryption: { id: 'id-Gost28147-89', name: 'GOST 28147-89-CFB-CPKM', sBox: 'E-A' },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-256-PBKDF2', iterations: 2000 },
   },
   'SC-94': {
     title: 'Signal-COM GOST Cryptographic Provider',
     signature: algorithms['id-sc-gostR3411-94-with-gostR3410-94'],
-    publicKey: {
-      id: 'id-sc-gostR3410-94',
-      name: 'GOST R 34.10-94/SC',
-      namedParam: 'S-A'
-    },
+    publicKey: { id: 'id-sc-gostR3410-94', name: 'GOST R 34.10-94/SC', namedParam: 'S-A' },
     privateKey: {
-      id: 'id-sc-gostR3410-94',
-      name: 'GOST R 34.10-94/SC',
-      modulusLength: 1024,
-      param: {
+      id: 'id-sc-gostR3410-94', name: 'GOST R 34.10-94/SC', modulusLength: 1024, param: {
         p: '0xB4E25EFB018E3C8B87505E2A67553C5EDC56C2914B7E4F89D23F03F03377E70A2903489DD60E78418D3D851EDB5317C4871E40B04228C3B7902963C4B7D85D52B9AA88F2AFDBEB28DA8869D6DF846A1D98924E925561BD69300B9DDD05D247B5922D967CBB02671881C57D10E5EF72D3E6DAD4223DC82AA1F7D0294651A480DF',
         q: '0x972432A437178B30BD96195B773789AB2FFF15594B176DD175B63256EE5AF2CF',
-        a: '0x8FD36731237654BBE41F5F1F8453E71CA414FFC22C25D915309E5D2E62A2A26C7111F3FC79568DAFA028042FE1A52A0489805C0DE9A1A469C844C7CABBEE625C3078888C1D85EEA883F1AD5BC4E6776E8E1A0750912DF64F79956499F1E182475B0B60E2632ADCD8CF94E9C54FD1F3B109D81F00BF2AB8CB862ADF7D40B9369A'
-      }
+        a: '0x8FD36731237654BBE41F5F1F8453E71CA414FFC22C25D915309E5D2E62A2A26C7111F3FC79568DAFA028042FE1A52A0489805C0DE9A1A469C844C7CABBEE625C3078888C1D85EEA883F1AD5BC4E6776E8E1A0750912DF64F79956499F1E182475B0B60E2632ADCD8CF94E9C54FD1F3B109D81F00BF2AB8CB862ADF7D40B9369A',
+      },
     },
     digest: algorithms['id-sc-gostR3411-94'],
-    encryption: {
-      id: 'id-sc-gost28147-gfb',
-      name: 'GOST 28147-89-CFB/SC'
-    },
+    encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-89-CFB/SC' },
     hmac: algorithms['id-sc-hmacWithGostR3411'],
     wrapping: ['id-sc-cmsGostWrap'],
     agreement: algorithms['id-sc-r3410-ESDH-r3411kdf'],
-    derivation: {
-      id: 'PBKDF2',
-      name: 'GOST R 34.11-94-PBKDF2/SC',
-      iterations: 2048
-    },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
     pbes: {
       id: 'id-sc-pbeWithGost3411AndGost28147CFB',
-      derivation: {
-        id: 'PBKDF2',
-        name: 'GOST R 34.11-94-PBKDF2/SC',
-        iterations: 2048
-      },
-      encryption: {
-        id: 'id-sc-gost28147-gfb',
-        name: 'GOST 28147-CFB/SC',
-        iv: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
-      }
-    }
+      derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
+      encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-CFB/SC', iv: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) },
+    },
   },
   'SC-01': {
     title: 'Signal-COM ECGOST Cryptographic Provider',
     signature: algorithms['id-sc-gostR3411-94-with-gostR3410-2001'],
-    publicKey: {
-      id: 'id-sc-gostR3410-2001',
-      name: 'GOST R 34.10-2001/SC',
-      namedCurve: 'P-256'
-    },
+    publicKey: { id: 'id-sc-gostR3410-2001', name: 'GOST R 34.10-2001/SC', namedCurve: 'P-256' },
     privateKey: {
-      id: 'id-sc-gostR3410-2001',
-      name: 'GOST R 34.10-2001/SC',
-      curve: {
+      id: 'id-sc-gostR3410-2001', name: 'GOST R 34.10-2001/SC', curve: {
         p: '0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF',
         a: '0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC',
         b: '0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B',
         x: '0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296',
         y: '0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5',
-        q: '0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551'
-      }
+        q: '0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551',
+      },
     },
     digest: algorithms['id-sc-gostR3411-94'],
-    encryption: {
-      id: 'id-sc-gost28147-gfb',
-      name: 'GOST 28147-89-CFB/SC'
-    },
+    encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-89-CFB/SC' },
     hmac: algorithms['id-sc-hmacWithGostR3411'],
     wrapping: algorithms['id-sc-cmsGostWrap'],
     agreement: algorithms['id-sc-r3410-ESDH-r3411kdf'],
-    derivation: {
-      id: 'PBKDF2',
-      name: 'GOST R 34.11-94-PBKDF2/SC',
-      iterations: 2048
-    },
+    derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
     pbes: {
       id: 'id-sc-pbeWithGost3411AndGost28147CFB',
-      derivation: {
-        id: 'PBKDF2',
-        name: 'GOST R 34.11-94-PBKDF2/SC',
-        iterations: 2048
-      },
-      encryption: {
-        id: 'id-sc-gost28147-gfb',
-        name: 'GOST 28147-CFB/SC',
-        iv: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])
-      }
-    }
+      derivation: { id: 'PBKDF2', name: 'GOST R 34.11-94-PBKDF2/SC', iterations: 2048 },
+      encryption: { id: 'id-sc-gost28147-gfb', name: 'GOST 28147-CFB/SC', iv: new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]) },
+    },
   },
   'RSA-2048': {
     title: 'Microsoft Strong Cryptographic Provider',
     signature: algorithms['sha256withRSAEncryption'],
     publicKey: {
-      id: 'rsaEncryption',
-      name: 'RSASSA-PKCS1-v1_5',
-      modulusLength: 2048,
-      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
-      hash: algorithms['sha256']
+      id: 'rsaEncryption', name: 'RSASSA-PKCS1-v1_5', modulusLength: 2048,
+      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: algorithms['sha256'],
     },
     privateKey: {
-      id: 'rsaEncryption',
-      name: 'RSASSA-PKCS1-v1_5',
-      modulusLength: 2048,
-      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
-      hash: algorithms['sha256']
+      id: 'rsaEncryption', name: 'RSASSA-PKCS1-v1_5', modulusLength: 2048,
+      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: algorithms['sha256'],
     },
     digest: algorithms['sha256'],
     encryption: algorithms['aes256-CFB'],
-    hmac: algorithms['hmacWithSHA256']
+    hmac: algorithms['hmacWithSHA256'],
   },
   'ECDSA-256': {
     title: 'Microsoft Base DSS and Diffie-Hellman Cryptographic Provider',
     signature: algorithms['ecdsa-with-SHA256'],
-    publicKey: {
-      id: 'ecdsa',
-      name: 'ECDSA',
-      namedCurve: 'P-256'
-    },
-    privateKey: {
-      id: 'ecdsa',
-      name: 'ECDSA',
-      namedCurve: 'P-256'
-    },
+    publicKey: { id: 'ecdsa', name: 'ECDSA', namedCurve: 'P-256' },
+    privateKey: { id: 'ecdsa', name: 'ECDSA', namedCurve: 'P-256' },
     digest: algorithms['sha256'],
     encryption: algorithms['aes256-CFB'],
     hmac: algorithms['hmacWithSHA256'],
-    agreement: algorithms['ecDH']
-  }
-}; // Russian providers extension
-
+    agreement: algorithms['ecDH'],
+  },
+};
+// Russian providers extension
 ['CP-94', 'CP-01', 'TC-256', 'TC-512', 'SC-94', 'SC-01'].forEach(function (name) {
-  const provider = providers[name];
-  provider.hmac = expand(provider.hmac, {
-    hash: provider.digest
-  });
-  provider.derivation = expand(provider.derivation, {
-    hash: provider.digest,
-    hmac: provider.hmac
-  });
+  const provider = providers[name]
+  provider.hmac = expand(provider.hmac, { hash: provider.digest })
+  provider.derivation = expand(provider.derivation, { hash: provider.digest, hmac: provider.hmac })
   provider.pbes = provider.pbes || {
-    id: 'PBES2',
-    derivation: provider.derivation,
-    encryption: provider.encryption
-  };
+    id: 'PBES2', derivation: provider.derivation,
+    encryption: provider.encryption,
+  }
   provider.pbmac = provider.pbmac || {
-    id: 'PBMAC1',
-    derivation: provider.derivation,
-    hmac: provider.hmac
-  };
-  provider.agreement = expand(provider.agreement, {
-    wrapping: provider.wrapping
-  });
-}); // RSA & ECDA providers extension
-
+    id: 'PBMAC1', derivation: provider.derivation,
+    hmac: provider.hmac,
+  }
+  provider.agreement = expand(provider.agreement, { wrapping: provider.wrapping })
+});
+// RSA & ECDA providers extension
 ['RSA-2048', 'ECDSA-256'].forEach(function (name) {
-  const provider = providers[name];
+  const provider = providers[name]
   provider.derivation = provider.derivation || {
-    id: 'PBKDF2',
-    name: 'PBKDF2',
-    iterations: 2048,
-    hash: provider.digest
-  };
+    id: 'PBKDF2', name: 'PBKDF2',
+    iterations: 2048, hash: provider.digest,
+  }
   provider.pbes = provider.pbes || {
     id: 'PBES2',
     derivation: provider.derivation,
-    encryption: provider.encryption
-  };
+    encryption: provider.encryption,
+  }
   provider.pbmac = provider.pbmac || {
     id: 'PBMAC1',
     derivation: provider.derivation,
-    hmac: provider.hmac
-  };
-}); // Workaround for Chrome error for RSA algorithm when hash for keys is not defined
+    hmac: provider.hmac,
+  }
+})
+// Workaround for Chrome error for RSA algorithm when hash for keys is not defined
 // if (global.crypto && global.crypto.subtle)
 //    setTimeout(function () {
 //        global.crypto.subtle.generateKey(providers['RSA-2048'].generation, false, ["sign"])['catch'](function () {
@@ -1597,8 +1082,8 @@ const providers = {
  * GOST and common ASN.1 Object and Algorithm Identifiers
  * @class GostSecurity
  */
-
-function GostSecurity() {}
+function GostSecurity() {
+}
 
 GostSecurity.prototype = {
   names: names,
@@ -1606,14 +1091,15 @@ GostSecurity.prototype = {
   algorithms: algorithms,
   parameters: parameters,
   attributes: attributes,
-  providers: providers
-};
+  providers: providers,
+}
+
 /**
  * GOST and common ASN.1 Object and Algorithm Identifiers
  *
  * @memberOf gostCrypto
  * @type GostSecurity
  */
+gostCrypto.security = new GostSecurity()
 
-gostCrypto.security = new GostSecurity();
-module.exports = GostSecurity();
\ No newline at end of file
+module.exports = GostSecurity()
diff --git a/node_modules/gost-crypto/lib/gostSign.js b/node_modules/gost-crypto/lib/gostSign.js
index a3a39ca..dcedb83 100644
--- a/node_modules/gost-crypto/lib/gostSign.js
+++ b/node_modules/gost-crypto/lib/gostSign.js
@@ -32,9 +32,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
-const GostRandom = require('./gostRandom');
 
-const GostDigest = require('./gostDigest');
+let GostRandom = require('./gostRandom')
+let GostDigest = require('./gostDigest')
+
+
 /*
  * Predefined curves and params collection
  *
@@ -42,16 +44,16 @@ const GostDigest = require('./gostDigest');
  * http://tools.ietf.org/html/rfc7091
  * http://tools.ietf.org/html/rfc4357
  *
- */
-// <editor-fold defaultstate="collapsed">
+ */ // <editor-fold defaultstate="collapsed">
 
+const rootcrypto = global.crypto || global.msCrypto
+const CryptoOperationData = global.ArrayBuffer
 
-const rootcrypto = global.crypto || global.msCrypto;
-const CryptoOperationData = global.ArrayBuffer;
 const OperationError = global.OperationError || global.Error,
-      DataError = global.DataError || global.Error,
-      NotSupportedError = global.NotSupportedError || global.Error; // Predefined named curve collection
+  DataError = global.DataError || global.Error,
+  NotSupportedError = global.NotSupportedError || global.Error
 
+// Predefined named curve collection
 const ECGostParams = {
   'S-256-TEST': {
     a: 7,
@@ -59,7 +61,7 @@ const ECGostParams = {
     p: '0x8000000000000000000000000000000000000000000000000000000000000431',
     q: '0x8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3',
     x: 2,
-    y: '0x8E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8'
+    y: '0x8E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8',
   },
   'S-256-A': {
     a: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD94',
@@ -67,7 +69,7 @@ const ECGostParams = {
     p: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD97',
     q: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6C611070995AD10045841B09B761B893',
     x: 1,
-    y: '0x8D91E471E0989CDA27DF505A453F2B7635294F2DDF23E3B122ACC99C9E9F1E14'
+    y: '0x8D91E471E0989CDA27DF505A453F2B7635294F2DDF23E3B122ACC99C9E9F1E14',
   },
   'S-256-B': {
     a: '0x8000000000000000000000000000000000000000000000000000000000000C96',
@@ -75,7 +77,7 @@ const ECGostParams = {
     p: '0x8000000000000000000000000000000000000000000000000000000000000C99',
     q: '0x800000000000000000000000000000015F700CFFF1A624E5E497161BCC8A198F',
     x: 1,
-    y: '0x3FA8124359F96680B83D1C3EB2C070E5C545C9858D03ECFB744BF8D717717EFC'
+    y: '0x3FA8124359F96680B83D1C3EB2C070E5C545C9858D03ECFB744BF8D717717EFC',
   },
   'S-256-C': {
     a: '0x9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D7598',
@@ -83,7 +85,7 @@ const ECGostParams = {
     p: '0x9B9F605F5A858107AB1EC85E6B41C8AACF846E86789051D37998F7B9022D759B',
     q: '0x9B9F605F5A858107AB1EC85E6B41C8AA582CA3511EDDFB74F02F3A6598980BB9',
     x: 0,
-    y: '0x41ECE55743711A8C3CBF3783CD08C0EE4D4DC440D4641A8F366E550DFDB3BB67'
+    y: '0x41ECE55743711A8C3CBF3783CD08C0EE4D4DC440D4641A8F366E550DFDB3BB67',
   },
   'P-256': {
     p: '0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF',
@@ -91,7 +93,7 @@ const ECGostParams = {
     b: '0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B',
     x: '0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296',
     y: '0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5',
-    q: '0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551'
+    q: '0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551',
   },
   'T-512-TEST': {
     a: 7,
@@ -99,7 +101,7 @@ const ECGostParams = {
     p: '0x4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DF1D852741AF4704A0458047E80E4546D35B8336FAC224DD81664BBF528BE6373',
     q: '0x4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DA82F2D7ECB1DBAC719905C5EECC423F1D86E25EDBE23C595D644AAF187E6E6DF',
     x: '0x24D19CC64572EE30F396BF6EBBFD7A6C5213B3B3D7057CC825F91093A68CD762FD60611262CD838DC6B60AA7EEE804E28BC849977FAC33B4B530F1B120248A9A',
-    y: '0x2BB312A43BD2CE6E0D020613C857ACDDCFBF061E91E5F2C3F32447C259F39B2C83AB156D77F1496BF7EB3351E1EE4E43DC1A18B91B24640B6DBB92CB1ADD371E'
+    y: '0x2BB312A43BD2CE6E0D020613C857ACDDCFBF061E91E5F2C3F32447C259F39B2C83AB156D77F1496BF7EB3351E1EE4E43DC1A18B91B24640B6DBB92CB1ADD371E',
   },
   'T-512-A': {
     p: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7',
@@ -107,7 +109,7 @@ const ECGostParams = {
     b: '0xE8C2505DEDFC86DDC1BD0B2B6667F1DA34B82574761CB0E879BD081CFD0B6265EE3CB090F30D27614CB4574010DA90DD862EF9D4EBEE4761503190785A71C760',
     q: '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF27E69532F48D89116FF22B8D4E0560609B4B38ABFAD2B85DCACDB1411F10B275',
     x: 3,
-    y: '0x7503CFE87A836AE3A61B8816E25450E6CE5E1C93ACF1ABC1778064FDCBEFA921DF1626BE4FD036E93D75E6A50E3A41E98028FE5FC235F5B889A589CB5215F2A4'
+    y: '0x7503CFE87A836AE3A61B8816E25450E6CE5E1C93ACF1ABC1778064FDCBEFA921DF1626BE4FD036E93D75E6A50E3A41E98028FE5FC235F5B889A589CB5215F2A4',
   },
   'T-512-B': {
     p: '0x8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F',
@@ -115,1733 +117,1200 @@ const ECGostParams = {
     b: '0x687D1B459DC841457E3E06CF6F5E2517B97C7D614AF138BCBF85DC806C4B289F3E965D2DB1416D217F8B276FAD1AB69C50F78BEE1FA3106EFB8CCBC7C5140116',
     q: '0x800000000000000000000000000000000000000000000000000000000000000149A1EC142565A545ACFDB77BD9D40CFA8B996712101BEA0EC6346C54374F25BD',
     x: 2,
-    y: '0x1A8F7EDA389B094C2C071E3647A8940F3C123B697578C213BE6DD9E6C8EC7335DCB228FD1EDF4A39152CBCAAF8C0398828041055F94CEEEC7E21340780FE41BD'
-  }
-};
-ECGostParams['X-256-A'] = ECGostParams['S-256-A'];
-ECGostParams['X-256-B'] = ECGostParams['S-256-C'];
-ECGostParams['T-256-TEST'] = ECGostParams['S-256-TEST'];
-ECGostParams['T-256-A'] = ECGostParams['S-256-A'];
-ECGostParams['T-256-B'] = ECGostParams['S-256-B'];
-ECGostParams['T-256-C'] = ECGostParams['S-256-C'];
+    y: '0x1A8F7EDA389B094C2C071E3647A8940F3C123B697578C213BE6DD9E6C8EC7335DCB228FD1EDF4A39152CBCAAF8C0398828041055F94CEEEC7E21340780FE41BD',
+  },
+}
+ECGostParams['X-256-A'] = ECGostParams['S-256-A']
+ECGostParams['X-256-B'] = ECGostParams['S-256-C']
+ECGostParams['T-256-TEST'] = ECGostParams['S-256-TEST']
+ECGostParams['T-256-A'] = ECGostParams['S-256-A']
+ECGostParams['T-256-B'] = ECGostParams['S-256-B']
+ECGostParams['T-256-C'] = ECGostParams['S-256-C']
+
+
 const GostParams = {
   'S-TEST': {
-    modulusLength: 512,
-    // bit length of p (512 or 1024 bits)
+    modulusLength: 512, // bit length of p (512 or 1024 bits)
     p: '0xEE8172AE8996608FB69359B89EB82A69854510E2977A4D63BC97322CE5DC3386EA0A12B343E9190F23177539845839786BB0C345D165976EF2195EC9B1C379E3',
     q: '0x98915E7EC8265EDFCDA31E88F24809DDB064BDC7285DD50D7289F0AC6F49DD2D',
-    a: '0x9e96031500c8774a869582d4afde2127afad2538b4b6270a6f7c8837b50d50f206755984a49e509304d648be2ab5aab18ebe2cd46ac3d8495b142aa6ce23e21c'
+    a: '0x9e96031500c8774a869582d4afde2127afad2538b4b6270a6f7c8837b50d50f206755984a49e509304d648be2ab5aab18ebe2cd46ac3d8495b142aa6ce23e21c',
   },
   'S-A': {
     modulusLength: 1024,
     p: '0xB4E25EFB018E3C8B87505E2A67553C5EDC56C2914B7E4F89D23F03F03377E70A2903489DD60E78418D3D851EDB5317C4871E40B04228C3B7902963C4B7D85D52B9AA88F2AFDBEB28DA8869D6DF846A1D98924E925561BD69300B9DDD05D247B5922D967CBB02671881C57D10E5EF72D3E6DAD4223DC82AA1F7D0294651A480DF',
     q: '0x972432A437178B30BD96195B773789AB2FFF15594B176DD175B63256EE5AF2CF',
-    a: '0x8FD36731237654BBE41F5F1F8453E71CA414FFC22C25D915309E5D2E62A2A26C7111F3FC79568DAFA028042FE1A52A0489805C0DE9A1A469C844C7CABBEE625C3078888C1D85EEA883F1AD5BC4E6776E8E1A0750912DF64F79956499F1E182475B0B60E2632ADCD8CF94E9C54FD1F3B109D81F00BF2AB8CB862ADF7D40B9369A'
+    a: '0x8FD36731237654BBE41F5F1F8453E71CA414FFC22C25D915309E5D2E62A2A26C7111F3FC79568DAFA028042FE1A52A0489805C0DE9A1A469C844C7CABBEE625C3078888C1D85EEA883F1AD5BC4E6776E8E1A0750912DF64F79956499F1E182475B0B60E2632ADCD8CF94E9C54FD1F3B109D81F00BF2AB8CB862ADF7D40B9369A',
   },
   'S-B': {
     modulusLength: 1024,
     p: '0xC6971FC57524B30C9018C5E621DE15499736854F56A6F8AEE65A7A404632B1BCF0349FFCAFCB0A103177971FC1612ADCDB8C8CC938C70225C8FD12AFF01B1D064E0AD6FDE6AB9159166CB9F2FC171D92F0CC7B6A6B2CD7FA342ACBE2C9315A42D576B1ECCE77A963157F3D0BD96A8EB0B0F3502AD238101B05116334F1E5B7AB',
     q: '0xB09D634C10899CD7D4C3A7657403E05810B07C61A688BAB2C37F475E308B0607',
-    a: '0x3D26B467D94A3FFC9D71BF8DB8934084137264F3C2E9EB16DCA214B8BC7C872485336744934FD2EF5943F9ED0B745B90AA3EC8D70CDC91682478B664A2E1F8FB56CEF2972FEE7EDB084AF746419B854FAD02CC3E3646FF2E1A18DD4BEB3C44F7F2745588029649674546CC9187C207FB8F2CECE8E2293F68395C4704AF04BAB5'
+    a: '0x3D26B467D94A3FFC9D71BF8DB8934084137264F3C2E9EB16DCA214B8BC7C872485336744934FD2EF5943F9ED0B745B90AA3EC8D70CDC91682478B664A2E1F8FB56CEF2972FEE7EDB084AF746419B854FAD02CC3E3646FF2E1A18DD4BEB3C44F7F2745588029649674546CC9187C207FB8F2CECE8E2293F68395C4704AF04BAB5',
   },
   'S-C': {
     modulusLength: 1024,
     p: '0x9D88E6D7FE3313BD2E745C7CDD2AB9EE4AF3C8899E847DE74A33783EA68BC30588BA1F738C6AAF8AB350531F1854C3837CC3C860FFD7E2E106C3F63B3D8A4C034CE73942A6C3D585B599CF695ED7A3C4A93B2B947B7157BB1A1C043AB41EC8566C6145E938A611906DE0D32E562494569D7E999A0DDA5C879BDD91FE124DF1E9',
     q: '0xFADD197ABD19A1B4653EECF7ECA4D6A22B1F7F893B641F901641FBB555354FAF',
-    a: '0x7447ED7156310599070B12609947A5C8C8A8625CF1CF252B407B331F93D639DDD1BA392656DECA992DD035354329A1E95A6E32D6F47882D960B8F10ACAFF796D13CD9611F853DAB6D2623483E46788708493937A1A29442598AEC2E0742022563440FE9C18740ECE6765AC05FAF024A64B026E7E408840819E962E7E5F401AE3'
+    a: '0x7447ED7156310599070B12609947A5C8C8A8625CF1CF252B407B331F93D639DDD1BA392656DECA992DD035354329A1E95A6E32D6F47882D960B8F10ACAFF796D13CD9611F853DAB6D2623483E46788708493937A1A29442598AEC2E0742022563440FE9C18740ECE6765AC05FAF024A64B026E7E408840819E962E7E5F401AE3',
   },
   'S-D': {
     modulusLength: 1024,
     p: '0x80F102D32B0FD167D069C27A307ADAD2C466091904DBAA55D5B8CC7026F2F7A1919B890CB652C40E054E1E9306735B43D7B279EDDF9102001CD9E1A831FE8A163EED89AB07CF2ABE8242AC9DEDDDBF98D62CDDD1EA4F5F15D3A42A6677BDD293B24260C0F27C0F1D15948614D567B66FA902BAA11A69AE3BCEADBB83E399C9B5',
     q: '0xF0F544C418AAC234F683F033511B65C21651A6078BDA2D69BB9F732867502149',
-    a: '0x6BCC0B4FADB3889C1E06ADD23CC09B8AB6ECDEDF73F04632595EE4250005D6AF5F5ADE44CB1E26E6263C672347CFA26F9E9393681E6B759733784CDE5DBD9A14A39369DFD99FA85CC0D10241C4010343F34A91393A706CF12677CBFA1F578D6B6CFBE8A1242CFCC94B3B653A476E145E3862C18CC3FED8257CFEF74CDB205BF1'
+    a: '0x6BCC0B4FADB3889C1E06ADD23CC09B8AB6ECDEDF73F04632595EE4250005D6AF5F5ADE44CB1E26E6263C672347CFA26F9E9393681E6B759733784CDE5DBD9A14A39369DFD99FA85CC0D10241C4010343F34A91393A706CF12677CBFA1F578D6B6CFBE8A1242CFCC94B3B653A476E145E3862C18CC3FED8257CFEF74CDB205BF1',
   },
   'X-A': {
     modulusLength: 1024,
     p: '0xCA3B3F2EEE9FD46317D49595A9E7518E6C63D8F4EB4D22D10D28AF0B8839F079F8289E603B03530784B9BB5A1E76859E4850C670C7B71C0DF84CA3E0D6C177FE9F78A9D8433230A883CD82A2B2B5C7A3306980278570CDB79BF01074A69C9623348824B0C53791D53C6A78CAB69E1CFB28368611A397F50F541E16DB348DBE5F',
     q: '0xCAE4D85F80C147704B0CA48E85FB00A9057AA4ACC44668E17F1996D7152690D9',
-    a: '0xBE27D652F2F1E339DA734211B85B06AE4DE236AA8FBEEB3F1ADCC52CD43853777E834A6A518138678A8ADBD3A55C70A7EAB1BA7A0719548677AAF4E609FFB47F6B9D7E45B0D06D83D7ADC53310ABD85783E7317F7EC73268B6A9C08D260B85D8485696CA39C17B17F044D1E050489036ABD381C5E6BF82BA352A1AFF136601AF'
+    a: '0xBE27D652F2F1E339DA734211B85B06AE4DE236AA8FBEEB3F1ADCC52CD43853777E834A6A518138678A8ADBD3A55C70A7EAB1BA7A0719548677AAF4E609FFB47F6B9D7E45B0D06D83D7ADC53310ABD85783E7317F7EC73268B6A9C08D260B85D8485696CA39C17B17F044D1E050489036ABD381C5E6BF82BA352A1AFF136601AF',
   },
   'X-B': {
     modulusLength: 1024,
     p: '0x9286DBDA91ECCFC3060AA5598318E2A639F5BA90A4CA656157B2673FB191CD0589EE05F4CEF1BD13508408271458C30851CE7A4EF534742BFB11F4743C8F787B11193BA304C0E6BCA25701BF88AF1CB9B8FD4711D89F88E32B37D95316541BF1E5DBB4989B3DF13659B88C0F97A3C1087B9F2D5317D557DCD4AFC6D0A754E279',
     q: '0xC966E9B3B8B7CDD82FF0F83AF87036C38F42238EC50A876CD390E43D67B6013F',
-    a: '0x7E9C3096676F51E3B2F9884CF0AC2156779496F410E049CED7E53D8B7B5B366B1A6008E5196605A55E89C3190DABF80B9F1163C979FCD18328DAE5E9048811B370107BB7715F82091BB9DE0E33EE2FED6255474F8769FCE5EAFAEEF1CB5A32E0D5C6C2F0FC0B3447072947F5B4C387666993A333FC06568E534AD56D2338D729'
+    a: '0x7E9C3096676F51E3B2F9884CF0AC2156779496F410E049CED7E53D8B7B5B366B1A6008E5196605A55E89C3190DABF80B9F1163C979FCD18328DAE5E9048811B370107BB7715F82091BB9DE0E33EE2FED6255474F8769FCE5EAFAEEF1CB5A32E0D5C6C2F0FC0B3447072947F5B4C387666993A333FC06568E534AD56D2338D729',
   },
   'X-C': {
     modulusLength: 1024,
     p: '0xB194036ACE14139D36D64295AE6C50FC4B7D65D8B340711366CA93F383653908EE637BE428051D86612670AD7B402C09B820FA77D9DA29C8111A8496DA6C261A53ED252E4D8A69A20376E6ADDB3BDCD331749A491A184B8FDA6D84C31CF05F9119B5ED35246EA4562D85928BA1136A8D0E5A7E5C764BA8902029A1336C631A1D',
     q: '0x96120477DF0F3896628E6F4A88D83C93204C210FF262BCCB7DAE450355125259',
-    a: '0x3F1817052BAA7598FE3E4F4FC5C5F616E122CFF9EBD89EF81DC7CE8BF56CC64B43586C80F1C4F56DD5718FDD76300BE336784259CA25AADE5A483F64C02A20CF4A10F9C189C433DEFE31D263E6C9764660A731ECCAECB74C8279303731E8CF69205BC73E5A70BDF93E5BB681DAB4EEB9C733CAAB2F673C475E0ECA921D29782E'
-  }
-}; // </editor-fold>
+    a: '0x3F1817052BAA7598FE3E4F4FC5C5F616E122CFF9EBD89EF81DC7CE8BF56CC64B43586C80F1C4F56DD5718FDD76300BE336784259CA25AADE5A483F64C02A20CF4A10F9C189C433DEFE31D263E6C9764660A731ECCAECB74C8279303731E8CF69205BC73E5A70BDF93E5BB681DAB4EEB9C733CAAB2F673C475E0ECA921D29782E',
+  },
+} // </editor-fold>
 
 /*
  * BigInteger arithmetic tools
  * optimized release of http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn.js
  *
- */
-// <editor-fold defaultstate="collapsed">
-// Bits per one element
+ */ // <editor-fold defaultstate="collapsed">
 
-const DB = 28,
-      DM = (1 << DB) - 1,
-      DV = 1 << DB,
-      FV = Math.pow(2, 52),
-      F1 = 52 - DB,
-      F2 = 2 * DB - 52;
+// Bits per one element
+const DB = 28, DM = (1 << DB) - 1, DV = 1 << DB,
+  FV = Math.pow(2, 52), F1 = 52 - DB, F2 = 2 * DB - 52
 
 function am(y, i, x, w, j, c, n) {
-  const xl = x & 0x3fff,
-        xh = x >> 14;
-
+  const xl = x & 0x3fff, xh = x >> 14
   while (--n >= 0) {
-    let l = y[i] & 0x3fff;
-    const h = y[i++] >> 14;
-    const m = xh * l + h * xl;
-    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
-    c = (l >> 28) + (m >> 14) + xh * h;
-    w[j++] = l & 0xfffffff;
+    let l = y[i] & 0x3fff
+    const h = y[i++] >> 14
+    const m = xh * l + h * xl
+    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
+    c = (l >> 28) + (m >> 14) + xh * h
+    w[j++] = l & 0xfffffff
   }
-
-  return c;
+  return c
 }
 
 function nbi(words) {
-  const r = new Array(Math.ceil(words));
-  r.s = 0;
-  r.t = 0;
-  return r;
+  const r = new Array(Math.ceil(words))
+  r.s = 0
+  r.t = 0
+  return r
 }
 
 function copyTo(x, r) {
-  for (let i = x.t - 1; i >= 0; --i) {
-    r[i] = x[i];
-  }
-
-  r.t = x.t;
-  r.s = x.s;
-  return r;
+  for (let i = x.t - 1; i >= 0; --i) {r[i] = x[i]}
+  r.t = x.t
+  r.s = x.s
+  return r
 }
 
 function copy(x) {
-  return copyTo(x, nbi(x.t));
+  return copyTo(x, nbi(x.t))
 }
 
 function setInt(x, i) {
-  x.t = 1;
-  x.s = i < 0 ? -1 : 0;
-
-  if (i > 0) {
-    x[0] = i;
-  } else if (i < -1) {
-    x[0] = i + DV;
-  } else {
-    x.t = 0;
-  }
-
-  return x;
+  x.t = 1
+  x.s = (i < 0) ? -1 : 0
+  if (i > 0) {x[0] = i} else if (i < -1) {x[0] = i + DV} else {x.t = 0}
+  return x
 }
 
 function nbv(i) {
-  const r = nbi(1);
-  setInt(r, i);
-  return r;
+  const r = nbi(1)
+  setInt(r, i)
+  return r
 }
 
-const ZERO = nbv(0),
-      ONE = nbv(1),
-      THREE = nbv(3);
+const ZERO = nbv(0), ONE = nbv(1), THREE = nbv(3)
 
 function clamp(x) {
-  const c = x.s & DM;
-
-  while (x.t > 0 && x[x.t - 1] === c) {
-    --x.t;
-  }
-
-  return x;
+  const c = x.s & DM
+  while (x.t > 0 && x[x.t - 1] === c) {--x.t}
+  return x
 }
 
 function subTo(x, a, r) {
-  let i = 0,
-      c = 0,
-      m = Math.min(a.t, x.t);
-
+  let i = 0, c = 0, m = Math.min(a.t, x.t)
   while (i < m) {
-    c += x[i] - a[i];
-    r[i++] = c & DM;
-    c >>= DB;
+    c += x[i] - a[i]
+    r[i++] = c & DM
+    c >>= DB
   }
-
   if (a.t < x.t) {
-    c -= a.s;
-
+    c -= a.s
     while (i < x.t) {
-      c += x[i];
-      r[i++] = c & DM;
-      c >>= DB;
+      c += x[i]
+      r[i++] = c & DM
+      c >>= DB
     }
-
-    c += x.s;
+    c += x.s
   } else {
-    c += x.s;
-
+    c += x.s
     while (i < a.t) {
-      c -= a[i];
-      r[i++] = c & DM;
-      c >>= DB;
+      c -= a[i]
+      r[i++] = c & DM
+      c >>= DB
     }
-
-    c -= a.s;
+    c -= a.s
   }
-
-  r.s = c < 0 ? -1 : 0;
-
-  if (c < -1) {
-    r[i++] = DV + c;
-  } else if (c > 0) {
-    r[i++] = c;
-  }
-
-  r.t = i;
-  return clamp(r);
+  r.s = (c < 0) ? -1 : 0
+  if (c < -1) {r[i++] = DV + c} else if (c > 0) {r[i++] = c}
+  r.t = i
+  return clamp(r)
 }
 
 function sub(x, y) {
-  return subTo(x, y, nbi(x.t));
+  return subTo(x, y, nbi(x.t))
 }
 
 function addTo(x, a, r) {
-  let i = 0,
-      c = 0,
-      m = Math.min(a.t, x.t);
-
+  let i = 0, c = 0, m = Math.min(a.t, x.t)
   while (i < m) {
-    c += x[i] + a[i];
-    r[i++] = c & DM;
-    c >>= DB;
+    c += x[i] + a[i]
+    r[i++] = c & DM
+    c >>= DB
   }
-
   if (a.t < x.t) {
-    c += a.s;
-
+    c += a.s
     while (i < x.t) {
-      c += x[i];
-      r[i++] = c & DM;
-      c >>= DB;
+      c += x[i]
+      r[i++] = c & DM
+      c >>= DB
     }
-
-    c += x.s;
+    c += x.s
   } else {
-    c += x.s;
-
+    c += x.s
     while (i < a.t) {
-      c += a[i];
-      r[i++] = c & DM;
-      c = c >> DB;
+      c += a[i]
+      r[i++] = c & DM
+      c = c >> DB
     }
-
-    c += a.s;
-  }
-
-  r.s = c < 0 ? -1 : 0;
-
-  if (c > 0) {
-    r[i++] = c;
-  } else if (c < -1) {
-    r[i++] = DV + c;
+    c += a.s
   }
-
-  r.t = i;
-  return clamp(r);
+  r.s = (c < 0) ? -1 : 0
+  if (c > 0) {r[i++] = c} else if (c < -1) {r[i++] = DV + c}
+  r.t = i
+  return clamp(r)
 }
 
 function add(x, y) {
-  return addTo(x, y, nbi(x.t));
+  return addTo(x, y, nbi(x.t))
 }
 
 function negTo(x, r) {
-  return subTo(ZERO, x, r);
+  return subTo(ZERO, x, r)
 }
 
 function neg(x) {
-  return negTo(x, nbi(x.t));
+  return negTo(x, nbi(x.t))
 }
 
 function absTo(x, r) {
-  return x.s < 0 ? negTo(r) : copyTo(r);
+  return (x.s < 0) ? negTo(r) : copyTo(r)
 }
 
 function abs(x) {
-  return x.s < 0 ? neg(x) : x;
+  return (x.s < 0) ? neg(x) : x
 }
 
 function compare(x, a) {
-  let r = x.s - a.s;
-
-  if (r !== 0) {
-    return r;
-  }
-
-  let i = x.t;
-  r = i - a.t;
-
-  if (r !== 0) {
-    return x.s < 0 ? -r : r;
-  }
-
+  let r = x.s - a.s
+  if (r !== 0) {return r}
+  let i = x.t
+  r = i - a.t
+  if (r !== 0) {return (x.s < 0) ? -r : r}
   while (--i >= 0) {
-    if ((r = x[i] - a[i]) !== 0) {
-      return r;
-    }
+    if ((r = x[i] - a[i]) !== 0) {return r}
   }
-
-  return 0;
+  return 0
 }
 
 function equals(x, y) {
-  return compare(x, y) === 0;
+  return (compare(x, y) === 0)
 }
 
 function min(x, y) {
-  return compare(x, y) < 0 ? x : y;
+  return (compare(x, y) < 0) ? x : y
 }
 
 function max(x, y) {
-  return compare(x, y) > 0 ? x : y;
+  return (compare(x, y) > 0) ? x : y
 }
 
 function nbits(x) {
-  let r = 1,
-      t;
-
+  let r = 1, t
   if ((t = x >>> 16) !== 0) {
-    x = t;
-    r += 16;
+    x = t
+    r += 16
   }
-
   if ((t = x >> 8) !== 0) {
-    x = t;
-    r += 8;
+    x = t
+    r += 8
   }
-
   if ((t = x >> 4) !== 0) {
-    x = t;
-    r += 4;
+    x = t
+    r += 4
   }
-
   if ((t = x >> 2) !== 0) {
-    x = t;
-    r += 2;
+    x = t
+    r += 2
   }
-
   if ((t = x >> 1) !== 0) {
-    x = t;
-    r += 1;
+    x = t
+    r += 1
   }
-
-  return r;
+  return r
 }
 
 function dshlTo(x, n, r) {
-  let i;
-
-  for (i = x.t - 1; i >= 0; --i) {
-    r[i + n] = x[i];
-  }
-
-  for (i = n - 1; i >= 0; --i) {
-    r[i] = 0;
-  }
-
-  r.t = x.t + n;
-  r.s = x.s;
-  return r;
+  let i
+  for (i = x.t - 1; i >= 0; --i) {r[i + n] = x[i]}
+  for (i = n - 1; i >= 0; --i) {r[i] = 0}
+  r.t = x.t + n
+  r.s = x.s
+  return r
 }
-
 function dshrTo(x, n, r) {
-  for (let i = n; i < x.t; ++i) {
-    r[i - n] = x[i];
-  }
-
-  r.t = Math.max(x.t - n, 0);
-  r.s = x.s;
-  return r;
+  for (let i = n; i < x.t; ++i) {r[i - n] = x[i]}
+  r.t = Math.max(x.t - n, 0)
+  r.s = x.s
+  return r
 }
 
 function shlTo(x, n, r) {
-  const bs = n % DB;
-  const cbs = DB - bs;
-  const bm = (1 << cbs) - 1;
-  let ds = Math.floor(n / DB),
-      c = x.s << bs & DM,
-      i;
-
+  const bs = n % DB
+  const cbs = DB - bs
+  const bm = (1 << cbs) - 1
+  let ds = Math.floor(n / DB), c = (x.s << bs) & DM, i
   for (i = x.t - 1; i >= 0; --i) {
-    r[i + ds + 1] = x[i] >> cbs | c;
-    c = (x[i] & bm) << bs;
-  }
-
-  for (i = ds - 1; i >= 0; --i) {
-    r[i] = 0;
+    r[i + ds + 1] = (x[i] >> cbs) | c
+    c = (x[i] & bm) << bs
   }
-
-  r[ds] = c;
-  r.t = x.t + ds + 1;
-  r.s = x.s;
-  return clamp(r);
+  for (i = ds - 1; i >= 0; --i) {r[i] = 0}
+  r[ds] = c
+  r.t = x.t + ds + 1
+  r.s = x.s
+  return clamp(r)
 }
 
 function shrTo(x, n, r) {
-  r.s = x.s;
-  const ds = Math.floor(n / DB);
-
+  r.s = x.s
+  const ds = Math.floor(n / DB)
   if (ds >= x.t) {
-    r.t = 0;
-    return;
+    r.t = 0
+    return
   }
-
-  const bs = n % DB;
-  const cbs = DB - bs;
-  const bm = (1 << bs) - 1;
-  r[0] = x[ds] >> bs;
-
+  const bs = n % DB
+  const cbs = DB - bs
+  const bm = (1 << bs) - 1
+  r[0] = x[ds] >> bs
   for (let i = ds + 1; i < x.t; ++i) {
-    r[i - ds - 1] |= (x[i] & bm) << cbs;
-    r[i - ds] = x[i] >> bs;
-  }
-
-  if (bs > 0) {
-    r[x.t - ds - 1] |= (x.s & bm) << cbs;
+    r[i - ds - 1] |= (x[i] & bm) << cbs
+    r[i - ds] = x[i] >> bs
   }
-
-  r.t = x.t - ds;
-  return clamp(r);
+  if (bs > 0) {r[x.t - ds - 1] |= (x.s & bm) << cbs}
+  r.t = x.t - ds
+  return clamp(r)
 }
 
 function shl(x, n) {
-  const r = nbi(x.t);
-
-  if (n < 0) {
-    shrTo(x, -n, r);
-  } else {
-    shlTo(x, n, r);
-  }
-
-  return r;
+  const r = nbi(x.t)
+  if (n < 0) {shrTo(x, -n, r)} else {shlTo(x, n, r)}
+  return r
 }
 
 function shr(x, n) {
-  const r = nbi(x.t);
-
-  if (n < 0) {
-    shlTo(x, -n, r);
-  } else {
-    shrTo(x, n, r);
-  }
-
-  return r;
+  const r = nbi(x.t)
+  if (n < 0) {shlTo(x, -n, r)} else {shrTo(x, n, r)}
+  return r
 }
 
 function bitLength(x) {
-  if (x.t <= 0) {
-    return 0;
-  }
-
-  return DB * (x.t - 1) + nbits(x[x.t - 1] ^ x.s & DM);
+  if (x.t <= 0) {return 0}
+  return DB * (x.t - 1) + nbits(x[x.t - 1] ^ (x.s & DM))
 }
 
 function mulTo(b, a, r) {
-  const x = abs(b),
-        y = abs(a);
-  let i = x.t;
-  r.t = i + y.t;
-
-  while (--i >= 0) {
-    r[i] = 0;
-  }
-
-  for (i = 0; i < y.t; ++i) {
-    r[i + x.t] = am(x, 0, y[i], r, i, 0, x.t);
-  }
-
-  r.s = 0;
-
-  if (b.s !== a.s) {
-    subTo(ZERO, r, r);
-  }
-
-  return clamp(r);
+  const x = abs(b), y = abs(a)
+  let i = x.t
+  r.t = i + y.t
+  while (--i >= 0) {r[i] = 0}
+  for (i = 0; i < y.t; ++i) {r[i + x.t] = am(x, 0, y[i], r, i, 0, x.t)}
+  r.s = 0
+  if (b.s !== a.s) {subTo(ZERO, r, r)}
+  return clamp(r)
 }
 
 function mul(x, y) {
-  return mulTo(x, y, nbi(x.t + y.t));
+  return mulTo(x, y, nbi(x.t + y.t))
 }
 
 function sqrTo(a, r) {
-  const x = abs(a);
-  let i = r.t = 2 * x.t;
-
-  while (--i >= 0) {
-    r[i] = 0;
-  }
-
+  const x = abs(a)
+  let i = r.t = 2 * x.t
+  while (--i >= 0) {r[i] = 0}
   for (i = 0; i < x.t - 1; ++i) {
-    const c = am(x, i, x[i], r, 2 * i, 0, 1);
-
+    const c = am(x, i, x[i], r, 2 * i, 0, 1)
     if ((r[i + x.t] += am(x, i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
-      r[i + x.t] -= x.DV;
-      r[i + x.t + 1] = 1;
+      r[i + x.t] -= x.DV
+      r[i + x.t + 1] = 1
     }
   }
-
-  if (r.t > 0) {
-    r[r.t - 1] += am(x, i, x[i], r, 2 * i, 0, 1);
-  }
-
-  r.s = 0;
-  return clamp(r);
+  if (r.t > 0) {r[r.t - 1] += am(x, i, x[i], r, 2 * i, 0, 1)}
+  r.s = 0
+  return clamp(r)
 }
 
 function sqr(a) {
-  return sqrTo(a, nbi(a.t * 2));
+  return sqrTo(a, nbi(a.t * 2))
 }
 
 function divRemTo(n, m, q, r) {
-  const pm = abs(m);
-
-  if (pm.t <= 0) {
-    throw new OperationError('Division by zero');
-  }
-
-  const pt = abs(n);
-
+  const pm = abs(m)
+  if (pm.t <= 0) {throw new OperationError('Division by zero')}
+  const pt = abs(n)
   if (pt.t < pm.t) {
-    if (q) {
-      setInt(q, 0);
-    }
-
-    if (r) {
-      copyTo(n, r);
-    }
-
-    return q;
-  }
-
-  if (!r) {
-    r = nbi(m.t);
+    if (q) {setInt(q, 0)}
+    if (r) {copyTo(n, r)}
+    return q
   }
-
-  const y = nbi(m.t),
-        ts = n.s,
-        ms = m.s;
-  const nsh = DB - nbits(pm[pm.t - 1]);
-
+  if (!r) {r = nbi(m.t)}
+  const y = nbi(m.t), ts = n.s, ms = m.s
+  const nsh = DB - nbits(pm[pm.t - 1])
   if (nsh > 0) {
-    shlTo(pm, nsh, y);
-    shlTo(pt, nsh, r);
+    shlTo(pm, nsh, y)
+    shlTo(pt, nsh, r)
   } else {
-    copyTo(pm, y);
-    copyTo(pt, r);
-  }
-
-  const ys = y.t;
-  const y0 = y[ys - 1];
-
-  if (y0 === 0) {
-    return q;
-  }
-
-  const yt = y0 * (1 << F1) + (ys > 1 ? y[ys - 2] >> F2 : 0);
-  const d1 = FV / yt,
-        d2 = (1 << F1) / yt,
-        e = 1 << F2;
-  let i = r.t,
-      j = i - ys,
-      t = !q ? nbi(Math.max(n.t - m.t, 1)) : q;
-  dshlTo(y, j, t);
-
+    copyTo(pm, y)
+    copyTo(pt, r)
+  }
+  const ys = y.t
+  const y0 = y[ys - 1]
+  if (y0 === 0) {return q}
+  const yt = y0 * (1 << F1) + ((ys > 1) ? y[ys - 2] >> F2 : 0)
+  const d1 = FV / yt, d2 = (1 << F1) / yt, e = 1 << F2
+  let i = r.t, j = i - ys, t = !q ? nbi(Math.max(n.t - m.t, 1)) : q
+  dshlTo(y, j, t)
   if (compare(r, t) >= 0) {
-    r[r.t++] = 1;
-    subTo(r, t, r);
+    r[r.t++] = 1
+    subTo(r, t, r)
   }
-
-  dshlTo(ONE, ys, t);
-  subTo(t, y, y);
-
-  while (y.t < ys) {
-    y[y.t++] = 0;
-  }
-
+  dshlTo(ONE, ys, t)
+  subTo(t, y, y)
+  while (y.t < ys) {y[y.t++] = 0}
   while (--j >= 0) {
-    let qd = r[--i] === y0 ? DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
-
+    let qd = (r[--i] === y0) ? DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
     if ((r[i] += am(y, 0, qd, r, j, 0, ys)) < qd) {
-      dshlTo(y, j, t);
-      subTo(r, t, r);
-
-      while (r[i] < --qd) {
-        subTo(r, t, r);
-      }
+      dshlTo(y, j, t)
+      subTo(r, t, r)
+      while (r[i] < --qd) {subTo(r, t, r)}
     }
   }
-
   if (q) {
-    dshrTo(r, ys, q);
-
-    if (ts !== ms) {
-      subTo(ZERO, q, q);
-    }
-  }
-
-  r.t = ys;
-  clamp(r);
-
-  if (nsh > 0) {
-    shrTo(r, nsh, r);
-  }
-
-  if (ts < 0) {
-    subTo(ZERO, r, r);
+    dshrTo(r, ys, q)
+    if (ts !== ms) {subTo(ZERO, q, q)}
   }
-
-  return q;
+  r.t = ys
+  clamp(r)
+  if (nsh > 0) {shrTo(r, nsh, r)}
+  if (ts < 0) {subTo(ZERO, r, r)}
+  return q
 }
 
 function modTo(b, a, r) {
-  divRemTo(abs(b), a, null, r);
-
-  if (b.s < 0 && compare(r, ZERO) > 0) {
-    subTo(a, r, r);
-  }
-
-  return r;
+  divRemTo(abs(b), a, null, r)
+  if (b.s < 0 && compare(r, ZERO) > 0) {subTo(a, r, r)}
+  return r
 }
 
 function mod(b, a) {
-  return modTo(b, a, nbi(a.t));
+  return modTo(b, a, nbi(a.t))
 }
 
 function div(b, a) {
-  return divRemTo(b, a, nbi(Math.max(b.t - a.t, 1)), null);
+  return divRemTo(b, a, nbi(Math.max(b.t - a.t, 1)), null)
 }
 
 function isEven(x) {
-  return (x.t > 0 ? x[0] & 1 : x.s) === 0;
+
+  return ((x.t > 0) ? (x[0] & 1) : x.s) === 0
 }
 
 function isZero(x) {
-  return equals(x, ZERO);
+  return equals(x, ZERO)
 }
 
 function sig(x) {
-  if (x.s < 0) {
-    return -1;
-  }
-
-  if (x.t <= 0 || x.t === 1 && x[0] <= 0) {
-    return 0;
-  }
-
-  return 1;
+  if (x.s < 0) {return -1}
+  if (x.t <= 0 || (x.t === 1 && x[0] <= 0)) {return 0}
+  return 1
 }
 
 function invMod(x, m) {
-  const ac = isEven(m);
-
-  if (isEven(x) && ac || sig(m) === 0) {
-    return ZERO;
-  }
-
-  const u = copy(m),
-        v = copy(x);
-  const a = nbv(1),
-        b = nbv(0),
-        c = nbv(0),
-        d = nbv(1);
-
+  const ac = isEven(m)
+  if ((isEven(x) && ac) || sig(m) === 0) {return ZERO}
+  const u = copy(m), v = copy(x)
+  const a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1)
   while (sig(u) !== 0) {
     while (isEven(u)) {
-      shrTo(u, 1, u);
-
+      shrTo(u, 1, u)
       if (ac) {
         if (!isEven(a) || !isEven(b)) {
-          addTo(a, x, a);
-          subTo(b, m, b);
+          addTo(a, x, a)
+          subTo(b, m, b)
         }
-
-        shrTo(a, 1, a);
-      } else if (!isEven(b)) {
-        subTo(b, m, b);
-      }
-
-      shrTo(b, 1, b);
+        shrTo(a, 1, a)
+      } else if (!isEven(b)) {subTo(b, m, b)}
+      shrTo(b, 1, b)
     }
-
     while (isEven(v)) {
-      shrTo(v, 1, v);
-
+      shrTo(v, 1, v)
       if (ac) {
         if (!isEven(c) || !isEven(d)) {
-          addTo(c, x, c);
-          subTo(d, m, d);
+          addTo(c, x, c)
+          subTo(d, m, d)
         }
-
-        shrTo(c, 1, c);
-      } else if (!isEven(d)) {
-        subTo(d, m, d);
-      }
-
-      shrTo(d, 1, d);
+        shrTo(c, 1, c)
+      } else if (!isEven(d)) {subTo(d, m, d)}
+      shrTo(d, 1, d)
     }
-
     if (compare(u, v) >= 0) {
-      subTo(u, v, u);
-
-      if (ac) {
-        subTo(a, c, a);
-      }
-
-      subTo(b, d, b);
+      subTo(u, v, u)
+      if (ac) {subTo(a, c, a)}
+      subTo(b, d, b)
     } else {
-      subTo(v, u, v);
-
-      if (ac) {
-        subTo(c, a, c);
-      }
-
-      subTo(d, b, d);
+      subTo(v, u, v)
+      if (ac) {subTo(c, a, c)}
+      subTo(d, b, d)
     }
   }
-
-  if (compare(v, ONE) !== 0) {
-    return ZERO;
-  }
-
-  if (compare(d, m) >= 0) {
-    return subtract(d, m);
-  }
-
-  if (sig(d) < 0) {
-    addTo(d, m, d);
-  } else {
-    return d;
-  }
-
-  if (sig(d) < 0) {
-    return add(d, m);
-  }
-
-  return d;
+  if (compare(v, ONE) !== 0) {return ZERO}
+  if (compare(d, m) >= 0) {return subtract(d, m)}
+  if (sig(d) < 0) {addTo(d, m, d)} else {return d}
+  if (sig(d) < 0) {return add(d, m)}
+  return d
 }
 
 function testBit(x, n) {
-  const j = Math.floor(n / DB);
-
-  if (j >= x.t) {
-    return x.s !== 0;
-  }
-
-  return (x[j] & 1 << n % DB) !== 0;
+  const j = Math.floor(n / DB)
+  if (j >= x.t) {return (x.s !== 0)}
+  return ((x[j] & (1 << (n % DB))) !== 0)
 }
 
 function nothing(x) {
-  return x;
+  return x
 }
 
 function extend(c, o) {
-  for (const i in o) {
-    c.prototype[i] = o[i];
-  }
+  for (const i in o) {c.prototype[i] = o[i]}
 } // </editor-fold>
 
 /*
  * Classic, Barret, Mongomery reductions, optimized ExpMod algorithms
  * optimized release of http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn2.js
  *
- */
-// <editor-fold defaultstate="collapsed">
-// Classic reduction
-
+ */ // <editor-fold defaultstate="collapsed">
 
+// Classic reduction
 const Classic = function (m) {
-  this.m = m;
-};
+  this.m = m
+}
 
 extend(Classic, {
   convert: function (x) {
-    if (x.s < 0 || compare(x, this.m) >= 0) {
-      return mod(x, this.m);
-    }
-
-    return x;
+    if (x.s < 0 || compare(x, this.m) >= 0) {return mod(x, this.m)}
+    return x
   },
   revert: nothing,
   reduce: function (x) {
-    modTo(x, this.m, x);
+    modTo(x, this.m, x)
   },
   sqrTo: function (x, r) {
-    sqrTo(x, r);
-    this.reduce(r);
+    sqrTo(x, r)
+    this.reduce(r)
   },
   mulTo: function (x, y, r) {
-    mulTo(x, y, r);
-    this.reduce(r);
-  }
-});
+    mulTo(x, y, r)
+    this.reduce(r)
+  },
+})
 
 function invDig(a) {
-  if (a.t < 1) {
-    return 0;
-  }
-
-  const x = a[0];
-
-  if ((x & 1) === 0) {
-    return 0;
-  }
-
-  let y = x & 3;
-  y = y * (2 - (x & 0xf) * y) & 0xf;
-  y = y * (2 - (x & 0xff) * y) & 0xff;
-  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;
-  y = y * (2 - x * y % DV) % DV;
-  return y > 0 ? DV - y : -y;
-} // Montgomery reduction
-
-
+  if (a.t < 1) {return 0}
+  const x = a[0]
+  if ((x & 1) === 0) {return 0}
+  let y = x & 3
+  y = (y * (2 - (x & 0xf) * y)) & 0xf
+  y = (y * (2 - (x & 0xff) * y)) & 0xff
+  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff
+  y = (y * (2 - x * y % DV)) % DV
+  return (y > 0) ? DV - y : -y
+}
+
+// Montgomery reduction
 const Montgomery = function (m) {
-  this.m = m;
-  this.mp = invDig(m);
-  this.mpl = this.mp & 0x7fff;
-  this.mph = this.mp >> 15;
-  this.um = (1 << DB - 15) - 1;
-  this.mt2 = 2 * m.t;
-};
+  this.m = m
+  this.mp = invDig(m)
+  this.mpl = this.mp & 0x7fff
+  this.mph = this.mp >> 15
+  this.um = (1 << (DB - 15)) - 1
+  this.mt2 = 2 * m.t
+}
 
 extend(Montgomery, {
   // xR mod m
   convert: function (x) {
-    const r = nbi(x.t);
-    dshlTo(abs(x), this.m.t, r);
-    divRemTo(r, this.m, null, r);
-
-    if (x.s < 0 && compare(r, ZERO) > 0) {
-      subTo(this.m, r, r);
-    }
-
-    return r;
+    const r = nbi(x.t)
+    dshlTo(abs(x), this.m.t, r)
+    divRemTo(r, this.m, null, r)
+    if (x.s < 0 && compare(r, ZERO) > 0) {subTo(this.m, r, r)}
+    return r
   },
   // x/R mod m
   revert: function (x) {
-    const r = nbi(x.t);
-    copyTo(x, r);
-    this.reduce(r);
-    return r;
+    const r = nbi(x.t)
+    copyTo(x, r)
+    this.reduce(r)
+    return r
   },
   // x = x/R mod m (HAC 14.32)
   reduce: function (x) {
-    while (x.t <= this.mt2) {
-      x[x.t++] = 0;
-    }
-
+    while (x.t <= this.mt2) {x[x.t++] = 0}
     for (let i = 0; i < this.m.t; ++i) {
-      let j = x[i] & 0x7fff;
-      const u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & DM;
-      j = i + this.m.t;
-      x[j] += am(this.m, 0, u0, x, i, 0, this.m.t);
-
+      let j = x[i] & 0x7fff
+      const u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & DM
+      j = i + this.m.t
+      x[j] += am(this.m, 0, u0, x, i, 0, this.m.t)
       while (x[j] >= DV) {
-        x[j] -= DV;
-        x[++j]++;
+        x[j] -= DV
+        x[++j]++
       }
     }
-
-    clamp(x);
-    dshrTo(x, this.m.t, x);
-
-    if (compare(x, this.m) >= 0) {
-      subTo(x, this.m, x);
-    }
+    clamp(x)
+    dshrTo(x, this.m.t, x)
+    if (compare(x, this.m) >= 0) {subTo(x, this.m, x)}
   },
   // r = "x^2/R mod m"; x != r
   sqrTo: function (x, r) {
-    sqrTo(x, r);
-    this.reduce(r);
+    sqrTo(x, r)
+    this.reduce(r)
   },
   // r = "xy/R mod m"; x,y != r
   mulTo: function (x, y, r) {
-    mulTo(x, y, r);
-    this.reduce(r);
-  }
-});
+    mulTo(x, y, r)
+    this.reduce(r)
+  },
+})
 
 function dAddOffset(x, n, w) {
-  if (n === 0) {
-    return;
-  }
-
-  while (x.t <= w) {
-    x[x.t++] = 0;
-  }
-
-  x[w] += n;
-
+  if (n === 0) {return}
+  while (x.t <= w) {x[x.t++] = 0}
+  x[w] += n
   while (x[w] >= DV) {
-    x[w] -= DV;
-
-    if (++w >= x.t) {
-      x[x.t++] = 0;
-    }
-
-    ++x[w];
+    x[w] -= DV
+    if (++w >= x.t) {x[x.t++] = 0}
+    ++x[w]
   }
 }
 
 function mulLowerTo(x, a, n, r) {
-  let i = Math.min(x.t + a.t, n);
-  r.s = 0; // assumes a,x >= 0
-
-  r.t = i;
-
-  while (i > 0) {
-    r[--i] = 0;
-  }
-
-  let j;
-
-  for (j = r.t - x.t; i < j; ++i) {
-    r[i + x.t] = am(x, 0, a[i], r, i, 0, x.t);
-  }
-
-  for (j = Math.min(a.t, n); i < j; ++i) {
-    am(x, 0, a[i], r, i, 0, n - i);
-  }
-
-  return clamp(r);
+  let i = Math.min(x.t + a.t, n)
+  r.s = 0 // assumes a,x >= 0
+  r.t = i
+  while (i > 0) {r[--i] = 0}
+  let j
+  for (j = r.t - x.t; i < j; ++i) {r[i + x.t] = am(x, 0, a[i], r, i, 0, x.t)}
+  for (j = Math.min(a.t, n); i < j; ++i) {am(x, 0, a[i], r, i, 0, n - i)}
+  return clamp(r)
 }
 
 function mulUpperTo(x, a, n, r) {
-  --n;
-  let i = r.t = x.t + a.t - n;
-  r.s = 0; // assumes a,x >= 0
-
-  while (--i >= 0) {
-    r[i] = 0;
-  }
-
-  for (i = Math.max(n - x.t, 0); i < a.t; ++i) {
-    r[x.t + i - n] = am(x, n - i, a[i], r, 0, 0, x.t + i - n);
-  }
-
-  clamp(r);
-  return dshrTo(r, 1, r);
-} // Barrett modular reduction
-
+  --n
+  let i = r.t = x.t + a.t - n
+  r.s = 0 // assumes a,x >= 0
+  while (--i >= 0) {r[i] = 0}
+  for (i = Math.max(n - x.t, 0); i < a.t; ++i) {r[x.t + i - n] = am(x, n - i, a[i], r, 0, 0, x.t + i - n)}
+  clamp(r)
+  return dshrTo(r, 1, r)
+}
 
+// Barrett modular reduction
 function Barrett(m) {
   // setup Barrett
-  this.r2 = nbi(2 * m.t);
-  this.q3 = nbi(2 * m.t);
-  dshlTo(ONE, 2 * m.t, this.r2);
-  this.mu = div(this.r2, m);
-  this.m = m;
+  this.r2 = nbi(2 * m.t)
+  this.q3 = nbi(2 * m.t)
+  dshlTo(ONE, 2 * m.t, this.r2)
+  this.mu = div(this.r2, m)
+  this.m = m
 }
 
 extend(Barrett, {
   convert: function (x) {
-    if (x.s < 0 || x.t > 2 * this.m.t) {
-      return mod(x, this.m);
-    }
+    if (x.s < 0 || x.t > 2 * this.m.t) {return mod(x, this.m)}
+    if (compare(x, this.m) < 0) {return x}
 
-    if (compare(x, this.m) < 0) {
-      return x;
-    }
+    const r = nbi(x.t)
+    copyTo(x, r)
+    this.reduce(r)
+    return r
 
-    const r = nbi(x.t);
-    copyTo(x, r);
-    this.reduce(r);
-    return r;
   },
   revert: function (x) {
-    return x;
+    return x
   },
   // x = x mod m (HAC 14.42)
   reduce: function (x) {
-    dshrTo(x, this.m.t - 1, this.r2);
-
+    dshrTo(x, this.m.t - 1, this.r2)
     if (x.t > this.m.t + 1) {
-      x.t = this.m.t + 1;
-      clamp(x);
-    }
-
-    mulUpperTo(this.mu, this.r2, this.m.t + 1, this.q3);
-    mulLowerTo(this.m, this.q3, this.m.t + 1, this.r2);
-
-    while (compare(x, this.r2) < 0) {
-      dAddOffset(x, 1, this.m.t + 1);
-    }
-
-    subTo(x, this.r2, x);
-
-    while (compare(x, this.m) >= 0) {
-      subTo(x, this.m, x);
+      x.t = this.m.t + 1
+      clamp(x)
     }
+    mulUpperTo(this.mu, this.r2, this.m.t + 1, this.q3)
+    mulLowerTo(this.m, this.q3, this.m.t + 1, this.r2)
+    while (compare(x, this.r2) < 0) {dAddOffset(x, 1, this.m.t + 1)}
+    subTo(x, this.r2, x)
+    while (compare(x, this.m) >= 0) {subTo(x, this.m, x)}
   },
   // r = x^2 mod m; x != r
   sqrTo: function (x, r) {
-    sqrTo(x, r);
-    this.reduce(r);
+    sqrTo(x, r)
+    this.reduce(r)
   },
   // r = x*y mod m; x,y != r
   mulTo: function (x, y, r) {
-    mulTo(x, y, r);
-    this.reduce(r);
-  }
-}); // x^e % m (HAC 14.85)
-
-function expMod(x, e, m) {
-  let i = bitLength(e),
-      k,
-      r = nbv(1),
-      z;
-
-  if (i <= 0) {
-    return r;
-  }
-
-  if (i < 18) {
-    k = 1;
-  } else if (i < 48) {
-    k = 3;
-  } else if (i < 144) {
-    k = 4;
-  } else if (i < 768) {
-    k = 5;
-  } else {
-    k = 6;
-  }
-
-  if (i < 8) {
-    z = new Classic(m);
-  } else if (isEven(m)) {
-    z = new Barrett(m);
-  } else {
-    z = new Montgomery(m);
-  } // precomputation
-
+    mulTo(x, y, r)
+    this.reduce(r)
+  },
 
-  let g = new Array(),
-      n = 3,
-      k1 = k - 1,
-      km = (1 << k) - 1;
-  g[1] = z.convert(x);
+})
 
+// x^e % m (HAC 14.85)
+function expMod(x, e, m) {
+  let i = bitLength(e), k, r = nbv(1), z
+  if (i <= 0) {return r}
+  if (i < 18) {k = 1} else if (i < 48) {k = 3} else if (i < 144) {k = 4} else if (i < 768) {k = 5} else {k = 6}
+  if (i < 8) {z = new Classic(m)} else if (isEven(m)) {z = new Barrett(m)} else {z = new Montgomery(m)}
+
+  // precomputation
+  let g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1
+  g[1] = z.convert(x)
   if (k > 1) {
-    const g2 = nbi(m.t * 2);
-    z.sqrTo(g[1], g2);
-
+    const g2 = nbi(m.t * 2)
+    z.sqrTo(g[1], g2)
     while (n <= km) {
-      g[n] = nbi(m.t * 2);
-      z.mulTo(g2, g[n - 2], g[n]);
-      n += 2;
+      g[n] = nbi(m.t * 2)
+      z.mulTo(g2, g[n - 2], g[n])
+      n += 2
     }
   }
 
-  let j = e.t - 1,
-      w,
-      is1 = true,
-      r2 = nbi(m.t * 2),
-      t;
-  i = nbits(e[j]) - 1;
-
+  let j = e.t - 1, w, is1 = true, r2 = nbi(m.t * 2), t
+  i = nbits(e[j]) - 1
   while (j >= 0) {
-    if (i >= k1) {
-      w = e[j] >> i - k1 & km;
-    } else {
-      w = (e[j] & (1 << i + 1) - 1) << k1 - i;
-
-      if (j > 0) {
-        w |= e[j - 1] >> DB + i - k1;
-      }
+    if (i >= k1) {w = (e[j] >> (i - k1)) & km} else {
+      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
+      if (j > 0) {w |= e[j - 1] >> (DB + i - k1)}
     }
 
-    n = k;
-
+    n = k
     while ((w & 1) == 0) {
-      w >>= 1;
-      --n;
+      w >>= 1
+      --n
     }
-
     if ((i -= n) < 0) {
-      i += DB;
-      --j;
+      i += DB
+      --j
     }
-
-    if (is1) {
-      // ret == 1, don't bother squaring or multiplying it
-      copyTo(g[w], r);
-      is1 = false;
+    if (is1) {	// ret == 1, don't bother squaring or multiplying it
+      copyTo(g[w], r)
+      is1 = false
     } else {
       while (n > 1) {
-        z.sqrTo(r, r2);
-        z.sqrTo(r2, r);
-        n -= 2;
+        z.sqrTo(r, r2)
+        z.sqrTo(r2, r)
+        n -= 2
       }
-
-      if (n > 0) {
-        z.sqrTo(r, r2);
-      } else {
-        t = r;
-        r = r2;
-        r2 = t;
+      if (n > 0) {z.sqrTo(r, r2)} else {
+        t = r
+        r = r2
+        r2 = t
       }
-
-      z.mulTo(r2, g[w], r);
+      z.mulTo(r2, g[w], r)
     }
-
-    while (j >= 0 && (e[j] & 1 << i) == 0) {
-      z.sqrTo(r, r2);
-      t = r;
-      r = r2;
-      r2 = t;
-
+    while (j >= 0 && (e[j] & (1 << i)) == 0) {
+      z.sqrTo(r, r2)
+      t = r
+      r = r2
+      r2 = t
       if (--i < 0) {
-        i = DB - 1;
-        --j;
+        i = DB - 1
+        --j
       }
     }
   }
-
-  return z.revert(r);
+  return z.revert(r)
 } // </editor-fold>
 
 /*
  * EC Field Elements, Points, Curves
  * optimized release of http://www-cs-students.stanford.edu/~tjw/jsbn/ec.js
  *
- */
-// <editor-fold defaultstate="collapsed">
-// EC Field Elemets
-
+ */ // <editor-fold defaultstate="collapsed">
 
+// EC Field Elemets
 function newFE(a, x) {
-  a.r.reduce(x);
-  x.q = a.q;
-  x.r = a.r;
-  return x;
+  a.r.reduce(x)
+  x.q = a.q
+  x.r = a.r
+  return x
 }
 
 function copyFE(a, x) {
-  x.q = a.q;
-  x.r = a.r;
-  return x;
+  x.q = a.q
+  x.r = a.r
+  return x
 }
 
 function negFE(a) {
-  return copyFE(a, sub(a.q, a));
+  return copyFE(a, sub(a.q, a))
 }
 
 function addFE(a, b) {
-  const r = add(a, b);
-
-  if (compare(r, a.q) > 0) {
-    subTo(r, a.q, r);
-  }
-
-  return copyFE(a, r);
+  const r = add(a, b)
+  if (compare(r, a.q) > 0) {subTo(r, a.q, r)}
+  return copyFE(a, r)
 }
 
 function subFE(a, b) {
-  const r = sub(a, b);
-
-  if (r.s < 0) {
-    addTo(a.q, r, r);
-  }
-
-  return copyFE(a, r);
+  const r = sub(a, b)
+  if (r.s < 0) {addTo(a.q, r, r)}
+  return copyFE(a, r)
 }
 
 function mulFE(a, b) {
-  return newFE(a, mul(a, b));
+  return newFE(a, mul(a, b))
 }
 
 function sqrFE(a) {
-  return newFE(a, sqr(a));
+  return newFE(a, sqr(a))
 }
 
 function shlFE(a, i) {
-  return newFE(a, shl(a, i));
+  return newFE(a, shl(a, i))
 }
 
 function invFE(a) {
-  return copyFE(a, invMod(a, a.q));
-} // EC Points
-
+  return copyFE(a, invMod(a, a.q))
+}
 
+// EC Points
 function newEC(curve, x, y, z) {
   return {
     curve: curve,
     x: x,
     y: y,
-    z: z || newFE(curve, ONE)
-  };
+    z: z || newFE(curve, ONE),
+  }
 }
 
 function getX(point) {
-  if (!point.zinv) {
-    point.zinv = invFE(point.z);
-  }
-
-  return mulFE(point.x, point.zinv);
+  if (!point.zinv) {point.zinv = invFE(point.z)}
+  return mulFE(point.x, point.zinv)
 }
 
 function getY(point) {
-  if (!point.zinv) {
-    point.zinv = invFE(point.z);
-  }
-
-  return mulFE(point.y, point.zinv);
+  if (!point.zinv) {point.zinv = invFE(point.z)}
+  return mulFE(point.y, point.zinv)
 }
 
 function isInfinity(a) {
-  if (!a.x && !a.y) {
-    return true;
-  }
-
-  return isZero(a.z) && !isZero(a.y);
-}
-
-function getInfinity(a) {
-  return a.curve.infinity;
-}
-
-function equalsEC(a, b) {
-  if (a === b) {
-    return true;
-  }
-
-  if (isInfinity(a)) {
-    return isInfinity(b);
-  }
-
-  if (isInfinity(b)) {
-    return isInfinity(a);
-  }
-
-  let u, v; // u = Y2 * Z1 - Y1 * Z2
-
-  u = subFE(mulFE(b.y, a.z), mulFE(a.y, b.z));
-
-  if (!isZero(u)) {
-    return false;
-  } // v = X2 * Z1 - X1 * Z2
+  if ((!a.x) && (!a.y)) {return true}
+  return isZero(a.z) && !isZero(a.y)
+}
 
+function getInfinity(a) {
+  return a.curve.infinity
+}
 
-  v = subFE(mulFE(b.x, a.z), mulFE(a.x, b.z));
-  return isZero(v);
+function equalsEC(a, b) {
+  if (a === b) {return true}
+  if (isInfinity(a)) {return isInfinity(b)}
+  if (isInfinity(b)) {return isInfinity(a)}
+  let u, v
+  // u = Y2 * Z1 - Y1 * Z2
+  u = subFE(mulFE(b.y, a.z), mulFE(a.y, b.z))
+  if (!isZero(u)) {return false}
+  // v = X2 * Z1 - X1 * Z2
+  v = subFE(mulFE(b.x, a.z), mulFE(a.x, b.z))
+  return isZero(v)
 }
 
 function negEC(a) {
-  return newEC(a.curve, a.x, negFE(a.y), a.z);
+  return newEC(a.curve, a.x, negFE(a.y), a.z)
 }
 
 function addEC(a, b) {
-  if (isInfinity(a)) {
-    return b;
-  }
-
-  if (isInfinity(b)) {
-    return a;
-  } // u = Y2 * Z1 - Y1 * Z2
-
-
-  const u = subFE(mulFE(b.y, a.z), mulFE(a.y, b.z)); // v = X2 * Z1 - X1 * Z2
+  if (isInfinity(a)) {return b}
+  if (isInfinity(b)) {return a}
 
-  const v = subFE(mulFE(b.x, a.z), mulFE(a.x, b.z));
+  // u = Y2 * Z1 - Y1 * Z2
+  const u = subFE(mulFE(b.y, a.z), mulFE(a.y, b.z))
+  // v = X2 * Z1 - X1 * Z2
+  const v = subFE(mulFE(b.x, a.z), mulFE(a.x, b.z))
 
   if (isZero(v)) {
     if (isZero(u)) {
-      return twiceEC(a); // a == b, so double
+      return twiceEC(a) // a == b, so double
     }
-
-    return getInfinity(a); // a = -b, so infinity
+    return getInfinity(a) // a = -b, so infinity
   }
 
-  const x1 = a.x;
-  const y1 = a.y;
-  const v2 = sqrFE(v);
-  const v3 = mulFE(v2, v);
-  const x1v2 = mulFE(x1, v2);
-  const zu2 = mulFE(sqrFE(u), a.z); // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
+  const x1 = a.x
+  const y1 = a.y
 
-  const x3 = mulFE(subFE(mulFE(subFE(zu2, shlFE(x1v2, 1)), b.z), v3), v); // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
+  const v2 = sqrFE(v)
+  const v3 = mulFE(v2, v)
+  const x1v2 = mulFE(x1, v2)
+  const zu2 = mulFE(sqrFE(u), a.z)
 
-  const y3 = addFE(mulFE(subFE(subFE(mulFE(mulFE(x1v2, THREE), u), mulFE(y1, v3)), mulFE(zu2, u)), b.z), mulFE(u, v3)); // z3 = v^3 * z1 * z2
+  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
+  const x3 = mulFE(subFE(mulFE(subFE(zu2, shlFE(x1v2, 1)), b.z), v3), v)
+  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
+  const y3 = addFE(mulFE(subFE(subFE(mulFE(mulFE(x1v2, THREE), u), mulFE(y1, v3)), mulFE(zu2, u)), b.z), mulFE(u, v3))
+  // z3 = v^3 * z1 * z2
+  const z3 = mulFE(mulFE(v3, a.z), b.z)
 
-  const z3 = mulFE(mulFE(v3, a.z), b.z);
-  return newEC(a.curve, x3, y3, z3);
+  return newEC(a.curve, x3, y3, z3)
 }
 
 function twiceEC(b) {
-  if (isInfinity(b)) {
-    return b;
-  }
-
-  if (sig(b.y) === 0) {
-    return getInfinity(b);
-  }
+  if (isInfinity(b)) {return b}
+  if (sig(b.y) === 0) {return getInfinity(b)}
 
-  const x1 = b.x;
-  const y1 = b.y;
-  const y1z1 = mulFE(y1, b.z);
-  const y1sqz1 = mulFE(y1z1, y1);
-  const a = b.curve.a; // w = 3 * x1^2 + a * z1^2
+  const x1 = b.x
+  const y1 = b.y
 
-  let w = mulFE(sqrFE(x1), THREE);
+  const y1z1 = mulFE(y1, b.z)
+  const y1sqz1 = mulFE(y1z1, y1)
+  const a = b.curve.a
 
+  // w = 3 * x1^2 + a * z1^2
+  let w = mulFE(sqrFE(x1), THREE)
   if (!isZero(a)) {
-    w = addFE(w, mulFE(sqrFE(b.z), a));
-  } // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
-
-
-  const x3 = mulFE(shlFE(subFE(sqrFE(w), mulFE(shlFE(x1, 3), y1sqz1)), 1), y1z1); // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
-
-  const y3 = subFE(mulFE(shlFE(subFE(mulFE(mulFE(w, THREE), x1), shlFE(y1sqz1, 1)), 2), y1sqz1), mulFE(sqrFE(w), w)); // z3 = 8 * (y1 * z1)^3
+    w = addFE(w, mulFE(sqrFE(b.z), a))
+  }
 
-  const z3 = shlFE(mulFE(sqrFE(y1z1), y1z1), 3);
-  return newEC(b.curve, x3, y3, z3);
-} // Simple NAF (Non-Adjacent Form) multiplication algorithm
+  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
+  const x3 = mulFE(shlFE(subFE(sqrFE(w), mulFE(shlFE(x1, 3), y1sqz1)), 1), y1z1)
+  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
+  const y3 = subFE(mulFE(shlFE(subFE(mulFE(mulFE(w, THREE), x1), shlFE(y1sqz1, 1)), 2), y1sqz1), mulFE(sqrFE(w), w))
+  // z3 = 8 * (y1 * z1)^3
+  const z3 = shlFE(mulFE(sqrFE(y1z1), y1z1), 3)
 
+  return newEC(b.curve, x3, y3, z3)
+}
 
+// Simple NAF (Non-Adjacent Form) multiplication algorithm
 function mulEC(a, k) {
-  if (isInfinity(a)) {
-    return a;
-  }
+  if (isInfinity(a)) {return a}
+  if (sig(k) === 0) {return getInfinity(a)}
 
-  if (sig(k) === 0) {
-    return getInfinity(a);
-  }
+  const e = k
+  const h = mul(e, THREE)
 
-  const e = k;
-  const h = mul(e, THREE);
-  const neg = negEC(a);
-  let R = a;
-  let i;
+  const neg = negEC(a)
+  let R = a
 
+  let i
   for (i = bitLength(h) - 2; i > 0; --i) {
-    R = twiceEC(R);
-    const hBit = testBit(h, i);
-    const eBit = testBit(e, i);
+    R = twiceEC(R)
+
+    const hBit = testBit(h, i)
+    const eBit = testBit(e, i)
 
     if (hBit !== eBit) {
-      R = addEC(R, hBit ? a : neg);
+      R = addEC(R, hBit ? a : neg)
     }
   }
 
-  return R;
+  return R
 }
 
 function mul2AndAddEC(a, k) {
-  const nbits = bitLength(k);
+  const nbits = bitLength(k)
   let R = a,
-      Q = getInfinity(a);
+    Q = getInfinity(a)
 
   for (let i = 0; i < nbits - 1; i++) {
-    if (testBit(k, i) === 1) {
-      Q = addEC(Q, R);
-    }
-
-    R = twiceEC(R);
-  }
+    if (testBit(k, i) === 1) {Q = addEC(Q, R)}
 
-  if (testBit(k, nbits - 1) === 1) {
-    Q = addEC(Q, R);
+    R = twiceEC(R)
   }
 
-  return Q;
-} // Compute a*j + x*k (simultaneous multiplication)
+  if (testBit(k, nbits - 1) === 1) {Q = addEC(Q, R)}
 
+  return Q
+}
 
+// Compute a*j + x*k (simultaneous multiplication)
 function mulTwoEC(a, j, x, k) {
-  let i;
-
-  if (bitLength(j) > bitLength(k)) {
-    i = bitLength(j) - 1;
-  } else {
-    i = bitLength(k) - 1;
-  }
-
-  let R = getInfinity(a);
-  const both = addEC(a, x);
+  let i
+  if (bitLength(j) > bitLength(k)) {i = bitLength(j) - 1} else {i = bitLength(k) - 1}
 
+  let R = getInfinity(a)
+  const both = addEC(a, x)
   while (i >= 0) {
-    R = twiceEC(R);
-
+    R = twiceEC(R)
     if (testBit(j, i)) {
       if (testBit(k, i)) {
-        R = addEC(R, both);
+        R = addEC(R, both)
       } else {
-        R = addEC(R, a);
+        R = addEC(R, a)
       }
     } else {
       if (testBit(k, i)) {
-        R = addEC(R, x);
+        R = addEC(R, x)
       }
     }
-
-    --i;
+    --i
   }
 
-  return R;
-} // EC Curve
-
+  return R
+}
 
+// EC Curve
 function newCurve(q, a, b) {
-  const curve = {};
-  curve.q = q;
-  curve.r = new Barrett(q);
-  curve.a = newFE(curve, a);
-  curve.b = newFE(curve, b);
-  curve.infinity = newEC(curve);
-  return curve;
+  const curve = {}
+  curve.q = q
+  curve.r = new Barrett(q)
+  curve.a = newFE(curve, a)
+  curve.b = newFE(curve, b)
+  curve.infinity = newEC(curve)
+  return curve
 } // </editor-fold>
 
 /*
  * Converion tools (hex, binary)
  *
- */
-// <editor-fold defaultstate="collapsed">
-
+ */ // <editor-fold defaultstate="collapsed">
 
 function atobi(d) {
-  const k = 8;
-  const a = new Uint8Array(d);
-  const r = nbi(a.length * 8 / DB);
-  r.t = 0;
-  r.s = 0;
-  let sh = 0;
-
+  const k = 8
+  const a = new Uint8Array(d)
+  const r = nbi(a.length * 8 / DB)
+  r.t = 0
+  r.s = 0
+  let sh = 0
   for (let i = 0, n = a.length; i < n; i++) {
-    const x = a[i];
-
-    if (sh === 0) {
-      r[r.t++] = x;
-    } else if (sh + k > DB) {
-      r[r.t - 1] |= (x & (1 << DB - sh) - 1) << sh;
-      r[r.t++] = x >> DB - sh;
-    } else {
-      r[r.t - 1] |= x << sh;
-    }
-
-    sh += k;
-
-    if (sh >= DB) {
-      sh -= DB;
-    }
+    const x = a[i]
+    if (sh === 0) {r[r.t++] = x} else if (sh + k > DB) {
+      r[r.t - 1] |= (x & ((1 << (DB - sh)) - 1)) << sh
+      r[r.t++] = (x >> (DB - sh))
+    } else {r[r.t - 1] |= x << sh}
+    sh += k
+    if (sh >= DB) {sh -= DB}
   }
-
-  return clamp(r);
+  return clamp(r)
 }
 
 function bitoa(s, bitLength) {
-  const k = 8;
-  let km = (1 << k) - 1,
-      d,
-      m = false,
-      r = [],
-      i = s.t;
-  let p = DB - i * DB % k;
-
+  const k = 8
+  let km = (1 << k) - 1, d, m = false, r = [], i = s.t
+  let p = DB - (i * DB) % k
   if (i-- > 0) {
     if (p < DB && (d = s[i] >> p) > 0) {
-      m = true;
-      r.push(d);
+      m = true
+      r.push(d)
     }
-
     while (i >= 0) {
       if (p < k) {
-        d = (s[i] & (1 << p) - 1) << k - p;
-        d |= s[--i] >> (p += DB - k);
+        d = (s[i] & ((1 << p) - 1)) << (k - p)
+        d |= s[--i] >> (p += DB - k)
       } else {
-        d = s[i] >> (p -= k) & km;
-
+        d = (s[i] >> (p -= k)) & km
         if (p <= 0) {
-          p += DB;
-          --i;
+          p += DB
+          --i
         }
       }
-
-      if (d > 0) {
-        m = true;
-      }
-
-      if (m) {
-        r.push(d);
-      }
+      if (d > 0) {m = true}
+      if (m) {r.push(d)}
     }
   }
-
-  const r8 = new Uint8Array(bitLength ? bitLength / 8 : r.length);
-
-  if (m) {
-    r8.set(r.reverse());
-  }
-
-  return r8.buffer;
+  const r8 = new Uint8Array(bitLength ? bitLength / 8 : r.length)
+  if (m) {r8.set(r.reverse())}
+  return r8.buffer
 }
 
-function htobi(s) {
-  if (typeof s === 'number' || s instanceof Number) {
-    return nbv(s);
-  }
-
-  s = s.replace(/[^\-A-Fa-f0-9]/g, '');
-
-  if (!s) {
-    s = '0';
-  }
-
-  const k = 4;
-  const r = nbi(s.length / 7);
-  let i = s.length,
-      mi = false,
-      sh = 0;
 
+function htobi(s) {
+  if (typeof s === 'number' || s instanceof Number) {return nbv(s)}
+  s = s.replace(/[^\-A-Fa-f0-9]/g, '')
+  if (!s) {s = '0'}
+  const k = 4
+  const r = nbi(s.length / 7)
+  let i = s.length, mi = false, sh = 0
   while (--i >= 0) {
-    const c = s.charAt(i);
-
+    const c = s.charAt(i)
     if (c === '-') {
-      mi = true;
-      continue;
-    }
-
-    const x = parseInt(s.charAt(i), 16);
-    mi = false;
-
-    if (sh === 0) {
-      r[r.t++] = x;
-    } else if (sh + k > DB) {
-      r[r.t - 1] |= (x & (1 << DB - sh) - 1) << sh;
-      r[r.t++] = x >> DB - sh;
-    } else {
-      r[r.t - 1] |= x << sh;
-    }
-
-    sh += k;
-
-    if (sh >= DB) {
-      sh -= DB;
+      mi = true
+      continue
     }
+    const x = parseInt(s.charAt(i), 16)
+    mi = false
+    if (sh === 0) {r[r.t++] = x} else if (sh + k > DB) {
+      r[r.t - 1] |= (x & ((1 << (DB - sh)) - 1)) << sh
+      r[r.t++] = (x >> (DB - sh))
+    } else {r[r.t - 1] |= x << sh}
+    sh += k
+    if (sh >= DB) {sh -= DB}
   }
-
-  if (mi) {
-    subTo(ZERO, r, r);
-  }
-
-  return clamp(r);
+  if (mi) {subTo(ZERO, r, r)}
+  return clamp(r)
 }
 
 function bitoh(x) {
-  if (x.s < 0) {
-    return `-${bitoh(negTo(x, nbi(x.t)))}`;
-  }
-
-  const k = 4;
-  let km = (1 << k) - 1,
-      d,
-      m = false,
-      r = '',
-      i = x.t;
-  let p = DB - i * DB % k;
-
+  if (x.s < 0) {return `-${ bitoh(negTo(x, nbi(x.t)))}`}
+  const k = 4
+  let km = (1 << k) - 1, d, m = false, r = '', i = x.t
+  let p = DB - (i * DB) % k
   if (i-- > 0) {
     if (p < DB && (d = x[i] >> p) > 0) {
-      m = true;
-      r = d.toString(16);
+      m = true
+      r = d.toString(16)
     }
-
     while (i >= 0) {
       if (p < k) {
-        d = (x[i] & (1 << p) - 1) << k - p;
-        d |= x[--i] >> (p += DB - k);
+        d = (x[i] & ((1 << p) - 1)) << (k - p)
+        d |= x[--i] >> (p += DB - k)
       } else {
-        d = x[i] >> (p -= k) & km;
-
+        d = (x[i] >> (p -= k)) & km
         if (p <= 0) {
-          p += DB;
-          --i;
+          p += DB
+          --i
         }
       }
-
-      if (d > 0) {
-        m = true;
-      }
-
-      if (m) {
-        r += d.toString(16);
-      }
+      if (d > 0) {m = true}
+      if (m) {r += d.toString(16)}
     }
   }
+  return `0x${ m ? r : '0'}`
+}
 
-  return `0x${m ? r : '0'}`;
-} // biginteger to big-endian integer bytearray
-
-
+// biginteger to big-endian integer bytearray
 function bitoi(s) {
-  let i = s.t,
-      r = [];
-  r[0] = s.s;
-  let p = DB - i * DB % 8,
-      d,
-      k = 0;
-
+  let i = s.t, r = []
+  r[0] = s.s
+  let p = DB - (i * DB) % 8, d, k = 0
   if (i-- > 0) {
-    if (p < DB && (d = s[i] >> p) !== (s.s & DM) >> p) {
-      r[k++] = d | s.s << DB - p;
-    }
-
+    if (p < DB && (d = s[i] >> p) !== (s.s & DM) >> p) {r[k++] = d | (s.s << (DB - p))}
     while (i >= 0) {
       if (p < 8) {
-        d = (s[i] & (1 << p) - 1) << 8 - p;
-        d |= s[--i] >> (p += DB - 8);
+        d = (s[i] & ((1 << p) - 1)) << (8 - p)
+        d |= s[--i] >> (p += DB - 8)
       } else {
-        d = s[i] >> (p -= 8) & 0xff;
-
+        d = (s[i] >> (p -= 8)) & 0xff
         if (p <= 0) {
-          p += DB;
-          --i;
+          p += DB
+          --i
         }
       }
-
-      if ((d & 0x80) !== 0) {
-        d |= -256;
-      }
-
-      if (k === 0 && (s.s & 0x80) !== (d & 0x80)) {
-        ++k;
-      }
-
-      if (k > 0 || d !== s.s) {
-        r[k++] = d;
-      }
+      if ((d & 0x80) !== 0) {d |= -256}
+      if (k === 0 && (s.s & 0x80) !== (d & 0x80)) {++k}
+      if (k > 0 || d !== s.s) {r[k++] = d}
     }
   }
+  return new Uint8Array(r).buffer
+}
 
-  return new Uint8Array(r).buffer;
-} // big-endian integer bytearray to biginteger
-
-
+// big-endian integer bytearray to biginteger
 function itobi(d) {
-  const k = 8,
-        s = new Uint8Array(d),
-        r = nbi(s.length / 7);
-  r.t = 0;
-  r.s = 0;
-  let i = s.length,
-      sh = 0;
-
+  const k = 8, s = new Uint8Array(d),
+    r = nbi(s.length / 7)
+  r.t = 0
+  r.s = 0
+  let i = s.length, sh = 0
   while (--i >= 0) {
-    const x = s[i] & 0xff;
-
-    if (sh === 0) {
-      r[r.t++] = x;
-    } else if (sh + k > DB) {
-      r[r.t - 1] |= (x & (1 << DB - sh) - 1) << sh;
-      r[r.t++] = x >> DB - sh;
-    } else {
-      r[r.t - 1] |= x << sh;
-    }
-
-    sh += k;
-
-    if (sh >= DB) {
-      sh -= DB;
-    }
+    const x = s[i] & 0xff
+    if (sh === 0) {r[r.t++] = x} else if (sh + k > DB) {
+      r[r.t - 1] |= (x & ((1 << (DB - sh)) - 1)) << sh
+      r[r.t++] = (x >> (DB - sh))
+    } else {r[r.t - 1] |= x << sh}
+    sh += k
+    if (sh >= DB) {sh -= DB}
   }
-
   if ((s[0] & 0x80) !== 0) {
-    r.s = -1;
-
-    if (sh > 0) {
-      r[r.t - 1] |= (1 << DB - sh) - 1 << sh;
-    }
+    r.s = -1
+    if (sh > 0) {r[r.t - 1] |= ((1 << (DB - sh)) - 1) << sh}
   }
-
-  return clamp(r);
-} // Swap bytes in buffer
+  return clamp(r)
+}
 
 
+// Swap bytes in buffer
 function swap(s) {
   const src = new Uint8Array(s),
-        dst = new Uint8Array(src.length);
-
-  for (let i = 0, n = src.length; i < n; i++) {
-    dst[n - i - 1] = src[i];
-  }
-
-  return dst.buffer;
-} // Calculate hash of data
-
+    dst = new Uint8Array(src.length)
+  for (let i = 0, n = src.length; i < n; i++) {dst[n - i - 1] = src[i]}
+  return dst.buffer
+}
 
+// Calculate hash of data
 function hash(d) {
-  if (this.hash) {
-    d = this.hash.digest(d);
-  } // Swap hash for SignalCom
-
-
-  if (this.procreator === 'SC' || this.procreator === 'VN' && this.hash.version === 2012) {
-    d = swap(d);
-  }
-
-  return d;
-} // Check buffer
-
+  if (this.hash) {d = this.hash.digest(d)}
+  // Swap hash for SignalCom
+  if (this.procreator === 'SC' ||
+        (this.procreator === 'VN' && this.hash.version === 2012)) {d = swap(d)}
+  return d
+}
 
+// Check buffer
 function buffer(d) {
-  if (d instanceof CryptoOperationData) {
-    return d;
-  }
-
+  if (d instanceof CryptoOperationData) {return d}
   if (d && d.buffer && d.buffer instanceof CryptoOperationData) {
-    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ? d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer;
+    return d.byteOffset === 0 && d.byteLength === d.buffer.byteLength ?
+      d.buffer : new Uint8Array(new Uint8Array(d, d.byteOffset, d.byteLength)).buffer
   }
+  throw new DataError('CryptoOperationData or CryptoOperationDataView required')
+}
 
-  throw new DataError('CryptoOperationData or CryptoOperationDataView required');
-} // Check double buffer
-
-
+// Check double buffer
 function to2(d) {
-  const b = buffer(d);
-
-  if (b.byteLength % 2 > 0) {
-    throw new DataError('Buffer length must be even');
-  }
-
-  const n = b.byteLength / 2;
-  return [atobi(new Uint8Array(b, 0, n)), atobi(new Uint8Array(b, n, n))];
+  const b = buffer(d)
+  if (b.byteLength % 2 > 0) {throw new DataError('Buffer length must be even')}
+  const n = b.byteLength / 2
+  return [atobi(new Uint8Array(b, 0, n)), atobi(new Uint8Array(b, n, n))]
 }
 
 function from2(x, y, bitLength) {
   const a = bitoa(x, bitLength),
-        b = bitoa(y, bitLength),
-        d = new Uint8Array(a.byteLength + b.byteLength);
-  d.set(new Uint8Array(a));
-  d.set(new Uint8Array(b), a.byteLength);
-  return d.buffer;
+    b = bitoa(y, bitLength),
+    d = new Uint8Array(a.byteLength + b.byteLength)
+  d.set(new Uint8Array(a))
+  d.set(new Uint8Array(b), a.byteLength)
+  return d.buffer
 }
 
 function getSeed(length) {
-  const randomSource = GostRandom ? new (GostRandom || global.GostRandom)() : rootcrypto;
 
+  const randomSource = GostRandom ? new (GostRandom || global.GostRandom) : rootcrypto
   if (randomSource.getRandomValues) {
-    const d = new Uint8Array(Math.ceil(length / 8));
-    randomSource.getRandomValues(d);
-    return d;
-  }
-
-  throw new NotSupportedError('Random generator not found');
+    const d = new Uint8Array(Math.ceil(length / 8))
+    randomSource.getRandomValues(d)
+    return d
+  } throw new NotSupportedError('Random generator not found')
 } // </editor-fold>
 
 /**
@@ -1856,68 +1325,59 @@ function getSeed(length) {
  * @param {(CryptoOperationData|TypedArray)} data Data
  * @returns {CryptoOperationData} Signature
  */
-
-
 function sign(privateKey, data) // <editor-fold defaultstate="collapsed">
 {
-  // Stage 1
-  const b = buffer(data);
-  const alpha = atobi(hash.call(this, b));
-  const q = this.q;
-  const x = mod(atobi(buffer(privateKey)), q); // Stage 2
 
-  let e = mod(alpha, q);
+  // Stage 1
+  const b = buffer(data)
+  const alpha = atobi(hash.call(this, b))
 
-  if (isZero(e)) {
-    e = ONE;
-  }
+  const q = this.q
+  const x = mod(atobi(buffer(privateKey)), q)
 
-  let s = ZERO;
+  // Stage 2
+  let e = mod(alpha, q)
+  if (isZero(e)) {e = ONE}
 
+  let s = ZERO
   while (isZero(s)) {
-    var r = ZERO;
-
+    var r = ZERO
     while (isZero(r)) {
+
       // Stage 3
-      var k = mod(atobi(this.ukm || getSeed(this.bitLength)), q); // pseudo random 0 < k < q
+      var k = mod(atobi(this.ukm ||
+                getSeed(this.bitLength)), q) // pseudo random 0 < k < q
       // Stage 4
-
       if (this.curve) {
         // Gost R 34.10-2001 || Gost R 34.10-2012
-        const P = this.P;
-        const C = mulEC(P, k);
-        r = mod(getX(C), q);
+        const P = this.P
+        const C = mulEC(P, k)
+        r = mod(getX(C), q)
       } else {
         // Gost R 34.10-94
-        const p = this.p,
-              a = this.a;
-        r = mod(expMod(a, k, p), q);
+        const p = this.p, a = this.a
+        r = mod(expMod(a, k, p), q)
       }
-    } // Stage 5
-
-
-    s = mod(add(mul(r, x), mul(k, e)), q);
-  } // Stage 6
+    }
+    // Stage 5
+    s = mod(add(mul(r, x), mul(k, e)), q)
+  }
+  // Stage 6
   // console.log('s', bitoh(s));
   // console.log('r', bitoh(r));
-
-
-  let zetta; // Integer structure for SignalCom algorithm
-
+  let zetta
+  // Integer structure for SignalCom algorithm
   if (this.procreator === 'SC') {
     zetta = {
       r: bitoh(r),
-      s: bitoh(s)
-    };
-  } else {
-    zetta = from2(r, s, this.bitLength); // Swap bytes for CryptoPro algorithm
-
-    if (this.procreator === 'CP' || this.procreator === 'VN') {
-      zetta = swap(zetta);
+      s: bitoh(s),
     }
+  } else {
+    zetta = from2(r, s, this.bitLength)
+    // Swap bytes for CryptoPro algorithm
+    if (this.procreator === 'CP' || this.procreator === 'VN') {zetta = swap(zetta)}
   }
-
-  return zetta;
+  return zetta
 } // </editor-fold>
 
 /**
@@ -1933,72 +1393,54 @@ function sign(privateKey, data) // <editor-fold defaultstate="collapsed">
  * @param {(CryptoOperationData|TypedArray)} data Data
  * @returns {boolean} Signature verified = true
  */
-
-
 function verify(publicKey, signature, data) // <editor-fold defaultstate="collapsed">
 {
-  // Stage 1
-  const q = this.q;
-  let r, s; // Ready int for SignalCom algorithm
 
+  // Stage 1
+  const q = this.q
+  let r, s
+  // Ready int for SignalCom algorithm
   if (this.procreator === 'SC') {
-    r = htobi(signature.r);
-    s = htobi(signature.s);
+    r = htobi(signature.r)
+    s = htobi(signature.s)
   } else {
-    if (this.procreator === 'CP' || this.procreator === 'VN') {
-      signature = swap(signature);
-    }
-
-    const zetta = to2(signature); // Swap bytes for CryptoPro algorithm
-
-    s = zetta[1]; //  first 32 octets contain the big-endian representation of s
-
-    r = zetta[0]; //  and second 32 octets contain the big-endian representation of r
-  }
-
-  if (compare(r, q) >= 0 || compare(s, q) >= 0) {
-    return false;
-  } // Stage 2
-
-
-  const b = buffer(data);
-  const alpha = atobi(hash.call(this, b)); // Stage 3
-
-  let e = mod(alpha, q);
-
-  if (isZero(e) === 0) {
-    e = ONE;
-  } // Stage 4
-
-
-  const v = invMod(e, q); // Stage 5
-
-  const z1 = mod(mul(s, v), q);
-  const z2 = sub(q, mod(mul(r, v), q)); // Stage 6
-
+    if (this.procreator === 'CP' || this.procreator === 'VN') {signature = swap(signature)}
+    const zetta = to2(signature)
+    // Swap bytes for CryptoPro algorithm
+    s = zetta[1] //  first 32 octets contain the big-endian representation of s
+    r = zetta[0] //  and second 32 octets contain the big-endian representation of r
+  }
+  if (compare(r, q) >= 0 || compare(s, q) >= 0) {return false}
+  // Stage 2
+  const b = buffer(data)
+  const alpha = atobi(hash.call(this, b))
+  // Stage 3
+  let e = mod(alpha, q)
+  if (isZero(e) === 0) {e = ONE}
+  // Stage 4
+  const v = invMod(e, q)
+  // Stage 5
+  const z1 = mod(mul(s, v), q)
+  const z2 = sub(q, mod(mul(r, v), q))
+  // Stage 6
   if (this.curve) {
     // Gost R 34.10-2001 || Gost R 34.10-2012
     var k2 = to2(publicKey),
-        curve = this.curve,
-        P = this.P,
-        x = newFE(curve, k2[0]),
-        // first 32 octets contain the little-endian representation of x
-    y = newFE(curve, k2[1]),
-        // and second 32 octets contain the little-endian representation of y.
-    Q = new newEC(curve, x, y); // This corresponds to the binary representation of (<y>256||<x>256)
-
-    const C = mulTwoEC(P, z1, Q, z2);
-    var R = mod(getX(C), q);
+      curve = this.curve,
+      P = this.P,
+      x = newFE(curve, k2[0]), // first 32 octets contain the little-endian representation of x
+      y = newFE(curve, k2[1]), // and second 32 octets contain the little-endian representation of y.
+      Q = new newEC(curve, x, y) // This corresponds to the binary representation of (<y>256||<x>256)
+    const C = mulTwoEC(P, z1, Q, z2)
+    var R = mod(getX(C), q)
   } else {
     // Gost R 34.10-94
-    const p = this.p,
-          a = this.a;
-    var y = atobi(publicKey);
-    var R = mod(mod(mul(expMod(a, z1, p), expMod(y, z2, p)), p), q);
-  } // Stage 7
-
-
-  return compare(R, r) === 0;
+    const p = this.p, a = this.a
+    var y = atobi(publicKey)
+    var R = mod(mod(mul(expMod(a, z1, p), expMod(y, z2, p)), p), q)
+  }
+  // Stage 7
+  return (compare(R, r) === 0)
 } // </editor-fold>
 
 /**
@@ -2012,45 +1454,37 @@ function verify(publicKey, signature, data) // <editor-fold defaultstate="collap
  * @instance
  * @returns {Object} Object with two CryptoOperationData members: privateKey and publicKey
  */
-
-
 function generateKey() // <editor-fold defaultstate="collapsed">
 {
-  const curve = this.curve;
-
+  const curve = this.curve
   if (curve) {
-    let Q = curve.infinity;
 
+    let Q = curve.infinity
     while (isInfinity(Q)) {
-      // Generate random private key
-      var d = ZERO;
 
+      // Generate random private key
+      var d = ZERO
       if (this.ukm) {
-        d = atobi(this.ukm);
+        d = atobi(this.ukm)
       } else {
-        while (isZero(d)) {
-          d = mod(atobi(getSeed(this.bitLength)), this.q);
-        } // 0 < d < q
-
-      } // Calculate public key
-
+        while (isZero(d)) {d = mod(atobi(getSeed(this.bitLength)), this.q)} // 0 < d < q
+      }
 
-      Q = mulEC(this.P, d);
-      var x = getX(Q),
-          y = getY(Q); // console.log('d', bitoh(d));
+      // Calculate public key
+      Q = mulEC(this.P, d)
+      var x = getX(Q), y = getY(Q)
+      // console.log('d', bitoh(d));
       // console.log('x', bitoh(x));
       // console.log('y', bitoh(y));
-    } // Return result
-
+    }
 
+    // Return result
     return {
       privateKey: bitoa(d, this.bitLength),
-      publicKey: from2(x, y, this.bitLength) // This corresponds to the binary representation of (<y>256||<x>256)
-
-    };
-  }
+      publicKey: from2(x, y, this.bitLength), // This corresponds to the binary representation of (<y>256||<x>256)
+    }
 
-  throw new NotSupportedError('Key generation for GOST R 34.10-94 not supported');
+  } throw new NotSupportedError('Key generation for GOST R 34.10-94 not supported')
 } // </editor-fold>
 
 /**
@@ -2063,26 +1497,17 @@ function generateKey() // <editor-fold defaultstate="collapsed">
  * @instance
  * @returns {Object} Object with two CryptoOperationData members: privateKey and publicKey
  */
-
-
 function generateMaskKey() // <editor-fold defaultstate="collapsed">
 {
-  const curve = this.curve;
-
+  const curve = this.curve
   if (curve) {
     // Generate random private key
-    let d = ZERO;
+    let d = ZERO
+    while (isZero(d)) {d = mod(atobi(getSeed(this.bitLength)), this.q)} // 0 < d < q
 
-    while (isZero(d)) {
-      d = mod(atobi(getSeed(this.bitLength)), this.q);
-    } // 0 < d < q
     // Return result
-
-
-    return bitoa(d, this.bitLength);
-  }
-
-  throw new NotSupportedError('Key generation for GOST R 34.10-94 not supported');
+    return bitoa(d, this.bitLength)
+  } throw new NotSupportedError('Key generation for GOST R 34.10-94 not supported')
 } // </editor-fold>
 
 /**
@@ -2097,21 +1522,16 @@ function generateMaskKey() // <editor-fold defaultstate="collapsed">
  * @param {(CryptoOperationData|TypedArray)} data Wrapped key
  * @returns {Object} CryptoOperationData unwrapped privateKey
  */
-
-
 function unwrapKey(baseKey, data) // <editor-fold defaultstate="collapsed">
 {
-  const curve = this.curve;
-
+  const curve = this.curve
   if (curve) {
-    const q = this.q;
-    const x = mod(atobi(buffer(data)), q);
-    const y = mod(atobi(buffer(baseKey)), q);
-    const z = this.procreator === 'VN' ? mod(mul(x, y), q) : mod(mul(x, invMod(y, q)), q);
-    return bitoa(z);
-  }
-
-  throw new NotSupportedError('Key wrapping GOST R 34.10-94 not supported');
+    const q = this.q
+    const x = mod(atobi(buffer(data)), q)
+    const y = mod(atobi(buffer(baseKey)), q)
+    const z = this.procreator === 'VN' ? mod(mul(x, y), q) : mod(mul(x, invMod(y, q)), q)
+    return bitoa(z)
+  } throw new NotSupportedError('Key wrapping GOST R 34.10-94 not supported')
 } // </editor-fold>
 
 /**
@@ -2126,21 +1546,16 @@ function unwrapKey(baseKey, data) // <editor-fold defaultstate="collapsed">
  * @param {(CryptoOperationData|TypedArray)} data Key
  * @returns {Object} CryptoOperationData unwrapped privateKey
  */
-
-
 function wrapKey(baseKey, data) // <editor-fold defaultstate="collapsed">
 {
-  const curve = this.curve;
-
+  const curve = this.curve
   if (curve) {
-    const q = this.q;
-    const x = mod(atobi(buffer(data)), q);
-    const y = mod(atobi(buffer(baseKey)), q);
-    const z = this.procreator === 'VN' ? mod(mul(x, invMod(y, q)), q) : mod(mul(x, y), q);
-    return bitoa(z);
-  }
-
-  throw new NotSupportedError('Key wrapping GOST R 34.10-94 not supported');
+    const q = this.q
+    const x = mod(atobi(buffer(data)), q)
+    const y = mod(atobi(buffer(baseKey)), q)
+    const z = this.procreator === 'VN' ? mod(mul(x, invMod(y, q)), q) : mod(mul(x, y), q)
+    return bitoa(z)
+  } throw new NotSupportedError('Key wrapping GOST R 34.10-94 not supported')
 } // </editor-fold>
 
 /**
@@ -2153,14 +1568,12 @@ function wrapKey(baseKey, data) // <editor-fold defaultstate="collapsed">
  * @param {CryptoOperationData} baseKey Key for deriviation
  * @returns {CryptoOperationData}
  */
-
-
 function derive(baseKey) // <editor-fold defaultstate="collapsed">
 {
-  let k,
-      ukm = atobi(this.ukm);
-  const q = this.q;
-  const x = mod(atobi(buffer(baseKey)), q);
+
+  let k, ukm = atobi(this.ukm)
+  const q = this.q
+  const x = mod(atobi(buffer(baseKey)), q)
 
   if (this.curve) {
     // 1) Let K(x,y,UKM) = ((UKM*x)(mod q)) . (y.P) (512 bit), where
@@ -2172,22 +1585,20 @@ function derive(baseKey) // <editor-fold defaultstate="collapsed">
     // P - base point on the elliptic curve (two 256-bit coordinates)
     // UKM*x - x multiplied by UKM as integers
     // x.P - a multiple point
-    const K = mulEC(this.peer_Q, mod(mul(ukm, x), q));
+    const K = mulEC(this.peer_Q, mod(mul(ukm, x), q))
     k = from2(getX(K), getY(K), // This corresponds to the binary representation of (<y>256||<x>256)
-    this.bitLength);
+      this.bitLength)
   } else {
     // 1) Let K(x,y) = a^(x*y) (mod p), where
     // x - sender’s private key, a^x - sender’s public key
     // y - recipient’s private key, a^y - recipient’s public key
     // a, p - parameters
-    const p = this.p,
-          a = this.a;
-    k = bitoa(expMod(this.peer_y, x, p));
-  } // 2) Calculate a 256-bit hash of K(x,y,UKM):
+    const p = this.p, a = this.a
+    k = bitoa(expMod(this.peer_y, x, p))
+  }
+  // 2) Calculate a 256-bit hash of K(x,y,UKM):
   // KEK(x,y,UKM) = gostSign (K(x,y,UKM)
-
-
-  return hash.call(this, k);
+  return hash.call(this, k)
 } // </editor-fold>
 
 /**
@@ -2202,19 +1613,15 @@ function derive(baseKey) // <editor-fold defaultstate="collapsed">
  * @param {number} length output bit-length
  * @returns {CryptoOperationData} result
  */
-
-
 function deriveBits(baseKey, length) // <editor-fold defaultstate="collapsed">
 {
-  if (length < 8 || length > this.bitLength || length % 8 > 0) {
-    throw new DataError(`Length must be no more than ${this.bitLength} bits and multiple of 8`);
-  }
-
+  if (length < 8 || length > this.bitLength || length % 8 > 0) {throw new DataError(`Length must be no more than ${ this.bitLength } bits and multiple of 8`)}
   const n = length / 8,
-        b = derive.call(this, baseKey),
-        r = new Uint8Array(n);
-  r.set(new Uint8Array(b, 0, n));
-  return r.buffer;
+    b = derive.call(this, baseKey),
+    r = new Uint8Array(n)
+
+  r.set(new Uint8Array(b, 0, n))
+  return r.buffer
 } // </editor-fold>
 
 /**
@@ -2232,16 +1639,16 @@ function deriveBits(baseKey, length) // <editor-fold defaultstate="collapsed">
  * @param {(CryptoOperationData|TypedArray)} baseKey Key for deriviation
  * @returns {CryptoOperationData} result
  */
-
-
 function deriveKey(baseKey) // <editor-fold defaultstate="collapsed">
 {
   const b = derive.call(this, baseKey),
-        r = new Uint8Array(32);
-  r.set(new Uint8Array(b, 0, 32));
-  return r.buffer;
+    r = new Uint8Array(32)
+
+  r.set(new Uint8Array(b, 0, 32))
+  return r.buffer
 } // </editor-fold>
 
+
 /**
  * Gost R 34.10 universal object<br><br>
  *
@@ -2314,142 +1721,107 @@ function deriveKey(baseKey) // <editor-fold defaultstate="collapsed">
  * @class GostSign
  * @param {AlgorithmIndentifier} algorithm
  */
-
-
 function GostSign(algorithm) // <editor-fold defaultstate="collapsed">
 {
-  algorithm = algorithm || {};
-  this.name = `${algorithm.name || 'GOST R 34.10'}-${(algorithm.version || 2012) % 100}-${algorithm.length || 256}${(algorithm.mode || 'SIGN') !== 'SIGN' ? `-${algorithm.mode}` : ''}${typeof algorithm.namedParam === 'string' ? `/${algorithm.namedParam}` : ''}${typeof algorithm.namedCurve === 'string' ? `/${algorithm.namedCurve}` : ''}${typeof algorithm.sBox === 'string' ? `/${algorithm.sBox}` : ''}`;
-  const version = algorithm.version || 2012; // Functions
+  algorithm = algorithm || {}
+  this.name = `${algorithm.name || 'GOST R 34.10' }-${
+    (algorithm.version || 2012) % 100 }-${ algorithm.length || 256
+  }${((algorithm.mode || 'SIGN') !== 'SIGN') ? `-${ algorithm.mode}` : ''
+  }${typeof algorithm.namedParam === 'string' ? `/${ algorithm.namedParam}` : ''
+  }${typeof algorithm.namedCurve === 'string' ? `/${ algorithm.namedCurve}` : ''
+  }${typeof algorithm.sBox === 'string' ? `/${ algorithm.sBox}` : ''}`
+
+  const version = algorithm.version || 2012
 
+  // Functions
   switch (algorithm.mode || 'SIGN') {
     case 'SIGN':
-      this.sign = sign;
-      this.verify = verify;
-      this.generateKey = generateKey;
-      break;
-
+      this.sign = sign
+      this.verify = verify
+      this.generateKey = generateKey
+      break
     case 'DH':
-      this.deriveBits = deriveBits;
-      this.deriveKey = deriveKey;
-      this.generateKey = generateKey;
-      break;
-
+      this.deriveBits = deriveBits
+      this.deriveKey = deriveKey
+      this.generateKey = generateKey
+      break
     case 'MASK':
-      this.wrapKey = wrapKey;
-      this.unwrapKey = unwrapKey;
-      this.generateKey = generateMaskKey;
-      break;
-  } // Define parameters
-
+      this.wrapKey = wrapKey
+      this.unwrapKey = unwrapKey
+      this.generateKey = generateMaskKey
+      break
+  }
 
+  // Define parameters
   if (version === 1994) {
     // Named or parameters algorithm
-    var param = algorithm.param;
-
-    if (!param) {
-      param = GostParams[this.namedParam = (algorithm.namedParam || 'S-A').toUpperCase()];
-    }
-
-    this.modulusLength = algorithm.modulusLength || param.modulusLength || 1024;
-    this.p = htobi(param.p);
-    this.q = htobi(param.q);
-    this.a = htobi(param.a); // Public key for derive
-
-    if (algorithm['public']) {
-      this.peer_y = atobi(algorithm['public']);
-    }
+    var param = algorithm.param
+    if (!param) {param = GostParams[this.namedParam = (algorithm.namedParam || 'S-A').toUpperCase()]}
+    this.modulusLength = algorithm.modulusLength || param.modulusLength || 1024
+    this.p = htobi(param.p)
+    this.q = htobi(param.q)
+    this.a = htobi(param.a)
+    // Public key for derive
+    if (algorithm['public']) {this.peer_y = atobi(algorithm['public'])}
   } else {
     // Named or parameters algorithm
-    var param = algorithm.curve;
-
-    if (!param) {
-      param = ECGostParams[this.namedCurve = (algorithm.namedCurve || 'S-256-A').toUpperCase()];
-    }
-
-    const curve = this.curve = newCurve(htobi(param.p), htobi(param.a), htobi(param.b));
-    this.P = newEC(curve, newFE(curve, htobi(param.x)), newFE(curve, htobi(param.y)));
-    this.q = htobi(param.q); // Public key for derive
-
+    var param = algorithm.curve
+    if (!param) {param = ECGostParams[this.namedCurve = (algorithm.namedCurve || 'S-256-A').toUpperCase()]}
+    const curve = this.curve = newCurve(htobi(param.p), htobi(param.a), htobi(param.b))
+    this.P = newEC(curve,
+      newFE(curve, htobi(param.x)),
+      newFE(curve, htobi(param.y)))
+    this.q = htobi(param.q)
+    // Public key for derive
     if (algorithm['public']) {
-      const k2 = to2(algorithm['public']);
+      const k2 = to2(algorithm['public'])
       this.peer_Q = new newEC(this.curve, // This corresponds to the binary representation of (<y>256||<x>256)
-      newFE(this.curve, k2[0]), // first 32 octets contain the little-endian representation of x
-      newFE(this.curve, k2[1])); // and second 32 octets contain the little-endian representation of y.
+        newFE(this.curve, k2[0]), // first 32 octets contain the little-endian representation of x
+        newFE(this.curve, k2[1])) // and second 32 octets contain the little-endian representation of y.
     }
-  } // Check bit length
-
-
-  let hashLen, keyLen;
+  }
 
+  // Check bit length
+  let hashLen, keyLen
   if (this.curve) {
-    keyLen = algorithm.length || bitLength(this.q);
-
-    if (keyLen > 508 && keyLen <= 512) {
-      keyLen = 512;
-    } else if (keyLen > 254 && keyLen <= 256) {
-      keyLen = 256;
-    } else {
-      throw new NotSupportedError('Support keys only 256 or 512 bits length');
-    }
-
-    hashLen = keyLen;
+    keyLen = algorithm.length || bitLength(this.q)
+    if (keyLen > 508 && keyLen <= 512) {keyLen = 512} else if (keyLen > 254 && keyLen <= 256) {keyLen = 256} else {throw new NotSupportedError('Support keys only 256 or 512 bits length')}
+    hashLen = keyLen
   } else {
-    keyLen = algorithm.modulusLength || bitLength(this.p);
-
-    if (keyLen > 1016 && keyLen <= 1024) {
-      keyLen = 1024;
-    } else if (keyLen > 508 && keyLen <= 512) {
-      keyLen = 512;
-    } else {
-      throw new NotSupportedError('Support keys only 512 or 1024 bits length');
-    }
-
-    hashLen = 256;
+    keyLen = algorithm.modulusLength || bitLength(this.p)
+    if (keyLen > 1016 && keyLen <= 1024) {keyLen = 1024} else if (keyLen > 508 && keyLen <= 512) {keyLen = 512} else {throw new NotSupportedError('Support keys only 512 or 1024 bits length')}
+    hashLen = 256
   }
+  this.bitLength = hashLen
+  this.keyLength = keyLen
 
-  this.bitLength = hashLen;
-  this.keyLength = keyLen; // Algorithm proceator for result conversion
-
-  this.procreator = algorithm.procreator; // Hash function definition
-
-  let hash = algorithm.hash;
+  // Algorithm proceator for result conversion
+  this.procreator = algorithm.procreator
 
+  // Hash function definition
+  let hash = algorithm.hash
   if (hash) {
-    if (typeof hash === 'string' || hash instanceof String) {
-      hash = {
-        name: hash
-      };
-    }
-
+    if (typeof hash === 'string' || hash instanceof String) {hash = { name: hash }}
     if (algorithm.version === 1994 || algorithm.version === 2001) {
-      hash.version = 1994;
-      hash.length = 256;
-      hash.sBox = algorithm.sBox || hash.sBox;
+      hash.version = 1994
+      hash.length = 256
+      hash.sBox = algorithm.sBox || hash.sBox
     } else {
-      hash.version = 2012;
-      hash.length = hashLen;
-    }
-
-    hash.procreator = hash.procreator || algorithm.procreator;
-
-    if (!GostDigest) {
-      GostDigest = global.GostDigest;
-    }
-
-    if (!GostDigest) {
-      throw new NotSupportedError('Object GostDigest not found');
+      hash.version = 2012
+      hash.length = hashLen
     }
+    hash.procreator = hash.procreator || algorithm.procreator
 
-    this.hash = new GostDigest(hash);
-  } // Pregenerated seed for key exchange algorithms
+    if (!GostDigest) {GostDigest = global.GostDigest}
+    if (!GostDigest) {throw new NotSupportedError('Object GostDigest not found')}
 
+    this.hash = new GostDigest(hash)
+  }
 
+  // Pregenerated seed for key exchange algorithms
   if (algorithm.ukm) // Now don't check size
-    {
-      this.ukm = algorithm.ukm;
-    }
-} // </editor-fold>
+  {this.ukm = algorithm.ukm}
 
+} // </editor-fold>
 
-module.exports = GostSign;
\ No newline at end of file
+module.exports = GostSign
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/index.js b/node_modules/gost-crypto/lib/index.js
index 1e86c46..ba186b1 100644
--- a/node_modules/gost-crypto/lib/index.js
+++ b/node_modules/gost-crypto/lib/index.js
@@ -1,23 +1,13 @@
-const gostCrypto = require('./gostCrypto.js');
-
-require('./gostSecurity');
-
-require('./gostCoding');
-
-require('./gostASN1');
-
-require('./gostCMS');
-
-require('./gostCert');
-
-require('./gostCipher');
-
-require('./gostDigest');
-
-require('./gostKeys');
-
-require('./gostRandom');
-
-require('./gostSign');
-
-module.exports = gostCrypto;
\ No newline at end of file
+const gostCrypto = require('./gostCrypto.js')
+require('./gostSecurity')
+require('./gostCoding')
+require('./gostASN1')
+require('./gostCMS')
+require('./gostCert')
+require('./gostCipher')
+require('./gostDigest')
+require('./gostKeys')
+require('./gostRandom')
+require('./gostSign')
+
+module.exports = gostCrypto
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/skrebok.js b/node_modules/gost-crypto/lib/skrebok.js
index 782b04a..8e6c0dd 100644
--- a/node_modules/gost-crypto/lib/skrebok.js
+++ b/node_modules/gost-crypto/lib/skrebok.js
@@ -2,6 +2,6 @@ import gost from './index';
 import ab2str from 'arraybuffer-to-string';
 import str2ab from 'string-to-arraybuffer';
 
-const skrebok = str => gost.subtle.digest('GOST R 34.11', str2ab(str));
+let skrebok = str => gost.subtle.digest('GOST R 34.11', str2ab(str));
 
 export { ab2str, str2ab, skrebok, skrebok as default };
\ No newline at end of file
diff --git a/node_modules/gost-crypto/lib/skrebokk.js b/node_modules/gost-crypto/lib/skrebokk.js
index aab47d5..f152001 100644
--- a/node_modules/gost-crypto/lib/skrebokk.js
+++ b/node_modules/gost-crypto/lib/skrebokk.js
@@ -1,7 +1,15 @@
-import gost from './index';
-import ab2str from 'arraybuffer-to-string';
-import str2ab from 'string-to-arraybuffer';
+import gost from './index'
+import ab2str from 'arraybuffer-to-string'
+import str2ab from 'string-to-arraybuffer'
 
-const skrebokk = str => gost.subtle.digest('GOST R 34.11', str2ab(str)).then(r => ab2str(r, 'hex'));
+const skrebokk = str => gost
+  .subtle
+  .digest('GOST R 34.11', str2ab(str))
+  .then(r =>ab2str(r, 'hex'))
 
-export { ab2str, str2ab, skrebokk, skrebokk as default };
\ No newline at end of file
+export {
+  ab2str,
+  str2ab,
+  skrebokk,
+  skrebokk as default,
+}
\ No newline at end of file
